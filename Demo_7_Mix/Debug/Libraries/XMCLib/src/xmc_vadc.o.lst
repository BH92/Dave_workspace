   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_vadc.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_VADC_GROUP_ExternalMuxControlInit:
  23              	.LFB70:
  24              	 .file 1 "C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2016-03-09
   4:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** ***************************************************************************************************
   7:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
  95:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  96:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
  97:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
  98:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
  99:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 100:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
 101:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 102:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 103:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 104:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 105:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 106:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 107:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 108:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 109:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 110:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 111:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 112:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
 113:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 114:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 115:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 116:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 118:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 119:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 120:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 121:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 122:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 123:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 124:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 125:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 126:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 127:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 128:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 129:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 130:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 131:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 132:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 133:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 134:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 135:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 136:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 137:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 138:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 139:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 141:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 142:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 143:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 144:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 145:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 146:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 147:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 148:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 149:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 150:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 151:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 152:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 153:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 154:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 155:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 156:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 157:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 158:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 159:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 160:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 161:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 162:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 163:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 164:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 165:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 166:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 167:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 168:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
 169:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 170:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 171:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 172:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 173:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 174:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 175:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 176:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 177:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 178:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 179:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 180:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 181:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 182:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 183:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 184:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 185:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 186:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 187:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 188:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 189:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 190:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 191:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 192:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 193:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 194:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 195:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 196:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 197:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 198:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 199:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 200:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 201:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 202:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 203:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 204:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 205:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 206:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 207:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 208:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 209:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 210:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 211:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 212:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 213:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 214:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 215:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 216:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 217:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 218:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 219:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 220:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 221:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 222:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 223:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 224:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 225:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 226:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 227:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 228:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 229:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 230:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 231:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 232:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 233:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 234:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 235:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 236:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 237:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 238:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 239:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 240:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 241:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 242:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 243:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 244:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 245:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 246:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 247:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 248:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 249:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 250:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 251:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 252:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 253:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 254:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 255:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 256:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 257:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 258:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 259:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 260:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 261:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 262:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 263:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 264:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 265:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 266:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 267:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 268:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 269:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 270:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 271:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 272:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 273:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 274:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 275:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 276:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 277:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 278:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 279:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 280:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 281:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 282:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 283:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 284:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 285:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 286:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 287:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 288:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 289:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 290:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 291:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 292:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 293:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 294:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 295:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 296:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 297:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 298:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 299:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 300:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 301:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 302:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 303:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 304:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 305:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 306:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 307:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 308:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 309:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 310:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 311:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 312:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 313:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 314:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 315:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 316:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 317:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 318:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 319:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 320:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 321:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 322:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 323:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 324:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 325:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 326:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 327:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 328:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 329:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 330:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 331:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 332:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 333:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 334:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 335:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 336:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 337:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 338:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 339:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 340:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 341:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 342:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 343:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 344:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 345:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 346:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 347:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 348:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 349:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 350:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 351:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 352:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   
 353:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 354:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 355:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 356:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 357:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 358:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 359:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 360:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 361:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 362:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 363:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 364:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 365:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 366:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 367:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 368:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 369:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 370:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 371:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 372:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 373:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 374:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 375:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 376:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 377:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 378:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 379:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   
 380:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 381:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 382:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 383:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 384:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 385:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 386:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 387:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 388:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 389:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 390:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 391:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 392:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 393:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 394:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 395:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 396:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 397:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 398:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 399:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 400:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 401:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 402:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 403:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 404:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 405:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 406:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 407:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 408:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 409:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 410:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 411:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 412:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 413:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 414:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 415:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 416:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 417:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 418:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 419:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 420:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 421:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 422:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 423:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 424:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 425:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 426:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 427:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
 428:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 429:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 430:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 431:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 432:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 433:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 434:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 435:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 436:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 437:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 438:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 439:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 440:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 441:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 442:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 443:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 444:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 445:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 446:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 447:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 448:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 449:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 450:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 451:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 452:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 453:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 454:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 455:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 456:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 457:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 458:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 459:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 460:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 461:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 462:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 463:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 464:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 465:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 466:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 467:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 468:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 469:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 470:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 471:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 472:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 473:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 474:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 475:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 476:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 477:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 478:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 479:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 480:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 481:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 482:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 483:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 484:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 485:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 486:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 487:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 488:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 489:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 490:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 491:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 492:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 493:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 494:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 495:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 496:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 497:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 498:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 499:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 500:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 501:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 502:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 503:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 504:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 505:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 506:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 507:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
 508:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 509:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 510:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 511:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 512:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 513:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 514:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 515:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 516:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 517:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
 518:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 519:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 520:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 521:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 522:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 523:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 524:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 525:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 526:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 527:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
 528:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 529:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 530:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 531:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 532:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 533:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 534:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 535:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 536:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 537:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 538:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 539:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 540:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 541:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 542:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 543:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 544:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 545:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 546:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 547:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 548:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 549:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 550:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 551:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 552:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 553:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 554:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 555:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 556:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 557:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 558:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 559:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 560:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 561:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 562:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 563:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 564:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 565:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 566:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 567:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 568:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 569:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 570:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 571:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 572:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 573:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 574:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 575:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 576:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 577:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 578:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 579:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 580:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 581:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 582:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 583:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 584:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 585:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 586:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 587:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 588:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 589:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 590:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 591:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 592:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 593:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 594:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 595:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 596:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 597:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 598:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 599:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 600:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 601:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 602:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 603:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 604:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 605:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 606:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 607:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 608:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 609:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 610:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 611:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 612:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 613:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 614:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 615:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 616:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 617:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 618:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 619:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 620:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 621:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 622:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 623:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 624:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 625:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 626:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 627:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 628:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 629:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 630:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 631:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 632:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 633:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 634:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 635:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 636:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 637:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 638:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 640:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 641:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 642:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 643:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 644:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 645:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 646:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 647:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 648:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 649:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 650:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 651:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 652:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 653:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 654:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 655:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 656:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 657:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 658:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 659:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 660:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 661:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 662:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 663:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 664:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 665:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** */
 666:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 667:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 668:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 669:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 670:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 671:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 672:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 673:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 674:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 675:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 676:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 677:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 678:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 679:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 680:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 681:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 682:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 683:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 684:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 685:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 686:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 687:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 688:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 689:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 690:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 691:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 692:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 693:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 694:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 695:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 696:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 697:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 698:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 699:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 700:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 701:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 702:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 703:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 704:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 705:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 706:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 707:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 708:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 709:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 710:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 711:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 712:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 713:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 714:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 715:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 716:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 717:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 718:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 719:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 720:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 721:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 722:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 723:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 724:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 725:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 726:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 727:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 728:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 729:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 730:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 731:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 732:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 733:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 734:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 735:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 736:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 737:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 738:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 739:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 740:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 741:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 742:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 743:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 744:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 745:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 746:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 747:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 748:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 749:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 750:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 751:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 752:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 753:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 754:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 755:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 756:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 757:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 758:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 759:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 760:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 761:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 762:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 763:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 764:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 765:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 766:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 767:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 768:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 769:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 770:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 771:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 772:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 773:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 774:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 775:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 776:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 777:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 778:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 779:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 780:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 781:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 782:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 783:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 784:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 785:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 786:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 787:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 788:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 789:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 790:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 791:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 792:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 793:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 794:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 795:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 796:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 797:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 798:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 799:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 800:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 801:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 802:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 803:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 804:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 805:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 806:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 807:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 808:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 809:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 810:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 811:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 812:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 813:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 814:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 815:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 816:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 817:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 818:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 819:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 820:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 821:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 822:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 823:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 824:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 825:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 826:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 827:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 828:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 829:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 830:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 831:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 832:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 833:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 834:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 835:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 836:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 837:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 838:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 839:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 840:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 841:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 842:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 843:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 844:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 845:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 846:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 847:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 848:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 849:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 850:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 851:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 852:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 853:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 854:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 855:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 856:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 857:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 858:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 859:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 860:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 861:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 862:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 863:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 864:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 865:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 866:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 867:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 868:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 869:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 870:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 871:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 872:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 873:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 874:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 875:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 876:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 877:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 878:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 879:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 880:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 881:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 882:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 883:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 884:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 885:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 886:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 887:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 888:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 889:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 890:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 891:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 892:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 893:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 894:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 895:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 896:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 897:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 898:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 899:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 900:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 901:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 902:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 903:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 904:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 905:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 906:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 907:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 908:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 909:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 910:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 911:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 912:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 913:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 914:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 915:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 916:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 917:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 918:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 919:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 920:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 921:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 922:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 923:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 924:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 925:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 926:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 927:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 928:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 929:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 930:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 931:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 932:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 933:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 934:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 935:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 936:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 937:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 938:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 939:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
 940:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 941:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 942:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 943:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 944:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 945:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
 946:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 947:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
 948:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 949:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
 950:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 951:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 952:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 953:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 954:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 955:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 956:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
 957:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 958:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
 959:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 960:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 961:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 962:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 963:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 964:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
 965:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 966:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
 967:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
 968:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 969:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
 970:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 971:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
 972:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 973:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
 974:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
 975:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 976:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
 977:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 978:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
 979:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 980:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 981:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
 982:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 983:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
 984:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 985:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
 986:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 987:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
 988:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 989:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
 990:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 991:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 992:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 993:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 994:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 995:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
 996:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
 997:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
 998:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
 999:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1000:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1001:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1002:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1003:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1004:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1005:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1006:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1007:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1008:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1009:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1010:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1011:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1012:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1013:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1014:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1015:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1016:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1017:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1018:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1019:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1020:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1021:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1022:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1023:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1024:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1025:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1026:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1027:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1028:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1029:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1030:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1031:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1032:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1033:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1034:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1035:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1036:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1037:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1038:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1039:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1040:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1041:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1042:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1043:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1044:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1045:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1046:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1047:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1048:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1049:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1050:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1051:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1052:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1053:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1054:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1055:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1056:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1057:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1058:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1059:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1060:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1061:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1062:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1063:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1064:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1065:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1066:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1067:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1068:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1069:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1070:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1071:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1072:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1073:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1074:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1075:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1076:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1077:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1078:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1079:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1080:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1081:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1082:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1083:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1084:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1085:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1086:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1087:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1088:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1089:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1090:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1091:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1092:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1093:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1094:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1095:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1096:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1097:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1098:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1099:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1100:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1101:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1102:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1103:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1104:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1105:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1106:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1107:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1108:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1109:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1110:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1111:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1112:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1113:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1114:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1115:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1116:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1117:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1118:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1119:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1120:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1121:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1122:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1123:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1124:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1125:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1126:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1127:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1128:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1129:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1130:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1131:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1132:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1133:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1134:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1135:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1136:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1137:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1138:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1139:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1140:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1141:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1142:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1143:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1144:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1145:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1146:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1147:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1148:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1149:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1150:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1151:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1152:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1153:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1154:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1155:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1156:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1157:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1158:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1159:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1160:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1161:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1162:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1163:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1164:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1165:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1166:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1167:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1168:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1169:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1170:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1171:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1172:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1173:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1174:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1175:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1176:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1177:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1178:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1179:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1180:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1181:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1182:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1183:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1184:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1185:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1186:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1187:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1188:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1189:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1190:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1191:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1192:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1193:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1194:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1195:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1196:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1197:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1198:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1199:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1200:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1201:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1202:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1203:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1204:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1205:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1206:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1207:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1208:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1209:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1210:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1211:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1212:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1213:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1214:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1215:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1216:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1217:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1218:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1219:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1220:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1221:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1222:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1223:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1224:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1225:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1226:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1227:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1228:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1229:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1230:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1231:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1232:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1233:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1234:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1235:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  */
1236:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1237:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1238:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1239:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1240:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1241:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1242:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1243:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1244:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1245:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1246:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1247:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed result structure
1248:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1249:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1250:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1251:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1252:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1253:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1254:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1255:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1256:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1257:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1258:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1259:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1260:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1261:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1262:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1263:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1264:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1265:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1266:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1267:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
1268:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1269:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1270:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1271:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1272:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1273:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1274:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1275:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1276:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1277:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1278:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1279:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1280:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1281:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1282:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1283:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1284:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1285:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1286:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1287:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1288:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1289:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1290:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1291:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1292:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1293:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1294:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1295:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1296:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1297:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1298:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1299:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1300:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1301:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1302:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1303:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1304:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1305:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1306:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1307:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1308:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1309:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1310:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1311:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1312:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1313:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1314:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1315:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1316:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1317:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1318:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1319:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1320:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1321:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1322:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1323:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1324:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1325:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1326:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1327:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1328:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1329:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1330:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1331:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1332:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1333:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1334:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1335:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1336:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1337:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1338:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1339:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1340:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1341:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1342:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1343:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1344:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1345:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1346:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1347:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1348:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1349:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1350:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1351:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1352:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1353:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1354:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1355:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1356:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1357:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1358:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1359:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1360:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1361:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1362:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1363:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1364:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1365:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1366:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1367:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1368:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1369:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1370:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1371:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1372:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1373:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1374:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1375:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1376:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1377:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1378:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1379:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1380:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1381:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1382:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1383:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1384:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1385:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1386:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1387:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1388:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1389:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1390:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1391:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1392:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1393:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1394:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1395:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1396:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1397:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1398:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1399:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1400:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1401:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1402:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1403:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1404:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1405:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1406:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1407:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1408:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1409:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1410:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1411:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1413:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1415:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1416:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1417:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1418:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1419:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1420:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1421:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1422:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1423:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1424:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1425:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1426:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1427:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1428:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1429:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1430:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1431:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1432:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1433:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1434:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1435:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1436:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1437:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1438:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1439:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1440:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1441:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1442:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1443:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1444:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1445:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1446:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1447:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1448:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1449:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1450:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1451:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1452:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1453:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1454:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1455:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1456:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1457:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1458:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1459:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1460:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1461:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1463:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1464:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1465:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1466:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1467:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1468:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1469:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1470:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1471:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1472:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1473:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1474:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1475:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1476:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1477:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1478:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1479:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1480:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1481:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1482:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1483:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1484:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1485:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1486:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1487:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1488:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1489:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1490:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1491:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1492:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1493:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1494:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1495:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1496:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1497:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1498:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1499:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1500:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1501:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1502:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1503:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  
1504:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1505:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1506:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1507:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1508:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1509:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1510:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1511:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1512:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1513:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1514:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1515:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1516:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1517:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1518:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1519:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1520:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1521:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1522:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1523:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1524:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1525:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1526:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1527:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1528:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1529:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1530:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1531:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1532:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1533:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1534:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1535:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1536:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1537:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1538:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1539:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1540:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1541:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1542:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1543:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1544:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1545:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1546:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1547:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1548:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1549:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1550:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1551:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1552:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1553:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1554:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1555:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1556:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1557:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1558:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1559:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1560:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1561:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1562:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1563:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1564:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1565:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1566:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1567:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1568:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1569:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1570:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1571:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1572:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1573:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1574:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1575:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1576:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1577:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1578:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1579:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1580:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1581:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1582:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1583:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1584:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1585:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1586:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1587:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1588:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1589:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1590:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1591:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1592:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1593:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1594:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1595:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1596:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1597:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1598:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1599:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1600:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1601:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1602:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1603:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1604:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1605:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1606:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1607:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1608:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1609:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1610:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1611:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1612:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1613:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1614:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1616:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1617:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1618:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1619:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1620:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1621:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1622:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1623:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1624:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1625:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1626:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1627:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1628:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1629:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1630:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1631:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1632:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1633:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1634:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1635:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1636:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1637:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1638:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1639:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1640:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1641:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1642:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1643:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1644:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1645:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1646:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1647:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1648:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1649:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1650:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1651:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1652:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1653:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1654:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1655:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1656:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1657:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1658:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1659:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1660:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1661:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1662:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1663:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1664:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1665:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1666:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1667:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1668:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1669:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1670:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1671:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1672:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1673:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1674:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1675:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1676:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1677:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1678:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1679:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1680:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1681:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1683:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1684:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1685:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1686:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1687:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1688:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1690:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1691:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1692:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1693:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1694:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1695:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1696:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1697:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1698:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1699:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1700:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1701:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1702:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1703:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1704:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1705:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1706:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1707:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1708:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1709:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1710:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1711:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1712:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1713:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1714:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1715:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1716:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1717:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1718:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1719:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1720:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1721:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1722:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1723:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1724:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1725:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1726:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1727:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1728:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1729:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1730:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1731:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1732:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1733:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1734:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1735:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1736:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1737:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1738:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1739:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1740:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1741:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1742:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1743:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1744:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1745:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1746:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1747:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1748:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1749:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1750:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1751:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1752:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1753:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1754:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1755:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1756:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1757:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1758:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1759:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1760:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1761:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1762:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1763:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1764:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1765:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1766:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1767:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1768:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1769:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1770:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1771:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1772:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1773:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1774:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1775:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1776:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1777:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1778:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1779:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1780:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1781:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1782:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1783:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1784:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1785:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1786:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1787:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1788:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1789:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1790:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1791:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1792:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1793:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1794:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1795:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1796:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1797:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1798:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1799:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1800:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1801:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1802:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1803:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1804:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1805:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1806:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1807:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1808:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1809:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1810:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1811:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1812:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1813:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1814:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1815:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1816:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1817:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1818:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1819:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1820:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1821:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1822:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1823:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1824:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1825:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1826:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1827:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1828:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1829:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1830:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1831:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1832:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1833:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1834:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1835:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1836:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1837:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1838:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1839:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1840:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1841:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1842:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1843:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1844:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1845:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1846:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1847:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1848:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1849:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1850:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1851:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1852:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1853:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1854:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1855:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1856:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1857:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1858:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1859:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1860:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1861:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1862:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1863:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1864:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1865:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1866:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1867:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1868:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1869:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1870:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1871:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1872:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1873:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1874:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1875:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1876:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1877:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1878:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1879:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1880:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1881:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1882:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1883:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1884:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1885:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1886:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1887:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1888:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1889:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1890:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1891:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1892:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1893:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1894:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1895:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1896:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1897:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1898:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1899:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1900:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1901:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1902:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1903:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1904:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1905:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1906:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1907:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1908:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1909:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1910:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1911:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1912:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1913:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1914:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1915:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1916:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1917:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1918:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1919:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1920:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1921:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1922:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1923:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1924:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1925:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1926:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1927:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1928:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1929:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1930:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1931:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1932:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1933:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1934:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1935:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1936:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1937:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1938:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1939:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1940:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
1941:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1942:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1943:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1944:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1945:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1946:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1947:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1948:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1949:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1950:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1951:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1952:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
1953:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1954:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1955:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1956:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1957:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
1958:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
1959:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
1960:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1961:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
1962:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
1963:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1964:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
1965:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
1966:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
1967:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1968:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1969:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1970:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
1971:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
1972:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
1973:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
1974:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1975:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1976:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1977:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
1978:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
1979:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1980:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1981:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1982:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1983:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1984:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
1985:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
1986:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
1987:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1988:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
1989:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1990:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1991:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
1992:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
1993:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1994:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1995:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1996:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
1997:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
1998:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
1999:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2000:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2001:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2002:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2003:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2004:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2005:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2006:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2007:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2008:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2009:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2010:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2011:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2012:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2013:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2014:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2015:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2016:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2017:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2018:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2019:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2021:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2022:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2023:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2024:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2025:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2026:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2027:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2028:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2029:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2030:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2031:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2032:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2033:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2034:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2035:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2036:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2037:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2038:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2039:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2040:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2041:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2042:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2043:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2044:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2045:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2046:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2047:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2048:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2049:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2050:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2051:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2052:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2053:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2054:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2055:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2056:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2057:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2058:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2059:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2060:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2061:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2062:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2063:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2064:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2065:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2066:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2067:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2068:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2069:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2070:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2071:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2072:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2073:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2074:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2075:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2076:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2077:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2078:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2079:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2080:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2081:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2082:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2083:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2084:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2085:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2086:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2087:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2088:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2089:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2090:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2091:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2092:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2093:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2094:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2095:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2096:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2097:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2098:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2099:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2100:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2101:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2102:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2103:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2104:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2105:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2106:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2107:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2108:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2109:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2110:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2111:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2112:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2113:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2114:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2115:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2116:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2117:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2118:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2119:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2120:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2121:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2122:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2123:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2124:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2125:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2126:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2127:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2128:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2129:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2130:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2131:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2132:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2133:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2134:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2135:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2136:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2137:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2138:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2139:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2140:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2141:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2142:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2143:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2144:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2145:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2146:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2147:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2148:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2149:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2150:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2151:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2152:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2153:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2154:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2155:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2156:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2157:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2158:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2159:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2160:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2161:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2162:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2163:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2164:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2165:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2166:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2167:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2168:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2169:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2170:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2171:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2172:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2173:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2174:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2175:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2176:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2177:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2178:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2179:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2180:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2181:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2182:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2183:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2184:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2185:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2186:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2187:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2188:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2189:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2190:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2191:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2192:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2193:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2194:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2195:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2196:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2197:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2198:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2199:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2200:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2201:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2202:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2203:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2204:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2205:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2206:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2207:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2208:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2209:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2210:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2211:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2212:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2213:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2214:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2215:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2216:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2217:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2218:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2219:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2220:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2221:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2222:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2223:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2224:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2225:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2226:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2227:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2228:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2229:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2230:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2231:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2232:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2233:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2234:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2235:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2236:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2237:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2238:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2239:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2240:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2241:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2242:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2243:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2244:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2245:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2246:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2247:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2248:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2249:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2250:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2251:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2252:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2253:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2254:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2255:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2256:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2257:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2258:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2259:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2260:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2261:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2262:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2263:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2264:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2265:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2266:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2267:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2268:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2269:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2270:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2271:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2272:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2273:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2274:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2275:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2276:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2277:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2278:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2279:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2280:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2281:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2282:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2283:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2284:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2285:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2286:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2287:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2288:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2289:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2290:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2291:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2292:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2293:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2294:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2295:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2296:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2297:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2298:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2299:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2300:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2301:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2302:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2303:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2304:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2305:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2306:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2307:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2308:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2309:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2310:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2311:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2312:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2313:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2314:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2315:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2316:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2317:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2318:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2319:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2320:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2321:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2322:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2323:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2324:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2325:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2326:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2327:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2328:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2329:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2330:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2331:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2332:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2333:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2334:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2335:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2336:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2337:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2338:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2339:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2340:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2341:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2342:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2343:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2344:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2345:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2346:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2347:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2348:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2349:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2350:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2351:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2352:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2353:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2354:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2355:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2356:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2357:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2358:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2359:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2360:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2361:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2362:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2363:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2364:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2365:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2366:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2367:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2368:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2369:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2370:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2371:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2372:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2373:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2374:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2375:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2376:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2377:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2378:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2379:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2380:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2381:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2382:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2383:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2384:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2385:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2386:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2387:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2388:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2389:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2390:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2391:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2392:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2393:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2394:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2395:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2397:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2398:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2399:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2400:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2401:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2402:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2403:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2404:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2405:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2406:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2407:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2408:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2409:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2410:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2411:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2412:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2413:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2414:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2415:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2416:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2417:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2418:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2419:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2420:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2421:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2422:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2423:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2424:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2425:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2426:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
  25              	 .loc 1 2426 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 84B0     	 sub sp,sp,#16
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 24
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 3960     	 str r1,[r7]
2427:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2428:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2429:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2430:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2431:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  40              	 .loc 1 2431 0
  41 000a 3B1C     	 mov r3,r7
  42 000c 1B78     	 ldrb r3,[r3]
  43 000e 5B07     	 lsl r3,r3,#29
  44 0010 5B0F     	 lsr r3,r3,#29
  45 0012 DBB2     	 uxtb r3,r3
  46 0014 1A1C     	 mov r2,r3
2432:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  47              	 .loc 1 2432 0
  48 0016 BB1C     	 add r3,r7,#2
  49 0018 1B88     	 ldrh r3,[r3]
  50 001a 9B05     	 lsl r3,r3,#22
  51 001c 9B0D     	 lsr r3,r3,#22
  52 001e 9BB2     	 uxth r3,r3
  53 0020 1B04     	 lsl r3,r3,#16
2431:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2431 0
  55 0022 1343     	 orr r3,r2
  56 0024 FB60     	 str r3,[r7,#12]
2433:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2434:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2434 0
  58 0026 7A68     	 ldr r2,[r7,#4]
  59 0028 F823     	 mov r3,#248
  60 002a 5B00     	 lsl r3,r3,#1
  61 002c F968     	 ldr r1,[r7,#12]
  62 002e D150     	 str r1,[r2,r3]
2435:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  63              	 .loc 1 2435 0
  64 0030 FB1C     	 add r3,r7,#3
  65 0032 1B78     	 ldrb r3,[r3]
  66 0034 DB06     	 lsl r3,r3,#27
  67 0036 DB0F     	 lsr r3,r3,#31
  68 0038 DBB2     	 uxtb r3,r3
  69 003a 1A07     	 lsl r2,r3,#28
2436:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  70              	 .loc 1 2436 0
  71 003c FB1C     	 add r3,r7,#3
  72 003e 1B78     	 ldrb r3,[r3]
  73 0040 1B07     	 lsl r3,r3,#28
  74 0042 9B0F     	 lsr r3,r3,#30
  75 0044 DBB2     	 uxtb r3,r3
  76 0046 9B06     	 lsl r3,r3,#26
2435:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  77              	 .loc 1 2435 0
  78 0048 1A43     	 orr r2,r3
2437:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  79              	 .loc 1 2437 0
  80 004a FB1C     	 add r3,r7,#3
  81 004c 1B78     	 ldrb r3,[r3]
  82 004e 9B06     	 lsl r3,r3,#26
  83 0050 DB0F     	 lsr r3,r3,#31
  84 0052 DBB2     	 uxtb r3,r3
  85 0054 5B07     	 lsl r3,r3,#29
2435:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  86              	 .loc 1 2435 0
  87 0056 1343     	 orr r3,r2
  88 0058 FB60     	 str r3,[r7,#12]
2438:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2439:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2440:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  89              	 .loc 1 2440 0
  90 005a FB1C     	 add r3,r7,#3
  91 005c 1B78     	 ldrb r3,[r3]
  92 005e 5B06     	 lsl r3,r3,#25
  93 0060 DB0F     	 lsr r3,r3,#31
  94 0062 DBB2     	 uxtb r3,r3
  95 0064 9B07     	 lsl r3,r3,#30
  96 0066 FA68     	 ldr r2,[r7,#12]
  97 0068 1343     	 orr r3,r2
  98 006a FB60     	 str r3,[r7,#12]
2441:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2442:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  99              	 .loc 1 2442 0
 100 006c 7A68     	 ldr r2,[r7,#4]
 101 006e F823     	 mov r3,#248
 102 0070 5B00     	 lsl r3,r3,#1
 103 0072 D258     	 ldr r2,[r2,r3]
 104 0074 FB68     	 ldr r3,[r7,#12]
 105 0076 1343     	 orr r3,r2
 106 0078 8022     	 mov r2,#128
 107 007a 1206     	 lsl r2,r2,#24
 108 007c 1A43     	 orr r2,r3
 109 007e 111C     	 mov r1,r2
 110 0080 7A68     	 ldr r2,[r7,#4]
 111 0082 F823     	 mov r3,#248
 112 0084 5B00     	 lsl r3,r3,#1
 113 0086 D150     	 str r1,[r2,r3]
2443:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 114              	 .loc 1 2443 0
 115 0088 BD46     	 mov sp,r7
 116 008a 04B0     	 add sp,sp,#16
 117              	 
 118 008c 80BD     	 pop {r7,pc}
 119              	 .cfi_endproc
 120              	.LFE70:
 122 008e C046     	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 123              	 .align 2
 124              	 .code 16
 125              	 .thumb_func
 127              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 128              	.LFB73:
2444:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2445:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2446:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2447:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2448:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2449:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2450:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2451:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2452:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2453:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2454:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2455:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2456:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2457:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2458:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2459:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2460:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2461:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2462:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2463:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2464:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2465:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2466:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2467:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
2468:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2469:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2470:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2471:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2472:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2473:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2474:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2475:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2476:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2477:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2478:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2479:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2480:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2481:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2482:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2483:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2484:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2485:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2486:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2487:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2488:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2489:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2490:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2491:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2492:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2493:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2494:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2495:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2496:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2497:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2498:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2499:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2500:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2501:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2502:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2503:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2504:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2505:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2506:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2507:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2508:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2509:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2510:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2511:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2512:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2513:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2514:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2515:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2516:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif /* XMC_VADC_GROUP_AVAILABLE */
2517:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2518:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2519:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2520:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2521:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2522:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2523:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2524:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2525:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2526:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2527:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2528:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2529:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2530:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2531:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2532:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2533:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2534:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2535:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2536:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2537:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2538:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2539:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2540:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2541:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2542:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2543:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2544:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2545:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2546:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2547:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2548:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2549:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2550:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2551:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2552:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2553:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2554:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2555:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 129              	 .loc 1 2555 0
 130              	 .cfi_startproc
 131 0000 80B5     	 push {r7,lr}
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134              	 .cfi_offset 7,-8
 135              	 .cfi_offset 14,-4
 136 0002 82B0     	 sub sp,sp,#8
 137              	.LCFI4:
 138              	 .cfi_def_cfa_offset 16
 139 0004 00AF     	 add r7,sp,#0
 140              	.LCFI5:
 141              	 .cfi_def_cfa_register 7
 142 0006 7860     	 str r0,[r7,#4]
2556:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2557:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 143              	 .loc 1 2557 0
 144 0008 7B68     	 ldr r3,[r7,#4]
 145 000a 8422     	 mov r2,#132
 146 000c 9B58     	 ldr r3,[r3,r2]
 147 000e 8022     	 mov r2,#128
 148 0010 9204     	 lsl r2,r2,#18
 149 0012 1A43     	 orr r2,r3
 150 0014 7B68     	 ldr r3,[r7,#4]
 151 0016 8421     	 mov r1,#132
 152 0018 5A50     	 str r2,[r3,r1]
2558:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 153              	 .loc 1 2558 0
 154 001a BD46     	 mov sp,r7
 155 001c 02B0     	 add sp,sp,#8
 156              	 
 157 001e 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE73:
 161              	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 167              	.LFB74:
2559:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2560:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2561:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2562:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2563:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2564:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2565:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2566:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2567:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2568:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2569:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2570:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2571:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2572:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2573:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2574:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2575:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2576:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 168              	 .loc 1 2576 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI6:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI7:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI8:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
2577:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2578:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 182              	 .loc 1 2578 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 8422     	 mov r2,#132
 185 000c 9B58     	 ldr r3,[r3,r2]
 186 000e 044A     	 ldr r2,.L4
 187 0010 1A40     	 and r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 8421     	 mov r1,#132
 190 0016 5A50     	 str r2,[r3,r1]
2579:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 191              	 .loc 1 2579 0
 192 0018 BD46     	 mov sp,r7
 193 001a 02B0     	 add sp,sp,#8
 194              	 
 195 001c 80BD     	 pop {r7,pc}
 196              	.L5:
 197 001e C046     	 .align 2
 198              	.L4:
 199 0020 FFFFFFFD 	 .word -33554433
 200              	 .cfi_endproc
 201              	.LFE74:
 203              	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 204              	 .align 2
 205              	 .code 16
 206              	 .thumb_func
 208              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 209              	.LFB88:
2580:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2581:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2582:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2583:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2584:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2585:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2586:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2587:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2588:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2589:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2590:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2591:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2592:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2593:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2594:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2595:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2596:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2597:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2598:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2599:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2600:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2601:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2602:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2603:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2604:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2605:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2606:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2607:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2608:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2609:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2610:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2611:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2612:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2613:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2614:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2615:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2616:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2617:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2618:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2619:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2620:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2621:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2622:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2623:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2624:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2625:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2626:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2627:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2628:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2629:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2630:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2631:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2632:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2633:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2634:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2635:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2636:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2637:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2638:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2639:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2640:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2641:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2642:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2643:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2644:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2645:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2646:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2647:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2648:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2649:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2650:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2651:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2652:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2653:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2654:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2655:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2656:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2657:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2658:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2659:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2660:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2661:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2662:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2663:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2664:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2665:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2666:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2667:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2668:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2669:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2670:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2671:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2672:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2673:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2674:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2675:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2676:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2677:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2678:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2679:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2680:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2681:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2682:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2683:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2684:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2685:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2686:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2687:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2688:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2689:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2690:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2691:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2692:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2693:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2694:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2695:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2696:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2697:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2698:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2699:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2700:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2701:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2702:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2703:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2704:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2705:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2706:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2707:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2708:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2709:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2710:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2711:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2712:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2713:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2714:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2715:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2716:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2717:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2718:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2719:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2720:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2721:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2722:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2723:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2724:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2725:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2726:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2727:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2728:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2729:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2730:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2731:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2732:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2733:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2734:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2735:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2736:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2737:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2738:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2739:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2740:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2741:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2742:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2743:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2744:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2745:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2746:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2747:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2748:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2749:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2750:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2751:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2752:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2753:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2754:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2755:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2756:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2757:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2758:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2759:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2760:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2761:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2762:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2763:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2764:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2765:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2766:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2767:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2768:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2769:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2770:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2771:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2772:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2773:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2774:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2775:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2776:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2777:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2778:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2779:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2780:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2781:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2782:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2783:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2784:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2785:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2786:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2787:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2788:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2789:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2790:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2791:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2792:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2793:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2794:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2795:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2796:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2797:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2798:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2799:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2800:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2801:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2802:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2803:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2804:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2805:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2806:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2807:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2808:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2809:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2810:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2811:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2812:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2813:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2814:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2815:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2816:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2817:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2818:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2819:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2820:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2821:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2822:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2823:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2824:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2825:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2826:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2827:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2828:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2829:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2830:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2831:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2832:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2833:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2834:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2835:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2836:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2837:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2838:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2839:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2840:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2841:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2842:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2843:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2844:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2845:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
2846:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2847:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2848:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2849:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2850:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2851:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2852:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2853:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2854:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2855:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2856:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2857:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2858:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2859:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2860:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2861:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2862:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2863:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2864:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2865:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2866:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2867:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2868:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2869:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2870:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2871:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2872:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2873:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2874:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2875:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2876:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2877:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2878:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2879:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2880:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2881:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2882:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2883:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2884:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2885:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2886:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2887:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
2888:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
2889:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2890:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2891:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2892:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
2893:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2894:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2895:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2896:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2897:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
2898:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2899:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2900:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2901:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2902:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2903:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
2904:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
2905:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2906:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2907:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
2908:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
2909:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
2910:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2911:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2912:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2913:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2914:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
2915:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2916:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2917:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
2918:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2919:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2920:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2921:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2922:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
2923:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2924:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2925:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2926:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2927:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
2928:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
2929:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2930:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
2931:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2932:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2933:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2934:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2935:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
2936:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2937:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2938:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2939:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2940:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2941:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2942:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2943:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
2944:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
2945:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
2946:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
2947:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2948:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2949:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
2950:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2951:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2952:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2953:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2954:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2955:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
2956:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2957:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2958:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2959:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2960:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2961:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2962:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2963:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2964:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
2965:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
2966:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
2967:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
2968:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
2969:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2970:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2971:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2972:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2973:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2974:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
2975:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2976:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2977:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
2978:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
2979:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2980:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2981:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2982:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
2983:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2984:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2985:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2986:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2987:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
2988:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
2989:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
2990:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
2991:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2992:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2993:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2994:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2995:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
2996:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2997:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
2998:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2999:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3000:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3001:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3002:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3003:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3004:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3005:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3006:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3007:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3008:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3009:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3010:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3011:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3012:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3013:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3014:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3015:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3016:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3017:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3018:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3019:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3020:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3021:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3022:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3023:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3024:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3025:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3026:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3027:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3028:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3029:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3030:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3031:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3032:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3033:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3034:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 210              	 .loc 1 3034 0
 211              	 .cfi_startproc
 212 0000 80B5     	 push {r7,lr}
 213              	.LCFI9:
 214              	 .cfi_def_cfa_offset 8
 215              	 .cfi_offset 7,-8
 216              	 .cfi_offset 14,-4
 217 0002 82B0     	 sub sp,sp,#8
 218              	.LCFI10:
 219              	 .cfi_def_cfa_offset 16
 220 0004 00AF     	 add r7,sp,#0
 221              	.LCFI11:
 222              	 .cfi_def_cfa_register 7
 223 0006 7860     	 str r0,[r7,#4]
3035:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3036:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 224              	 .loc 1 3036 0
 225 0008 7B68     	 ldr r3,[r7,#4]
 226 000a 8422     	 mov r2,#132
 227 000c 9B58     	 ldr r3,[r3,r2]
 228 000e 8022     	 mov r2,#128
 229 0010 D204     	 lsl r2,r2,#19
 230 0012 1A43     	 orr r2,r3
 231 0014 7B68     	 ldr r3,[r7,#4]
 232 0016 8421     	 mov r1,#132
 233 0018 5A50     	 str r2,[r3,r1]
3037:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 234              	 .loc 1 3037 0
 235 001a BD46     	 mov sp,r7
 236 001c 02B0     	 add sp,sp,#8
 237              	 
 238 001e 80BD     	 pop {r7,pc}
 239              	 .cfi_endproc
 240              	.LFE88:
 242              	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 243              	 .align 2
 244              	 .code 16
 245              	 .thumb_func
 247              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 248              	.LFB89:
3038:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3039:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3040:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3041:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3042:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3043:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3044:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3045:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3046:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3047:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3048:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3049:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3050:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3051:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3052:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3053:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3054:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3055:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3056:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 249              	 .loc 1 3056 0
 250              	 .cfi_startproc
 251 0000 80B5     	 push {r7,lr}
 252              	.LCFI12:
 253              	 .cfi_def_cfa_offset 8
 254              	 .cfi_offset 7,-8
 255              	 .cfi_offset 14,-4
 256 0002 82B0     	 sub sp,sp,#8
 257              	.LCFI13:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI14:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
3057:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3058:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 263              	 .loc 1 3058 0
 264 0008 7B68     	 ldr r3,[r7,#4]
 265 000a 8422     	 mov r2,#132
 266 000c 9B58     	 ldr r3,[r3,r2]
 267 000e 044A     	 ldr r2,.L8
 268 0010 1A40     	 and r2,r3
 269 0012 7B68     	 ldr r3,[r7,#4]
 270 0014 8421     	 mov r1,#132
 271 0016 5A50     	 str r2,[r3,r1]
3059:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 272              	 .loc 1 3059 0
 273 0018 BD46     	 mov sp,r7
 274 001a 02B0     	 add sp,sp,#8
 275              	 
 276 001c 80BD     	 pop {r7,pc}
 277              	.L9:
 278 001e C046     	 .align 2
 279              	.L8:
 280 0020 FFFFFFFB 	 .word -67108865
 281              	 .cfi_endproc
 282              	.LFE89:
 284              	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 285              	 .align 2
 286              	 .code 16
 287              	 .thumb_func
 289              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 290              	.LFB102:
3060:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3061:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3062:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3063:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3064:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3065:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3066:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3067:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3068:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3069:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3070:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3071:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3072:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3073:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3074:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3075:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3076:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3077:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3078:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3079:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3080:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3081:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3082:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3083:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3084:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3085:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3086:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3087:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3088:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3089:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3090:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3091:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3092:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3093:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3094:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3095:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3096:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3097:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3098:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3099:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3100:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3101:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3102:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3103:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3104:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3105:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3106:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3107:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3108:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3109:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3110:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3111:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3112:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3113:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3114:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3115:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3116:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3117:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3118:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3119:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3120:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3121:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3122:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3123:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3124:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3125:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3126:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3127:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3128:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3129:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3130:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3131:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3132:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3133:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3134:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3135:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3136:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3137:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3138:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3139:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3140:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3141:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3142:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3143:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3144:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3145:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3146:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3147:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3148:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3149:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3150:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3151:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3152:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3153:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3154:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3155:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3156:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3157:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3158:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3159:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3160:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3161:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3162:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3163:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3164:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3165:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3166:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3167:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3168:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3169:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3170:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3171:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3172:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3173:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3174:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3175:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3176:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3177:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3178:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3179:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3180:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3181:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3182:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3183:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3184:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3185:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3186:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3187:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3188:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3189:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3190:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3191:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3192:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3193:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3194:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3195:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3196:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3197:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3198:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3199:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3200:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3201:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3202:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3203:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3204:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3205:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3206:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3207:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3208:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3209:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3210:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3211:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3212:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3213:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3214:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3215:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3216:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3217:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3218:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3219:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3220:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3221:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3222:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3223:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3224:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3225:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3226:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3227:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3228:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3229:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3230:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3231:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3232:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3233:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3234:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3235:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3236:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3237:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3238:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3239:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3240:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3241:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3242:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3243:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3244:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3245:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3246:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3247:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3248:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3249:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3250:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3251:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3252:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3253:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3254:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3255:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3256:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3257:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3258:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3259:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3260:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3261:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3262:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3263:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3264:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3265:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3266:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3267:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3268:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3269:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3270:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3271:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3272:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3273:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3274:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3275:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3276:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3277:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3278:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3279:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3280:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3281:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3282:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3283:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3284:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3285:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3286:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3287:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3288:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3289:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3290:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3291:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3292:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3293:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3294:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3295:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3296:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3297:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3298:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3299:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3300:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3301:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3302:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3303:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3304:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3305:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3306:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3307:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3308:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3309:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3310:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3311:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3312:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3313:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3314:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3315:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3316:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3317:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3318:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3319:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3320:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3321:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3322:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3323:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3324:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3325:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3326:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3327:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3328:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3329:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3330:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3331:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3332:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3333:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3334:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3335:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3336:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3337:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3338:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3339:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3340:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3341:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3342:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3343:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3344:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3345:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3346:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3347:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3348:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3349:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3350:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3351:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3352:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3353:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3354:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3355:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3356:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3357:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3358:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3359:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3360:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3361:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3362:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3363:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3364:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3365:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3366:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3367:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3368:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3369:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3370:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3371:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3372:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3373:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3374:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3375:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3376:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3377:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3378:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3379:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3380:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3381:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3382:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3383:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3384:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3385:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3386:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3387:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3388:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3389:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3390:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3391:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3392:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3393:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3394:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3395:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3396:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3397:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3398:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3399:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3400:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3401:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3402:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3403:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3404:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3405:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3406:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3407:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3408:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3409:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3410:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3411:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3412:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3413:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3414:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3415:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3416:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Group Pointer", (global_ptr == 
3417:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3418:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3419:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3420:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3421:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3422:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3423:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3424:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3425:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3426:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3427:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3428:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3429:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3430:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3431:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3432:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3433:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3434:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3435:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3436:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3437:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3438:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Group Pointer", (global_ptr ==
3439:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3440:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3441:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3442:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3443:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3444:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3445:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3446:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3447:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3448:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3449:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3450:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3451:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3452:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3453:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3454:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3455:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3456:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3457:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3458:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3459:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3460:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3461:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3462:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3463:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3464:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3465:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3466:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3467:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3468:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3469:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3470:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3471:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3472:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3473:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3474:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3475:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3476:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3477:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3478:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3479:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3480:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3481:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3482:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 291              	 .loc 1 3482 0
 292              	 .cfi_startproc
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI15:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI16:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI17:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
3483:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3484:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 305              	 .loc 1 3484 0
 306 0008 7B68     	 ldr r3,[r7,#4]
 307 000a 8422     	 mov r2,#132
 308 000c 9B58     	 ldr r3,[r3,r2]
 309 000e 8022     	 mov r2,#128
 310 0010 5204     	 lsl r2,r2,#17
 311 0012 1A43     	 orr r2,r3
 312 0014 7B68     	 ldr r3,[r7,#4]
 313 0016 8421     	 mov r1,#132
 314 0018 5A50     	 str r2,[r3,r1]
3485:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 315              	 .loc 1 3485 0
 316 001a BD46     	 mov sp,r7
 317 001c 02B0     	 add sp,sp,#8
 318              	 
 319 001e 80BD     	 pop {r7,pc}
 320              	 .cfi_endproc
 321              	.LFE102:
 323              	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 324              	 .align 2
 325              	 .code 16
 326              	 .thumb_func
 328              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 329              	.LFB103:
3486:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3487:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3488:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3489:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3490:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3491:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3492:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3493:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3494:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3495:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3496:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3497:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3498:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3499:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3500:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3501:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3502:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3503:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 330              	 .loc 1 3503 0
 331              	 .cfi_startproc
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI18:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI19:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI20:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
3504:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3505:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 344              	 .loc 1 3505 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 8422     	 mov r2,#132
 347 000c 9B58     	 ldr r3,[r3,r2]
 348 000e 044A     	 ldr r2,.L12
 349 0010 1A40     	 and r2,r3
 350 0012 7B68     	 ldr r3,[r7,#4]
 351 0014 8421     	 mov r1,#132
 352 0016 5A50     	 str r2,[r3,r1]
3506:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 353              	 .loc 1 3506 0
 354 0018 BD46     	 mov sp,r7
 355 001a 02B0     	 add sp,sp,#8
 356              	 
 357 001c 80BD     	 pop {r7,pc}
 358              	.L13:
 359 001e C046     	 .align 2
 360              	.L12:
 361 0020 FFFFFFFE 	 .word -16777217
 362              	 .cfi_endproc
 363              	.LFE103:
 365              	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 366              	 .align 2
 367              	 .code 16
 368              	 .thumb_func
 370              	XMC_VADC_GROUP_QueueFlushEntries:
 371              	.LFB107:
3507:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3508:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3509:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3510:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3511:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3512:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3513:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3514:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3515:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3516:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3517:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3518:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3519:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3520:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3521:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3522:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3523:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3524:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3525:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3526:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3527:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3528:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3529:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3530:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3531:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3532:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3533:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3534:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3535:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3536:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3537:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3538:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3539:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3540:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3541:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3542:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3543:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3544:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3545:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3546:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3547:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3548:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3549:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3550:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3551:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3552:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3553:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3554:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3555:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3556:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3557:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3558:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3559:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3560:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3561:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3562:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3563:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3564:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3565:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3566:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3567:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3568:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3569:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3570:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3571:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3572:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3573:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3574:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3575:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3576:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3577:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3578:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3579:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3580:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3581:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3582:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3583:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3584:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3585:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3586:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3587:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3588:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3589:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3590:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3591:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3592:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3593:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3594:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3595:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3596:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3597:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3598:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3599:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3600:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3601:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3602:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3603:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3604:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3605:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3606:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3607:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3608:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3609:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3610:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3611:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3612:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3613:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3614:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3615:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3616:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3617:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3618:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3619:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3620:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3621:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3622:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3623:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3624:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3625:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3626:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3627:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3628:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3629:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3630:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3631:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3632:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3633:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3634:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3635:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3636:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3637:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3638:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3639:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3640:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
3641:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3642:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3643:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
3644:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3645:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3646:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3647:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3648:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3649:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3650:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3651:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3652:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3653:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3654:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3655:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3656:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3657:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3658:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3659:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3660:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3661:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3662:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3663:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3664:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3665:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3666:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3667:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3668:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3669:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3670:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3671:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3672:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3673:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3674:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
3675:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3676:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3677:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3678:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3679:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3680:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3681:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3682:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3683:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3684:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3685:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3686:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3687:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3688:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3689:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3690:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3691:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3692:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3693:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3694:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3695:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3696:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3697:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** {
 372              	 .loc 1 3697 0
 373              	 .cfi_startproc
 374 0000 80B5     	 push {r7,lr}
 375              	.LCFI21:
 376              	 .cfi_def_cfa_offset 8
 377              	 .cfi_offset 7,-8
 378              	 .cfi_offset 14,-4
 379 0002 82B0     	 sub sp,sp,#8
 380              	.LCFI22:
 381              	 .cfi_def_cfa_offset 16
 382 0004 00AF     	 add r7,sp,#0
 383              	.LCFI23:
 384              	 .cfi_def_cfa_register 7
 385 0006 7860     	 str r0,[r7,#4]
3698:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3699:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 386              	 .loc 1 3699 0
 387 0008 7A68     	 ldr r2,[r7,#4]
 388 000a 8223     	 mov r3,#130
 389 000c 5B00     	 lsl r3,r3,#1
 390 000e D358     	 ldr r3,[r2,r3]
 391 0010 8022     	 mov r2,#128
 392 0012 D200     	 lsl r2,r2,#3
 393 0014 1A43     	 orr r2,r3
 394 0016 111C     	 mov r1,r2
 395 0018 7A68     	 ldr r2,[r7,#4]
 396 001a 8223     	 mov r3,#130
 397 001c 5B00     	 lsl r3,r3,#1
 398 001e D150     	 str r1,[r2,r3]
3700:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** 
3701:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 399              	 .loc 1 3701 0
 400 0020 C046     	 mov r8,r8
 401              	.L15:
 402              	 .loc 1 3701 0 is_stmt 0 discriminator 1
 403 0022 7A68     	 ldr r2,[r7,#4]
 404 0024 8423     	 mov r3,#132
 405 0026 5B00     	 lsl r3,r3,#1
 406 0028 D358     	 ldr r3,[r2,r3]
 407 002a 2022     	 mov r2,#32
 408 002c 1340     	 and r3,r2
 409 002e F8D0     	 beq .L15
3702:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   {
3703:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
3704:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h ****   }
3705:C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc\xmc_vadc.h **** }
 410              	 .loc 1 3705 0 is_stmt 1
 411 0030 BD46     	 mov sp,r7
 412 0032 02B0     	 add sp,sp,#8
 413              	 
 414 0034 80BD     	 pop {r7,pc}
 415              	 .cfi_endproc
 416              	.LFE107:
 418 0036 C046     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 419              	 .align 2
 422              	g_xmc_vadc_group_array:
 423 0000 00040348 	 .word 1208157184
 424 0004 00080348 	 .word 1208158208
 425              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 426              	 .align 2
 427              	 .global XMC_VADC_GLOBAL_EnableModule
 428              	 .code 16
 429              	 .thumb_func
 431              	XMC_VADC_GLOBAL_EnableModule:
 432              	.LFB125:
 433              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2015-12-01
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c **** ***************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  77:../Libraries/XMCLib/src/xmc_vadc.c **** 
  78:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  81:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
  82:../Libraries/XMCLib/src/xmc_vadc.c **** 
  83:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  86:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
  87:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
  88:../Libraries/XMCLib/src/xmc_vadc.c **** 
  89:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
  90:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
  91:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  94:../Libraries/XMCLib/src/xmc_vadc.c **** 
  95:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  96:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_vadc.c **** 
  99:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 101:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_vadc.c **** 
 103:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 104:../Libraries/XMCLib/src/xmc_vadc.c **** 
 105:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 106:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 107:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 108:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 109:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 110:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 111:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 112:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 113:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 114:../Libraries/XMCLib/src/xmc_vadc.c **** 
 115:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 116:../Libraries/XMCLib/src/xmc_vadc.c **** 
 117:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 119:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 120:../Libraries/XMCLib/src/xmc_vadc.c **** 
 121:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 122:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 123:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_vadc.c **** 
 125:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 126:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 127:../Libraries/XMCLib/src/xmc_vadc.c **** {
 434              	 .loc 2 127 0
 435              	 .cfi_startproc
 436 0000 80B5     	 push {r7,lr}
 437              	.LCFI24:
 438              	 .cfi_def_cfa_offset 8
 439              	 .cfi_offset 7,-8
 440              	 .cfi_offset 14,-4
 441 0002 00AF     	 add r7,sp,#0
 442              	.LCFI25:
 443              	 .cfi_def_cfa_register 7
 128:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 129:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 130:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 131:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 132:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 133:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 134:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 135:../Libraries/XMCLib/src/xmc_vadc.c **** 
 136:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 137:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 444              	 .loc 2 137 0
 445 0004 034B     	 ldr r3,.L17
 446 0006 FF22     	 mov r2,#255
 447 0008 1A60     	 str r2,[r3]
 138:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 139:../Libraries/XMCLib/src/xmc_vadc.c **** 
 140:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 141:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 448              	 .loc 2 141 0
 449 000a 0120     	 mov r0,#1
 450 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 142:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 143:../Libraries/XMCLib/src/xmc_vadc.c **** 
 144:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 145:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 146:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 147:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 148:../Libraries/XMCLib/src/xmc_vadc.c **** }
 451              	 .loc 2 148 0
 452 0010 BD46     	 mov sp,r7
 453              	 
 454 0012 80BD     	 pop {r7,pc}
 455              	.L18:
 456              	 .align 2
 457              	.L17:
 458 0014 00050140 	 .word 1073808640
 459              	 .cfi_endproc
 460              	.LFE125:
 462              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 463              	 .align 2
 464              	 .global XMC_VADC_GLOBAL_DisableModule
 465              	 .code 16
 466              	 .thumb_func
 468              	XMC_VADC_GLOBAL_DisableModule:
 469              	.LFB126:
 149:../Libraries/XMCLib/src/xmc_vadc.c **** 
 150:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 151:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 152:../Libraries/XMCLib/src/xmc_vadc.c **** {
 470              	 .loc 2 152 0
 471              	 .cfi_startproc
 472 0000 80B5     	 push {r7,lr}
 473              	.LCFI26:
 474              	 .cfi_def_cfa_offset 8
 475              	 .cfi_offset 7,-8
 476              	 .cfi_offset 14,-4
 477 0002 00AF     	 add r7,sp,#0
 478              	.LCFI27:
 479              	 .cfi_def_cfa_register 7
 153:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 154:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 155:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 157:../Libraries/XMCLib/src/xmc_vadc.c **** 
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 159:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 480              	 .loc 2 159 0
 481 0004 0120     	 mov r0,#1
 482 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 161:../Libraries/XMCLib/src/xmc_vadc.c **** 
 162:../Libraries/XMCLib/src/xmc_vadc.c **** }
 483              	 .loc 2 162 0
 484 000a BD46     	 mov sp,r7
 485              	 
 486 000c 80BD     	 pop {r7,pc}
 487              	 .cfi_endproc
 488              	.LFE126:
 490 000e C046     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 491              	 .align 2
 492              	 .global XMC_VADC_GLOBAL_Init
 493              	 .code 16
 494              	 .thumb_func
 496              	XMC_VADC_GLOBAL_Init:
 497              	.LFB127:
 163:../Libraries/XMCLib/src/xmc_vadc.c **** 
 164:../Libraries/XMCLib/src/xmc_vadc.c **** 
 165:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 166:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 167:../Libraries/XMCLib/src/xmc_vadc.c **** {
 498              	 .loc 2 167 0
 499              	 .cfi_startproc
 500 0000 80B5     	 push {r7,lr}
 501              	.LCFI28:
 502              	 .cfi_def_cfa_offset 8
 503              	 .cfi_offset 7,-8
 504              	 .cfi_offset 14,-4
 505 0002 82B0     	 sub sp,sp,#8
 506              	.LCFI29:
 507              	 .cfi_def_cfa_offset 16
 508 0004 00AF     	 add r7,sp,#0
 509              	.LCFI30:
 510              	 .cfi_def_cfa_register 7
 511 0006 7860     	 str r0,[r7,#4]
 512 0008 3960     	 str r1,[r7]
 168:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 169:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 170:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 171:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 172:../Libraries/XMCLib/src/xmc_vadc.c **** 
 173:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 174:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 513              	 .loc 2 174 0
 514 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 175:../Libraries/XMCLib/src/xmc_vadc.c **** 
 176:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 515              	 .loc 2 176 0
 516 000e 3B68     	 ldr r3,[r7]
 517 0010 5A69     	 ldr r2,[r3,#20]
 518 0012 7B68     	 ldr r3,[r7,#4]
 519 0014 1A60     	 str r2,[r3]
 177:../Libraries/XMCLib/src/xmc_vadc.c **** 
 178:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 179:../Libraries/XMCLib/src/xmc_vadc.c **** 
 180:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 181:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 520              	 .loc 2 181 0
 521 0016 3B68     	 ldr r3,[r7]
 522 0018 5B68     	 ldr r3,[r3,#4]
 523 001a 8022     	 mov r2,#128
 524 001c 1202     	 lsl r2,r2,#8
 525 001e 1A43     	 orr r2,r3
 526 0020 7B68     	 ldr r3,[r7,#4]
 527 0022 8021     	 mov r1,#128
 528 0024 5A50     	 str r2,[r3,r1]
 182:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 183:../Libraries/XMCLib/src/xmc_vadc.c **** 
 184:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 185:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 529              	 .loc 2 185 0
 530 0026 3B68     	 ldr r3,[r7]
 531 0028 9A68     	 ldr r2,[r3,#8]
 532 002a 7B68     	 ldr r3,[r7,#4]
 533 002c A021     	 mov r1,#160
 534 002e 5A50     	 str r2,[r3,r1]
 186:../Libraries/XMCLib/src/xmc_vadc.c **** 
 187:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 188:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 535              	 .loc 2 188 0
 536 0030 3B68     	 ldr r3,[r7]
 537 0032 DA68     	 ldr r2,[r3,#12]
 538 0034 7B68     	 ldr r3,[r7,#4]
 539 0036 A421     	 mov r1,#164
 540 0038 5A50     	 str r2,[r3,r1]
 189:../Libraries/XMCLib/src/xmc_vadc.c **** 
 190:../Libraries/XMCLib/src/xmc_vadc.c **** 
 191:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 192:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 541              	 .loc 2 192 0
 542 003a 3B68     	 ldr r3,[r7]
 543 003c 1969     	 ldr r1,[r3,#16]
 544 003e 7A68     	 ldr r2,[r7,#4]
 545 0040 A023     	 mov r3,#160
 546 0042 9B00     	 lsl r3,r3,#2
 547 0044 D150     	 str r1,[r2,r3]
 193:../Libraries/XMCLib/src/xmc_vadc.c **** 
 194:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 197:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 548              	 .loc 2 197 0
 549 0046 3B68     	 ldr r3,[r7]
 550 0048 1A68     	 ldr r2,[r3]
 551 004a 7B68     	 ldr r3,[r7,#4]
 552 004c B821     	 mov r1,#184
 553 004e 5A50     	 str r2,[r3,r1]
 198:../Libraries/XMCLib/src/xmc_vadc.c **** 
 199:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 200:../Libraries/XMCLib/src/xmc_vadc.c **** 
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 202:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 203:../Libraries/XMCLib/src/xmc_vadc.c **** 
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 205:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 206:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 208:../Libraries/XMCLib/src/xmc_vadc.c **** 
 209:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 210:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 211:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 212:../Libraries/XMCLib/src/xmc_vadc.c **** 
 213:../Libraries/XMCLib/src/xmc_vadc.c **** }
 554              	 .loc 2 213 0
 555 0050 BD46     	 mov sp,r7
 556 0052 02B0     	 add sp,sp,#8
 557              	 
 558 0054 80BD     	 pop {r7,pc}
 559              	 .cfi_endproc
 560              	.LFE127:
 562 0056 C046     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 563              	 .align 2
 564              	 .global XMC_VADC_GLOBAL_InputClassInit
 565              	 .code 16
 566              	 .thumb_func
 568              	XMC_VADC_GLOBAL_InputClassInit:
 569              	.LFB128:
 214:../Libraries/XMCLib/src/xmc_vadc.c **** 
 215:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 216:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 217:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 218:../Libraries/XMCLib/src/xmc_vadc.c **** {
 570              	 .loc 2 218 0
 571              	 .cfi_startproc
 572 0000 80B5     	 push {r7,lr}
 573              	.LCFI31:
 574              	 .cfi_def_cfa_offset 8
 575              	 .cfi_offset 7,-8
 576              	 .cfi_offset 14,-4
 577 0002 84B0     	 sub sp,sp,#16
 578              	.LCFI32:
 579              	 .cfi_def_cfa_offset 24
 580 0004 00AF     	 add r7,sp,#0
 581              	.LCFI33:
 582              	 .cfi_def_cfa_register 7
 583 0006 F860     	 str r0,[r7,#12]
 584 0008 B960     	 str r1,[r7,#8]
 585 000a 3B60     	 str r3,[r7]
 586 000c FB1D     	 add r3,r7,#7
 587 000e 1A70     	 strb r2,[r3]
 219:../Libraries/XMCLib/src/xmc_vadc.c **** 
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 222:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 223:../Libraries/XMCLib/src/xmc_vadc.c **** 
 224:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 588              	 .loc 2 225 0
 589 0010 FB1D     	 add r3,r7,#7
 590 0012 1B78     	 ldrb r3,[r3]
 591 0014 002B     	 cmp r3,#0
 592 0016 09D1     	 bne .L22
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 227:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 228:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 593              	 .loc 2 228 0
 594 0018 BB68     	 ldr r3,[r7,#8]
 595 001a 0A4A     	 ldr r2,.L24
 596 001c 1340     	 and r3,r2
 597 001e 191C     	 mov r1,r3
 598 0020 FB68     	 ldr r3,[r7,#12]
 599 0022 3A68     	 ldr r2,[r7]
 600 0024 2832     	 add r2,r2,#40
 601 0026 9200     	 lsl r2,r2,#2
 602 0028 D150     	 str r1,[r2,r3]
 603 002a 08E0     	 b .L21
 604              	.L22:
 229:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 230:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 231:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 232:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 233:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 234:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 605              	 .loc 2 234 0
 606 002c BB68     	 ldr r3,[r7,#8]
 607 002e 064A     	 ldr r2,.L24+4
 608 0030 1340     	 and r3,r2
 609 0032 191C     	 mov r1,r3
 610 0034 FB68     	 ldr r3,[r7,#12]
 611 0036 3A68     	 ldr r2,[r7]
 612 0038 2832     	 add r2,r2,#40
 613 003a 9200     	 lsl r2,r2,#2
 614 003c D150     	 str r1,[r2,r3]
 615              	.L21:
 235:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 236:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 237:../Libraries/XMCLib/src/xmc_vadc.c **** }
 616              	 .loc 2 237 0
 617 003e BD46     	 mov sp,r7
 618 0040 04B0     	 add sp,sp,#16
 619              	 
 620 0042 80BD     	 pop {r7,pc}
 621              	.L25:
 622              	 .align 2
 623              	.L24:
 624 0044 1F070000 	 .word 1823
 625 0048 00001F07 	 .word 119472128
 626              	 .cfi_endproc
 627              	.LFE128:
 629              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 630              	 .align 2
 631              	 .global XMC_VADC_GLOBAL_StartupCalibration
 632              	 .code 16
 633              	 .thumb_func
 635              	XMC_VADC_GLOBAL_StartupCalibration:
 636              	.LFB129:
 238:../Libraries/XMCLib/src/xmc_vadc.c **** 
 239:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 240:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 241:../Libraries/XMCLib/src/xmc_vadc.c **** {
 637              	 .loc 2 241 0
 638              	 .cfi_startproc
 639 0000 80B5     	 push {r7,lr}
 640              	.LCFI34:
 641              	 .cfi_def_cfa_offset 8
 642              	 .cfi_offset 7,-8
 643              	 .cfi_offset 14,-4
 644 0002 84B0     	 sub sp,sp,#16
 645              	.LCFI35:
 646              	 .cfi_def_cfa_offset 24
 647 0004 00AF     	 add r7,sp,#0
 648              	.LCFI36:
 649              	 .cfi_def_cfa_register 7
 650 0006 7860     	 str r0,[r7,#4]
 242:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 243:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 244:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 245:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 246:../Libraries/XMCLib/src/xmc_vadc.c ****   
 247:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 248:../Libraries/XMCLib/src/xmc_vadc.c **** 
 249:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 651              	 .loc 2 249 0
 652 0008 7B68     	 ldr r3,[r7,#4]
 653 000a 8022     	 mov r2,#128
 654 000c 9B58     	 ldr r3,[r3,r2]
 655 000e 8022     	 mov r2,#128
 656 0010 1206     	 lsl r2,r2,#24
 657 0012 1A43     	 orr r2,r3
 658 0014 7B68     	 ldr r3,[r7,#4]
 659 0016 8021     	 mov r1,#128
 660 0018 5A50     	 str r2,[r3,r1]
 250:../Libraries/XMCLib/src/xmc_vadc.c **** 
 251:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 252:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 661              	 .loc 2 253 0
 662 001a 0F23     	 mov r3,#15
 663 001c FB18     	 add r3,r7,r3
 664 001e 0022     	 mov r2,#0
 665 0020 1A70     	 strb r2,[r3]
 666 0022 1CE0     	 b .L27
 667              	.L30:
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 255:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 668              	 .loc 2 255 0
 669 0024 0F23     	 mov r3,#15
 670 0026 FB18     	 add r3,r7,r3
 671 0028 1A78     	 ldrb r2,[r3]
 672 002a 114B     	 ldr r3,.L31
 673 002c 9200     	 lsl r2,r2,#2
 674 002e D358     	 ldr r3,[r2,r3]
 675 0030 BB60     	 str r3,[r7,#8]
 256:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 676              	 .loc 2 256 0
 677 0032 BB68     	 ldr r3,[r7,#8]
 678 0034 8022     	 mov r2,#128
 679 0036 9A58     	 ldr r2,[r3,r2]
 680 0038 C023     	 mov r3,#192
 681 003a 9B02     	 lsl r3,r3,#10
 682 003c 1340     	 and r3,r2
 683 003e 07D0     	 beq .L28
 257:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 258:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 259:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 684              	 .loc 2 259 0
 685 0040 C046     	 mov r8,r8
 686              	.L29:
 687              	 .loc 2 259 0 is_stmt 0 discriminator 1
 688 0042 BB68     	 ldr r3,[r7,#8]
 689 0044 8022     	 mov r2,#128
 690 0046 9A58     	 ldr r2,[r3,r2]
 691 0048 8023     	 mov r3,#128
 692 004a 5B05     	 lsl r3,r3,#21
 693 004c 1340     	 and r3,r2
 694 004e F8D1     	 bne .L29
 695              	.L28:
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 696              	 .loc 2 253 0 is_stmt 1 discriminator 2
 697 0050 0F23     	 mov r3,#15
 698 0052 FB18     	 add r3,r7,r3
 699 0054 1A78     	 ldrb r2,[r3]
 700 0056 0F23     	 mov r3,#15
 701 0058 FB18     	 add r3,r7,r3
 702 005a 0132     	 add r2,r2,#1
 703 005c 1A70     	 strb r2,[r3]
 704              	.L27:
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 705              	 .loc 2 253 0 is_stmt 0 discriminator 1
 706 005e 0F23     	 mov r3,#15
 707 0060 FB18     	 add r3,r7,r3
 708 0062 1B78     	 ldrb r3,[r3]
 709 0064 012B     	 cmp r3,#1
 710 0066 DDD9     	 bls .L30
 260:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 261:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 262:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 263:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 264:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 265:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 266:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 267:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 268:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 270:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 271:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 272:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 273:../Libraries/XMCLib/src/xmc_vadc.c **** }
 711              	 .loc 2 273 0 is_stmt 1
 712 0068 BD46     	 mov sp,r7
 713 006a 04B0     	 add sp,sp,#16
 714              	 
 715 006c 80BD     	 pop {r7,pc}
 716              	.L32:
 717 006e C046     	 .align 2
 718              	.L31:
 719 0070 00000000 	 .word g_xmc_vadc_group_array
 720              	 .cfi_endproc
 721              	.LFE129:
 723              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 724              	 .align 2
 725              	 .global XMC_VADC_GLOBAL_SetBoundaries
 726              	 .code 16
 727              	 .thumb_func
 729              	XMC_VADC_GLOBAL_SetBoundaries:
 730              	.LFB130:
 274:../Libraries/XMCLib/src/xmc_vadc.c **** 
 275:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 276:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 277:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 278:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 279:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 280:../Libraries/XMCLib/src/xmc_vadc.c **** {
 731              	 .loc 2 280 0
 732              	 .cfi_startproc
 733 0000 80B5     	 push {r7,lr}
 734              	.LCFI37:
 735              	 .cfi_def_cfa_offset 8
 736              	 .cfi_offset 7,-8
 737              	 .cfi_offset 14,-4
 738 0002 86B0     	 sub sp,sp,#24
 739              	.LCFI38:
 740              	 .cfi_def_cfa_offset 32
 741 0004 00AF     	 add r7,sp,#0
 742              	.LCFI39:
 743              	 .cfi_def_cfa_register 7
 744 0006 F860     	 str r0,[r7,#12]
 745 0008 B960     	 str r1,[r7,#8]
 746 000a 7A60     	 str r2,[r7,#4]
 281:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 282:../Libraries/XMCLib/src/xmc_vadc.c **** 
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 284:../Libraries/XMCLib/src/xmc_vadc.c **** 
 285:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 747              	 .loc 2 285 0
 748 000c 0023     	 mov r3,#0
 749 000e 7B61     	 str r3,[r7,#20]
 286:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 750              	 .loc 2 286 0
 751 0010 7A69     	 ldr r2,[r7,#20]
 752 0012 BB68     	 ldr r3,[r7,#8]
 753 0014 1343     	 orr r3,r2
 754 0016 7B61     	 str r3,[r7,#20]
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 755              	 .loc 2 287 0
 756 0018 7B68     	 ldr r3,[r7,#4]
 757 001a 1B04     	 lsl r3,r3,#16
 758 001c 7A69     	 ldr r2,[r7,#20]
 759 001e 1343     	 orr r3,r2
 760 0020 7B61     	 str r3,[r7,#20]
 288:../Libraries/XMCLib/src/xmc_vadc.c **** 
 289:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 761              	 .loc 2 289 0
 762 0022 FB68     	 ldr r3,[r7,#12]
 763 0024 B821     	 mov r1,#184
 764 0026 7A69     	 ldr r2,[r7,#20]
 765 0028 5A50     	 str r2,[r3,r1]
 290:../Libraries/XMCLib/src/xmc_vadc.c **** }
 766              	 .loc 2 290 0
 767 002a BD46     	 mov sp,r7
 768 002c 06B0     	 add sp,sp,#24
 769              	 
 770 002e 80BD     	 pop {r7,pc}
 771              	 .cfi_endproc
 772              	.LFE130:
 774              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 775              	 .align 2
 776              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 777              	 .code 16
 778              	 .thumb_func
 780              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 781              	.LFB131:
 291:../Libraries/XMCLib/src/xmc_vadc.c **** 
 292:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 293:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 294:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 295:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 782              	 .loc 2 296 0
 783              	 .cfi_startproc
 784 0000 80B5     	 push {r7,lr}
 785              	.LCFI40:
 786              	 .cfi_def_cfa_offset 8
 787              	 .cfi_offset 7,-8
 788              	 .cfi_offset 14,-4
 789 0002 84B0     	 sub sp,sp,#16
 790              	.LCFI41:
 791              	 .cfi_def_cfa_offset 24
 792 0004 00AF     	 add r7,sp,#0
 793              	.LCFI42:
 794              	 .cfi_def_cfa_register 7
 795 0006 7860     	 str r0,[r7,#4]
 796 0008 081C     	 mov r0,r1
 797 000a 111C     	 mov r1,r2
 798 000c FB1C     	 add r3,r7,#3
 799 000e 021C     	 add r2,r0,#0
 800 0010 1A70     	 strb r2,[r3]
 801 0012 3B1C     	 mov r3,r7
 802 0014 0A1C     	 add r2,r1,#0
 803 0016 1A80     	 strh r2,[r3]
 297:../Libraries/XMCLib/src/xmc_vadc.c **** 
 298:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 299:../Libraries/XMCLib/src/xmc_vadc.c **** 
 300:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 302:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 303:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 306:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 804              	 .loc 2 306 0
 805 0018 7B68     	 ldr r3,[r7,#4]
 806 001a B822     	 mov r2,#184
 807 001c 9B58     	 ldr r3,[r3,r2]
 808 001e FB60     	 str r3,[r7,#12]
 307:../Libraries/XMCLib/src/xmc_vadc.c **** 
 308:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 809              	 .loc 2 308 0
 810 0020 FB1C     	 add r3,r7,#3
 811 0022 1B78     	 ldrb r3,[r3]
 812 0024 022B     	 cmp r3,#2
 813 0026 09D1     	 bne .L35
 309:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 310:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 814              	 .loc 2 310 0
 815 0028 FB68     	 ldr r3,[r7,#12]
 816 002a 1B0B     	 lsr r3,r3,#12
 817 002c 1B03     	 lsl r3,r3,#12
 818 002e FB60     	 str r3,[r7,#12]
 311:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 819              	 .loc 2 311 0
 820 0030 3B1C     	 mov r3,r7
 821 0032 1B88     	 ldrh r3,[r3]
 822 0034 FA68     	 ldr r2,[r7,#12]
 823 0036 1343     	 orr r3,r2
 824 0038 FB60     	 str r3,[r7,#12]
 825 003a 0DE0     	 b .L36
 826              	.L35:
 312:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 313:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 827              	 .loc 2 313 0
 828 003c FB1C     	 add r3,r7,#3
 829 003e 1B78     	 ldrb r3,[r3]
 830 0040 032B     	 cmp r3,#3
 831 0042 09D1     	 bne .L36
 314:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 315:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 832              	 .loc 2 315 0
 833 0044 FB68     	 ldr r3,[r7,#12]
 834 0046 084A     	 ldr r2,.L37
 835 0048 1340     	 and r3,r2
 836 004a FB60     	 str r3,[r7,#12]
 316:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 837              	 .loc 2 316 0
 838 004c 3B1C     	 mov r3,r7
 839 004e 1B88     	 ldrh r3,[r3]
 840 0050 1B04     	 lsl r3,r3,#16
 841 0052 FA68     	 ldr r2,[r7,#12]
 842 0054 1343     	 orr r3,r2
 843 0056 FB60     	 str r3,[r7,#12]
 844              	.L36:
 317:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 318:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 319:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 320:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 322:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 845              	 .loc 2 322 0
 846 0058 7B68     	 ldr r3,[r7,#4]
 847 005a B821     	 mov r1,#184
 848 005c FA68     	 ldr r2,[r7,#12]
 849 005e 5A50     	 str r2,[r3,r1]
 323:../Libraries/XMCLib/src/xmc_vadc.c **** 
 324:../Libraries/XMCLib/src/xmc_vadc.c **** }
 850              	 .loc 2 324 0
 851 0060 BD46     	 mov sp,r7
 852 0062 04B0     	 add sp,sp,#16
 853              	 
 854 0064 80BD     	 pop {r7,pc}
 855              	.L38:
 856 0066 C046     	 .align 2
 857              	.L37:
 858 0068 FFFF00F0 	 .word -268369921
 859              	 .cfi_endproc
 860              	.LFE131:
 862              	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 863              	 .align 2
 864              	 .global XMC_VADC_GLOBAL_SetCompareValue
 865              	 .code 16
 866              	 .thumb_func
 868              	XMC_VADC_GLOBAL_SetCompareValue:
 869              	.LFB132:
 325:../Libraries/XMCLib/src/xmc_vadc.c **** 
 326:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 327:../Libraries/XMCLib/src/xmc_vadc.c **** 
 328:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 329:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 330:../Libraries/XMCLib/src/xmc_vadc.c **** {
 870              	 .loc 2 330 0
 871              	 .cfi_startproc
 872 0000 80B5     	 push {r7,lr}
 873              	.LCFI43:
 874              	 .cfi_def_cfa_offset 8
 875              	 .cfi_offset 7,-8
 876              	 .cfi_offset 14,-4
 877 0002 82B0     	 sub sp,sp,#8
 878              	.LCFI44:
 879              	 .cfi_def_cfa_offset 16
 880 0004 00AF     	 add r7,sp,#0
 881              	.LCFI45:
 882              	 .cfi_def_cfa_register 7
 883 0006 7860     	 str r0,[r7,#4]
 884 0008 0A1C     	 mov r2,r1
 885 000a BB1C     	 add r3,r7,#2
 886 000c 1A80     	 strh r2,[r3]
 331:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 332:../Libraries/XMCLib/src/xmc_vadc.c **** 
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 887              	 .loc 2 333 0
 888 000e 7A68     	 ldr r2,[r7,#4]
 889 0010 C023     	 mov r3,#192
 890 0012 9B00     	 lsl r3,r3,#2
 891 0014 D358     	 ldr r3,[r2,r3]
 892 0016 1B0C     	 lsr r3,r3,#16
 893 0018 1904     	 lsl r1,r3,#16
 894 001a 7A68     	 ldr r2,[r7,#4]
 895 001c C023     	 mov r3,#192
 896 001e 9B00     	 lsl r3,r3,#2
 897 0020 D150     	 str r1,[r2,r3]
 334:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 898              	 .loc 2 334 0
 899 0022 7A68     	 ldr r2,[r7,#4]
 900 0024 C023     	 mov r3,#192
 901 0026 9B00     	 lsl r3,r3,#2
 902 0028 D258     	 ldr r2,[r2,r3]
 903 002a BB1C     	 add r3,r7,#2
 904 002c 1B88     	 ldrh r3,[r3]
 905 002e 9B00     	 lsl r3,r3,#2
 906 0030 1A43     	 orr r2,r3
 907 0032 111C     	 mov r1,r2
 908 0034 7A68     	 ldr r2,[r7,#4]
 909 0036 C023     	 mov r3,#192
 910 0038 9B00     	 lsl r3,r3,#2
 911 003a D150     	 str r1,[r2,r3]
 335:../Libraries/XMCLib/src/xmc_vadc.c **** }
 912              	 .loc 2 335 0
 913 003c BD46     	 mov sp,r7
 914 003e 02B0     	 add sp,sp,#8
 915              	 
 916 0040 80BD     	 pop {r7,pc}
 917              	 .cfi_endproc
 918              	.LFE132:
 920 0042 C046     	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 921              	 .align 2
 922              	 .global XMC_VADC_GLOBAL_GetCompareResult
 923              	 .code 16
 924              	 .thumb_func
 926              	XMC_VADC_GLOBAL_GetCompareResult:
 927              	.LFB133:
 336:../Libraries/XMCLib/src/xmc_vadc.c **** 
 337:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 338:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 339:../Libraries/XMCLib/src/xmc_vadc.c **** {
 928              	 .loc 2 339 0
 929              	 .cfi_startproc
 930 0000 80B5     	 push {r7,lr}
 931              	.LCFI46:
 932              	 .cfi_def_cfa_offset 8
 933              	 .cfi_offset 7,-8
 934              	 .cfi_offset 14,-4
 935 0002 84B0     	 sub sp,sp,#16
 936              	.LCFI47:
 937              	 .cfi_def_cfa_offset 24
 938 0004 00AF     	 add r7,sp,#0
 939              	.LCFI48:
 940              	 .cfi_def_cfa_register 7
 941 0006 7860     	 str r0,[r7,#4]
 340:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 341:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 342:../Libraries/XMCLib/src/xmc_vadc.c **** 
 343:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 344:../Libraries/XMCLib/src/xmc_vadc.c **** 
 345:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 942              	 .loc 2 345 0
 943 0008 7A68     	 ldr r2,[r7,#4]
 944 000a C023     	 mov r3,#192
 945 000c 9B00     	 lsl r3,r3,#2
 946 000e D358     	 ldr r3,[r2,r3]
 947 0010 BB60     	 str r3,[r7,#8]
 346:../Libraries/XMCLib/src/xmc_vadc.c **** 
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 948              	 .loc 2 347 0
 949 0012 BB68     	 ldr r3,[r7,#8]
 950 0014 002B     	 cmp r3,#0
 951 0016 08DA     	 bge .L41
 348:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 349:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 952              	 .loc 2 349 0
 953 0018 BB68     	 ldr r3,[r7,#8]
 954 001a 9B0F     	 lsr r3,r3,#30
 955 001c DAB2     	 uxtb r2,r3
 956 001e 0F23     	 mov r3,#15
 957 0020 FB18     	 add r3,r7,r3
 958 0022 0121     	 mov r1,#1
 959 0024 0A40     	 and r2,r1
 960 0026 1A70     	 strb r2,[r3]
 961 0028 03E0     	 b .L42
 962              	.L41:
 350:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 352:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 353:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 963              	 .loc 2 353 0
 964 002a 0F23     	 mov r3,#15
 965 002c FB18     	 add r3,r7,r3
 966 002e 0222     	 mov r2,#2
 967 0030 1A70     	 strb r2,[r3]
 968              	.L42:
 354:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 355:../Libraries/XMCLib/src/xmc_vadc.c **** 
 356:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 969              	 .loc 2 356 0
 970 0032 0F23     	 mov r3,#15
 971 0034 FB18     	 add r3,r7,r3
 972 0036 1B78     	 ldrb r3,[r3]
 357:../Libraries/XMCLib/src/xmc_vadc.c **** }
 973              	 .loc 2 357 0
 974 0038 181C     	 mov r0,r3
 975 003a BD46     	 mov sp,r7
 976 003c 04B0     	 add sp,sp,#16
 977              	 
 978 003e 80BD     	 pop {r7,pc}
 979              	 .cfi_endproc
 980              	.LFE133:
 982              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 983              	 .align 2
 984              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 985              	 .code 16
 986              	 .thumb_func
 988              	XMC_VADC_GLOBAL_BindGroupToEMux:
 989              	.LFB134:
 358:../Libraries/XMCLib/src/xmc_vadc.c **** 
 359:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 360:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 361:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 362:../Libraries/XMCLib/src/xmc_vadc.c **** {
 990              	 .loc 2 362 0
 991              	 .cfi_startproc
 992 0000 80B5     	 push {r7,lr}
 993              	.LCFI49:
 994              	 .cfi_def_cfa_offset 8
 995              	 .cfi_offset 7,-8
 996              	 .cfi_offset 14,-4
 997 0002 86B0     	 sub sp,sp,#24
 998              	.LCFI50:
 999              	 .cfi_def_cfa_offset 32
 1000 0004 00AF     	 add r7,sp,#0
 1001              	.LCFI51:
 1002              	 .cfi_def_cfa_register 7
 1003 0006 F860     	 str r0,[r7,#12]
 1004 0008 B960     	 str r1,[r7,#8]
 1005 000a 7A60     	 str r2,[r7,#4]
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 365:../Libraries/XMCLib/src/xmc_vadc.c **** 
 366:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 369:../Libraries/XMCLib/src/xmc_vadc.c **** 
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1006              	 .loc 2 370 0
 1007 000c BB68     	 ldr r3,[r7,#8]
 1008 000e 002B     	 cmp r3,#0
 1009 0010 04D1     	 bne .L45
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 372:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1010              	 .loc 2 372 0
 1011 0012 0023     	 mov r3,#0
 1012 0014 3B61     	 str r3,[r7,#16]
 373:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1013              	 .loc 2 373 0
 1014 0016 0F23     	 mov r3,#15
 1015 0018 7B61     	 str r3,[r7,#20]
 1016 001a 03E0     	 b .L46
 1017              	.L45:
 374:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 375:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 376:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 377:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1018              	 .loc 2 377 0
 1019 001c 0423     	 mov r3,#4
 1020 001e 3B61     	 str r3,[r7,#16]
 378:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1021              	 .loc 2 378 0
 1022 0020 F023     	 mov r3,#240
 1023 0022 7B61     	 str r3,[r7,#20]
 1024              	.L46:
 379:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 380:../Libraries/XMCLib/src/xmc_vadc.c **** 
 381:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1025              	 .loc 2 381 0
 1026 0024 FA68     	 ldr r2,[r7,#12]
 1027 0026 FC23     	 mov r3,#252
 1028 0028 9B00     	 lsl r3,r3,#2
 1029 002a D358     	 ldr r3,[r2,r3]
 1030 002c 7A69     	 ldr r2,[r7,#20]
 1031 002e D243     	 mvn r2,r2
 1032 0030 1A40     	 and r2,r3
 1033 0032 111C     	 mov r1,r2
 1034 0034 FA68     	 ldr r2,[r7,#12]
 1035 0036 FC23     	 mov r3,#252
 1036 0038 9B00     	 lsl r3,r3,#2
 1037 003a D150     	 str r1,[r2,r3]
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1038              	 .loc 2 382 0
 1039 003c FA68     	 ldr r2,[r7,#12]
 1040 003e FC23     	 mov r3,#252
 1041 0040 9B00     	 lsl r3,r3,#2
 1042 0042 D258     	 ldr r2,[r2,r3]
 1043 0044 3B69     	 ldr r3,[r7,#16]
 1044 0046 7968     	 ldr r1,[r7,#4]
 1045 0048 9940     	 lsl r1,r1,r3
 1046 004a 0B1C     	 mov r3,r1
 1047 004c 1A43     	 orr r2,r3
 1048 004e 111C     	 mov r1,r2
 1049 0050 FA68     	 ldr r2,[r7,#12]
 1050 0052 FC23     	 mov r3,#252
 1051 0054 9B00     	 lsl r3,r3,#2
 1052 0056 D150     	 str r1,[r2,r3]
 383:../Libraries/XMCLib/src/xmc_vadc.c **** 
 384:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1053              	 .loc 2 384 0
 1054 0058 BD46     	 mov sp,r7
 1055 005a 06B0     	 add sp,sp,#24
 1056              	 
 1057 005c 80BD     	 pop {r7,pc}
 1058              	 .cfi_endproc
 1059              	.LFE134:
 1061 005e C046     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1062              	 .align 2
 1063              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1064              	 .code 16
 1065              	 .thumb_func
 1067              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1068              	.LFB135:
 385:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 386:../Libraries/XMCLib/src/xmc_vadc.c **** 
 387:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 388:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 389:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1069              	 .loc 2 389 0
 1070              	 .cfi_startproc
 1071 0000 80B5     	 push {r7,lr}
 1072              	.LCFI52:
 1073              	 .cfi_def_cfa_offset 8
 1074              	 .cfi_offset 7,-8
 1075              	 .cfi_offset 14,-4
 1076 0002 84B0     	 sub sp,sp,#16
 1077              	.LCFI53:
 1078              	 .cfi_def_cfa_offset 24
 1079 0004 00AF     	 add r7,sp,#0
 1080              	.LCFI54:
 1081              	 .cfi_def_cfa_register 7
 1082 0006 7860     	 str r0,[r7,#4]
 1083 0008 0A1C     	 mov r2,r1
 1084 000a FB1C     	 add r3,r7,#3
 1085 000c 1A70     	 strb r2,[r3]
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   
 392:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 393:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 394:../Libraries/XMCLib/src/xmc_vadc.c **** 
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1086              	 .loc 2 395 0
 1087 000e FB1C     	 add r3,r7,#3
 1088 0010 1B78     	 ldrb r3,[r3]
 1089 0012 032B     	 cmp r3,#3
 1090 0014 04D9     	 bls .L48
 396:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 397:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1091              	 .loc 2 397 0
 1092 0016 FB1C     	 add r3,r7,#3
 1093 0018 1B78     	 ldrb r3,[r3]
 1094 001a 043B     	 sub r3,r3,#4
 1095 001c FB60     	 str r3,[r7,#12]
 1096 001e 02E0     	 b .L49
 1097              	.L48:
 398:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 399:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 400:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 401:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1098              	 .loc 2 401 0
 1099 0020 FB1C     	 add r3,r7,#3
 1100 0022 1B78     	 ldrb r3,[r3]
 1101 0024 FB60     	 str r3,[r7,#12]
 1102              	.L49:
 402:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 403:../Libraries/XMCLib/src/xmc_vadc.c **** 
 404:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1103              	 .loc 2 404 0
 1104 0026 7A68     	 ldr r2,[r7,#4]
 1105 0028 A023     	 mov r3,#160
 1106 002a 5B00     	 lsl r3,r3,#1
 1107 002c D358     	 ldr r3,[r2,r3]
 1108 002e 0B4A     	 ldr r2,.L50
 1109 0030 1340     	 and r3,r2
 1110 0032 191C     	 mov r1,r3
 1111 0034 7A68     	 ldr r2,[r7,#4]
 1112 0036 A023     	 mov r3,#160
 1113 0038 5B00     	 lsl r3,r3,#1
 1114 003a D150     	 str r1,[r2,r3]
 405:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1115              	 .loc 2 405 0
 1116 003c 7A68     	 ldr r2,[r7,#4]
 1117 003e A023     	 mov r3,#160
 1118 0040 5B00     	 lsl r3,r3,#1
 1119 0042 D258     	 ldr r2,[r2,r3]
 1120 0044 FB68     	 ldr r3,[r7,#12]
 1121 0046 1B04     	 lsl r3,r3,#16
 1122 0048 1A43     	 orr r2,r3
 1123 004a 111C     	 mov r1,r2
 1124 004c 7A68     	 ldr r2,[r7,#4]
 1125 004e A023     	 mov r3,#160
 1126 0050 5B00     	 lsl r3,r3,#1
 1127 0052 D150     	 str r1,[r2,r3]
 406:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1128              	 .loc 2 406 0
 1129 0054 BD46     	 mov sp,r7
 1130 0056 04B0     	 add sp,sp,#16
 1131              	 
 1132 0058 80BD     	 pop {r7,pc}
 1133              	.L51:
 1134 005a C046     	 .align 2
 1135              	.L50:
 1136 005c FFFFF0FF 	 .word -983041
 1137              	 .cfi_endproc
 1138              	.LFE135:
 1140              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1141              	 .align 2
 1142              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1143              	 .code 16
 1144              	 .thumb_func
 1146              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1147              	.LFB136:
 407:../Libraries/XMCLib/src/xmc_vadc.c **** 
 408:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 409:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 410:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1148              	 .loc 2 410 0
 1149              	 .cfi_startproc
 1150 0000 80B5     	 push {r7,lr}
 1151              	.LCFI55:
 1152              	 .cfi_def_cfa_offset 8
 1153              	 .cfi_offset 7,-8
 1154              	 .cfi_offset 14,-4
 1155 0002 84B0     	 sub sp,sp,#16
 1156              	.LCFI56:
 1157              	 .cfi_def_cfa_offset 24
 1158 0004 00AF     	 add r7,sp,#0
 1159              	.LCFI57:
 1160              	 .cfi_def_cfa_register 7
 1161 0006 7860     	 str r0,[r7,#4]
 1162 0008 0A1C     	 mov r2,r1
 1163 000a FB1C     	 add r3,r7,#3
 1164 000c 1A70     	 strb r2,[r3]
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   
 413:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 414:../Libraries/XMCLib/src/xmc_vadc.c **** 
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1165              	 .loc 2 415 0
 1166 000e FB1C     	 add r3,r7,#3
 1167 0010 1B78     	 ldrb r3,[r3]
 1168 0012 032B     	 cmp r3,#3
 1169 0014 04D9     	 bls .L53
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1170              	 .loc 2 417 0
 1171 0016 FB1C     	 add r3,r7,#3
 1172 0018 1B78     	 ldrb r3,[r3]
 1173 001a 043B     	 sub r3,r3,#4
 1174 001c FB60     	 str r3,[r7,#12]
 1175 001e 02E0     	 b .L54
 1176              	.L53:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 421:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1177              	 .loc 2 421 0
 1178 0020 FB1C     	 add r3,r7,#3
 1179 0022 1B78     	 ldrb r3,[r3]
 1180 0024 FB60     	 str r3,[r7,#12]
 1181              	.L54:
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1182              	 .loc 2 424 0
 1183 0026 7A68     	 ldr r2,[r7,#4]
 1184 0028 A023     	 mov r3,#160
 1185 002a 5B00     	 lsl r3,r3,#1
 1186 002c D358     	 ldr r3,[r2,r3]
 1187 002e 0F22     	 mov r2,#15
 1188 0030 9343     	 bic r3,r2
 1189 0032 191C     	 mov r1,r3
 1190 0034 7A68     	 ldr r2,[r7,#4]
 1191 0036 A023     	 mov r3,#160
 1192 0038 5B00     	 lsl r3,r3,#1
 1193 003a D150     	 str r1,[r2,r3]
 425:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1194              	 .loc 2 425 0
 1195 003c 7A68     	 ldr r2,[r7,#4]
 1196 003e A023     	 mov r3,#160
 1197 0040 5B00     	 lsl r3,r3,#1
 1198 0042 D258     	 ldr r2,[r2,r3]
 1199 0044 FB68     	 ldr r3,[r7,#12]
 1200 0046 1A43     	 orr r2,r3
 1201 0048 111C     	 mov r1,r2
 1202 004a 7A68     	 ldr r2,[r7,#4]
 1203 004c A023     	 mov r3,#160
 1204 004e 5B00     	 lsl r3,r3,#1
 1205 0050 D150     	 str r1,[r2,r3]
 426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1206              	 .loc 2 426 0
 1207 0052 BD46     	 mov sp,r7
 1208 0054 04B0     	 add sp,sp,#16
 1209              	 
 1210 0056 80BD     	 pop {r7,pc}
 1211              	 .cfi_endproc
 1212              	.LFE136:
 1214              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1215              	 .align 2
 1216              	 .global XMC_VADC_GROUP_Init
 1217              	 .code 16
 1218              	 .thumb_func
 1220              	XMC_VADC_GROUP_Init:
 1221              	.LFB137:
 427:../Libraries/XMCLib/src/xmc_vadc.c **** 
 428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 429:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 430:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 431:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1222              	 .loc 2 431 0
 1223              	 .cfi_startproc
 1224 0000 80B5     	 push {r7,lr}
 1225              	.LCFI58:
 1226              	 .cfi_def_cfa_offset 8
 1227              	 .cfi_offset 7,-8
 1228              	 .cfi_offset 14,-4
 1229 0002 82B0     	 sub sp,sp,#8
 1230              	.LCFI59:
 1231              	 .cfi_def_cfa_offset 16
 1232 0004 00AF     	 add r7,sp,#0
 1233              	.LCFI60:
 1234              	 .cfi_def_cfa_register 7
 1235 0006 7860     	 str r0,[r7,#4]
 1236 0008 3960     	 str r1,[r7]
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 433:../Libraries/XMCLib/src/xmc_vadc.c **** 
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1237              	 .loc 2 435 0
 1238 000a 7A68     	 ldr r2,[r7,#4]
 1239 000c 3B68     	 ldr r3,[r7]
 1240 000e 5B68     	 ldr r3,[r3,#4]
 1241 0010 101C     	 mov r0,r2
 1242 0012 191C     	 mov r1,r3
 1243 0014 0022     	 mov r2,#0
 1244 0016 0023     	 mov r3,#0
 1245 0018 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1246              	 .loc 2 436 0
 1247 001c 7A68     	 ldr r2,[r7,#4]
 1248 001e 3B68     	 ldr r3,[r7]
 1249 0020 5B68     	 ldr r3,[r3,#4]
 1250 0022 101C     	 mov r0,r2
 1251 0024 191C     	 mov r1,r3
 1252 0026 0122     	 mov r2,#1
 1253 0028 0023     	 mov r3,#0
 1254 002a FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 437:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1255              	 .loc 2 437 0
 1256 002e 7A68     	 ldr r2,[r7,#4]
 1257 0030 3B68     	 ldr r3,[r7]
 1258 0032 9B68     	 ldr r3,[r3,#8]
 1259 0034 101C     	 mov r0,r2
 1260 0036 191C     	 mov r1,r3
 1261 0038 0022     	 mov r2,#0
 1262 003a 0123     	 mov r3,#1
 1263 003c FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1264              	 .loc 2 438 0
 1265 0040 7A68     	 ldr r2,[r7,#4]
 1266 0042 3B68     	 ldr r3,[r7]
 1267 0044 9B68     	 ldr r3,[r3,#8]
 1268 0046 101C     	 mov r0,r2
 1269 0048 191C     	 mov r1,r3
 1270 004a 0122     	 mov r2,#1
 1271 004c 0123     	 mov r3,#1
 1272 004e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 439:../Libraries/XMCLib/src/xmc_vadc.c **** 
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1273              	 .loc 2 440 0
 1274 0052 3B68     	 ldr r3,[r7]
 1275 0054 1A69     	 ldr r2,[r3,#16]
 1276 0056 7B68     	 ldr r3,[r7,#4]
 1277 0058 8021     	 mov r1,#128
 1278 005a 5A50     	 str r2,[r3,r1]
 441:../Libraries/XMCLib/src/xmc_vadc.c **** 
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1279              	 .loc 2 442 0
 1280 005c 3B68     	 ldr r3,[r7]
 1281 005e DA68     	 ldr r2,[r3,#12]
 1282 0060 7B68     	 ldr r3,[r7,#4]
 1283 0062 B821     	 mov r1,#184
 1284 0064 5A50     	 str r2,[r3,r1]
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 445:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1285              	 .loc 2 445 0
 1286 0066 7A68     	 ldr r2,[r7,#4]
 1287 0068 3B68     	 ldr r3,[r7]
 1288 006a 1B68     	 ldr r3,[r3]
 1289 006c 101C     	 mov r0,r2
 1290 006e 191C     	 mov r1,r3
 1291 0070 FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 446:../Libraries/XMCLib/src/xmc_vadc.c **** 
 447:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1292              	 .loc 2 447 0
 1293 0074 BD46     	 mov sp,r7
 1294 0076 02B0     	 add sp,sp,#8
 1295              	 
 1296 0078 80BD     	 pop {r7,pc}
 1297              	 .cfi_endproc
 1298              	.LFE137:
 1300 007a C046     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1301              	 .align 2
 1302              	 .global XMC_VADC_GROUP_InputClassInit
 1303              	 .code 16
 1304              	 .thumb_func
 1306              	XMC_VADC_GROUP_InputClassInit:
 1307              	.LFB138:
 448:../Libraries/XMCLib/src/xmc_vadc.c **** 
 449:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 450:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 451:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 452:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1308              	 .loc 2 452 0
 1309              	 .cfi_startproc
 1310 0000 80B5     	 push {r7,lr}
 1311              	.LCFI61:
 1312              	 .cfi_def_cfa_offset 8
 1313              	 .cfi_offset 7,-8
 1314              	 .cfi_offset 14,-4
 1315 0002 8CB0     	 sub sp,sp,#48
 1316              	.LCFI62:
 1317              	 .cfi_def_cfa_offset 56
 1318 0004 00AF     	 add r7,sp,#0
 1319              	.LCFI63:
 1320              	 .cfi_def_cfa_register 7
 1321 0006 F860     	 str r0,[r7,#12]
 1322 0008 B960     	 str r1,[r7,#8]
 1323 000a 3B60     	 str r3,[r7]
 1324 000c FB1D     	 add r3,r7,#7
 1325 000e 1A70     	 strb r2,[r3]
 453:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 457:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 459:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 460:../Libraries/XMCLib/src/xmc_vadc.c **** 
 461:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 463:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 464:../Libraries/XMCLib/src/xmc_vadc.c **** 
 465:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 466:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 467:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 468:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 469:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1326              	 .loc 2 469 0
 1327 0010 FB1D     	 add r3,r7,#7
 1328 0012 1B78     	 ldrb r3,[r3]
 1329 0014 002B     	 cmp r3,#0
 1330 0016 19D1     	 bne .L57
 470:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 471:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1331              	 .loc 2 471 0
 1332 0018 0823     	 mov r3,#8
 1333 001a FB62     	 str r3,[r7,#44]
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1334              	 .loc 2 472 0
 1335 001c E023     	 mov r3,#224
 1336 001e DB00     	 lsl r3,r3,#3
 1337 0020 7B62     	 str r3,[r7,#36]
 473:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1338              	 .loc 2 473 0
 1339 0022 0023     	 mov r3,#0
 1340 0024 BB62     	 str r3,[r7,#40]
 474:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1341              	 .loc 2 474 0
 1342 0026 1F23     	 mov r3,#31
 1343 0028 3B62     	 str r3,[r7,#32]
 475:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1344              	 .loc 2 475 0
 1345 002a 0823     	 mov r3,#8
 1346 002c FB18     	 add r3,r7,r3
 1347 002e 1B78     	 ldrb r3,[r3]
 1348 0030 DB06     	 lsl r3,r3,#27
 1349 0032 DB0E     	 lsr r3,r3,#27
 1350 0034 DBB2     	 uxtb r3,r3
 1351 0036 FB61     	 str r3,[r7,#28]
 476:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1352              	 .loc 2 476 0
 1353 0038 0923     	 mov r3,#9
 1354 003a FB18     	 add r3,r7,r3
 1355 003c 1B78     	 ldrb r3,[r3]
 1356 003e 5B07     	 lsl r3,r3,#29
 1357 0040 5B0F     	 lsr r3,r3,#29
 1358 0042 DAB2     	 uxtb r2,r3
 1359 0044 1B23     	 mov r3,#27
 1360 0046 FB18     	 add r3,r7,r3
 1361 0048 1A70     	 strb r2,[r3]
 1362 004a 19E0     	 b .L58
 1363              	.L57:
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 478:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 480:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1364              	 .loc 2 480 0
 1365 004c 1823     	 mov r3,#24
 1366 004e FB62     	 str r3,[r7,#44]
 481:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1367              	 .loc 2 481 0
 1368 0050 E023     	 mov r3,#224
 1369 0052 DB04     	 lsl r3,r3,#19
 1370 0054 7B62     	 str r3,[r7,#36]
 482:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1371              	 .loc 2 482 0
 1372 0056 1023     	 mov r3,#16
 1373 0058 BB62     	 str r3,[r7,#40]
 483:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1374              	 .loc 2 483 0
 1375 005a F823     	 mov r3,#248
 1376 005c 5B03     	 lsl r3,r3,#13
 1377 005e 3B62     	 str r3,[r7,#32]
 484:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1378              	 .loc 2 484 0
 1379 0060 0A23     	 mov r3,#10
 1380 0062 FB18     	 add r3,r7,r3
 1381 0064 1B78     	 ldrb r3,[r3]
 1382 0066 DB06     	 lsl r3,r3,#27
 1383 0068 DB0E     	 lsr r3,r3,#27
 1384 006a DBB2     	 uxtb r3,r3
 1385 006c FB61     	 str r3,[r7,#28]
 485:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1386              	 .loc 2 485 0
 1387 006e 0B23     	 mov r3,#11
 1388 0070 FB18     	 add r3,r7,r3
 1389 0072 1B78     	 ldrb r3,[r3]
 1390 0074 5B07     	 lsl r3,r3,#29
 1391 0076 5B0F     	 lsr r3,r3,#29
 1392 0078 DAB2     	 uxtb r2,r3
 1393 007a 1B23     	 mov r3,#27
 1394 007c FB18     	 add r3,r7,r3
 1395 007e 1A70     	 strb r2,[r3]
 1396              	.L58:
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 487:../Libraries/XMCLib/src/xmc_vadc.c **** 
 488:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1397              	 .loc 2 489 0
 1398 0080 FB68     	 ldr r3,[r7,#12]
 1399 0082 3A68     	 ldr r2,[r7]
 1400 0084 2832     	 add r2,r2,#40
 1401 0086 9200     	 lsl r2,r2,#2
 1402 0088 D358     	 ldr r3,[r2,r3]
 1403 008a 7B61     	 str r3,[r7,#20]
 490:../Libraries/XMCLib/src/xmc_vadc.c **** 
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1404              	 .loc 2 492 0
 1405 008c 7B6A     	 ldr r3,[r7,#36]
 1406 008e DA43     	 mvn r2,r3
 1407 0090 7B69     	 ldr r3,[r7,#20]
 1408 0092 1340     	 and r3,r2
 1409 0094 7B61     	 str r3,[r7,#20]
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1410              	 .loc 2 493 0
 1411 0096 1B23     	 mov r3,#27
 1412 0098 FB18     	 add r3,r7,r3
 1413 009a 1A78     	 ldrb r2,[r3]
 1414 009c FB6A     	 ldr r3,[r7,#44]
 1415 009e 9A40     	 lsl r2,r2,r3
 1416 00a0 131C     	 mov r3,r2
 1417 00a2 7A69     	 ldr r2,[r7,#20]
 1418 00a4 1343     	 orr r3,r2
 1419 00a6 7B61     	 str r3,[r7,#20]
 494:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1420              	 .loc 2 494 0
 1421 00a8 3B6A     	 ldr r3,[r7,#32]
 1422 00aa DA43     	 mvn r2,r3
 1423 00ac 7B69     	 ldr r3,[r7,#20]
 1424 00ae 1340     	 and r3,r2
 1425 00b0 7B61     	 str r3,[r7,#20]
 495:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1426              	 .loc 2 495 0
 1427 00b2 BB6A     	 ldr r3,[r7,#40]
 1428 00b4 FA69     	 ldr r2,[r7,#28]
 1429 00b6 9A40     	 lsl r2,r2,r3
 1430 00b8 131C     	 mov r3,r2
 1431 00ba 7A69     	 ldr r2,[r7,#20]
 1432 00bc 1343     	 orr r3,r2
 1433 00be 7B61     	 str r3,[r7,#20]
 496:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1434              	 .loc 2 496 0
 1435 00c0 FB68     	 ldr r3,[r7,#12]
 1436 00c2 3A68     	 ldr r2,[r7]
 1437 00c4 2832     	 add r2,r2,#40
 1438 00c6 9200     	 lsl r2,r2,#2
 1439 00c8 7969     	 ldr r1,[r7,#20]
 1440 00ca D150     	 str r1,[r2,r3]
 497:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1441              	 .loc 2 497 0
 1442 00cc BD46     	 mov sp,r7
 1443 00ce 0CB0     	 add sp,sp,#48
 1444              	 
 1445 00d0 80BD     	 pop {r7,pc}
 1446              	 .cfi_endproc
 1447              	.LFE138:
 1449 00d2 C046     	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1450              	 .align 2
 1451              	 .global XMC_VADC_GROUP_SetPowerMode
 1452              	 .code 16
 1453              	 .thumb_func
 1455              	XMC_VADC_GROUP_SetPowerMode:
 1456              	.LFB139:
 498:../Libraries/XMCLib/src/xmc_vadc.c **** 
 499:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 500:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 501:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1457              	 .loc 2 501 0
 1458              	 .cfi_startproc
 1459 0000 80B5     	 push {r7,lr}
 1460              	.LCFI64:
 1461              	 .cfi_def_cfa_offset 8
 1462              	 .cfi_offset 7,-8
 1463              	 .cfi_offset 14,-4
 1464 0002 84B0     	 sub sp,sp,#16
 1465              	.LCFI65:
 1466              	 .cfi_def_cfa_offset 24
 1467 0004 00AF     	 add r7,sp,#0
 1468              	.LCFI66:
 1469              	 .cfi_def_cfa_register 7
 1470 0006 7860     	 str r0,[r7,#4]
 1471 0008 0A1C     	 mov r2,r1
 1472 000a FB1C     	 add r3,r7,#3
 1473 000c 1A70     	 strb r2,[r3]
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 503:../Libraries/XMCLib/src/xmc_vadc.c **** 
 504:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 505:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 506:../Libraries/XMCLib/src/xmc_vadc.c **** 
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1474              	 .loc 2 507 0
 1475 000e 7B68     	 ldr r3,[r7,#4]
 1476 0010 8022     	 mov r2,#128
 1477 0012 9B58     	 ldr r3,[r3,r2]
 1478 0014 FB60     	 str r3,[r7,#12]
 508:../Libraries/XMCLib/src/xmc_vadc.c **** 
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1479              	 .loc 2 509 0
 1480 0016 FB68     	 ldr r3,[r7,#12]
 1481 0018 0322     	 mov r2,#3
 1482 001a 9343     	 bic r3,r2
 1483 001c FB60     	 str r3,[r7,#12]
 510:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1484              	 .loc 2 510 0
 1485 001e FB1C     	 add r3,r7,#3
 1486 0020 1B78     	 ldrb r3,[r3]
 1487 0022 FA68     	 ldr r2,[r7,#12]
 1488 0024 1343     	 orr r3,r2
 1489 0026 FB60     	 str r3,[r7,#12]
 511:../Libraries/XMCLib/src/xmc_vadc.c **** 
 512:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1490              	 .loc 2 512 0
 1491 0028 7B68     	 ldr r3,[r7,#4]
 1492 002a 8021     	 mov r1,#128
 1493 002c FA68     	 ldr r2,[r7,#12]
 1494 002e 5A50     	 str r2,[r3,r1]
 513:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1495              	 .loc 2 513 0
 1496 0030 BD46     	 mov sp,r7
 1497 0032 04B0     	 add sp,sp,#16
 1498              	 
 1499 0034 80BD     	 pop {r7,pc}
 1500              	 .cfi_endproc
 1501              	.LFE139:
 1503 0036 C046     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1504              	 .align 2
 1505              	 .global XMC_VADC_GROUP_SetSyncSlave
 1506              	 .code 16
 1507              	 .thumb_func
 1509              	XMC_VADC_GROUP_SetSyncSlave:
 1510              	.LFB140:
 514:../Libraries/XMCLib/src/xmc_vadc.c **** 
 515:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 516:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 517:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1511              	 .loc 2 517 0
 1512              	 .cfi_startproc
 1513 0000 80B5     	 push {r7,lr}
 1514              	.LCFI67:
 1515              	 .cfi_def_cfa_offset 8
 1516              	 .cfi_offset 7,-8
 1517              	 .cfi_offset 14,-4
 1518 0002 86B0     	 sub sp,sp,#24
 1519              	.LCFI68:
 1520              	 .cfi_def_cfa_offset 32
 1521 0004 00AF     	 add r7,sp,#0
 1522              	.LCFI69:
 1523              	 .cfi_def_cfa_register 7
 1524 0006 F860     	 str r0,[r7,#12]
 1525 0008 B960     	 str r1,[r7,#8]
 1526 000a 7A60     	 str r2,[r7,#4]
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 519:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 520:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 521:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 524:../Libraries/XMCLib/src/xmc_vadc.c **** 
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1527              	 .loc 2 526 0
 1528 000c 7A68     	 ldr r2,[r7,#4]
 1529 000e BB68     	 ldr r3,[r7,#8]
 1530 0010 9A42     	 cmp r2,r3
 1531 0012 02D9     	 bls .L61
 527:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 528:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1532              	 .loc 2 528 0
 1533 0014 BB68     	 ldr r3,[r7,#8]
 1534 0016 0133     	 add r3,r3,#1
 1535 0018 BB60     	 str r3,[r7,#8]
 1536              	.L61:
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 531:../Libraries/XMCLib/src/xmc_vadc.c ****   
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 533:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1537              	 .loc 2 533 0
 1538 001a FB68     	 ldr r3,[r7,#12]
 1539 001c C022     	 mov r2,#192
 1540 001e 9B58     	 ldr r3,[r3,r2]
 1541 0020 7B61     	 str r3,[r7,#20]
 534:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1542              	 .loc 2 534 0
 1543 0022 7B69     	 ldr r3,[r7,#20]
 1544 0024 0322     	 mov r2,#3
 1545 0026 9343     	 bic r3,r2
 1546 0028 7B61     	 str r3,[r7,#20]
 535:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1547              	 .loc 2 535 0
 1548 002a 7A69     	 ldr r2,[r7,#20]
 1549 002c BB68     	 ldr r3,[r7,#8]
 1550 002e 1343     	 orr r3,r2
 1551 0030 7B61     	 str r3,[r7,#20]
 536:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1552              	 .loc 2 536 0
 1553 0032 FB68     	 ldr r3,[r7,#12]
 1554 0034 C021     	 mov r1,#192
 1555 0036 7A69     	 ldr r2,[r7,#20]
 1556 0038 5A50     	 str r2,[r3,r1]
 537:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1557              	 .loc 2 537 0
 1558 003a BD46     	 mov sp,r7
 1559 003c 06B0     	 add sp,sp,#24
 1560              	 
 1561 003e 80BD     	 pop {r7,pc}
 1562              	 .cfi_endproc
 1563              	.LFE140:
 1565              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1566              	 .align 2
 1567              	 .global XMC_VADC_GROUP_SetSyncMaster
 1568              	 .code 16
 1569              	 .thumb_func
 1571              	XMC_VADC_GROUP_SetSyncMaster:
 1572              	.LFB141:
 538:../Libraries/XMCLib/src/xmc_vadc.c **** 
 539:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 540:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 541:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1573              	 .loc 2 541 0
 1574              	 .cfi_startproc
 1575 0000 80B5     	 push {r7,lr}
 1576              	.LCFI70:
 1577              	 .cfi_def_cfa_offset 8
 1578              	 .cfi_offset 7,-8
 1579              	 .cfi_offset 14,-4
 1580 0002 84B0     	 sub sp,sp,#16
 1581              	.LCFI71:
 1582              	 .cfi_def_cfa_offset 24
 1583 0004 00AF     	 add r7,sp,#0
 1584              	.LCFI72:
 1585              	 .cfi_def_cfa_register 7
 1586 0006 7860     	 str r0,[r7,#4]
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 543:../Libraries/XMCLib/src/xmc_vadc.c **** 
 544:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 545:../Libraries/XMCLib/src/xmc_vadc.c **** 
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1587              	 .loc 2 546 0
 1588 0008 7B68     	 ldr r3,[r7,#4]
 1589 000a C022     	 mov r2,#192
 1590 000c 9B58     	 ldr r3,[r3,r2]
 1591 000e FB60     	 str r3,[r7,#12]
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1592              	 .loc 2 547 0
 1593 0010 FB68     	 ldr r3,[r7,#12]
 1594 0012 0322     	 mov r2,#3
 1595 0014 9343     	 bic r3,r2
 1596 0016 FB60     	 str r3,[r7,#12]
 548:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1597              	 .loc 2 548 0
 1598 0018 7B68     	 ldr r3,[r7,#4]
 1599 001a C021     	 mov r1,#192
 1600 001c FA68     	 ldr r2,[r7,#12]
 1601 001e 5A50     	 str r2,[r3,r1]
 549:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1602              	 .loc 2 549 0
 1603 0020 BD46     	 mov sp,r7
 1604 0022 04B0     	 add sp,sp,#16
 1605              	 
 1606 0024 80BD     	 pop {r7,pc}
 1607              	 .cfi_endproc
 1608              	.LFE141:
 1610 0026 C046     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1611              	 .align 2
 1612              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1613              	 .code 16
 1614              	 .thumb_func
 1616              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1617              	.LFB142:
 550:../Libraries/XMCLib/src/xmc_vadc.c **** 
 551:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 552:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 553:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1618              	 .loc 2 553 0
 1619              	 .cfi_startproc
 1620 0000 80B5     	 push {r7,lr}
 1621              	.LCFI73:
 1622              	 .cfi_def_cfa_offset 8
 1623              	 .cfi_offset 7,-8
 1624              	 .cfi_offset 14,-4
 1625 0002 82B0     	 sub sp,sp,#8
 1626              	.LCFI74:
 1627              	 .cfi_def_cfa_offset 16
 1628 0004 00AF     	 add r7,sp,#0
 1629              	.LCFI75:
 1630              	 .cfi_def_cfa_register 7
 1631 0006 7860     	 str r0,[r7,#4]
 1632 0008 3960     	 str r1,[r7]
 554:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 557:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 558:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 559:../Libraries/XMCLib/src/xmc_vadc.c ****  
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 561:../Libraries/XMCLib/src/xmc_vadc.c ****  
 562:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 563:../Libraries/XMCLib/src/xmc_vadc.c ****  
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel  =  slave_group;
 565:../Libraries/XMCLib/src/xmc_vadc.c **** 
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 567:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 568:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 569:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 570:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 571:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 572:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 574:../Libraries/XMCLib/src/xmc_vadc.c **** 
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 577:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 578:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 581:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 582:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 583:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 584:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 585:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 586:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 587:../Libraries/XMCLib/src/xmc_vadc.c **** 
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (uint32_t)((uint32_t)1 << ready_pos);
 589:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 590:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= ((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 1633              	 .loc 2 590 0
 1634 000a 7B68     	 ldr r3,[r7,#4]
 1635 000c C022     	 mov r2,#192
 1636 000e 9B58     	 ldr r3,[r3,r2]
 1637 0010 1022     	 mov r2,#16
 1638 0012 1A43     	 orr r2,r3
 1639 0014 7B68     	 ldr r3,[r7,#4]
 1640 0016 C021     	 mov r1,#192
 1641 0018 5A50     	 str r2,[r3,r1]
 591:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 592:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1642              	 .loc 2 592 0
 1643 001a BD46     	 mov sp,r7
 1644 001c 02B0     	 add sp,sp,#8
 1645              	 
 1646 001e 80BD     	 pop {r7,pc}
 1647              	 .cfi_endproc
 1648              	.LFE142:
 1650              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1651              	 .align 2
 1652              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1653              	 .code 16
 1654              	 .thumb_func
 1656              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1657              	.LFB143:
 593:../Libraries/XMCLib/src/xmc_vadc.c **** 
 594:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 595:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 596:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1658              	 .loc 2 596 0
 1659              	 .cfi_startproc
 1660 0000 80B5     	 push {r7,lr}
 1661              	.LCFI76:
 1662              	 .cfi_def_cfa_offset 8
 1663              	 .cfi_offset 7,-8
 1664              	 .cfi_offset 14,-4
 1665 0002 82B0     	 sub sp,sp,#8
 1666              	.LCFI77:
 1667              	 .cfi_def_cfa_offset 16
 1668 0004 00AF     	 add r7,sp,#0
 1669              	.LCFI78:
 1670              	 .cfi_def_cfa_register 7
 1671 0006 7860     	 str r0,[r7,#4]
 1672 0008 3960     	 str r1,[r7]
 597:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 600:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 601:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 603:../Libraries/XMCLib/src/xmc_vadc.c **** 
 604:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 605:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel = slave_group;
 606:../Libraries/XMCLib/src/xmc_vadc.c **** 
 607:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 609:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 610:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 613:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 614:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 615:../Libraries/XMCLib/src/xmc_vadc.c **** 
 616:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 617:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 618:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 622:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 625:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 626:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 627:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 628:../Libraries/XMCLib/src/xmc_vadc.c **** 
 629:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)((uint32_t)1 << ready_pos));
 630:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 631:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 1673              	 .loc 2 631 0
 1674 000a 7B68     	 ldr r3,[r7,#4]
 1675 000c C022     	 mov r2,#192
 1676 000e 9B58     	 ldr r3,[r3,r2]
 1677 0010 1022     	 mov r2,#16
 1678 0012 9343     	 bic r3,r2
 1679 0014 1A1C     	 mov r2,r3
 1680 0016 7B68     	 ldr r3,[r7,#4]
 1681 0018 C021     	 mov r1,#192
 1682 001a 5A50     	 str r2,[r3,r1]
 632:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 633:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1683              	 .loc 2 633 0
 1684 001c BD46     	 mov sp,r7
 1685 001e 02B0     	 add sp,sp,#8
 1686              	 
 1687 0020 80BD     	 pop {r7,pc}
 1688              	 .cfi_endproc
 1689              	.LFE143:
 1691 0022 C046     	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1692              	 .align 2
 1693              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1694              	 .code 16
 1695              	 .thumb_func
 1697              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1698              	.LFB144:
 634:../Libraries/XMCLib/src/xmc_vadc.c **** 
 635:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 636:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 637:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1699              	 .loc 2 637 0
 1700              	 .cfi_startproc
 1701 0000 80B5     	 push {r7,lr}
 1702              	.LCFI79:
 1703              	 .cfi_def_cfa_offset 8
 1704              	 .cfi_offset 7,-8
 1705              	 .cfi_offset 14,-4
 1706 0002 84B0     	 sub sp,sp,#16
 1707              	.LCFI80:
 1708              	 .cfi_def_cfa_offset 24
 1709 0004 00AF     	 add r7,sp,#0
 1710              	.LCFI81:
 1711              	 .cfi_def_cfa_register 7
 1712 0006 7860     	 str r0,[r7,#4]
 1713 0008 3960     	 str r1,[r7]
 638:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 639:../Libraries/XMCLib/src/xmc_vadc.c **** 
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 641:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 642:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 643:../Libraries/XMCLib/src/xmc_vadc.c **** 
 644:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1714              	 .loc 2 644 0
 1715 000a 7B68     	 ldr r3,[r7,#4]
 1716 000c C022     	 mov r2,#192
 1717 000e 9B58     	 ldr r3,[r3,r2]
 1718 0010 FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_vadc.c **** 
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1719              	 .loc 2 646 0
 1720 0012 FB68     	 ldr r3,[r7,#12]
 1721 0014 0322     	 mov r2,#3
 1722 0016 1340     	 and r3,r2
 1723 0018 0DD1     	 bne .L65
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 648:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1724              	 .loc 2 648 0
 1725 001a 7B68     	 ldr r3,[r7,#4]
 1726 001c 3A68     	 ldr r2,[r7]
 1727 001e 8032     	 add r2,r2,#128
 1728 0020 9200     	 lsl r2,r2,#2
 1729 0022 D358     	 ldr r3,[r2,r3]
 1730 0024 8022     	 mov r2,#128
 1731 0026 D200     	 lsl r2,r2,#3
 1732 0028 1A43     	 orr r2,r3
 1733 002a 111C     	 mov r1,r2
 1734 002c 7B68     	 ldr r3,[r7,#4]
 1735 002e 3A68     	 ldr r2,[r7]
 1736 0030 8032     	 add r2,r2,#128
 1737 0032 9200     	 lsl r2,r2,#2
 1738 0034 D150     	 str r1,[r2,r3]
 1739              	.L65:
 649:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 650:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1740              	 .loc 2 650 0
 1741 0036 BD46     	 mov sp,r7
 1742 0038 04B0     	 add sp,sp,#16
 1743              	 
 1744 003a 80BD     	 pop {r7,pc}
 1745              	 .cfi_endproc
 1746              	.LFE144:
 1748              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1749              	 .align 2
 1750              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1751              	 .code 16
 1752              	 .thumb_func
 1754              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1755              	.LFB145:
 651:../Libraries/XMCLib/src/xmc_vadc.c **** 
 652:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 653:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 654:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1756              	 .loc 2 654 0
 1757              	 .cfi_startproc
 1758 0000 80B5     	 push {r7,lr}
 1759              	.LCFI82:
 1760              	 .cfi_def_cfa_offset 8
 1761              	 .cfi_offset 7,-8
 1762              	 .cfi_offset 14,-4
 1763 0002 84B0     	 sub sp,sp,#16
 1764              	.LCFI83:
 1765              	 .cfi_def_cfa_offset 24
 1766 0004 00AF     	 add r7,sp,#0
 1767              	.LCFI84:
 1768              	 .cfi_def_cfa_register 7
 1769 0006 7860     	 str r0,[r7,#4]
 1770 0008 3960     	 str r1,[r7]
 655:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 656:../Libraries/XMCLib/src/xmc_vadc.c **** 
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 658:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 659:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 660:../Libraries/XMCLib/src/xmc_vadc.c **** 
 661:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1771              	 .loc 2 661 0
 1772 000a 7B68     	 ldr r3,[r7,#4]
 1773 000c C022     	 mov r2,#192
 1774 000e 9B58     	 ldr r3,[r3,r2]
 1775 0010 FB60     	 str r3,[r7,#12]
 662:../Libraries/XMCLib/src/xmc_vadc.c **** 
 663:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1776              	 .loc 2 663 0
 1777 0012 FB68     	 ldr r3,[r7,#12]
 1778 0014 0322     	 mov r2,#3
 1779 0016 1340     	 and r3,r2
 1780 0018 0CD0     	 beq .L67
 664:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 665:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1781              	 .loc 2 665 0
 1782 001a 7B68     	 ldr r3,[r7,#4]
 1783 001c 3A68     	 ldr r2,[r7]
 1784 001e 8032     	 add r2,r2,#128
 1785 0020 9200     	 lsl r2,r2,#2
 1786 0022 D358     	 ldr r3,[r2,r3]
 1787 0024 054A     	 ldr r2,.L69
 1788 0026 1340     	 and r3,r2
 1789 0028 191C     	 mov r1,r3
 1790 002a 7B68     	 ldr r3,[r7,#4]
 1791 002c 3A68     	 ldr r2,[r7]
 1792 002e 8032     	 add r2,r2,#128
 1793 0030 9200     	 lsl r2,r2,#2
 1794 0032 D150     	 str r1,[r2,r3]
 1795              	.L67:
 666:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 667:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1796              	 .loc 2 667 0
 1797 0034 BD46     	 mov sp,r7
 1798 0036 04B0     	 add sp,sp,#16
 1799              	 
 1800 0038 80BD     	 pop {r7,pc}
 1801              	.L70:
 1802 003a C046     	 .align 2
 1803              	.L69:
 1804 003c FFFBFFFF 	 .word -1025
 1805              	 .cfi_endproc
 1806              	.LFE145:
 1808              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1809              	 .align 2
 1810              	 .global XMC_VADC_GROUP_IsConverterBusy
 1811              	 .code 16
 1812              	 .thumb_func
 1814              	XMC_VADC_GROUP_IsConverterBusy:
 1815              	.LFB146:
 668:../Libraries/XMCLib/src/xmc_vadc.c **** 
 669:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 670:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 671:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1816              	 .loc 2 671 0
 1817              	 .cfi_startproc
 1818 0000 80B5     	 push {r7,lr}
 1819              	.LCFI85:
 1820              	 .cfi_def_cfa_offset 8
 1821              	 .cfi_offset 7,-8
 1822              	 .cfi_offset 14,-4
 1823 0002 84B0     	 sub sp,sp,#16
 1824              	.LCFI86:
 1825              	 .cfi_def_cfa_offset 24
 1826 0004 00AF     	 add r7,sp,#0
 1827              	.LCFI87:
 1828              	 .cfi_def_cfa_register 7
 1829 0006 7860     	 str r0,[r7,#4]
 672:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 673:../Libraries/XMCLib/src/xmc_vadc.c **** 
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 675:../Libraries/XMCLib/src/xmc_vadc.c **** 
 676:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1830              	 .loc 2 676 0
 1831 0008 7B68     	 ldr r3,[r7,#4]
 1832 000a 8022     	 mov r2,#128
 1833 000c 9B58     	 ldr r3,[r3,r2]
 1834 000e FB60     	 str r3,[r7,#12]
 677:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1835              	 .loc 2 677 0
 1836 0010 FA68     	 ldr r2,[r7,#12]
 1837 0012 8023     	 mov r3,#128
 1838 0014 DB05     	 lsl r3,r3,#23
 1839 0016 1340     	 and r3,r2
 1840 0018 FB60     	 str r3,[r7,#12]
 678:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 1841              	 .loc 2 678 0
 1842 001a FB68     	 ldr r3,[r7,#12]
 1843 001c 9B0F     	 lsr r3,r3,#30
 1844 001e FB60     	 str r3,[r7,#12]
 679:../Libraries/XMCLib/src/xmc_vadc.c **** 
 680:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 1845              	 .loc 2 680 0
 1846 0020 FB68     	 ldr r3,[r7,#12]
 1847 0022 DBB2     	 uxtb r3,r3
 681:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1848              	 .loc 2 681 0
 1849 0024 181C     	 mov r0,r3
 1850 0026 BD46     	 mov sp,r7
 1851 0028 04B0     	 add sp,sp,#16
 1852              	 
 1853 002a 80BD     	 pop {r7,pc}
 1854              	 .cfi_endproc
 1855              	.LFE146:
 1857              	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 1858              	 .align 2
 1859              	 .global XMC_VADC_GROUP_SetBoundaries
 1860              	 .code 16
 1861              	 .thumb_func
 1863              	XMC_VADC_GROUP_SetBoundaries:
 1864              	.LFB147:
 682:../Libraries/XMCLib/src/xmc_vadc.c **** 
 683:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 684:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 685:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1865              	 .loc 2 685 0
 1866              	 .cfi_startproc
 1867 0000 80B5     	 push {r7,lr}
 1868              	.LCFI88:
 1869              	 .cfi_def_cfa_offset 8
 1870              	 .cfi_offset 7,-8
 1871              	 .cfi_offset 14,-4
 1872 0002 86B0     	 sub sp,sp,#24
 1873              	.LCFI89:
 1874              	 .cfi_def_cfa_offset 32
 1875 0004 00AF     	 add r7,sp,#0
 1876              	.LCFI90:
 1877              	 .cfi_def_cfa_register 7
 1878 0006 F860     	 str r0,[r7,#12]
 1879 0008 B960     	 str r1,[r7,#8]
 1880 000a 7A60     	 str r2,[r7,#4]
 686:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 687:../Libraries/XMCLib/src/xmc_vadc.c **** 
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 689:../Libraries/XMCLib/src/xmc_vadc.c **** 
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 1881              	 .loc 2 691 0
 1882 000c FB68     	 ldr r3,[r7,#12]
 1883 000e B822     	 mov r2,#184
 1884 0010 9B58     	 ldr r3,[r3,r2]
 1885 0012 7B61     	 str r3,[r7,#20]
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 1886              	 .loc 2 692 0
 1887 0014 7B69     	 ldr r3,[r7,#20]
 1888 0016 1B0B     	 lsr r3,r3,#12
 1889 0018 1B03     	 lsl r3,r3,#12
 1890 001a 7B61     	 str r3,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 1891              	 .loc 2 693 0
 1892 001c 7B69     	 ldr r3,[r7,#20]
 1893 001e 094A     	 ldr r2,.L74
 1894 0020 1340     	 and r3,r2
 1895 0022 7B61     	 str r3,[r7,#20]
 694:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 1896              	 .loc 2 694 0
 1897 0024 7A69     	 ldr r2,[r7,#20]
 1898 0026 BB68     	 ldr r3,[r7,#8]
 1899 0028 1343     	 orr r3,r2
 1900 002a 7B61     	 str r3,[r7,#20]
 695:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 1901              	 .loc 2 695 0
 1902 002c 7B68     	 ldr r3,[r7,#4]
 1903 002e 1B04     	 lsl r3,r3,#16
 1904 0030 7A69     	 ldr r2,[r7,#20]
 1905 0032 1343     	 orr r3,r2
 1906 0034 7B61     	 str r3,[r7,#20]
 696:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 1907              	 .loc 2 696 0
 1908 0036 FB68     	 ldr r3,[r7,#12]
 1909 0038 B821     	 mov r1,#184
 1910 003a 7A69     	 ldr r2,[r7,#20]
 1911 003c 5A50     	 str r2,[r3,r1]
 697:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1912              	 .loc 2 697 0
 1913 003e BD46     	 mov sp,r7
 1914 0040 06B0     	 add sp,sp,#24
 1915              	 
 1916 0042 80BD     	 pop {r7,pc}
 1917              	.L75:
 1918              	 .align 2
 1919              	.L74:
 1920 0044 FFFF00F0 	 .word -268369921
 1921              	 .cfi_endproc
 1922              	.LFE147:
 1924              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 1925              	 .align 2
 1926              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 1927              	 .code 16
 1928              	 .thumb_func
 1930              	XMC_VADC_GROUP_SetIndividualBoundary:
 1931              	.LFB148:
 698:../Libraries/XMCLib/src/xmc_vadc.c **** 
 699:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 700:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 701:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 702:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 703:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1932              	 .loc 2 703 0
 1933              	 .cfi_startproc
 1934 0000 80B5     	 push {r7,lr}
 1935              	.LCFI91:
 1936              	 .cfi_def_cfa_offset 8
 1937              	 .cfi_offset 7,-8
 1938              	 .cfi_offset 14,-4
 1939 0002 84B0     	 sub sp,sp,#16
 1940              	.LCFI92:
 1941              	 .cfi_def_cfa_offset 24
 1942 0004 00AF     	 add r7,sp,#0
 1943              	.LCFI93:
 1944              	 .cfi_def_cfa_register 7
 1945 0006 7860     	 str r0,[r7,#4]
 1946 0008 081C     	 mov r0,r1
 1947 000a 111C     	 mov r1,r2
 1948 000c FB1C     	 add r3,r7,#3
 1949 000e 021C     	 add r2,r0,#0
 1950 0010 1A70     	 strb r2,[r3]
 1951 0012 3B1C     	 mov r3,r7
 1952 0014 0A1C     	 add r2,r1,#0
 1953 0016 1A80     	 strh r2,[r3]
 704:../Libraries/XMCLib/src/xmc_vadc.c **** 
 705:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 706:../Libraries/XMCLib/src/xmc_vadc.c **** 
 707:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 708:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 709:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 710:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 711:../Libraries/XMCLib/src/xmc_vadc.c **** 
 712:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 713:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 1954              	 .loc 2 713 0
 1955 0018 7B68     	 ldr r3,[r7,#4]
 1956 001a B822     	 mov r2,#184
 1957 001c 9B58     	 ldr r3,[r3,r2]
 1958 001e FB60     	 str r3,[r7,#12]
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 1959              	 .loc 2 714 0
 1960 0020 FB1C     	 add r3,r7,#3
 1961 0022 1B78     	 ldrb r3,[r3]
 1962 0024 002B     	 cmp r3,#0
 1963 0026 09D1     	 bne .L77
 715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 716:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 1964              	 .loc 2 716 0
 1965 0028 FB68     	 ldr r3,[r7,#12]
 1966 002a 1B0B     	 lsr r3,r3,#12
 1967 002c 1B03     	 lsl r3,r3,#12
 1968 002e FB60     	 str r3,[r7,#12]
 717:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 1969              	 .loc 2 717 0
 1970 0030 3B1C     	 mov r3,r7
 1971 0032 1B88     	 ldrh r3,[r3]
 1972 0034 FA68     	 ldr r2,[r7,#12]
 1973 0036 1343     	 orr r3,r2
 1974 0038 FB60     	 str r3,[r7,#12]
 1975 003a 0DE0     	 b .L78
 1976              	.L77:
 718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 1977              	 .loc 2 719 0
 1978 003c FB1C     	 add r3,r7,#3
 1979 003e 1B78     	 ldrb r3,[r3]
 1980 0040 012B     	 cmp r3,#1
 1981 0042 09D1     	 bne .L78
 720:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 721:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 1982              	 .loc 2 721 0
 1983 0044 FB68     	 ldr r3,[r7,#12]
 1984 0046 084A     	 ldr r2,.L79
 1985 0048 1340     	 and r3,r2
 1986 004a FB60     	 str r3,[r7,#12]
 722:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 1987              	 .loc 2 722 0
 1988 004c 3B1C     	 mov r3,r7
 1989 004e 1B88     	 ldrh r3,[r3]
 1990 0050 1B04     	 lsl r3,r3,#16
 1991 0052 FA68     	 ldr r2,[r7,#12]
 1992 0054 1343     	 orr r3,r2
 1993 0056 FB60     	 str r3,[r7,#12]
 1994              	.L78:
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 725:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 726:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 727:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 728:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 1995              	 .loc 2 728 0
 1996 0058 7B68     	 ldr r3,[r7,#4]
 1997 005a B821     	 mov r1,#184
 1998 005c FA68     	 ldr r2,[r7,#12]
 1999 005e 5A50     	 str r2,[r3,r1]
 729:../Libraries/XMCLib/src/xmc_vadc.c **** 
 730:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2000              	 .loc 2 730 0
 2001 0060 BD46     	 mov sp,r7
 2002 0062 04B0     	 add sp,sp,#16
 2003              	 
 2004 0064 80BD     	 pop {r7,pc}
 2005              	.L80:
 2006 0066 C046     	 .align 2
 2007              	.L79:
 2008 0068 FFFF00F0 	 .word -268369921
 2009              	 .cfi_endproc
 2010              	.LFE148:
 2012              	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2013              	 .align 2
 2014              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2015              	 .code 16
 2016              	 .thumb_func
 2018              	XMC_VADC_GROUP_TriggerServiceRequest:
 2019              	.LFB149:
 731:../Libraries/XMCLib/src/xmc_vadc.c **** 
 732:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 733:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 734:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 735:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 736:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2020              	 .loc 2 736 0
 2021              	 .cfi_startproc
 2022 0000 80B5     	 push {r7,lr}
 2023              	.LCFI94:
 2024              	 .cfi_def_cfa_offset 8
 2025              	 .cfi_offset 7,-8
 2026              	 .cfi_offset 14,-4
 2027 0002 86B0     	 sub sp,sp,#24
 2028              	.LCFI95:
 2029              	 .cfi_def_cfa_offset 32
 2030 0004 00AF     	 add r7,sp,#0
 2031              	.LCFI96:
 2032              	 .cfi_def_cfa_register 7
 2033 0006 F860     	 str r0,[r7,#12]
 2034 0008 B960     	 str r1,[r7,#8]
 2035 000a FB1D     	 add r3,r7,#7
 2036 000c 1A70     	 strb r2,[r3]
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 738:../Libraries/XMCLib/src/xmc_vadc.c **** 
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 740:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 741:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 742:../Libraries/XMCLib/src/xmc_vadc.c **** 
 743:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2037              	 .loc 2 743 0
 2038 000e FA68     	 ldr r2,[r7,#12]
 2039 0010 E423     	 mov r3,#228
 2040 0012 5B00     	 lsl r3,r3,#1
 2041 0014 D358     	 ldr r3,[r2,r3]
 2042 0016 7B61     	 str r3,[r7,#20]
 744:../Libraries/XMCLib/src/xmc_vadc.c **** 
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2043              	 .loc 2 745 0
 2044 0018 FB1D     	 add r3,r7,#7
 2045 001a 1B78     	 ldrb r3,[r3]
 2046 001c 002B     	 cmp r3,#0
 2047 001e 07D1     	 bne .L82
 746:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 747:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2048              	 .loc 2 747 0
 2049 0020 BB68     	 ldr r3,[r7,#8]
 2050 0022 0122     	 mov r2,#1
 2051 0024 9A40     	 lsl r2,r2,r3
 2052 0026 131C     	 mov r3,r2
 2053 0028 7A69     	 ldr r2,[r7,#20]
 2054 002a 1343     	 orr r3,r2
 2055 002c 7B61     	 str r3,[r7,#20]
 2056 002e 07E0     	 b .L83
 2057              	.L82:
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 749:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 750:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 751:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2058              	 .loc 2 751 0
 2059 0030 BB68     	 ldr r3,[r7,#8]
 2060 0032 0833     	 add r3,r3,#8
 2061 0034 1A1C     	 mov r2,r3
 2062 0036 0123     	 mov r3,#1
 2063 0038 9340     	 lsl r3,r3,r2
 2064 003a 7A69     	 ldr r2,[r7,#20]
 2065 003c 1343     	 orr r3,r2
 2066 003e 7B61     	 str r3,[r7,#20]
 2067              	.L83:
 752:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 753:../Libraries/XMCLib/src/xmc_vadc.c **** 
 754:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2068              	 .loc 2 754 0
 2069 0040 FA68     	 ldr r2,[r7,#12]
 2070 0042 E423     	 mov r3,#228
 2071 0044 5B00     	 lsl r3,r3,#1
 2072 0046 7969     	 ldr r1,[r7,#20]
 2073 0048 D150     	 str r1,[r2,r3]
 755:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2074              	 .loc 2 755 0
 2075 004a BD46     	 mov sp,r7
 2076 004c 06B0     	 add sp,sp,#24
 2077              	 
 2078 004e 80BD     	 pop {r7,pc}
 2079              	 .cfi_endproc
 2080              	.LFE149:
 2082              	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2083              	 .align 2
 2084              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2085              	 .code 16
 2086              	 .thumb_func
 2088              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2089              	.LFB150:
 756:../Libraries/XMCLib/src/xmc_vadc.c **** 
 757:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 758:../Libraries/XMCLib/src/xmc_vadc.c **** 
 759:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 760:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 761:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 762:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 763:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2090              	 .loc 2 763 0
 2091              	 .cfi_startproc
 2092 0000 80B5     	 push {r7,lr}
 2093              	.LCFI97:
 2094              	 .cfi_def_cfa_offset 8
 2095              	 .cfi_offset 7,-8
 2096              	 .cfi_offset 14,-4
 2097 0002 84B0     	 sub sp,sp,#16
 2098              	.LCFI98:
 2099              	 .cfi_def_cfa_offset 24
 2100 0004 00AF     	 add r7,sp,#0
 2101              	.LCFI99:
 2102              	 .cfi_def_cfa_register 7
 2103 0006 7860     	 str r0,[r7,#4]
 2104 0008 081C     	 mov r0,r1
 2105 000a 111C     	 mov r1,r2
 2106 000c FB1C     	 add r3,r7,#3
 2107 000e 021C     	 add r2,r0,#0
 2108 0010 1A70     	 strb r2,[r3]
 2109 0012 BB1C     	 add r3,r7,#2
 2110 0014 0A1C     	 add r2,r1,#0
 2111 0016 1A70     	 strb r2,[r3]
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 766:../Libraries/XMCLib/src/xmc_vadc.c **** 
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 768:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2112              	 .loc 2 768 0
 2113 0018 FB1C     	 add r3,r7,#3
 2114 001a 1B78     	 ldrb r3,[r3]
 2115 001c 9B00     	 lsl r3,r3,#2
 2116 001e FB60     	 str r3,[r7,#12]
 769:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2117              	 .loc 2 769 0
 2118 0020 7B68     	 ldr r3,[r7,#4]
 2119 0022 D422     	 mov r2,#212
 2120 0024 9B58     	 ldr r3,[r3,r2]
 2121 0026 FA68     	 ldr r2,[r7,#12]
 2122 0028 0F21     	 mov r1,#15
 2123 002a 9140     	 lsl r1,r1,r2
 2124 002c 0A1C     	 mov r2,r1
 2125 002e D243     	 mvn r2,r2
 2126 0030 1A40     	 and r2,r3
 2127 0032 7B68     	 ldr r3,[r7,#4]
 2128 0034 D421     	 mov r1,#212
 2129 0036 5A50     	 str r2,[r3,r1]
 770:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2130              	 .loc 2 770 0
 2131 0038 7B68     	 ldr r3,[r7,#4]
 2132 003a D422     	 mov r2,#212
 2133 003c 9A58     	 ldr r2,[r3,r2]
 2134 003e BB1C     	 add r3,r7,#2
 2135 0040 1978     	 ldrb r1,[r3]
 2136 0042 FB68     	 ldr r3,[r7,#12]
 2137 0044 9940     	 lsl r1,r1,r3
 2138 0046 0B1C     	 mov r3,r1
 2139 0048 1A43     	 orr r2,r3
 2140 004a 7B68     	 ldr r3,[r7,#4]
 2141 004c D421     	 mov r1,#212
 2142 004e 5A50     	 str r2,[r3,r1]
 771:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2143              	 .loc 2 771 0
 2144 0050 BD46     	 mov sp,r7
 2145 0052 04B0     	 add sp,sp,#16
 2146              	 
 2147 0054 80BD     	 pop {r7,pc}
 2148              	 .cfi_endproc
 2149              	.LFE150:
 2151 0056 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_Init,"ax",%progbits
 2152              	 .align 2
 2153              	 .global XMC_VADC_GLOBAL_SHS_Init
 2154              	 .code 16
 2155              	 .thumb_func
 2157              	XMC_VADC_GLOBAL_SHS_Init:
 2158              	.LFB151:
 772:../Libraries/XMCLib/src/xmc_vadc.c **** 
 773:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
 774:../Libraries/XMCLib/src/xmc_vadc.c **** 
 775:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GROUP_AVAILABLE */
 776:../Libraries/XMCLib/src/xmc_vadc.c **** 
 777:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 778:../Libraries/XMCLib/src/xmc_vadc.c **** 
 779:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 780:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 781:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2159              	 .loc 2 781 0
 2160              	 .cfi_startproc
 2161 0000 80B5     	 push {r7,lr}
 2162              	.LCFI100:
 2163              	 .cfi_def_cfa_offset 8
 2164              	 .cfi_offset 7,-8
 2165              	 .cfi_offset 14,-4
 2166 0002 82B0     	 sub sp,sp,#8
 2167              	.LCFI101:
 2168              	 .cfi_def_cfa_offset 16
 2169 0004 00AF     	 add r7,sp,#0
 2170              	.LCFI102:
 2171              	 .cfi_def_cfa_register 7
 2172 0006 7860     	 str r0,[r7,#4]
 2173 0008 3960     	 str r1,[r7]
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 784:../Libraries/XMCLib/src/xmc_vadc.c **** 
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 2174              	 .loc 2 786 0
 2175 000a 3B68     	 ldr r3,[r7]
 2176 000c 1B68     	 ldr r3,[r3]
 2177 000e 8022     	 mov r2,#128
 2178 0010 1202     	 lsl r2,r2,#8
 2179 0012 1A43     	 orr r2,r3
 2180 0014 7B68     	 ldr r3,[r7,#4]
 2181 0016 1A64     	 str r2,[r3,#64]
 787:../Libraries/XMCLib/src/xmc_vadc.c **** 
 788:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 789:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 2182              	 .loc 2 789 0
 2183 0018 7B68     	 ldr r3,[r7,#4]
 2184 001a BC22     	 mov r2,#188
 2185 001c 9B58     	 ldr r3,[r3,r2]
 2186 001e 0122     	 mov r2,#1
 2187 0020 9343     	 bic r3,r2
 2188 0022 1A1C     	 mov r2,r3
 2189 0024 7B68     	 ldr r3,[r7,#4]
 2190 0026 BC21     	 mov r1,#188
 2191 0028 5A50     	 str r2,[r3,r1]
 790:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 2192              	 .loc 2 790 0
 2193 002a 7B68     	 ldr r3,[r7,#4]
 2194 002c BC22     	 mov r2,#188
 2195 002e 9B58     	 ldr r3,[r3,r2]
 2196 0030 3A68     	 ldr r2,[r7]
 2197 0032 1279     	 ldrb r2,[r2,#4]
 2198 0034 1A43     	 orr r2,r3
 2199 0036 7B68     	 ldr r3,[r7,#4]
 2200 0038 BC21     	 mov r1,#188
 2201 003a 5A50     	 str r2,[r3,r1]
 791:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2202              	 .loc 2 791 0
 2203 003c BD46     	 mov sp,r7
 2204 003e 02B0     	 add sp,sp,#8
 2205              	 
 2206 0040 80BD     	 pop {r7,pc}
 2207              	 .cfi_endproc
 2208              	.LFE151:
 2210 0042 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode,"ax",%progbits
 2211              	 .align 2
 2212              	 .global XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 2213              	 .code 16
 2214              	 .thumb_func
 2216              	XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:
 2217              	.LFB152:
 792:../Libraries/XMCLib/src/xmc_vadc.c **** 
 793:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 794:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 795:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2218              	 .loc 2 795 0
 2219              	 .cfi_startproc
 2220 0000 80B5     	 push {r7,lr}
 2221              	.LCFI103:
 2222              	 .cfi_def_cfa_offset 8
 2223              	 .cfi_offset 7,-8
 2224              	 .cfi_offset 14,-4
 2225 0002 82B0     	 sub sp,sp,#8
 2226              	.LCFI104:
 2227              	 .cfi_def_cfa_offset 16
 2228 0004 00AF     	 add r7,sp,#0
 2229              	.LCFI105:
 2230              	 .cfi_def_cfa_register 7
 2231 0006 7860     	 str r0,[r7,#4]
 2232 0008 0A1C     	 mov r2,r1
 2233 000a FB1C     	 add r3,r7,#3
 2234 000c 1A70     	 strb r2,[r3]
 796:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 797:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 799:../Libraries/XMCLib/src/xmc_vadc.c **** 
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 801:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2235              	 .loc 2 801 0
 2236 000e FB1C     	 add r3,r7,#3
 2237 0010 1B78     	 ldrb r3,[r3]
 2238 0012 002B     	 cmp r3,#0
 2239 0014 08D1     	 bne .L87
 802:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 803:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 2240              	 .loc 2 803 0
 2241 0016 7B68     	 ldr r3,[r7,#4]
 2242 0018 8022     	 mov r2,#128
 2243 001a 9B58     	 ldr r3,[r3,r2]
 2244 001c 0122     	 mov r2,#1
 2245 001e 1A43     	 orr r2,r3
 2246 0020 7B68     	 ldr r3,[r7,#4]
 2247 0022 8021     	 mov r1,#128
 2248 0024 5A50     	 str r2,[r3,r1]
 2249 0026 0BE0     	 b .L86
 2250              	.L87:
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 805:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2251              	 .loc 2 805 0
 2252 0028 FB1C     	 add r3,r7,#3
 2253 002a 1B78     	 ldrb r3,[r3]
 2254 002c 012B     	 cmp r3,#1
 2255 002e 07D1     	 bne .L86
 806:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 807:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 2256              	 .loc 2 807 0
 2257 0030 7B68     	 ldr r3,[r7,#4]
 2258 0032 8422     	 mov r2,#132
 2259 0034 9B58     	 ldr r3,[r3,r2]
 2260 0036 0122     	 mov r2,#1
 2261 0038 1A43     	 orr r2,r3
 2262 003a 7B68     	 ldr r3,[r7,#4]
 2263 003c 8421     	 mov r1,#132
 2264 003e 5A50     	 str r2,[r3,r1]
 2265              	.L86:
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 809:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 810:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 811:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 812:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 813:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2266              	 .loc 2 813 0
 2267 0040 BD46     	 mov sp,r7
 2268 0042 02B0     	 add sp,sp,#8
 2269              	 
 2270 0044 80BD     	 pop {r7,pc}
 2271              	 .cfi_endproc
 2272              	.LFE152:
 2274 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode,"ax",%progbits
 2275              	 .align 2
 2276              	 .global XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
 2277              	 .code 16
 2278              	 .thumb_func
 2280              	XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:
 2281              	.LFB153:
 814:../Libraries/XMCLib/src/xmc_vadc.c **** 
 815:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 816:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 817:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2282              	 .loc 2 817 0
 2283              	 .cfi_startproc
 2284 0000 80B5     	 push {r7,lr}
 2285              	.LCFI106:
 2286              	 .cfi_def_cfa_offset 8
 2287              	 .cfi_offset 7,-8
 2288              	 .cfi_offset 14,-4
 2289 0002 82B0     	 sub sp,sp,#8
 2290              	.LCFI107:
 2291              	 .cfi_def_cfa_offset 16
 2292 0004 00AF     	 add r7,sp,#0
 2293              	.LCFI108:
 2294              	 .cfi_def_cfa_register 7
 2295 0006 7860     	 str r0,[r7,#4]
 2296 0008 0A1C     	 mov r2,r1
 2297 000a FB1C     	 add r3,r7,#3
 2298 000c 1A70     	 strb r2,[r3]
 818:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 819:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 821:../Libraries/XMCLib/src/xmc_vadc.c **** 
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 823:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2299              	 .loc 2 823 0
 2300 000e FB1C     	 add r3,r7,#3
 2301 0010 1B78     	 ldrb r3,[r3]
 2302 0012 002B     	 cmp r3,#0
 2303 0014 09D1     	 bne .L90
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 825:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 2304              	 .loc 2 825 0
 2305 0016 7B68     	 ldr r3,[r7,#4]
 2306 0018 8022     	 mov r2,#128
 2307 001a 9B58     	 ldr r3,[r3,r2]
 2308 001c 0122     	 mov r2,#1
 2309 001e 9343     	 bic r3,r2
 2310 0020 1A1C     	 mov r2,r3
 2311 0022 7B68     	 ldr r3,[r7,#4]
 2312 0024 8021     	 mov r1,#128
 2313 0026 5A50     	 str r2,[r3,r1]
 2314 0028 0CE0     	 b .L89
 2315              	.L90:
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 827:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2316              	 .loc 2 827 0
 2317 002a FB1C     	 add r3,r7,#3
 2318 002c 1B78     	 ldrb r3,[r3]
 2319 002e 012B     	 cmp r3,#1
 2320 0030 08D1     	 bne .L89
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 829:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 2321              	 .loc 2 829 0
 2322 0032 7B68     	 ldr r3,[r7,#4]
 2323 0034 8422     	 mov r2,#132
 2324 0036 9B58     	 ldr r3,[r3,r2]
 2325 0038 0122     	 mov r2,#1
 2326 003a 9343     	 bic r3,r2
 2327 003c 1A1C     	 mov r2,r3
 2328 003e 7B68     	 ldr r3,[r7,#4]
 2329 0040 8421     	 mov r1,#132
 2330 0042 5A50     	 str r2,[r3,r1]
 2331              	.L89:
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 832:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 833:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 834:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 835:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2332              	 .loc 2 835 0
 2333 0044 BD46     	 mov sp,r7
 2334 0046 02B0     	 add sp,sp,#8
 2335              	 
 2336 0048 80BD     	 pop {r7,pc}
 2337              	 .cfi_endproc
 2338              	.LFE153:
 2340 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime,"ax",%progbits
 2341              	 .align 2
 2342              	 .global XMC_VADC_GLOBAL_SHS_SetShortSampleTime
 2343              	 .code 16
 2344              	 .thumb_func
 2346              	XMC_VADC_GLOBAL_SHS_SetShortSampleTime:
 2347              	.LFB154:
 836:../Libraries/XMCLib/src/xmc_vadc.c **** 
 837:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 838:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 839:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 840:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 841:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2348              	 .loc 2 841 0
 2349              	 .cfi_startproc
 2350 0000 80B5     	 push {r7,lr}
 2351              	.LCFI109:
 2352              	 .cfi_def_cfa_offset 8
 2353              	 .cfi_offset 7,-8
 2354              	 .cfi_offset 14,-4
 2355 0002 82B0     	 sub sp,sp,#8
 2356              	.LCFI110:
 2357              	 .cfi_def_cfa_offset 16
 2358 0004 00AF     	 add r7,sp,#0
 2359              	.LCFI111:
 2360              	 .cfi_def_cfa_register 7
 2361 0006 7860     	 str r0,[r7,#4]
 2362 0008 081C     	 mov r0,r1
 2363 000a 111C     	 mov r1,r2
 2364 000c FB1C     	 add r3,r7,#3
 2365 000e 021C     	 add r2,r0,#0
 2366 0010 1A70     	 strb r2,[r3]
 2367 0012 BB1C     	 add r3,r7,#2
 2368 0014 0A1C     	 add r2,r1,#0
 2369 0016 1A70     	 strb r2,[r3]
 842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 843:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 845:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 846:../Libraries/XMCLib/src/xmc_vadc.c **** 
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 848:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2370              	 .loc 2 848 0
 2371 0018 FB1C     	 add r3,r7,#3
 2372 001a 1B78     	 ldrb r3,[r3]
 2373 001c 002B     	 cmp r3,#0
 2374 001e 12D1     	 bne .L93
 849:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 850:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 2375              	 .loc 2 850 0
 2376 0020 7B68     	 ldr r3,[r7,#4]
 2377 0022 8022     	 mov r2,#128
 2378 0024 9B58     	 ldr r3,[r3,r2]
 2379 0026 144A     	 ldr r2,.L95
 2380 0028 1A40     	 and r2,r3
 2381 002a 7B68     	 ldr r3,[r7,#4]
 2382 002c 8021     	 mov r1,#128
 2383 002e 5A50     	 str r2,[r3,r1]
 851:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 2384              	 .loc 2 851 0
 2385 0030 7B68     	 ldr r3,[r7,#4]
 2386 0032 8022     	 mov r2,#128
 2387 0034 9A58     	 ldr r2,[r3,r2]
 2388 0036 BB1C     	 add r3,r7,#2
 2389 0038 1B78     	 ldrb r3,[r3]
 2390 003a 1B02     	 lsl r3,r3,#8
 2391 003c 1A43     	 orr r2,r3
 2392 003e 7B68     	 ldr r3,[r7,#4]
 2393 0040 8021     	 mov r1,#128
 2394 0042 5A50     	 str r2,[r3,r1]
 2395 0044 15E0     	 b .L92
 2396              	.L93:
 852:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2397              	 .loc 2 853 0
 2398 0046 FB1C     	 add r3,r7,#3
 2399 0048 1B78     	 ldrb r3,[r3]
 2400 004a 012B     	 cmp r3,#1
 2401 004c 11D1     	 bne .L92
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 855:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 2402              	 .loc 2 855 0
 2403 004e 7B68     	 ldr r3,[r7,#4]
 2404 0050 8422     	 mov r2,#132
 2405 0052 9B58     	 ldr r3,[r3,r2]
 2406 0054 084A     	 ldr r2,.L95
 2407 0056 1A40     	 and r2,r3
 2408 0058 7B68     	 ldr r3,[r7,#4]
 2409 005a 8421     	 mov r1,#132
 2410 005c 5A50     	 str r2,[r3,r1]
 856:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 2411              	 .loc 2 856 0
 2412 005e 7B68     	 ldr r3,[r7,#4]
 2413 0060 8422     	 mov r2,#132
 2414 0062 9A58     	 ldr r2,[r3,r2]
 2415 0064 BB1C     	 add r3,r7,#2
 2416 0066 1B78     	 ldrb r3,[r3]
 2417 0068 1B02     	 lsl r3,r3,#8
 2418 006a 1A43     	 orr r2,r3
 2419 006c 7B68     	 ldr r3,[r7,#4]
 2420 006e 8421     	 mov r1,#132
 2421 0070 5A50     	 str r2,[r3,r1]
 2422              	.L92:
 857:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 861:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 862:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2423              	 .loc 2 862 0
 2424 0072 BD46     	 mov sp,r7
 2425 0074 02B0     	 add sp,sp,#8
 2426              	 
 2427 0076 80BD     	 pop {r7,pc}
 2428              	.L96:
 2429              	 .align 2
 2430              	.L95:
 2431 0078 FFC0FFFF 	 .word -16129
 2432              	 .cfi_endproc
 2433              	.LFE154:
 2435              	 .section .text.XMC_VADC_GLOBAL_SHS_SetGainFactor,"ax",%progbits
 2436              	 .align 2
 2437              	 .global XMC_VADC_GLOBAL_SHS_SetGainFactor
 2438              	 .code 16
 2439              	 .thumb_func
 2441              	XMC_VADC_GLOBAL_SHS_SetGainFactor:
 2442              	.LFB155:
 863:../Libraries/XMCLib/src/xmc_vadc.c **** 
 864:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 865:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 866:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 867:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 868:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 869:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2443              	 .loc 2 869 0
 2444              	 .cfi_startproc
 2445 0000 90B5     	 push {r4,r7,lr}
 2446              	.LCFI112:
 2447              	 .cfi_def_cfa_offset 12
 2448              	 .cfi_offset 4,-12
 2449              	 .cfi_offset 7,-8
 2450              	 .cfi_offset 14,-4
 2451 0002 85B0     	 sub sp,sp,#20
 2452              	.LCFI113:
 2453              	 .cfi_def_cfa_offset 32
 2454 0004 00AF     	 add r7,sp,#0
 2455              	.LCFI114:
 2456              	 .cfi_def_cfa_register 7
 2457 0006 7860     	 str r0,[r7,#4]
 2458 0008 0C1C     	 mov r4,r1
 2459 000a 101C     	 mov r0,r2
 2460 000c 191C     	 mov r1,r3
 2461 000e FB1C     	 add r3,r7,#3
 2462 0010 221C     	 add r2,r4,#0
 2463 0012 1A70     	 strb r2,[r3]
 2464 0014 BB1C     	 add r3,r7,#2
 2465 0016 021C     	 add r2,r0,#0
 2466 0018 1A70     	 strb r2,[r3]
 2467 001a 7B1C     	 add r3,r7,#1
 2468 001c 0A1C     	 add r2,r1,#0
 2469 001e 1A70     	 strb r2,[r3]
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 871:../Libraries/XMCLib/src/xmc_vadc.c **** 
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 874:../Libraries/XMCLib/src/xmc_vadc.c **** 
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 2470              	 .loc 2 876 0
 2471 0020 7B1C     	 add r3,r7,#1
 2472 0022 1B78     	 ldrb r3,[r3]
 2473 0024 9B00     	 lsl r3,r3,#2
 2474 0026 FB60     	 str r3,[r7,#12]
 877:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2475              	 .loc 2 877 0
 2476 0028 BB1C     	 add r3,r7,#2
 2477 002a 1B78     	 ldrb r3,[r3]
 2478 002c 002B     	 cmp r3,#0
 2479 002e 1ED1     	 bne .L98
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 879:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 2480              	 .loc 2 879 0
 2481 0030 7A68     	 ldr r2,[r7,#4]
 2482 0032 C023     	 mov r3,#192
 2483 0034 5B00     	 lsl r3,r3,#1
 2484 0036 D358     	 ldr r3,[r2,r3]
 2485 0038 FA68     	 ldr r2,[r7,#12]
 2486 003a 0F21     	 mov r1,#15
 2487 003c 9140     	 lsl r1,r1,r2
 2488 003e 0A1C     	 mov r2,r1
 2489 0040 D243     	 mvn r2,r2
 2490 0042 1A40     	 and r2,r3
 2491 0044 111C     	 mov r1,r2
 2492 0046 7A68     	 ldr r2,[r7,#4]
 2493 0048 C023     	 mov r3,#192
 2494 004a 5B00     	 lsl r3,r3,#1
 2495 004c D150     	 str r1,[r2,r3]
 880:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 2496              	 .loc 2 880 0
 2497 004e 7A68     	 ldr r2,[r7,#4]
 2498 0050 C023     	 mov r3,#192
 2499 0052 5B00     	 lsl r3,r3,#1
 2500 0054 D258     	 ldr r2,[r2,r3]
 2501 0056 FB1C     	 add r3,r7,#3
 2502 0058 1978     	 ldrb r1,[r3]
 2503 005a FB68     	 ldr r3,[r7,#12]
 2504 005c 9940     	 lsl r1,r1,r3
 2505 005e 0B1C     	 mov r3,r1
 2506 0060 1A43     	 orr r2,r3
 2507 0062 111C     	 mov r1,r2
 2508 0064 7A68     	 ldr r2,[r7,#4]
 2509 0066 C023     	 mov r3,#192
 2510 0068 5B00     	 lsl r3,r3,#1
 2511 006a D150     	 str r1,[r2,r3]
 2512 006c 21E0     	 b .L97
 2513              	.L98:
 881:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2514              	 .loc 2 882 0
 2515 006e BB1C     	 add r3,r7,#2
 2516 0070 1B78     	 ldrb r3,[r3]
 2517 0072 012B     	 cmp r3,#1
 2518 0074 1DD1     	 bne .L97
 883:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 884:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 2519              	 .loc 2 884 0
 2520 0076 7A68     	 ldr r2,[r7,#4]
 2521 0078 C823     	 mov r3,#200
 2522 007a 5B00     	 lsl r3,r3,#1
 2523 007c D358     	 ldr r3,[r2,r3]
 2524 007e FA68     	 ldr r2,[r7,#12]
 2525 0080 0F21     	 mov r1,#15
 2526 0082 9140     	 lsl r1,r1,r2
 2527 0084 0A1C     	 mov r2,r1
 2528 0086 D243     	 mvn r2,r2
 2529 0088 1A40     	 and r2,r3
 2530 008a 111C     	 mov r1,r2
 2531 008c 7A68     	 ldr r2,[r7,#4]
 2532 008e C823     	 mov r3,#200
 2533 0090 5B00     	 lsl r3,r3,#1
 2534 0092 D150     	 str r1,[r2,r3]
 885:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2535              	 .loc 2 885 0
 2536 0094 7A68     	 ldr r2,[r7,#4]
 2537 0096 C823     	 mov r3,#200
 2538 0098 5B00     	 lsl r3,r3,#1
 2539 009a D258     	 ldr r2,[r2,r3]
 2540 009c FB1C     	 add r3,r7,#3
 2541 009e 1978     	 ldrb r1,[r3]
 2542 00a0 FB68     	 ldr r3,[r7,#12]
 2543 00a2 9940     	 lsl r1,r1,r3
 2544 00a4 0B1C     	 mov r3,r1
 2545 00a6 1A43     	 orr r2,r3
 2546 00a8 111C     	 mov r1,r2
 2547 00aa 7A68     	 ldr r2,[r7,#4]
 2548 00ac C823     	 mov r3,#200
 2549 00ae 5B00     	 lsl r3,r3,#1
 2550 00b0 D150     	 str r1,[r2,r3]
 2551              	.L97:
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 887:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 889:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 891:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2552              	 .loc 2 891 0
 2553 00b2 BD46     	 mov sp,r7
 2554 00b4 05B0     	 add sp,sp,#20
 2555              	 
 2556 00b6 90BD     	 pop {r4,r7,pc}
 2557              	 .cfi_endproc
 2558              	.LFE155:
 2560              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations,"ax",%progbits
 2561              	 .align 2
 2562              	 .global XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
 2563              	 .code 16
 2564              	 .thumb_func
 2566              	XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:
 2567              	.LFB156:
 892:../Libraries/XMCLib/src/xmc_vadc.c **** 
 893:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 894:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 895:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 896:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2568              	 .loc 2 896 0
 2569              	 .cfi_startproc
 2570 0000 80B5     	 push {r7,lr}
 2571              	.LCFI115:
 2572              	 .cfi_def_cfa_offset 8
 2573              	 .cfi_offset 7,-8
 2574              	 .cfi_offset 14,-4
 2575 0002 82B0     	 sub sp,sp,#8
 2576              	.LCFI116:
 2577              	 .cfi_def_cfa_offset 16
 2578 0004 00AF     	 add r7,sp,#0
 2579              	.LCFI117:
 2580              	 .cfi_def_cfa_register 7
 2581 0006 7860     	 str r0,[r7,#4]
 2582 0008 0A1C     	 mov r2,r1
 2583 000a FB1C     	 add r3,r7,#3
 2584 000c 1A70     	 strb r2,[r3]
 897:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 898:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 899:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 900:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 901:../Libraries/XMCLib/src/xmc_vadc.c **** 
 902:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2585              	 .loc 2 903 0
 2586 000e FB1C     	 add r3,r7,#3
 2587 0010 1B78     	 ldrb r3,[r3]
 2588 0012 002B     	 cmp r3,#0
 2589 0014 08D1     	 bne .L101
 904:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 905:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 2590              	 .loc 2 905 0
 2591 0016 7B68     	 ldr r3,[r7,#4]
 2592 0018 E022     	 mov r2,#224
 2593 001a 9B58     	 ldr r3,[r3,r2]
 2594 001c 5B00     	 lsl r3,r3,#1
 2595 001e 5A08     	 lsr r2,r3,#1
 2596 0020 7B68     	 ldr r3,[r7,#4]
 2597 0022 E021     	 mov r1,#224
 2598 0024 5A50     	 str r2,[r3,r1]
 2599 0026 0BE0     	 b .L100
 2600              	.L101:
 906:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2601              	 .loc 2 907 0
 2602 0028 FB1C     	 add r3,r7,#3
 2603 002a 1B78     	 ldrb r3,[r3]
 2604 002c 012B     	 cmp r3,#1
 2605 002e 07D1     	 bne .L100
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 909:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 2606              	 .loc 2 909 0
 2607 0030 7B68     	 ldr r3,[r7,#4]
 2608 0032 E422     	 mov r2,#228
 2609 0034 9B58     	 ldr r3,[r3,r2]
 2610 0036 5B00     	 lsl r3,r3,#1
 2611 0038 5A08     	 lsr r2,r3,#1
 2612 003a 7B68     	 ldr r3,[r7,#4]
 2613 003c E421     	 mov r1,#228
 2614 003e 5A50     	 str r2,[r3,r1]
 2615              	.L100:
 910:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 912:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 913:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 914:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 915:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2616              	 .loc 2 915 0
 2617 0040 BD46     	 mov sp,r7
 2618 0042 02B0     	 add sp,sp,#8
 2619              	 
 2620 0044 80BD     	 pop {r7,pc}
 2621              	 .cfi_endproc
 2622              	.LFE156:
 2624 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations,"ax",%progbits
 2625              	 .align 2
 2626              	 .global XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
 2627              	 .code 16
 2628              	 .thumb_func
 2630              	XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:
 2631              	.LFB157:
 916:../Libraries/XMCLib/src/xmc_vadc.c **** 
 917:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 918:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 919:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 920:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2632              	 .loc 2 920 0
 2633              	 .cfi_startproc
 2634 0000 80B5     	 push {r7,lr}
 2635              	.LCFI118:
 2636              	 .cfi_def_cfa_offset 8
 2637              	 .cfi_offset 7,-8
 2638              	 .cfi_offset 14,-4
 2639 0002 82B0     	 sub sp,sp,#8
 2640              	.LCFI119:
 2641              	 .cfi_def_cfa_offset 16
 2642 0004 00AF     	 add r7,sp,#0
 2643              	.LCFI120:
 2644              	 .cfi_def_cfa_register 7
 2645 0006 7860     	 str r0,[r7,#4]
 2646 0008 0A1C     	 mov r2,r1
 2647 000a FB1C     	 add r3,r7,#3
 2648 000c 1A70     	 strb r2,[r3]
 921:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 922:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 923:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 924:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 925:../Libraries/XMCLib/src/xmc_vadc.c **** 
 926:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2649              	 .loc 2 926 0
 2650 000e FB1C     	 add r3,r7,#3
 2651 0010 1B78     	 ldrb r3,[r3]
 2652 0012 002B     	 cmp r3,#0
 2653 0014 09D1     	 bne .L104
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 928:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 2654              	 .loc 2 928 0
 2655 0016 7B68     	 ldr r3,[r7,#4]
 2656 0018 E022     	 mov r2,#224
 2657 001a 9B58     	 ldr r3,[r3,r2]
 2658 001c 8022     	 mov r2,#128
 2659 001e 1206     	 lsl r2,r2,#24
 2660 0020 1A43     	 orr r2,r3
 2661 0022 7B68     	 ldr r3,[r7,#4]
 2662 0024 E021     	 mov r1,#224
 2663 0026 5A50     	 str r2,[r3,r1]
 2664 0028 0CE0     	 b .L103
 2665              	.L104:
 929:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2666              	 .loc 2 930 0
 2667 002a FB1C     	 add r3,r7,#3
 2668 002c 1B78     	 ldrb r3,[r3]
 2669 002e 012B     	 cmp r3,#1
 2670 0030 08D1     	 bne .L103
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 932:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 2671              	 .loc 2 932 0
 2672 0032 7B68     	 ldr r3,[r7,#4]
 2673 0034 E422     	 mov r2,#228
 2674 0036 9B58     	 ldr r3,[r3,r2]
 2675 0038 8022     	 mov r2,#128
 2676 003a 1206     	 lsl r2,r2,#24
 2677 003c 1A43     	 orr r2,r3
 2678 003e 7B68     	 ldr r3,[r7,#4]
 2679 0040 E421     	 mov r1,#228
 2680 0042 5A50     	 str r2,[r3,r1]
 2681              	.L103:
 933:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 936:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 937:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 938:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2682              	 .loc 2 938 0
 2683 0044 BD46     	 mov sp,r7
 2684 0046 02B0     	 add sp,sp,#8
 2685              	 
 2686 0048 80BD     	 pop {r7,pc}
 2687              	 .cfi_endproc
 2688              	.LFE157:
 2690 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue,"ax",%progbits
 2691              	 .align 2
 2692              	 .global XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
 2693              	 .code 16
 2694              	 .thumb_func
 2696              	XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:
 2697              	.LFB158:
 939:../Libraries/XMCLib/src/xmc_vadc.c **** 
 940:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 941:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 942:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 943:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 944:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2698              	 .loc 2 944 0
 2699              	 .cfi_startproc
 2700 0000 80B5     	 push {r7,lr}
 2701              	.LCFI121:
 2702              	 .cfi_def_cfa_offset 8
 2703              	 .cfi_offset 7,-8
 2704              	 .cfi_offset 14,-4
 2705 0002 84B0     	 sub sp,sp,#16
 2706              	.LCFI122:
 2707              	 .cfi_def_cfa_offset 24
 2708 0004 00AF     	 add r7,sp,#0
 2709              	.LCFI123:
 2710              	 .cfi_def_cfa_register 7
 2711 0006 7860     	 str r0,[r7,#4]
 2712 0008 081C     	 mov r0,r1
 2713 000a 111C     	 mov r1,r2
 2714 000c FB1C     	 add r3,r7,#3
 2715 000e 021C     	 add r2,r0,#0
 2716 0010 1A70     	 strb r2,[r3]
 2717 0012 BB1C     	 add r3,r7,#2
 2718 0014 0A1C     	 add r2,r1,#0
 2719 0016 1A70     	 strb r2,[r3]
 945:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 946:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 947:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 948:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 949:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 950:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 951:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 952:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 953:../Libraries/XMCLib/src/xmc_vadc.c **** 
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 2720              	 .loc 2 954 0
 2721 0018 0023     	 mov r3,#0
 2722 001a FB60     	 str r3,[r7,#12]
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2723              	 .loc 2 955 0
 2724 001c FB1C     	 add r3,r7,#3
 2725 001e 1B78     	 ldrb r3,[r3]
 2726 0020 002B     	 cmp r3,#0
 2727 0022 0AD1     	 bne .L107
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 957:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 2728              	 .loc 2 957 0
 2729 0024 7B68     	 ldr r3,[r7,#4]
 2730 0026 E022     	 mov r2,#224
 2731 0028 9A58     	 ldr r2,[r3,r2]
 2732 002a BB1C     	 add r3,r7,#2
 2733 002c 1B78     	 ldrb r3,[r3]
 2734 002e DA40     	 lsr r2,r2,r3
 2735 0030 131C     	 mov r3,r2
 2736 0032 7F22     	 mov r2,#127
 2737 0034 1340     	 and r3,r2
 2738 0036 FB60     	 str r3,[r7,#12]
 2739 0038 0DE0     	 b .L108
 2740              	.L107:
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2741              	 .loc 2 959 0
 2742 003a FB1C     	 add r3,r7,#3
 2743 003c 1B78     	 ldrb r3,[r3]
 2744 003e 012B     	 cmp r3,#1
 2745 0040 09D1     	 bne .L108
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 961:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 2746              	 .loc 2 961 0
 2747 0042 7B68     	 ldr r3,[r7,#4]
 2748 0044 E422     	 mov r2,#228
 2749 0046 9A58     	 ldr r2,[r3,r2]
 2750 0048 BB1C     	 add r3,r7,#2
 2751 004a 1B78     	 ldrb r3,[r3]
 2752 004c DA40     	 lsr r2,r2,r3
 2753 004e 131C     	 mov r3,r2
 2754 0050 7F22     	 mov r2,#127
 2755 0052 1340     	 and r3,r2
 2756 0054 FB60     	 str r3,[r7,#12]
 2757              	.L108:
 962:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 965:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 966:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 2758              	 .loc 2 967 0
 2759 0056 FB68     	 ldr r3,[r7,#12]
 2760 0058 DBB2     	 uxtb r3,r3
 968:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2761              	 .loc 2 968 0
 2762 005a 181C     	 mov r0,r3
 2763 005c BD46     	 mov sp,r7
 2764 005e 04B0     	 add sp,sp,#16
 2765              	 
 2766 0060 80BD     	 pop {r7,pc}
 2767              	 .cfi_endproc
 2768              	.LFE158:
 2770 0062 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue,"ax",%progbits
 2771              	 .align 2
 2772              	 .global XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
 2773              	 .code 16
 2774              	 .thumb_func
 2776              	XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:
 2777              	.LFB159:
 969:../Libraries/XMCLib/src/xmc_vadc.c **** 
 970:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 971:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 972:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 973:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 974:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 975:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2778              	 .loc 2 975 0
 2779              	 .cfi_startproc
 2780 0000 90B5     	 push {r4,r7,lr}
 2781              	.LCFI124:
 2782              	 .cfi_def_cfa_offset 12
 2783              	 .cfi_offset 4,-12
 2784              	 .cfi_offset 7,-8
 2785              	 .cfi_offset 14,-4
 2786 0002 83B0     	 sub sp,sp,#12
 2787              	.LCFI125:
 2788              	 .cfi_def_cfa_offset 24
 2789 0004 00AF     	 add r7,sp,#0
 2790              	.LCFI126:
 2791              	 .cfi_def_cfa_register 7
 2792 0006 7860     	 str r0,[r7,#4]
 2793 0008 0C1C     	 mov r4,r1
 2794 000a 101C     	 mov r0,r2
 2795 000c 191C     	 mov r1,r3
 2796 000e FB1C     	 add r3,r7,#3
 2797 0010 221C     	 add r2,r4,#0
 2798 0012 1A70     	 strb r2,[r3]
 2799 0014 BB1C     	 add r3,r7,#2
 2800 0016 021C     	 add r2,r0,#0
 2801 0018 1A70     	 strb r2,[r3]
 2802 001a 7B1C     	 add r3,r7,#1
 2803 001c 0A1C     	 add r2,r1,#0
 2804 001e 1A70     	 strb r2,[r3]
 976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 977:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 978:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 979:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 980:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 981:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 982:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 983:../Libraries/XMCLib/src/xmc_vadc.c **** 
 984:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2805              	 .loc 2 984 0
 2806 0020 FB1C     	 add r3,r7,#3
 2807 0022 1B78     	 ldrb r3,[r3]
 2808 0024 002B     	 cmp r3,#0
 2809 0026 20D1     	 bne .L111
 985:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 986:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 2810              	 .loc 2 986 0
 2811 0028 7B68     	 ldr r3,[r7,#4]
 2812 002a E022     	 mov r2,#224
 2813 002c 9B58     	 ldr r3,[r3,r2]
 2814 002e BA1C     	 add r2,r7,#2
 2815 0030 1278     	 ldrb r2,[r2]
 2816 0032 7F21     	 mov r1,#127
 2817 0034 9140     	 lsl r1,r1,r2
 2818 0036 0A1C     	 mov r2,r1
 2819 0038 D243     	 mvn r2,r2
 2820 003a 1340     	 and r3,r2
 2821 003c 8022     	 mov r2,#128
 2822 003e 1202     	 lsl r2,r2,#8
 2823 0040 1A43     	 orr r2,r3
 2824 0042 7B68     	 ldr r3,[r7,#4]
 2825 0044 E021     	 mov r1,#224
 2826 0046 5A50     	 str r2,[r3,r1]
 987:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 988:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 2827              	 .loc 2 988 0
 2828 0048 7B68     	 ldr r3,[r7,#4]
 2829 004a E022     	 mov r2,#224
 2830 004c 9A58     	 ldr r2,[r3,r2]
 2831 004e 7B1C     	 add r3,r7,#1
 2832 0050 1978     	 ldrb r1,[r3]
 2833 0052 BB1C     	 add r3,r7,#2
 2834 0054 1B78     	 ldrb r3,[r3]
 2835 0056 9940     	 lsl r1,r1,r3
 2836 0058 0B1C     	 mov r3,r1
 2837 005a 1343     	 orr r3,r2
 2838 005c 8022     	 mov r2,#128
 2839 005e 1202     	 lsl r2,r2,#8
 2840 0060 1A43     	 orr r2,r3
 2841 0062 7B68     	 ldr r3,[r7,#4]
 2842 0064 E021     	 mov r1,#224
 2843 0066 5A50     	 str r2,[r3,r1]
 2844 0068 23E0     	 b .L110
 2845              	.L111:
 989:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 990:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2846              	 .loc 2 990 0
 2847 006a FB1C     	 add r3,r7,#3
 2848 006c 1B78     	 ldrb r3,[r3]
 2849 006e 012B     	 cmp r3,#1
 2850 0070 1FD1     	 bne .L110
 991:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 992:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 2851              	 .loc 2 992 0
 2852 0072 7B68     	 ldr r3,[r7,#4]
 2853 0074 E422     	 mov r2,#228
 2854 0076 9B58     	 ldr r3,[r3,r2]
 2855 0078 BA1C     	 add r2,r7,#2
 2856 007a 1278     	 ldrb r2,[r2]
 2857 007c 7F21     	 mov r1,#127
 2858 007e 9140     	 lsl r1,r1,r2
 2859 0080 0A1C     	 mov r2,r1
 2860 0082 D243     	 mvn r2,r2
 2861 0084 1340     	 and r3,r2
 2862 0086 8022     	 mov r2,#128
 2863 0088 1202     	 lsl r2,r2,#8
 2864 008a 1A43     	 orr r2,r3
 2865 008c 7B68     	 ldr r3,[r7,#4]
 2866 008e E421     	 mov r1,#228
 2867 0090 5A50     	 str r2,[r3,r1]
 993:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 994:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 2868              	 .loc 2 994 0
 2869 0092 7B68     	 ldr r3,[r7,#4]
 2870 0094 E422     	 mov r2,#228
 2871 0096 9A58     	 ldr r2,[r3,r2]
 2872 0098 7B1C     	 add r3,r7,#1
 2873 009a 1978     	 ldrb r1,[r3]
 2874 009c BB1C     	 add r3,r7,#2
 2875 009e 1B78     	 ldrb r3,[r3]
 2876 00a0 9940     	 lsl r1,r1,r3
 2877 00a2 0B1C     	 mov r3,r1
 2878 00a4 1343     	 orr r3,r2
 2879 00a6 8022     	 mov r2,#128
 2880 00a8 1202     	 lsl r2,r2,#8
 2881 00aa 1A43     	 orr r2,r3
 2882 00ac 7B68     	 ldr r3,[r7,#4]
 2883 00ae E421     	 mov r1,#228
 2884 00b0 5A50     	 str r2,[r3,r1]
 2885              	.L110:
 995:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 996:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 997:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 998:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 999:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1000:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2886              	 .loc 2 1000 0
 2887 00b2 BD46     	 mov sp,r7
 2888 00b4 03B0     	 add sp,sp,#12
 2889              	 
 2890 00b6 90BD     	 pop {r4,r7,pc}
 2891              	 .cfi_endproc
 2892              	.LFE159:
 2894              	 .section .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop,"ax",%progbits
 2895              	 .align 2
 2896              	 .global XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
 2897              	 .code 16
 2898              	 .thumb_func
 2900              	XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:
 2901              	.LFB160:
1001:../Libraries/XMCLib/src/xmc_vadc.c **** 
1002:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1003:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1004:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1005:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1006:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1007:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2902              	 .loc 2 1007 0
 2903              	 .cfi_startproc
 2904 0000 90B5     	 push {r4,r7,lr}
 2905              	.LCFI127:
 2906              	 .cfi_def_cfa_offset 12
 2907              	 .cfi_offset 4,-12
 2908              	 .cfi_offset 7,-8
 2909              	 .cfi_offset 14,-4
 2910 0002 83B0     	 sub sp,sp,#12
 2911              	.LCFI128:
 2912              	 .cfi_def_cfa_offset 24
 2913 0004 00AF     	 add r7,sp,#0
 2914              	.LCFI129:
 2915              	 .cfi_def_cfa_register 7
 2916 0006 7860     	 str r0,[r7,#4]
 2917 0008 0C1C     	 mov r4,r1
 2918 000a 101C     	 mov r0,r2
 2919 000c 191C     	 mov r1,r3
 2920 000e FB1C     	 add r3,r7,#3
 2921 0010 221C     	 add r2,r4,#0
 2922 0012 1A70     	 strb r2,[r3]
 2923 0014 BB1C     	 add r3,r7,#2
 2924 0016 021C     	 add r2,r0,#0
 2925 0018 1A70     	 strb r2,[r3]
 2926 001a 7B1C     	 add r3,r7,#1
 2927 001c 0A1C     	 add r2,r1,#0
 2928 001e 1A70     	 strb r2,[r3]
1008:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1009:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1011:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1012:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1013:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1014:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1015:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1016:../Libraries/XMCLib/src/xmc_vadc.c **** 
1017:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
 2929              	 .loc 2 1017 0
 2930 0020 7B68     	 ldr r3,[r7,#4]
 2931 0022 1B6D     	 ldr r3,[r3,#80]
1018:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 2932              	 .loc 2 1018 0
 2933 0024 BA1C     	 add r2,r7,#2
 2934 0026 1278     	 ldrb r2,[r2]
 2935 0028 0C49     	 ldr r1,.L114
 2936 002a 9140     	 lsl r1,r1,r2
 2937 002c 0A1C     	 mov r2,r1
1017:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 2938              	 .loc 2 1017 0
 2939 002e D243     	 mvn r2,r2
 2940 0030 1A40     	 and r2,r3
 2941 0032 7B68     	 ldr r3,[r7,#4]
 2942 0034 1A65     	 str r2,[r3,#80]
1019:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 2943              	 .loc 2 1019 0
 2944 0036 7B68     	 ldr r3,[r7,#4]
 2945 0038 1A6D     	 ldr r2,[r3,#80]
 2946 003a 7B1C     	 add r3,r7,#1
 2947 003c 1978     	 ldrb r1,[r3]
 2948 003e FB1C     	 add r3,r7,#3
 2949 0040 1B78     	 ldrb r3,[r3]
 2950 0042 1B02     	 lsl r3,r3,#8
 2951 0044 1943     	 orr r1,r3
 2952 0046 BB1C     	 add r3,r7,#2
 2953 0048 1B78     	 ldrb r3,[r3]
 2954 004a 9940     	 lsl r1,r1,r3
 2955 004c 0B1C     	 mov r3,r1
 2956 004e 1A43     	 orr r2,r3
 2957 0050 7B68     	 ldr r3,[r7,#4]
 2958 0052 1A65     	 str r2,[r3,#80]
1020:../Libraries/XMCLib/src/xmc_vadc.c **** 
1021:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2959              	 .loc 2 1021 0
 2960 0054 BD46     	 mov sp,r7
 2961 0056 03B0     	 add sp,sp,#12
 2962              	 
 2963 0058 90BD     	 pop {r4,r7,pc}
 2964              	.L115:
 2965 005a C046     	 .align 2
 2966              	.L114:
 2967 005c 1F810000 	 .word 33055
 2968              	 .cfi_endproc
 2969              	.LFE160:
 2971              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 2972              	 .align 2
 2973              	 .global XMC_VADC_GROUP_ScanInit
 2974              	 .code 16
 2975              	 .thumb_func
 2977              	XMC_VADC_GROUP_ScanInit:
 2978              	.LFB161:
1022:../Libraries/XMCLib/src/xmc_vadc.c **** 
1023:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_SHS_AVAILABLE */
1024:../Libraries/XMCLib/src/xmc_vadc.c **** 
1025:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1026:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1027:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1028:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2979              	 .loc 2 1028 0
 2980              	 .cfi_startproc
 2981 0000 80B5     	 push {r7,lr}
 2982              	.LCFI130:
 2983              	 .cfi_def_cfa_offset 8
 2984              	 .cfi_offset 7,-8
 2985              	 .cfi_offset 14,-4
 2986 0002 84B0     	 sub sp,sp,#16
 2987              	.LCFI131:
 2988              	 .cfi_def_cfa_offset 24
 2989 0004 00AF     	 add r7,sp,#0
 2990              	.LCFI132:
 2991              	 .cfi_def_cfa_register 7
 2992 0006 7860     	 str r0,[r7,#4]
 2993 0008 3960     	 str r1,[r7]
1029:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1030:../Libraries/XMCLib/src/xmc_vadc.c **** 
1031:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1032:../Libraries/XMCLib/src/xmc_vadc.c **** 
1033:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2994              	 .loc 2 1034 0
 2995 000a 7B68     	 ldr r3,[r7,#4]
 2996 000c 181C     	 mov r0,r3
 2997 000e FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1035:../Libraries/XMCLib/src/xmc_vadc.c ****   
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 2998              	 .loc 2 1037 0
 2999 0012 7B68     	 ldr r3,[r7,#4]
 3000 0014 8422     	 mov r2,#132
 3001 0016 9B58     	 ldr r3,[r3,r2]
 3002 0018 FB60     	 str r3,[r7,#12]
1038:../Libraries/XMCLib/src/xmc_vadc.c **** 
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1040:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 3003              	 .loc 2 1040 0
 3004 001a FB68     	 ldr r3,[r7,#12]
 3005 001c 3022     	 mov r2,#48
 3006 001e 9343     	 bic r3,r2
 3007 0020 FB60     	 str r3,[r7,#12]
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 3008              	 .loc 2 1041 0
 3009 0022 3B68     	 ldr r3,[r7]
 3010 0024 1B78     	 ldrb r3,[r3]
 3011 0026 1B07     	 lsl r3,r3,#28
 3012 0028 9B0F     	 lsr r3,r3,#30
 3013 002a DBB2     	 uxtb r3,r3
 3014 002c 1B01     	 lsl r3,r3,#4
 3015 002e FA68     	 ldr r2,[r7,#12]
 3016 0030 1343     	 orr r3,r2
 3017 0032 FB60     	 str r3,[r7,#12]
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   
1043:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3018              	 .loc 2 1044 0
 3019 0034 3B68     	 ldr r3,[r7]
 3020 0036 1B78     	 ldrb r3,[r3]
 3021 0038 0322     	 mov r2,#3
 3022 003a 1340     	 and r3,r2
 3023 003c DBB2     	 uxtb r3,r3
 3024 003e 002B     	 cmp r3,#0
 3025 0040 03D0     	 beq .L117
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1046:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 3026              	 .loc 2 1046 0
 3027 0042 FB68     	 ldr r3,[r7,#12]
 3028 0044 8022     	 mov r2,#128
 3029 0046 1343     	 orr r3,r2
 3030 0048 FB60     	 str r3,[r7,#12]
 3031              	.L117:
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1048:../Libraries/XMCLib/src/xmc_vadc.c **** 
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3032              	 .loc 2 1049 0
 3033 004a 7B68     	 ldr r3,[r7,#4]
 3034 004c 8421     	 mov r1,#132
 3035 004e FA68     	 ldr r2,[r7,#12]
 3036 0050 5A50     	 str r2,[r3,r1]
1050:../Libraries/XMCLib/src/xmc_vadc.c **** 
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 3037              	 .loc 2 1051 0
 3038 0052 3B68     	 ldr r3,[r7]
 3039 0054 5B68     	 ldr r3,[r3,#4]
 3040 0056 154A     	 ldr r2,.L119
 3041 0058 1A43     	 orr r2,r3
 3042 005a 111C     	 mov r1,r2
 3043 005c 7A68     	 ldr r2,[r7,#4]
 3044 005e 9023     	 mov r3,#144
 3045 0060 5B00     	 lsl r3,r3,#1
 3046 0062 D150     	 str r1,[r2,r3]
1052:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1053:../Libraries/XMCLib/src/xmc_vadc.c **** 
1054:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3047              	 .loc 2 1054 0
 3048 0064 3B68     	 ldr r3,[r7]
 3049 0066 9B68     	 ldr r3,[r3,#8]
 3050 0068 0122     	 mov r2,#1
 3051 006a 1A43     	 orr r2,r3
 3052 006c 111C     	 mov r1,r2
 3053 006e 7A68     	 ldr r2,[r7,#4]
 3054 0070 9223     	 mov r3,#146
 3055 0072 5B00     	 lsl r3,r3,#1
 3056 0074 D150     	 str r1,[r2,r3]
1055:../Libraries/XMCLib/src/xmc_vadc.c ****   
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3057              	 .loc 2 1056 0
 3058 0076 3B68     	 ldr r3,[r7]
 3059 0078 1B78     	 ldrb r3,[r3]
 3060 007a 0322     	 mov r2,#3
 3061 007c 1340     	 and r3,r2
 3062 007e DBB2     	 uxtb r3,r3
 3063 0080 022B     	 cmp r3,#2
 3064 0082 0BD1     	 bne .L118
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1058:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 3065              	 .loc 2 1058 0
 3066 0084 7A68     	 ldr r2,[r7,#4]
 3067 0086 9223     	 mov r3,#146
 3068 0088 5B00     	 lsl r3,r3,#1
 3069 008a D358     	 ldr r3,[r2,r3]
 3070 008c 8022     	 mov r2,#128
 3071 008e 5202     	 lsl r2,r2,#9
 3072 0090 1A43     	 orr r2,r3
 3073 0092 111C     	 mov r1,r2
 3074 0094 7A68     	 ldr r2,[r7,#4]
 3075 0096 9223     	 mov r3,#146
 3076 0098 5B00     	 lsl r3,r3,#1
 3077 009a D150     	 str r1,[r2,r3]
 3078              	.L118:
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1060:../Libraries/XMCLib/src/xmc_vadc.c ****   
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 3079              	 .loc 2 1062 0
 3080 009c 7B68     	 ldr r3,[r7,#4]
 3081 009e 181C     	 mov r0,r3
 3082 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1063:../Libraries/XMCLib/src/xmc_vadc.c ****   
1064:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3083              	 .loc 2 1064 0
 3084 00a4 BD46     	 mov sp,r7
 3085 00a6 04B0     	 add sp,sp,#16
 3086              	 
 3087 00a8 80BD     	 pop {r7,pc}
 3088              	.L120:
 3089 00aa C046     	 .align 2
 3090              	.L119:
 3091 00ac 00808080 	 .word -2139062272
 3092              	 .cfi_endproc
 3093              	.LFE161:
 3095              	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 3096              	 .align 2
 3097              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 3098              	 .code 16
 3099              	 .thumb_func
 3101              	XMC_VADC_GROUP_ScanSelectTrigger:
 3102              	.LFB162:
1065:../Libraries/XMCLib/src/xmc_vadc.c **** 
1066:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1067:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1068:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3103              	 .loc 2 1068 0
 3104              	 .cfi_startproc
 3105 0000 80B5     	 push {r7,lr}
 3106              	.LCFI133:
 3107              	 .cfi_def_cfa_offset 8
 3108              	 .cfi_offset 7,-8
 3109              	 .cfi_offset 14,-4
 3110 0002 84B0     	 sub sp,sp,#16
 3111              	.LCFI134:
 3112              	 .cfi_def_cfa_offset 24
 3113 0004 00AF     	 add r7,sp,#0
 3114              	.LCFI135:
 3115              	 .cfi_def_cfa_register 7
 3116 0006 7860     	 str r0,[r7,#4]
 3117 0008 0A1C     	 mov r2,r1
 3118 000a FB1C     	 add r3,r7,#3
 3119 000c 1A70     	 strb r2,[r3]
1069:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1070:../Libraries/XMCLib/src/xmc_vadc.c **** 
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1072:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1073:../Libraries/XMCLib/src/xmc_vadc.c **** 
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3120              	 .loc 2 1074 0
 3121 000e 7A68     	 ldr r2,[r7,#4]
 3122 0010 9023     	 mov r3,#144
 3123 0012 5B00     	 lsl r3,r3,#1
 3124 0014 D358     	 ldr r3,[r2,r3]
 3125 0016 FB60     	 str r3,[r7,#12]
1075:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3126              	 .loc 2 1075 0
 3127 0018 FB68     	 ldr r3,[r7,#12]
 3128 001a 8022     	 mov r2,#128
 3129 001c 1202     	 lsl r2,r2,#8
 3130 001e 1343     	 orr r3,r2
 3131 0020 FB60     	 str r3,[r7,#12]
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 3132              	 .loc 2 1076 0
 3133 0022 FB68     	 ldr r3,[r7,#12]
 3134 0024 084A     	 ldr r2,.L122
 3135 0026 1340     	 and r3,r2
 3136 0028 FB60     	 str r3,[r7,#12]
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 3137              	 .loc 2 1077 0
 3138 002a FB1C     	 add r3,r7,#3
 3139 002c 1B78     	 ldrb r3,[r3]
 3140 002e 1B02     	 lsl r3,r3,#8
 3141 0030 FA68     	 ldr r2,[r7,#12]
 3142 0032 1343     	 orr r3,r2
 3143 0034 FB60     	 str r3,[r7,#12]
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3144              	 .loc 2 1078 0
 3145 0036 7A68     	 ldr r2,[r7,#4]
 3146 0038 9023     	 mov r3,#144
 3147 003a 5B00     	 lsl r3,r3,#1
 3148 003c F968     	 ldr r1,[r7,#12]
 3149 003e D150     	 str r1,[r2,r3]
1079:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3150              	 .loc 2 1079 0
 3151 0040 BD46     	 mov sp,r7
 3152 0042 04B0     	 add sp,sp,#16
 3153              	 
 3154 0044 80BD     	 pop {r7,pc}
 3155              	.L123:
 3156 0046 C046     	 .align 2
 3157              	.L122:
 3158 0048 FFF0FFFF 	 .word -3841
 3159              	 .cfi_endproc
 3160              	.LFE162:
 3162              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 3163              	 .align 2
 3164              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 3165              	 .code 16
 3166              	 .thumb_func
 3168              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 3169              	.LFB163:
1080:../Libraries/XMCLib/src/xmc_vadc.c **** 
1081:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1082:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1083:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3170              	 .loc 2 1083 0
 3171              	 .cfi_startproc
 3172 0000 80B5     	 push {r7,lr}
 3173              	.LCFI136:
 3174              	 .cfi_def_cfa_offset 8
 3175              	 .cfi_offset 7,-8
 3176              	 .cfi_offset 14,-4
 3177 0002 84B0     	 sub sp,sp,#16
 3178              	.LCFI137:
 3179              	 .cfi_def_cfa_offset 24
 3180 0004 00AF     	 add r7,sp,#0
 3181              	.LCFI138:
 3182              	 .cfi_def_cfa_register 7
 3183 0006 7860     	 str r0,[r7,#4]
 3184 0008 0A1C     	 mov r2,r1
 3185 000a FB1C     	 add r3,r7,#3
 3186 000c 1A70     	 strb r2,[r3]
1084:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1085:../Libraries/XMCLib/src/xmc_vadc.c **** 
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1087:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1088:../Libraries/XMCLib/src/xmc_vadc.c **** 
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3187              	 .loc 2 1089 0
 3188 000e 7A68     	 ldr r2,[r7,#4]
 3189 0010 9023     	 mov r3,#144
 3190 0012 5B00     	 lsl r3,r3,#1
 3191 0014 D358     	 ldr r3,[r2,r3]
 3192 0016 FB60     	 str r3,[r7,#12]
1090:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3193              	 .loc 2 1090 0
 3194 0018 FB68     	 ldr r3,[r7,#12]
 3195 001a 8022     	 mov r2,#128
 3196 001c 1202     	 lsl r2,r2,#8
 3197 001e 1343     	 orr r3,r2
 3198 0020 FB60     	 str r3,[r7,#12]
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 3199              	 .loc 2 1091 0
 3200 0022 FB68     	 ldr r3,[r7,#12]
 3201 0024 084A     	 ldr r2,.L125
 3202 0026 1340     	 and r3,r2
 3203 0028 FB60     	 str r3,[r7,#12]
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 3204              	 .loc 2 1092 0
 3205 002a FB1C     	 add r3,r7,#3
 3206 002c 1B78     	 ldrb r3,[r3]
 3207 002e 5B03     	 lsl r3,r3,#13
 3208 0030 FA68     	 ldr r2,[r7,#12]
 3209 0032 1343     	 orr r3,r2
 3210 0034 FB60     	 str r3,[r7,#12]
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3211              	 .loc 2 1093 0
 3212 0036 7A68     	 ldr r2,[r7,#4]
 3213 0038 9023     	 mov r3,#144
 3214 003a 5B00     	 lsl r3,r3,#1
 3215 003c F968     	 ldr r1,[r7,#12]
 3216 003e D150     	 str r1,[r2,r3]
1094:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3217              	 .loc 2 1094 0
 3218 0040 BD46     	 mov sp,r7
 3219 0042 04B0     	 add sp,sp,#16
 3220              	 
 3221 0044 80BD     	 pop {r7,pc}
 3222              	.L126:
 3223 0046 C046     	 .align 2
 3224              	.L125:
 3225 0048 FF9FFFFF 	 .word -24577
 3226              	 .cfi_endproc
 3227              	.LFE163:
 3229              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 3230              	 .align 2
 3231              	 .global XMC_VADC_GROUP_ScanSelectGating
 3232              	 .code 16
 3233              	 .thumb_func
 3235              	XMC_VADC_GROUP_ScanSelectGating:
 3236              	.LFB164:
1095:../Libraries/XMCLib/src/xmc_vadc.c **** 
1096:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1097:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1098:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3237              	 .loc 2 1098 0
 3238              	 .cfi_startproc
 3239 0000 80B5     	 push {r7,lr}
 3240              	.LCFI139:
 3241              	 .cfi_def_cfa_offset 8
 3242              	 .cfi_offset 7,-8
 3243              	 .cfi_offset 14,-4
 3244 0002 84B0     	 sub sp,sp,#16
 3245              	.LCFI140:
 3246              	 .cfi_def_cfa_offset 24
 3247 0004 00AF     	 add r7,sp,#0
 3248              	.LCFI141:
 3249              	 .cfi_def_cfa_register 7
 3250 0006 7860     	 str r0,[r7,#4]
 3251 0008 0A1C     	 mov r2,r1
 3252 000a FB1C     	 add r3,r7,#3
 3253 000c 1A70     	 strb r2,[r3]
1099:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1100:../Libraries/XMCLib/src/xmc_vadc.c **** 
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1102:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1103:../Libraries/XMCLib/src/xmc_vadc.c **** 
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3254              	 .loc 2 1104 0
 3255 000e 7A68     	 ldr r2,[r7,#4]
 3256 0010 9023     	 mov r3,#144
 3257 0012 5B00     	 lsl r3,r3,#1
 3258 0014 D358     	 ldr r3,[r2,r3]
 3259 0016 FB60     	 str r3,[r7,#12]
1105:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 3260              	 .loc 2 1105 0
 3261 0018 FB68     	 ldr r3,[r7,#12]
 3262 001a 8022     	 mov r2,#128
 3263 001c 1204     	 lsl r2,r2,#16
 3264 001e 1343     	 orr r3,r2
 3265 0020 FB60     	 str r3,[r7,#12]
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 3266              	 .loc 2 1106 0
 3267 0022 FB68     	 ldr r3,[r7,#12]
 3268 0024 084A     	 ldr r2,.L128
 3269 0026 1340     	 and r3,r2
 3270 0028 FB60     	 str r3,[r7,#12]
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 3271              	 .loc 2 1107 0
 3272 002a FB1C     	 add r3,r7,#3
 3273 002c 1B78     	 ldrb r3,[r3]
 3274 002e 1B04     	 lsl r3,r3,#16
 3275 0030 FA68     	 ldr r2,[r7,#12]
 3276 0032 1343     	 orr r3,r2
 3277 0034 FB60     	 str r3,[r7,#12]
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3278              	 .loc 2 1108 0
 3279 0036 7A68     	 ldr r2,[r7,#4]
 3280 0038 9023     	 mov r3,#144
 3281 003a 5B00     	 lsl r3,r3,#1
 3282 003c F968     	 ldr r1,[r7,#12]
 3283 003e D150     	 str r1,[r2,r3]
1109:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3284              	 .loc 2 1109 0
 3285 0040 BD46     	 mov sp,r7
 3286 0042 04B0     	 add sp,sp,#16
 3287              	 
 3288 0044 80BD     	 pop {r7,pc}
 3289              	.L129:
 3290 0046 C046     	 .align 2
 3291              	.L128:
 3292 0048 FFFFF0FF 	 .word -983041
 3293              	 .cfi_endproc
 3294              	.LFE164:
 3296              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 3297              	 .align 2
 3298              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 3299              	 .code 16
 3300              	 .thumb_func
 3302              	XMC_VADC_GROUP_ScanSequenceAbort:
 3303              	.LFB165:
1110:../Libraries/XMCLib/src/xmc_vadc.c **** 
1111:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1112:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1113:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3304              	 .loc 2 1113 0
 3305              	 .cfi_startproc
 3306 0000 80B5     	 push {r7,lr}
 3307              	.LCFI142:
 3308              	 .cfi_def_cfa_offset 8
 3309              	 .cfi_offset 7,-8
 3310              	 .cfi_offset 14,-4
 3311 0002 84B0     	 sub sp,sp,#16
 3312              	.LCFI143:
 3313              	 .cfi_def_cfa_offset 24
 3314 0004 00AF     	 add r7,sp,#0
 3315              	.LCFI144:
 3316              	 .cfi_def_cfa_register 7
 3317 0006 7860     	 str r0,[r7,#4]
1114:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1115:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1116:../Libraries/XMCLib/src/xmc_vadc.c **** 
1117:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1118:../Libraries/XMCLib/src/xmc_vadc.c **** 
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1120:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 3318              	 .loc 2 1120 0
 3319 0008 7A68     	 ldr r2,[r7,#4]
 3320 000a 9023     	 mov r3,#144
 3321 000c 5B00     	 lsl r3,r3,#1
 3322 000e D358     	 ldr r3,[r2,r3]
 3323 0010 FB60     	 str r3,[r7,#12]
1121:../Libraries/XMCLib/src/xmc_vadc.c **** 
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 3324              	 .loc 2 1122 0
 3325 0012 7A68     	 ldr r2,[r7,#4]
 3326 0014 9023     	 mov r3,#144
 3327 0016 5B00     	 lsl r3,r3,#1
 3328 0018 1E49     	 ldr r1,.L131
 3329 001a D150     	 str r1,[r2,r3]
1123:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1124:../Libraries/XMCLib/src/xmc_vadc.c **** 
1125:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1126:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 3330              	 .loc 2 1126 0
 3331 001c 7B68     	 ldr r3,[r7,#4]
 3332 001e 8422     	 mov r2,#132
 3333 0020 9B58     	 ldr r3,[r3,r2]
 3334 0022 5B0E     	 lsr r3,r3,#25
 3335 0024 0122     	 mov r2,#1
 3336 0026 1A40     	 and r2,r3
 3337 0028 0B23     	 mov r3,#11
 3338 002a FB18     	 add r3,r7,r3
 3339 002c 511E     	 sub r1,r2,#1
 3340 002e 8A41     	 sbc r2,r2,r1
 3341 0030 1A70     	 strb r2,[r3]
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3342              	 .loc 2 1127 0
 3343 0032 7B68     	 ldr r3,[r7,#4]
 3344 0034 181C     	 mov r0,r3
 3345 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1128:../Libraries/XMCLib/src/xmc_vadc.c **** 
1129:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 3346              	 .loc 2 1129 0
 3347 003a 7A68     	 ldr r2,[r7,#4]
 3348 003c 9223     	 mov r3,#146
 3349 003e 5B00     	 lsl r3,r3,#1
 3350 0040 D358     	 ldr r3,[r2,r3]
 3351 0042 0322     	 mov r2,#3
 3352 0044 9343     	 bic r3,r2
 3353 0046 191C     	 mov r1,r3
 3354 0048 7A68     	 ldr r2,[r7,#4]
 3355 004a 9223     	 mov r3,#146
 3356 004c 5B00     	 lsl r3,r3,#1
 3357 004e D150     	 str r1,[r2,r3]
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 3358              	 .loc 2 1130 0
 3359 0050 7A68     	 ldr r2,[r7,#4]
 3360 0052 9223     	 mov r3,#146
 3361 0054 5B00     	 lsl r3,r3,#1
 3362 0056 D358     	 ldr r3,[r2,r3]
 3363 0058 8022     	 mov r2,#128
 3364 005a 5200     	 lsl r2,r2,#1
 3365 005c 1A43     	 orr r2,r3
 3366 005e 111C     	 mov r1,r2
 3367 0060 7A68     	 ldr r2,[r7,#4]
 3368 0062 9223     	 mov r3,#146
 3369 0064 5B00     	 lsl r3,r3,#1
 3370 0066 D150     	 str r1,[r2,r3]
1131:../Libraries/XMCLib/src/xmc_vadc.c **** 
1132:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1133:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 3371              	 .loc 2 1133 0
 3372 0068 7B68     	 ldr r3,[r7,#4]
 3373 006a 8422     	 mov r2,#132
 3374 006c 9A58     	 ldr r2,[r3,r2]
 3375 006e 0B23     	 mov r3,#11
 3376 0070 FB18     	 add r3,r7,r3
 3377 0072 1B78     	 ldrb r3,[r3]
 3378 0074 5B06     	 lsl r3,r3,#25
 3379 0076 1A43     	 orr r2,r3
 3380 0078 7B68     	 ldr r3,[r7,#4]
 3381 007a 8421     	 mov r1,#132
 3382 007c 5A50     	 str r2,[r3,r1]
1134:../Libraries/XMCLib/src/xmc_vadc.c **** 
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1136:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1137:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3383              	 .loc 2 1137 0
 3384 007e FB68     	 ldr r3,[r7,#12]
 3385 0080 044A     	 ldr r2,.L131
 3386 0082 1A43     	 orr r2,r3
 3387 0084 111C     	 mov r1,r2
1136:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3388              	 .loc 2 1136 0
 3389 0086 7A68     	 ldr r2,[r7,#4]
 3390 0088 9023     	 mov r3,#144
 3391 008a 5B00     	 lsl r3,r3,#1
 3392 008c D150     	 str r1,[r2,r3]
1138:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3393              	 .loc 2 1138 0
 3394 008e BD46     	 mov sp,r7
 3395 0090 04B0     	 add sp,sp,#16
 3396              	 
 3397 0092 80BD     	 pop {r7,pc}
 3398              	.L132:
 3399              	 .align 2
 3400              	.L131:
 3401 0094 00808080 	 .word -2139062272
 3402              	 .cfi_endproc
 3403              	.LFE165:
 3405              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 3406              	 .align 2
 3407              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 3408              	 .code 16
 3409              	 .thumb_func
 3411              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 3412              	.LFB166:
1139:../Libraries/XMCLib/src/xmc_vadc.c **** 
1140:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1141:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1142:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3413              	 .loc 2 1142 0
 3414              	 .cfi_startproc
 3415 0000 80B5     	 push {r7,lr}
 3416              	.LCFI145:
 3417              	 .cfi_def_cfa_offset 8
 3418              	 .cfi_offset 7,-8
 3419              	 .cfi_offset 14,-4
 3420 0002 86B0     	 sub sp,sp,#24
 3421              	.LCFI146:
 3422              	 .cfi_def_cfa_offset 32
 3423 0004 00AF     	 add r7,sp,#0
 3424              	.LCFI147:
 3425              	 .cfi_def_cfa_register 7
 3426 0006 7860     	 str r0,[r7,#4]
1143:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1144:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1145:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1146:../Libraries/XMCLib/src/xmc_vadc.c **** 
1147:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1148:../Libraries/XMCLib/src/xmc_vadc.c **** 
1149:../Libraries/XMCLib/src/xmc_vadc.c **** 
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3427              	 .loc 2 1150 0
 3428 0008 0023     	 mov r3,#0
 3429 000a FB60     	 str r3,[r7,#12]
1151:../Libraries/XMCLib/src/xmc_vadc.c **** 
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 3430              	 .loc 2 1152 0
 3431 000c 7A68     	 ldr r2,[r7,#4]
 3432 000e 9623     	 mov r3,#150
 3433 0010 5B00     	 lsl r3,r3,#1
 3434 0012 D358     	 ldr r3,[r2,r3]
 3435 0014 002B     	 cmp r3,#0
 3436 0016 17D0     	 beq .L134
1153:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1154:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 3437              	 .loc 2 1154 0
 3438 0018 7A68     	 ldr r2,[r7,#4]
 3439 001a 9623     	 mov r3,#150
 3440 001c 5B00     	 lsl r3,r3,#1
 3441 001e D358     	 ldr r3,[r2,r3]
 3442 0020 7B61     	 str r3,[r7,#20]
1155:../Libraries/XMCLib/src/xmc_vadc.c **** 
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 3443              	 .loc 2 1156 0
 3444 0022 0023     	 mov r3,#0
 3445 0024 3B61     	 str r3,[r7,#16]
 3446 0026 0CE0     	 b .L135
 3447              	.L137:
1157:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1158:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 3448              	 .loc 2 1158 0
 3449 0028 7B69     	 ldr r3,[r7,#20]
 3450 002a 0122     	 mov r2,#1
 3451 002c 1340     	 and r3,r2
 3452 002e 02D0     	 beq .L136
1159:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1160:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 3453              	 .loc 2 1160 0
 3454 0030 FB68     	 ldr r3,[r7,#12]
 3455 0032 0133     	 add r3,r3,#1
 3456 0034 FB60     	 str r3,[r7,#12]
 3457              	.L136:
1161:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1162:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 3458              	 .loc 2 1162 0 discriminator 2
 3459 0036 7B69     	 ldr r3,[r7,#20]
 3460 0038 5B08     	 lsr r3,r3,#1
 3461 003a 7B61     	 str r3,[r7,#20]
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3462              	 .loc 2 1156 0 discriminator 2
 3463 003c 3B69     	 ldr r3,[r7,#16]
 3464 003e 0133     	 add r3,r3,#1
 3465 0040 3B61     	 str r3,[r7,#16]
 3466              	.L135:
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3467              	 .loc 2 1156 0 is_stmt 0 discriminator 1
 3468 0042 3B69     	 ldr r3,[r7,#16]
 3469 0044 072B     	 cmp r3,#7
 3470 0046 EFD9     	 bls .L137
 3471              	.L134:
1163:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1164:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1165:../Libraries/XMCLib/src/xmc_vadc.c **** 
1166:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3472              	 .loc 2 1166 0 is_stmt 1
 3473 0048 FB68     	 ldr r3,[r7,#12]
1167:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3474              	 .loc 2 1167 0
 3475 004a 181C     	 mov r0,r3
 3476 004c BD46     	 mov sp,r7
 3477 004e 06B0     	 add sp,sp,#24
 3478              	 
 3479 0050 80BD     	 pop {r7,pc}
 3480              	 .cfi_endproc
 3481              	.LFE166:
 3483 0052 C046     	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 3484              	 .align 2
 3485              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 3486              	 .code 16
 3487              	 .thumb_func
 3489              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 3490              	.LFB167:
1168:../Libraries/XMCLib/src/xmc_vadc.c **** 
1169:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1170:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1171:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3491              	 .loc 2 1171 0
 3492              	 .cfi_startproc
 3493 0000 80B5     	 push {r7,lr}
 3494              	.LCFI148:
 3495              	 .cfi_def_cfa_offset 8
 3496              	 .cfi_offset 7,-8
 3497              	 .cfi_offset 14,-4
 3498 0002 84B0     	 sub sp,sp,#16
 3499              	.LCFI149:
 3500              	 .cfi_def_cfa_offset 24
 3501 0004 00AF     	 add r7,sp,#0
 3502              	.LCFI150:
 3503              	 .cfi_def_cfa_register 7
 3504 0006 7860     	 str r0,[r7,#4]
 3505 0008 0A1C     	 mov r2,r1
 3506 000a FB1C     	 add r3,r7,#3
 3507 000c 1A70     	 strb r2,[r3]
1172:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1173:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 3508              	 .loc 2 1173 0
 3509 000e 7A68     	 ldr r2,[r7,#4]
 3510 0010 E023     	 mov r3,#224
 3511 0012 5B00     	 lsl r3,r3,#1
 3512 0014 D358     	 ldr r3,[r2,r3]
 3513 0016 FB60     	 str r3,[r7,#12]
1174:../Libraries/XMCLib/src/xmc_vadc.c **** 
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1176:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1177:../Libraries/XMCLib/src/xmc_vadc.c **** 
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 3514              	 .loc 2 1178 0
 3515 0018 FB68     	 ldr r3,[r7,#12]
 3516 001a F022     	 mov r2,#240
 3517 001c 9343     	 bic r3,r2
 3518 001e FB60     	 str r3,[r7,#12]
1179:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 3519              	 .loc 2 1179 0
 3520 0020 FB1C     	 add r3,r7,#3
 3521 0022 1B78     	 ldrb r3,[r3]
 3522 0024 1B01     	 lsl r3,r3,#4
 3523 0026 FA68     	 ldr r2,[r7,#12]
 3524 0028 1343     	 orr r3,r2
 3525 002a FB60     	 str r3,[r7,#12]
1180:../Libraries/XMCLib/src/xmc_vadc.c **** 
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 3526              	 .loc 2 1181 0
 3527 002c 7A68     	 ldr r2,[r7,#4]
 3528 002e E023     	 mov r3,#224
 3529 0030 5B00     	 lsl r3,r3,#1
 3530 0032 F968     	 ldr r1,[r7,#12]
 3531 0034 D150     	 str r1,[r2,r3]
1182:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3532              	 .loc 2 1182 0
 3533 0036 BD46     	 mov sp,r7
 3534 0038 04B0     	 add sp,sp,#16
 3535              	 
 3536 003a 80BD     	 pop {r7,pc}
 3537              	 .cfi_endproc
 3538              	.LFE167:
 3540              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 3541              	 .align 2
 3542              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 3543              	 .code 16
 3544              	 .thumb_func
 3546              	XMC_VADC_GROUP_ScanRemoveChannel:
 3547              	.LFB168:
1183:../Libraries/XMCLib/src/xmc_vadc.c **** 
1184:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1185:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1186:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3548              	 .loc 2 1186 0
 3549              	 .cfi_startproc
 3550 0000 80B5     	 push {r7,lr}
 3551              	.LCFI151:
 3552              	 .cfi_def_cfa_offset 8
 3553              	 .cfi_offset 7,-8
 3554              	 .cfi_offset 14,-4
 3555 0002 84B0     	 sub sp,sp,#16
 3556              	.LCFI152:
 3557              	 .cfi_def_cfa_offset 24
 3558 0004 00AF     	 add r7,sp,#0
 3559              	.LCFI153:
 3560              	 .cfi_def_cfa_register 7
 3561 0006 7860     	 str r0,[r7,#4]
 3562 0008 3960     	 str r1,[r7]
1187:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1188:../Libraries/XMCLib/src/xmc_vadc.c **** 
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1190:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1191:../Libraries/XMCLib/src/xmc_vadc.c **** 
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 3563              	 .loc 2 1192 0
 3564 000a 7A68     	 ldr r2,[r7,#4]
 3565 000c 9423     	 mov r3,#148
 3566 000e 5B00     	 lsl r3,r3,#1
 3567 0010 D358     	 ldr r3,[r2,r3]
 3568 0012 FB60     	 str r3,[r7,#12]
1193:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 3569              	 .loc 2 1193 0
 3570 0014 3B68     	 ldr r3,[r7]
 3571 0016 0122     	 mov r2,#1
 3572 0018 9A40     	 lsl r2,r2,r3
 3573 001a 131C     	 mov r3,r2
 3574 001c DB43     	 mvn r3,r3
 3575 001e 1A1C     	 mov r2,r3
 3576 0020 FB68     	 ldr r3,[r7,#12]
 3577 0022 1340     	 and r3,r2
 3578 0024 FB60     	 str r3,[r7,#12]
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 3579              	 .loc 2 1194 0
 3580 0026 7A68     	 ldr r2,[r7,#4]
 3581 0028 9423     	 mov r3,#148
 3582 002a 5B00     	 lsl r3,r3,#1
 3583 002c F968     	 ldr r1,[r7,#12]
 3584 002e D150     	 str r1,[r2,r3]
1195:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3585              	 .loc 2 1195 0
 3586 0030 BD46     	 mov sp,r7
 3587 0032 04B0     	 add sp,sp,#16
 3588              	 
 3589 0034 80BD     	 pop {r7,pc}
 3590              	 .cfi_endproc
 3591              	.LFE168:
 3593 0036 C046     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 3594              	 .align 2
 3595              	 .global XMC_VADC_GLOBAL_BackgroundInit
 3596              	 .code 16
 3597              	 .thumb_func
 3599              	XMC_VADC_GLOBAL_BackgroundInit:
 3600              	.LFB169:
1196:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GSCAN_AVAILABLE */
1197:../Libraries/XMCLib/src/xmc_vadc.c **** 
1198:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1199:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1200:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3601              	 .loc 2 1200 0
 3602              	 .cfi_startproc
 3603 0000 80B5     	 push {r7,lr}
 3604              	.LCFI154:
 3605              	 .cfi_def_cfa_offset 8
 3606              	 .cfi_offset 7,-8
 3607              	 .cfi_offset 14,-4
 3608 0002 86B0     	 sub sp,sp,#24
 3609              	.LCFI155:
 3610              	 .cfi_def_cfa_offset 32
 3611 0004 00AF     	 add r7,sp,#0
 3612              	.LCFI156:
 3613              	 .cfi_def_cfa_register 7
 3614 0006 7860     	 str r0,[r7,#4]
 3615 0008 3960     	 str r1,[r7]
1201:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1202:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1203:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1204:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1205:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1208:../Libraries/XMCLib/src/xmc_vadc.c **** 
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3616              	 .loc 2 1210 0
 3617 000a 1723     	 mov r3,#23
 3618 000c FB18     	 add r3,r7,r3
 3619 000e 0022     	 mov r2,#0
 3620 0010 1A70     	 strb r2,[r3]
 3621 0012 0FE0     	 b .L142
 3622              	.L143:
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1212:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3623              	 .loc 2 1212 0 discriminator 3
 3624 0014 1723     	 mov r3,#23
 3625 0016 FB18     	 add r3,r7,r3
 3626 0018 1A78     	 ldrb r2,[r3]
 3627 001a 4A4B     	 ldr r3,.L150
 3628 001c 9200     	 lsl r2,r2,#2
 3629 001e D358     	 ldr r3,[r2,r3]
 3630 0020 181C     	 mov r0,r3
 3631 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3632              	 .loc 2 1210 0 discriminator 3
 3633 0026 1723     	 mov r3,#23
 3634 0028 FB18     	 add r3,r7,r3
 3635 002a 1A78     	 ldrb r2,[r3]
 3636 002c 1723     	 mov r3,#23
 3637 002e FB18     	 add r3,r7,r3
 3638 0030 0132     	 add r2,r2,#1
 3639 0032 1A70     	 strb r2,[r3]
 3640              	.L142:
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3641              	 .loc 2 1210 0 is_stmt 0 discriminator 1
 3642 0034 1723     	 mov r3,#23
 3643 0036 FB18     	 add r3,r7,r3
 3644 0038 1B78     	 ldrb r3,[r3]
 3645 003a 012B     	 cmp r3,#1
 3646 003c EAD9     	 bls .L143
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1214:../Libraries/XMCLib/src/xmc_vadc.c ****   
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 3647              	 .loc 2 1215 0 is_stmt 1
 3648 003e 0023     	 mov r3,#0
 3649 0040 3B61     	 str r3,[r7,#16]
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3650              	 .loc 2 1216 0
 3651 0042 3B68     	 ldr r3,[r7]
 3652 0044 1B78     	 ldrb r3,[r3]
 3653 0046 0322     	 mov r2,#3
 3654 0048 1340     	 and r3,r2
 3655 004a DBB2     	 uxtb r3,r3
 3656 004c 002B     	 cmp r3,#0
 3657 004e 02D0     	 beq .L144
1217:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1218:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 3658              	 .loc 2 1218 0
 3659 0050 8023     	 mov r3,#128
 3660 0052 1B01     	 lsl r3,r3,#4
 3661 0054 3B61     	 str r3,[r7,#16]
 3662              	.L144:
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1220:../Libraries/XMCLib/src/xmc_vadc.c ****   
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3663              	 .loc 2 1221 0
 3664 0056 1723     	 mov r3,#23
 3665 0058 FB18     	 add r3,r7,r3
 3666 005a 0022     	 mov r2,#0
 3667 005c 1A70     	 strb r2,[r3]
 3668 005e 29E0     	 b .L145
 3669              	.L146:
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1223:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 3670              	 .loc 2 1223 0 discriminator 3
 3671 0060 1723     	 mov r3,#23
 3672 0062 FB18     	 add r3,r7,r3
 3673 0064 1A78     	 ldrb r2,[r3]
 3674 0066 374B     	 ldr r3,.L150
 3675 0068 9200     	 lsl r2,r2,#2
 3676 006a D358     	 ldr r3,[r2,r3]
 3677 006c 8422     	 mov r2,#132
 3678 006e 9B58     	 ldr r3,[r3,r2]
 3679 0070 FB60     	 str r3,[r7,#12]
1224:../Libraries/XMCLib/src/xmc_vadc.c **** 
1225:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 3680              	 .loc 2 1225 0 discriminator 3
 3681 0072 FB68     	 ldr r3,[r7,#12]
 3682 0074 344A     	 ldr r2,.L150+4
 3683 0076 1340     	 and r3,r2
 3684 0078 FB60     	 str r3,[r7,#12]
1226:../Libraries/XMCLib/src/xmc_vadc.c **** 
1227:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1228:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 3685              	 .loc 2 1228 0 discriminator 3
 3686 007a 3B68     	 ldr r3,[r7]
 3687 007c 1B78     	 ldrb r3,[r3]
 3688 007e 1B07     	 lsl r3,r3,#28
 3689 0080 9B0F     	 lsr r3,r3,#30
 3690 0082 DBB2     	 uxtb r3,r3
 3691 0084 1B02     	 lsl r3,r3,#8
 3692 0086 FA68     	 ldr r2,[r7,#12]
 3693 0088 1343     	 orr r3,r2
 3694 008a FB60     	 str r3,[r7,#12]
1229:../Libraries/XMCLib/src/xmc_vadc.c ****   
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1231:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 3695              	 .loc 2 1231 0 discriminator 3
 3696 008c FA68     	 ldr r2,[r7,#12]
 3697 008e 3B69     	 ldr r3,[r7,#16]
 3698 0090 1343     	 orr r3,r2
 3699 0092 FB60     	 str r3,[r7,#12]
1232:../Libraries/XMCLib/src/xmc_vadc.c **** 
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 3700              	 .loc 2 1233 0 discriminator 3
 3701 0094 1723     	 mov r3,#23
 3702 0096 FB18     	 add r3,r7,r3
 3703 0098 1A78     	 ldrb r2,[r3]
 3704 009a 2A4B     	 ldr r3,.L150
 3705 009c 9200     	 lsl r2,r2,#2
 3706 009e D358     	 ldr r3,[r2,r3]
 3707 00a0 8421     	 mov r1,#132
 3708 00a2 FA68     	 ldr r2,[r7,#12]
 3709 00a4 5A50     	 str r2,[r3,r1]
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3710              	 .loc 2 1221 0 discriminator 3
 3711 00a6 1723     	 mov r3,#23
 3712 00a8 FB18     	 add r3,r7,r3
 3713 00aa 1A78     	 ldrb r2,[r3]
 3714 00ac 1723     	 mov r3,#23
 3715 00ae FB18     	 add r3,r7,r3
 3716 00b0 0132     	 add r2,r2,#1
 3717 00b2 1A70     	 strb r2,[r3]
 3718              	.L145:
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3719              	 .loc 2 1221 0 is_stmt 0 discriminator 1
 3720 00b4 1723     	 mov r3,#23
 3721 00b6 FB18     	 add r3,r7,r3
 3722 00b8 1B78     	 ldrb r3,[r3]
 3723 00ba 012B     	 cmp r3,#1
 3724 00bc D0D9     	 bls .L146
1234:../Libraries/XMCLib/src/xmc_vadc.c ****   
1235:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1237:../Libraries/XMCLib/src/xmc_vadc.c **** 
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 3725              	 .loc 2 1239 0 is_stmt 1
 3726 00be 3B68     	 ldr r3,[r7]
 3727 00c0 5B68     	 ldr r3,[r3,#4]
 3728 00c2 224A     	 ldr r2,.L150+8
 3729 00c4 1A43     	 orr r2,r3
 3730 00c6 111C     	 mov r1,r2
 3731 00c8 7A68     	 ldr r2,[r7,#4]
 3732 00ca 8023     	 mov r3,#128
 3733 00cc 9B00     	 lsl r3,r3,#2
 3734 00ce D150     	 str r1,[r2,r3]
1240:../Libraries/XMCLib/src/xmc_vadc.c **** 
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1242:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 3735              	 .loc 2 1242 0
 3736 00d0 3B68     	 ldr r3,[r7]
 3737 00d2 9B68     	 ldr r3,[r3,#8]
 3738 00d4 0122     	 mov r2,#1
 3739 00d6 1A43     	 orr r2,r3
 3740 00d8 111C     	 mov r1,r2
 3741 00da 7A68     	 ldr r2,[r7,#4]
 3742 00dc 8123     	 mov r3,#129
 3743 00de 9B00     	 lsl r3,r3,#2
 3744 00e0 D150     	 str r1,[r2,r3]
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   
1244:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1245:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3745              	 .loc 2 1245 0
 3746 00e2 3B68     	 ldr r3,[r7]
 3747 00e4 1B78     	 ldrb r3,[r3]
 3748 00e6 0322     	 mov r2,#3
 3749 00e8 1340     	 and r3,r2
 3750 00ea DBB2     	 uxtb r3,r3
 3751 00ec 022B     	 cmp r3,#2
 3752 00ee 0BD1     	 bne .L147
1246:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1247:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 3753              	 .loc 2 1247 0
 3754 00f0 7A68     	 ldr r2,[r7,#4]
 3755 00f2 8123     	 mov r3,#129
 3756 00f4 9B00     	 lsl r3,r3,#2
 3757 00f6 D358     	 ldr r3,[r2,r3]
 3758 00f8 8022     	 mov r2,#128
 3759 00fa 5202     	 lsl r2,r2,#9
 3760 00fc 1A43     	 orr r2,r3
 3761 00fe 111C     	 mov r1,r2
 3762 0100 7A68     	 ldr r2,[r7,#4]
 3763 0102 8123     	 mov r3,#129
 3764 0104 9B00     	 lsl r3,r3,#2
 3765 0106 D150     	 str r1,[r2,r3]
 3766              	.L147:
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1249:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3767              	 .loc 2 1252 0
 3768 0108 1723     	 mov r3,#23
 3769 010a FB18     	 add r3,r7,r3
 3770 010c 0022     	 mov r2,#0
 3771 010e 1A70     	 strb r2,[r3]
 3772 0110 0FE0     	 b .L148
 3773              	.L149:
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1254:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3774              	 .loc 2 1254 0 discriminator 3
 3775 0112 1723     	 mov r3,#23
 3776 0114 FB18     	 add r3,r7,r3
 3777 0116 1A78     	 ldrb r2,[r3]
 3778 0118 0A4B     	 ldr r3,.L150
 3779 011a 9200     	 lsl r2,r2,#2
 3780 011c D358     	 ldr r3,[r2,r3]
 3781 011e 181C     	 mov r0,r3
 3782 0120 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3783              	 .loc 2 1252 0 discriminator 3
 3784 0124 1723     	 mov r3,#23
 3785 0126 FB18     	 add r3,r7,r3
 3786 0128 1A78     	 ldrb r2,[r3]
 3787 012a 1723     	 mov r3,#23
 3788 012c FB18     	 add r3,r7,r3
 3789 012e 0132     	 add r2,r2,#1
 3790 0130 1A70     	 strb r2,[r3]
 3791              	.L148:
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3792              	 .loc 2 1252 0 is_stmt 0 discriminator 1
 3793 0132 1723     	 mov r3,#23
 3794 0134 FB18     	 add r3,r7,r3
 3795 0136 1B78     	 ldrb r3,[r3]
 3796 0138 012B     	 cmp r3,#1
 3797 013a EAD9     	 bls .L149
1255:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   
1258:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3798              	 .loc 2 1258 0 is_stmt 1
 3799 013c BD46     	 mov sp,r7
 3800 013e 06B0     	 add sp,sp,#24
 3801              	 
 3802 0140 80BD     	 pop {r7,pc}
 3803              	.L151:
 3804 0142 C046     	 .align 2
 3805              	.L150:
 3806 0144 00000000 	 .word g_xmc_vadc_group_array
 3807 0148 FFFCFFFF 	 .word -769
 3808 014c 00808000 	 .word 8421376
 3809              	 .cfi_endproc
 3810              	.LFE169:
 3812              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3813              	 .align 2
 3814              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3815              	 .code 16
 3816              	 .thumb_func
 3818              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3819              	.LFB170:
1259:../Libraries/XMCLib/src/xmc_vadc.c **** 
1260:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1261:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1262:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3820              	 .loc 2 1262 0
 3821              	 .cfi_startproc
 3822 0000 80B5     	 push {r7,lr}
 3823              	.LCFI157:
 3824              	 .cfi_def_cfa_offset 8
 3825              	 .cfi_offset 7,-8
 3826              	 .cfi_offset 14,-4
 3827 0002 84B0     	 sub sp,sp,#16
 3828              	.LCFI158:
 3829              	 .cfi_def_cfa_offset 24
 3830 0004 00AF     	 add r7,sp,#0
 3831              	.LCFI159:
 3832              	 .cfi_def_cfa_register 7
 3833 0006 7860     	 str r0,[r7,#4]
 3834 0008 3960     	 str r1,[r7]
1263:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1264:../Libraries/XMCLib/src/xmc_vadc.c **** 
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1266:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1267:../Libraries/XMCLib/src/xmc_vadc.c **** 
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   
1269:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3835              	 .loc 2 1269 0
 3836 000a 7A68     	 ldr r2,[r7,#4]
 3837 000c 8023     	 mov r3,#128
 3838 000e 9B00     	 lsl r3,r3,#2
 3839 0010 D358     	 ldr r3,[r2,r3]
 3840 0012 FB60     	 str r3,[r7,#12]
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 3841              	 .loc 2 1270 0
 3842 0014 FB68     	 ldr r3,[r7,#12]
 3843 0016 8022     	 mov r2,#128
 3844 0018 1202     	 lsl r2,r2,#8
 3845 001a 1343     	 orr r3,r2
 3846 001c FB60     	 str r3,[r7,#12]
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 3847              	 .loc 2 1271 0
 3848 001e FB68     	 ldr r3,[r7,#12]
 3849 0020 074A     	 ldr r2,.L153
 3850 0022 1340     	 and r3,r2
 3851 0024 FB60     	 str r3,[r7,#12]
1272:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 3852              	 .loc 2 1272 0
 3853 0026 3B68     	 ldr r3,[r7]
 3854 0028 1B02     	 lsl r3,r3,#8
 3855 002a FA68     	 ldr r2,[r7,#12]
 3856 002c 1343     	 orr r3,r2
 3857 002e FB60     	 str r3,[r7,#12]
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3858              	 .loc 2 1273 0
 3859 0030 7A68     	 ldr r2,[r7,#4]
 3860 0032 8023     	 mov r3,#128
 3861 0034 9B00     	 lsl r3,r3,#2
 3862 0036 F968     	 ldr r1,[r7,#12]
 3863 0038 D150     	 str r1,[r2,r3]
1274:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3864              	 .loc 2 1274 0
 3865 003a BD46     	 mov sp,r7
 3866 003c 04B0     	 add sp,sp,#16
 3867              	 
 3868 003e 80BD     	 pop {r7,pc}
 3869              	.L154:
 3870              	 .align 2
 3871              	.L153:
 3872 0040 FFF0FFFF 	 .word -3841
 3873              	 .cfi_endproc
 3874              	.LFE170:
 3876              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 3877              	 .align 2
 3878              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 3879              	 .code 16
 3880              	 .thumb_func
 3882              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 3883              	.LFB171:
1275:../Libraries/XMCLib/src/xmc_vadc.c **** 
1276:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1277:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1278:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1279:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3884              	 .loc 2 1279 0
 3885              	 .cfi_startproc
 3886 0000 80B5     	 push {r7,lr}
 3887              	.LCFI160:
 3888              	 .cfi_def_cfa_offset 8
 3889              	 .cfi_offset 7,-8
 3890              	 .cfi_offset 14,-4
 3891 0002 84B0     	 sub sp,sp,#16
 3892              	.LCFI161:
 3893              	 .cfi_def_cfa_offset 24
 3894 0004 00AF     	 add r7,sp,#0
 3895              	.LCFI162:
 3896              	 .cfi_def_cfa_register 7
 3897 0006 7860     	 str r0,[r7,#4]
 3898 0008 0A1C     	 mov r2,r1
 3899 000a FB1C     	 add r3,r7,#3
 3900 000c 1A70     	 strb r2,[r3]
1280:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1281:../Libraries/XMCLib/src/xmc_vadc.c **** 
1282:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1283:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1284:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1285:../Libraries/XMCLib/src/xmc_vadc.c **** 
1286:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 3901              	 .loc 2 1286 0
 3902 000e 7A68     	 ldr r2,[r7,#4]
 3903 0010 8023     	 mov r3,#128
 3904 0012 9B00     	 lsl r3,r3,#2
 3905 0014 D358     	 ldr r3,[r2,r3]
 3906 0016 FB60     	 str r3,[r7,#12]
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 3907              	 .loc 2 1287 0
 3908 0018 FB68     	 ldr r3,[r7,#12]
 3909 001a 8022     	 mov r2,#128
 3910 001c 1202     	 lsl r2,r2,#8
 3911 001e 1343     	 orr r3,r2
 3912 0020 FB60     	 str r3,[r7,#12]
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 3913              	 .loc 2 1288 0
 3914 0022 FB68     	 ldr r3,[r7,#12]
 3915 0024 084A     	 ldr r2,.L156
 3916 0026 1340     	 and r3,r2
 3917 0028 FB60     	 str r3,[r7,#12]
1289:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 3918              	 .loc 2 1289 0
 3919 002a FB1C     	 add r3,r7,#3
 3920 002c 1B78     	 ldrb r3,[r3]
 3921 002e 5B03     	 lsl r3,r3,#13
 3922 0030 FA68     	 ldr r2,[r7,#12]
 3923 0032 1343     	 orr r3,r2
 3924 0034 FB60     	 str r3,[r7,#12]
1290:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3925              	 .loc 2 1290 0
 3926 0036 7A68     	 ldr r2,[r7,#4]
 3927 0038 8023     	 mov r3,#128
 3928 003a 9B00     	 lsl r3,r3,#2
 3929 003c F968     	 ldr r1,[r7,#12]
 3930 003e D150     	 str r1,[r2,r3]
1291:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3931              	 .loc 2 1291 0
 3932 0040 BD46     	 mov sp,r7
 3933 0042 04B0     	 add sp,sp,#16
 3934              	 
 3935 0044 80BD     	 pop {r7,pc}
 3936              	.L157:
 3937 0046 C046     	 .align 2
 3938              	.L156:
 3939 0048 FF9FFFFF 	 .word -24577
 3940              	 .cfi_endproc
 3941              	.LFE171:
 3943              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 3944              	 .align 2
 3945              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 3946              	 .code 16
 3947              	 .thumb_func
 3949              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 3950              	.LFB172:
1292:../Libraries/XMCLib/src/xmc_vadc.c **** 
1293:../Libraries/XMCLib/src/xmc_vadc.c **** 
1294:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1295:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3951              	 .loc 2 1296 0
 3952              	 .cfi_startproc
 3953 0000 80B5     	 push {r7,lr}
 3954              	.LCFI163:
 3955              	 .cfi_def_cfa_offset 8
 3956              	 .cfi_offset 7,-8
 3957              	 .cfi_offset 14,-4
 3958 0002 84B0     	 sub sp,sp,#16
 3959              	.LCFI164:
 3960              	 .cfi_def_cfa_offset 24
 3961 0004 00AF     	 add r7,sp,#0
 3962              	.LCFI165:
 3963              	 .cfi_def_cfa_register 7
 3964 0006 7860     	 str r0,[r7,#4]
 3965 0008 3960     	 str r1,[r7]
1297:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1298:../Libraries/XMCLib/src/xmc_vadc.c **** 
1299:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1300:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1301:../Libraries/XMCLib/src/xmc_vadc.c **** 
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3966              	 .loc 2 1302 0
 3967 000a 7A68     	 ldr r2,[r7,#4]
 3968 000c 8023     	 mov r3,#128
 3969 000e 9B00     	 lsl r3,r3,#2
 3970 0010 D358     	 ldr r3,[r2,r3]
 3971 0012 FB60     	 str r3,[r7,#12]
1303:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 3972              	 .loc 2 1303 0
 3973 0014 FB68     	 ldr r3,[r7,#12]
 3974 0016 8022     	 mov r2,#128
 3975 0018 1204     	 lsl r2,r2,#16
 3976 001a 1343     	 orr r3,r2
 3977 001c FB60     	 str r3,[r7,#12]
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 3978              	 .loc 2 1304 0
 3979 001e FB68     	 ldr r3,[r7,#12]
 3980 0020 074A     	 ldr r2,.L159
 3981 0022 1340     	 and r3,r2
 3982 0024 FB60     	 str r3,[r7,#12]
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 3983              	 .loc 2 1305 0
 3984 0026 3B68     	 ldr r3,[r7]
 3985 0028 1B04     	 lsl r3,r3,#16
 3986 002a FA68     	 ldr r2,[r7,#12]
 3987 002c 1343     	 orr r3,r2
 3988 002e FB60     	 str r3,[r7,#12]
1306:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3989              	 .loc 2 1306 0
 3990 0030 7A68     	 ldr r2,[r7,#4]
 3991 0032 8023     	 mov r3,#128
 3992 0034 9B00     	 lsl r3,r3,#2
 3993 0036 F968     	 ldr r1,[r7,#12]
 3994 0038 D150     	 str r1,[r2,r3]
1307:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3995              	 .loc 2 1307 0
 3996 003a BD46     	 mov sp,r7
 3997 003c 04B0     	 add sp,sp,#16
 3998              	 
 3999 003e 80BD     	 pop {r7,pc}
 4000              	.L160:
 4001              	 .align 2
 4002              	.L159:
 4003 0040 FFFFF0FF 	 .word -983041
 4004              	 .cfi_endproc
 4005              	.LFE172:
 4007              	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 4008              	 .align 2
 4009              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 4010              	 .code 16
 4011              	 .thumb_func
 4013              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 4014              	.LFB173:
1308:../Libraries/XMCLib/src/xmc_vadc.c **** 
1309:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1310:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1311:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4015              	 .loc 2 1311 0
 4016              	 .cfi_startproc
 4017 0000 80B5     	 push {r7,lr}
 4018              	.LCFI166:
 4019              	 .cfi_def_cfa_offset 8
 4020              	 .cfi_offset 7,-8
 4021              	 .cfi_offset 14,-4
 4022 0002 86B0     	 sub sp,sp,#24
 4023              	.LCFI167:
 4024              	 .cfi_def_cfa_offset 32
 4025 0004 00AF     	 add r7,sp,#0
 4026              	.LCFI168:
 4027              	 .cfi_def_cfa_register 7
 4028 0006 7860     	 str r0,[r7,#4]
1312:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1313:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1315:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1316:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1318:../Libraries/XMCLib/src/xmc_vadc.c **** 
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1320:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 4029              	 .loc 2 1320 0
 4030 0008 7A68     	 ldr r2,[r7,#4]
 4031 000a 8023     	 mov r3,#128
 4032 000c 9B00     	 lsl r3,r3,#2
 4033 000e D358     	 ldr r3,[r2,r3]
 4034 0010 3B61     	 str r3,[r7,#16]
1321:../Libraries/XMCLib/src/xmc_vadc.c **** 
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 4035              	 .loc 2 1322 0
 4036 0012 7A68     	 ldr r2,[r7,#4]
 4037 0014 8023     	 mov r3,#128
 4038 0016 9B00     	 lsl r3,r3,#2
 4039 0018 2649     	 ldr r1,.L167
 4040 001a D150     	 str r1,[r2,r3]
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1325:../Libraries/XMCLib/src/xmc_vadc.c **** 
1326:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4041              	 .loc 2 1327 0
 4042 001c 0023     	 mov r3,#0
 4043 001e 7B61     	 str r3,[r7,#20]
 4044 0020 17E0     	 b .L162
 4045              	.L163:
1328:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1329:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 4046              	 .loc 2 1329 0 discriminator 3
 4047 0022 254B     	 ldr r3,.L167+4
 4048 0024 7A69     	 ldr r2,[r7,#20]
 4049 0026 9200     	 lsl r2,r2,#2
 4050 0028 D358     	 ldr r3,[r2,r3]
 4051 002a 8422     	 mov r2,#132
 4052 002c 9B58     	 ldr r3,[r3,r2]
 4053 002e 9B0E     	 lsr r3,r3,#26
 4054 0030 D9B2     	 uxtb r1,r3
 4055 0032 0C23     	 mov r3,#12
 4056 0034 FA18     	 add r2,r7,r3
 4057 0036 7B69     	 ldr r3,[r7,#20]
 4058 0038 D318     	 add r3,r2,r3
 4059 003a 0A1C     	 add r2,r1,#0
 4060 003c 1A70     	 strb r2,[r3]
1330:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4061              	 .loc 2 1330 0 discriminator 3
 4062 003e 1E4B     	 ldr r3,.L167+4
 4063 0040 7A69     	 ldr r2,[r7,#20]
 4064 0042 9200     	 lsl r2,r2,#2
 4065 0044 D358     	 ldr r3,[r2,r3]
 4066 0046 181C     	 mov r0,r3
 4067 0048 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4068              	 .loc 2 1327 0 discriminator 3
 4069 004c 7B69     	 ldr r3,[r7,#20]
 4070 004e 0133     	 add r3,r3,#1
 4071 0050 7B61     	 str r3,[r7,#20]
 4072              	.L162:
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4073              	 .loc 2 1327 0 is_stmt 0 discriminator 1
 4074 0052 7B69     	 ldr r3,[r7,#20]
 4075 0054 012B     	 cmp r3,#1
 4076 0056 E4D9     	 bls .L163
1331:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1332:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1333:../Libraries/XMCLib/src/xmc_vadc.c **** 
1334:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1335:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 4077              	 .loc 2 1335 0 is_stmt 1
 4078 0058 7A68     	 ldr r2,[r7,#4]
 4079 005a 8123     	 mov r3,#129
 4080 005c 9B00     	 lsl r3,r3,#2
 4081 005e D358     	 ldr r3,[r2,r3]
 4082 0060 8022     	 mov r2,#128
 4083 0062 5200     	 lsl r2,r2,#1
 4084 0064 1A43     	 orr r2,r3
 4085 0066 111C     	 mov r1,r2
 4086 0068 7A68     	 ldr r2,[r7,#4]
 4087 006a 8123     	 mov r3,#129
 4088 006c 9B00     	 lsl r3,r3,#2
 4089 006e D150     	 str r1,[r2,r3]
1336:../Libraries/XMCLib/src/xmc_vadc.c **** 
1337:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1338:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4090              	 .loc 2 1339 0
 4091 0070 0023     	 mov r3,#0
 4092 0072 7B61     	 str r3,[r7,#20]
 4093 0074 10E0     	 b .L164
 4094              	.L166:
1340:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1341:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 4095              	 .loc 2 1341 0
 4096 0076 0C23     	 mov r3,#12
 4097 0078 FA18     	 add r2,r7,r3
 4098 007a 7B69     	 ldr r3,[r7,#20]
 4099 007c D318     	 add r3,r2,r3
 4100 007e 1B78     	 ldrb r3,[r3]
 4101 0080 012B     	 cmp r3,#1
 4102 0082 06D1     	 bne .L165
1342:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1343:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 4103              	 .loc 2 1343 0
 4104 0084 0C4B     	 ldr r3,.L167+4
 4105 0086 7A69     	 ldr r2,[r7,#20]
 4106 0088 9200     	 lsl r2,r2,#2
 4107 008a D358     	 ldr r3,[r2,r3]
 4108 008c 181C     	 mov r0,r3
 4109 008e FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 4110              	.L165:
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4111              	 .loc 2 1339 0 discriminator 2
 4112 0092 7B69     	 ldr r3,[r7,#20]
 4113 0094 0133     	 add r3,r3,#1
 4114 0096 7B61     	 str r3,[r7,#20]
 4115              	.L164:
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4116              	 .loc 2 1339 0 is_stmt 0 discriminator 1
 4117 0098 7B69     	 ldr r3,[r7,#20]
 4118 009a 012B     	 cmp r3,#1
 4119 009c EBD9     	 bls .L166
1344:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1345:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1346:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1347:../Libraries/XMCLib/src/xmc_vadc.c **** 
1348:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 4120              	 .loc 2 1349 0 is_stmt 1
 4121 009e 3B69     	 ldr r3,[r7,#16]
 4122 00a0 044A     	 ldr r2,.L167
 4123 00a2 1A43     	 orr r2,r3
 4124 00a4 111C     	 mov r1,r2
 4125 00a6 7A68     	 ldr r2,[r7,#4]
 4126 00a8 8023     	 mov r3,#128
 4127 00aa 9B00     	 lsl r3,r3,#2
 4128 00ac D150     	 str r1,[r2,r3]
1350:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4129              	 .loc 2 1350 0
 4130 00ae BD46     	 mov sp,r7
 4131 00b0 06B0     	 add sp,sp,#24
 4132              	 
 4133 00b2 80BD     	 pop {r7,pc}
 4134              	.L168:
 4135              	 .align 2
 4136              	.L167:
 4137 00b4 00808000 	 .word 8421376
 4138 00b8 00000000 	 .word g_xmc_vadc_group_array
 4139              	 .cfi_endproc
 4140              	.LFE173:
 4142              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 4143              	 .align 2
 4144              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 4145              	 .code 16
 4146              	 .thumb_func
 4148              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 4149              	.LFB174:
1351:../Libraries/XMCLib/src/xmc_vadc.c **** 
1352:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1353:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1354:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4150              	 .loc 2 1354 0
 4151              	 .cfi_startproc
 4152 0000 80B5     	 push {r7,lr}
 4153              	.LCFI169:
 4154              	 .cfi_def_cfa_offset 8
 4155              	 .cfi_offset 7,-8
 4156              	 .cfi_offset 14,-4
 4157 0002 86B0     	 sub sp,sp,#24
 4158              	.LCFI170:
 4159              	 .cfi_def_cfa_offset 32
 4160 0004 00AF     	 add r7,sp,#0
 4161              	.LCFI171:
 4162              	 .cfi_def_cfa_register 7
 4163 0006 7860     	 str r0,[r7,#4]
1355:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1356:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1357:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1358:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1359:../Libraries/XMCLib/src/xmc_vadc.c **** 
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1361:../Libraries/XMCLib/src/xmc_vadc.c **** 
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 4164              	 .loc 2 1362 0
 4165 0008 0023     	 mov r3,#0
 4166 000a BB60     	 str r3,[r7,#8]
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   
1364:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4167              	 .loc 2 1365 0
 4168 000c 0023     	 mov r3,#0
 4169 000e 3B61     	 str r3,[r7,#16]
 4170 0010 22E0     	 b .L170
 4171              	.L175:
1366:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1367:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 4172              	 .loc 2 1367 0
 4173 0012 7B68     	 ldr r3,[r7,#4]
 4174 0014 3A69     	 ldr r2,[r7,#16]
 4175 0016 6032     	 add r2,r2,#96
 4176 0018 9200     	 lsl r2,r2,#2
 4177 001a D358     	 ldr r3,[r2,r3]
 4178 001c 002B     	 cmp r3,#0
 4179 001e 18D0     	 beq .L171
1368:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1369:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 4180              	 .loc 2 1369 0
 4181 0020 7B68     	 ldr r3,[r7,#4]
 4182 0022 3A69     	 ldr r2,[r7,#16]
 4183 0024 7032     	 add r2,r2,#112
 4184 0026 9200     	 lsl r2,r2,#2
 4185 0028 D358     	 ldr r3,[r2,r3]
 4186 002a 7B61     	 str r3,[r7,#20]
1370:../Libraries/XMCLib/src/xmc_vadc.c **** 
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 4187              	 .loc 2 1371 0
 4188 002c 0023     	 mov r3,#0
 4189 002e FB60     	 str r3,[r7,#12]
 4190 0030 0CE0     	 b .L172
 4191              	.L174:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1373:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 4192              	 .loc 2 1373 0
 4193 0032 7B69     	 ldr r3,[r7,#20]
 4194 0034 0122     	 mov r2,#1
 4195 0036 1340     	 and r3,r2
 4196 0038 02D0     	 beq .L173
1374:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1375:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 4197              	 .loc 2 1375 0
 4198 003a BB68     	 ldr r3,[r7,#8]
 4199 003c 0133     	 add r3,r3,#1
 4200 003e BB60     	 str r3,[r7,#8]
 4201              	.L173:
1376:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1377:../Libraries/XMCLib/src/xmc_vadc.c **** 
1378:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 4202              	 .loc 2 1378 0 discriminator 2
 4203 0040 7B69     	 ldr r3,[r7,#20]
 4204 0042 5B08     	 lsr r3,r3,#1
 4205 0044 7B61     	 str r3,[r7,#20]
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4206              	 .loc 2 1371 0 discriminator 2
 4207 0046 FB68     	 ldr r3,[r7,#12]
 4208 0048 0133     	 add r3,r3,#1
 4209 004a FB60     	 str r3,[r7,#12]
 4210              	.L172:
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4211              	 .loc 2 1371 0 is_stmt 0 discriminator 1
 4212 004c FB68     	 ldr r3,[r7,#12]
 4213 004e 072B     	 cmp r3,#7
 4214 0050 EFD9     	 bls .L174
 4215              	.L171:
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4216              	 .loc 2 1365 0 is_stmt 1 discriminator 2
 4217 0052 3B69     	 ldr r3,[r7,#16]
 4218 0054 0133     	 add r3,r3,#1
 4219 0056 3B61     	 str r3,[r7,#16]
 4220              	.L170:
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4221              	 .loc 2 1365 0 is_stmt 0 discriminator 1
 4222 0058 3B69     	 ldr r3,[r7,#16]
 4223 005a 012B     	 cmp r3,#1
 4224 005c D9D9     	 bls .L175
1379:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1380:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1381:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1382:../Libraries/XMCLib/src/xmc_vadc.c **** 
1383:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 4225              	 .loc 2 1383 0 is_stmt 1
 4226 005e BB68     	 ldr r3,[r7,#8]
1384:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4227              	 .loc 2 1384 0
 4228 0060 181C     	 mov r0,r3
 4229 0062 BD46     	 mov sp,r7
 4230 0064 06B0     	 add sp,sp,#24
 4231              	 
 4232 0066 80BD     	 pop {r7,pc}
 4233              	 .cfi_endproc
 4234              	.LFE174:
 4236              	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 4237              	 .align 2
 4238              	 .global XMC_VADC_GROUP_QueueInit
 4239              	 .code 16
 4240              	 .thumb_func
 4242              	XMC_VADC_GROUP_QueueInit:
 4243              	.LFB175:
1385:../Libraries/XMCLib/src/xmc_vadc.c **** 
1386:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1387:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1388:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1389:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4244              	 .loc 2 1389 0
 4245              	 .cfi_startproc
 4246 0000 80B5     	 push {r7,lr}
 4247              	.LCFI172:
 4248              	 .cfi_def_cfa_offset 8
 4249              	 .cfi_offset 7,-8
 4250              	 .cfi_offset 14,-4
 4251 0002 84B0     	 sub sp,sp,#16
 4252              	.LCFI173:
 4253              	 .cfi_def_cfa_offset 24
 4254 0004 00AF     	 add r7,sp,#0
 4255              	.LCFI174:
 4256              	 .cfi_def_cfa_register 7
 4257 0006 7860     	 str r0,[r7,#4]
 4258 0008 3960     	 str r1,[r7]
1390:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1391:../Libraries/XMCLib/src/xmc_vadc.c **** 
1392:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1393:../Libraries/XMCLib/src/xmc_vadc.c **** 
1394:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1395:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4259              	 .loc 2 1395 0
 4260 000a 7B68     	 ldr r3,[r7,#4]
 4261 000c 181C     	 mov r0,r3
 4262 000e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1396:../Libraries/XMCLib/src/xmc_vadc.c ****   
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 4263              	 .loc 2 1397 0
 4264 0012 7B68     	 ldr r3,[r7,#4]
 4265 0014 8422     	 mov r2,#132
 4266 0016 9B58     	 ldr r3,[r3,r2]
 4267 0018 FB60     	 str r3,[r7,#12]
1398:../Libraries/XMCLib/src/xmc_vadc.c **** 
1399:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1400:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 4268              	 .loc 2 1400 0
 4269 001a FB68     	 ldr r3,[r7,#12]
 4270 001c 0322     	 mov r2,#3
 4271 001e 9343     	 bic r3,r2
 4272 0020 FB60     	 str r3,[r7,#12]
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 4273              	 .loc 2 1401 0
 4274 0022 3B68     	 ldr r3,[r7]
 4275 0024 1B78     	 ldrb r3,[r3]
 4276 0026 1B07     	 lsl r3,r3,#28
 4277 0028 9B0F     	 lsr r3,r3,#30
 4278 002a DBB2     	 uxtb r3,r3
 4279 002c 1A1C     	 mov r2,r3
 4280 002e FB68     	 ldr r3,[r7,#12]
 4281 0030 1343     	 orr r3,r2
 4282 0032 FB60     	 str r3,[r7,#12]
1402:../Libraries/XMCLib/src/xmc_vadc.c **** 
1403:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1404:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 4283              	 .loc 2 1404 0
 4284 0034 3B68     	 ldr r3,[r7]
 4285 0036 1B78     	 ldrb r3,[r3]
 4286 0038 0322     	 mov r2,#3
 4287 003a 1340     	 and r3,r2
 4288 003c DBB2     	 uxtb r3,r3
 4289 003e 002B     	 cmp r3,#0
 4290 0040 03D0     	 beq .L178
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1406:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 4291              	 .loc 2 1406 0
 4292 0042 FB68     	 ldr r3,[r7,#12]
 4293 0044 0822     	 mov r2,#8
 4294 0046 1343     	 orr r3,r2
 4295 0048 FB60     	 str r3,[r7,#12]
 4296              	.L178:
1407:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1408:../Libraries/XMCLib/src/xmc_vadc.c **** 
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 4297              	 .loc 2 1409 0
 4298 004a 7B68     	 ldr r3,[r7,#4]
 4299 004c 8421     	 mov r1,#132
 4300 004e FA68     	 ldr r2,[r7,#12]
 4301 0050 5A50     	 str r2,[r3,r1]
1410:../Libraries/XMCLib/src/xmc_vadc.c **** 
1411:../Libraries/XMCLib/src/xmc_vadc.c **** 
1412:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 4302              	 .loc 2 1412 0
 4303 0052 3B68     	 ldr r3,[r7]
 4304 0054 5B68     	 ldr r3,[r3,#4]
 4305 0056 154A     	 ldr r2,.L180
 4306 0058 1A43     	 orr r2,r3
 4307 005a 111C     	 mov r1,r2
 4308 005c 7A68     	 ldr r2,[r7,#4]
 4309 005e 8023     	 mov r3,#128
 4310 0060 5B00     	 lsl r3,r3,#1
 4311 0062 D150     	 str r1,[r2,r3]
1413:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1414:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1415:../Libraries/XMCLib/src/xmc_vadc.c **** 
1416:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1417:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 4312              	 .loc 2 1417 0
 4313 0064 3B68     	 ldr r3,[r7]
 4314 0066 9B68     	 ldr r3,[r3,#8]
 4315 0068 0122     	 mov r2,#1
 4316 006a 1A43     	 orr r2,r3
 4317 006c 111C     	 mov r1,r2
 4318 006e 7A68     	 ldr r2,[r7,#4]
 4319 0070 8223     	 mov r3,#130
 4320 0072 5B00     	 lsl r3,r3,#1
 4321 0074 D150     	 str r1,[r2,r3]
1418:../Libraries/XMCLib/src/xmc_vadc.c **** 
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 4322              	 .loc 2 1419 0
 4323 0076 3B68     	 ldr r3,[r7]
 4324 0078 1B78     	 ldrb r3,[r3]
 4325 007a 0322     	 mov r2,#3
 4326 007c 1340     	 and r3,r2
 4327 007e DBB2     	 uxtb r3,r3
 4328 0080 022B     	 cmp r3,#2
 4329 0082 0BD1     	 bne .L179
1420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1421:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 4330              	 .loc 2 1421 0
 4331 0084 7A68     	 ldr r2,[r7,#4]
 4332 0086 8223     	 mov r3,#130
 4333 0088 5B00     	 lsl r3,r3,#1
 4334 008a D358     	 ldr r3,[r2,r3]
 4335 008c 8022     	 mov r2,#128
 4336 008e 5202     	 lsl r2,r2,#9
 4337 0090 1A43     	 orr r2,r3
 4338 0092 111C     	 mov r1,r2
 4339 0094 7A68     	 ldr r2,[r7,#4]
 4340 0096 8223     	 mov r3,#130
 4341 0098 5B00     	 lsl r3,r3,#1
 4342 009a D150     	 str r1,[r2,r3]
 4343              	.L179:
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1423:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 4344              	 .loc 2 1424 0
 4345 009c 7B68     	 ldr r3,[r7,#4]
 4346 009e 181C     	 mov r0,r3
 4347 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1425:../Libraries/XMCLib/src/xmc_vadc.c **** 
1426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4348              	 .loc 2 1426 0
 4349 00a4 BD46     	 mov sp,r7
 4350 00a6 04B0     	 add sp,sp,#16
 4351              	 
 4352 00a8 80BD     	 pop {r7,pc}
 4353              	.L181:
 4354 00aa C046     	 .align 2
 4355              	.L180:
 4356 00ac 00808080 	 .word -2139062272
 4357              	 .cfi_endproc
 4358              	.LFE175:
 4360              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 4361              	 .align 2
 4362              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 4363              	 .code 16
 4364              	 .thumb_func
 4366              	XMC_VADC_GROUP_QueueSelectTrigger:
 4367              	.LFB176:
1427:../Libraries/XMCLib/src/xmc_vadc.c **** 
1428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1429:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1430:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1431:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4368              	 .loc 2 1431 0
 4369              	 .cfi_startproc
 4370 0000 80B5     	 push {r7,lr}
 4371              	.LCFI175:
 4372              	 .cfi_def_cfa_offset 8
 4373              	 .cfi_offset 7,-8
 4374              	 .cfi_offset 14,-4
 4375 0002 84B0     	 sub sp,sp,#16
 4376              	.LCFI176:
 4377              	 .cfi_def_cfa_offset 24
 4378 0004 00AF     	 add r7,sp,#0
 4379              	.LCFI177:
 4380              	 .cfi_def_cfa_register 7
 4381 0006 7860     	 str r0,[r7,#4]
 4382 0008 0A1C     	 mov r2,r1
 4383 000a FB1C     	 add r3,r7,#3
 4384 000c 1A70     	 strb r2,[r3]
1432:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1433:../Libraries/XMCLib/src/xmc_vadc.c ****   
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1435:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1436:../Libraries/XMCLib/src/xmc_vadc.c **** 
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4385              	 .loc 2 1439 0
 4386 000e 7A68     	 ldr r2,[r7,#4]
 4387 0010 8023     	 mov r3,#128
 4388 0012 5B00     	 lsl r3,r3,#1
 4389 0014 D358     	 ldr r3,[r2,r3]
 4390 0016 FB60     	 str r3,[r7,#12]
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4391              	 .loc 2 1440 0
 4392 0018 FB68     	 ldr r3,[r7,#12]
 4393 001a 8022     	 mov r2,#128
 4394 001c 1202     	 lsl r2,r2,#8
 4395 001e 1343     	 orr r3,r2
 4396 0020 FB60     	 str r3,[r7,#12]
1441:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 4397              	 .loc 2 1441 0
 4398 0022 FB68     	 ldr r3,[r7,#12]
 4399 0024 084A     	 ldr r2,.L183
 4400 0026 1340     	 and r3,r2
 4401 0028 FB60     	 str r3,[r7,#12]
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 4402              	 .loc 2 1442 0
 4403 002a FB1C     	 add r3,r7,#3
 4404 002c 1B78     	 ldrb r3,[r3]
 4405 002e 1B02     	 lsl r3,r3,#8
 4406 0030 FA68     	 ldr r2,[r7,#12]
 4407 0032 1343     	 orr r3,r2
 4408 0034 FB60     	 str r3,[r7,#12]
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4409              	 .loc 2 1443 0
 4410 0036 7A68     	 ldr r2,[r7,#4]
 4411 0038 8023     	 mov r3,#128
 4412 003a 5B00     	 lsl r3,r3,#1
 4413 003c F968     	 ldr r1,[r7,#12]
 4414 003e D150     	 str r1,[r2,r3]
1444:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4415              	 .loc 2 1444 0
 4416 0040 BD46     	 mov sp,r7
 4417 0042 04B0     	 add sp,sp,#16
 4418              	 
 4419 0044 80BD     	 pop {r7,pc}
 4420              	.L184:
 4421 0046 C046     	 .align 2
 4422              	.L183:
 4423 0048 FFF0FFFF 	 .word -3841
 4424              	 .cfi_endproc
 4425              	.LFE176:
 4427              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 4428              	 .align 2
 4429              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 4430              	 .code 16
 4431              	 .thumb_func
 4433              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 4434              	.LFB177:
1445:../Libraries/XMCLib/src/xmc_vadc.c **** 
1446:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1447:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1448:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4435              	 .loc 2 1448 0
 4436              	 .cfi_startproc
 4437 0000 80B5     	 push {r7,lr}
 4438              	.LCFI178:
 4439              	 .cfi_def_cfa_offset 8
 4440              	 .cfi_offset 7,-8
 4441              	 .cfi_offset 14,-4
 4442 0002 84B0     	 sub sp,sp,#16
 4443              	.LCFI179:
 4444              	 .cfi_def_cfa_offset 24
 4445 0004 00AF     	 add r7,sp,#0
 4446              	.LCFI180:
 4447              	 .cfi_def_cfa_register 7
 4448 0006 7860     	 str r0,[r7,#4]
 4449 0008 0A1C     	 mov r2,r1
 4450 000a FB1C     	 add r3,r7,#3
 4451 000c 1A70     	 strb r2,[r3]
1449:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1450:../Libraries/XMCLib/src/xmc_vadc.c **** 
1451:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1452:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1453:../Libraries/XMCLib/src/xmc_vadc.c **** 
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1455:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4452              	 .loc 2 1455 0
 4453 000e 7A68     	 ldr r2,[r7,#4]
 4454 0010 8023     	 mov r3,#128
 4455 0012 5B00     	 lsl r3,r3,#1
 4456 0014 D358     	 ldr r3,[r2,r3]
 4457 0016 FB60     	 str r3,[r7,#12]
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4458              	 .loc 2 1456 0
 4459 0018 FB68     	 ldr r3,[r7,#12]
 4460 001a 8022     	 mov r2,#128
 4461 001c 1202     	 lsl r2,r2,#8
 4462 001e 1343     	 orr r3,r2
 4463 0020 FB60     	 str r3,[r7,#12]
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 4464              	 .loc 2 1457 0
 4465 0022 FB68     	 ldr r3,[r7,#12]
 4466 0024 084A     	 ldr r2,.L186
 4467 0026 1340     	 and r3,r2
 4468 0028 FB60     	 str r3,[r7,#12]
1458:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 4469              	 .loc 2 1458 0
 4470 002a FB1C     	 add r3,r7,#3
 4471 002c 1B78     	 ldrb r3,[r3]
 4472 002e 5B03     	 lsl r3,r3,#13
 4473 0030 FA68     	 ldr r2,[r7,#12]
 4474 0032 1343     	 orr r3,r2
 4475 0034 FB60     	 str r3,[r7,#12]
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4476              	 .loc 2 1459 0
 4477 0036 7A68     	 ldr r2,[r7,#4]
 4478 0038 8023     	 mov r3,#128
 4479 003a 5B00     	 lsl r3,r3,#1
 4480 003c F968     	 ldr r1,[r7,#12]
 4481 003e D150     	 str r1,[r2,r3]
1460:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4482              	 .loc 2 1460 0
 4483 0040 BD46     	 mov sp,r7
 4484 0042 04B0     	 add sp,sp,#16
 4485              	 
 4486 0044 80BD     	 pop {r7,pc}
 4487              	.L187:
 4488 0046 C046     	 .align 2
 4489              	.L186:
 4490 0048 FF9FFFFF 	 .word -24577
 4491              	 .cfi_endproc
 4492              	.LFE177:
 4494              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 4495              	 .align 2
 4496              	 .global XMC_VADC_GROUP_QueueSelectGating
 4497              	 .code 16
 4498              	 .thumb_func
 4500              	XMC_VADC_GROUP_QueueSelectGating:
 4501              	.LFB178:
1461:../Libraries/XMCLib/src/xmc_vadc.c **** 
1462:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1463:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1464:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4502              	 .loc 2 1464 0
 4503              	 .cfi_startproc
 4504 0000 80B5     	 push {r7,lr}
 4505              	.LCFI181:
 4506              	 .cfi_def_cfa_offset 8
 4507              	 .cfi_offset 7,-8
 4508              	 .cfi_offset 14,-4
 4509 0002 84B0     	 sub sp,sp,#16
 4510              	.LCFI182:
 4511              	 .cfi_def_cfa_offset 24
 4512 0004 00AF     	 add r7,sp,#0
 4513              	.LCFI183:
 4514              	 .cfi_def_cfa_register 7
 4515 0006 7860     	 str r0,[r7,#4]
 4516 0008 0A1C     	 mov r2,r1
 4517 000a FB1C     	 add r3,r7,#3
 4518 000c 1A70     	 strb r2,[r3]
1465:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1466:../Libraries/XMCLib/src/xmc_vadc.c **** 
1467:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1468:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4519              	 .loc 2 1471 0
 4520 000e 7A68     	 ldr r2,[r7,#4]
 4521 0010 8023     	 mov r3,#128
 4522 0012 5B00     	 lsl r3,r3,#1
 4523 0014 D358     	 ldr r3,[r2,r3]
 4524 0016 FB60     	 str r3,[r7,#12]
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 4525              	 .loc 2 1472 0
 4526 0018 FB68     	 ldr r3,[r7,#12]
 4527 001a 8022     	 mov r2,#128
 4528 001c 1204     	 lsl r2,r2,#16
 4529 001e 1343     	 orr r3,r2
 4530 0020 FB60     	 str r3,[r7,#12]
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 4531              	 .loc 2 1473 0
 4532 0022 FB68     	 ldr r3,[r7,#12]
 4533 0024 084A     	 ldr r2,.L189
 4534 0026 1340     	 and r3,r2
 4535 0028 FB60     	 str r3,[r7,#12]
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 4536              	 .loc 2 1474 0
 4537 002a FB1C     	 add r3,r7,#3
 4538 002c 1B78     	 ldrb r3,[r3]
 4539 002e 1B04     	 lsl r3,r3,#16
 4540 0030 FA68     	 ldr r2,[r7,#12]
 4541 0032 1343     	 orr r3,r2
 4542 0034 FB60     	 str r3,[r7,#12]
1475:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4543              	 .loc 2 1475 0
 4544 0036 7A68     	 ldr r2,[r7,#4]
 4545 0038 8023     	 mov r3,#128
 4546 003a 5B00     	 lsl r3,r3,#1
 4547 003c F968     	 ldr r1,[r7,#12]
 4548 003e D150     	 str r1,[r2,r3]
1476:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4549              	 .loc 2 1476 0
 4550 0040 BD46     	 mov sp,r7
 4551 0042 04B0     	 add sp,sp,#16
 4552              	 
 4553 0044 80BD     	 pop {r7,pc}
 4554              	.L190:
 4555 0046 C046     	 .align 2
 4556              	.L189:
 4557 0048 FFFFF0FF 	 .word -983041
 4558              	 .cfi_endproc
 4559              	.LFE178:
 4561              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 4562              	 .align 2
 4563              	 .global XMC_VADC_GROUP_QueueGetLength
 4564              	 .code 16
 4565              	 .thumb_func
 4567              	XMC_VADC_GROUP_QueueGetLength:
 4568              	.LFB179:
1477:../Libraries/XMCLib/src/xmc_vadc.c **** 
1478:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1479:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1480:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4569              	 .loc 2 1480 0
 4570              	 .cfi_startproc
 4571 0000 80B5     	 push {r7,lr}
 4572              	.LCFI184:
 4573              	 .cfi_def_cfa_offset 8
 4574              	 .cfi_offset 7,-8
 4575              	 .cfi_offset 14,-4
 4576 0002 86B0     	 sub sp,sp,#24
 4577              	.LCFI185:
 4578              	 .cfi_def_cfa_offset 32
 4579 0004 00AF     	 add r7,sp,#0
 4580              	.LCFI186:
 4581              	 .cfi_def_cfa_register 7
 4582 0006 7860     	 str r0,[r7,#4]
1481:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1482:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1483:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1484:../Libraries/XMCLib/src/xmc_vadc.c **** 
1485:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1486:../Libraries/XMCLib/src/xmc_vadc.c **** 
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 4583              	 .loc 2 1487 0
 4584 0008 7A68     	 ldr r2,[r7,#4]
 4585 000a 8423     	 mov r3,#132
 4586 000c 5B00     	 lsl r3,r3,#1
 4587 000e D358     	 ldr r3,[r2,r3]
 4588 0010 3B61     	 str r3,[r7,#16]
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 4589              	 .loc 2 1488 0
 4590 0012 7A68     	 ldr r2,[r7,#4]
 4591 0014 8823     	 mov r3,#136
 4592 0016 5B00     	 lsl r3,r3,#1
 4593 0018 D358     	 ldr r3,[r2,r3]
 4594 001a FB60     	 str r3,[r7,#12]
1489:../Libraries/XMCLib/src/xmc_vadc.c **** 
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 4595              	 .loc 2 1490 0
 4596 001c 3B69     	 ldr r3,[r7,#16]
 4597 001e 2022     	 mov r2,#32
 4598 0020 1340     	 and r3,r2
 4599 0022 02D0     	 beq .L192
1491:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1492:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 4600              	 .loc 2 1492 0
 4601 0024 0023     	 mov r3,#0
 4602 0026 7B61     	 str r3,[r7,#20]
 4603 0028 04E0     	 b .L193
 4604              	.L192:
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1494:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1496:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 4605              	 .loc 2 1496 0
 4606 002a 3B69     	 ldr r3,[r7,#16]
 4607 002c 0F22     	 mov r2,#15
 4608 002e 1340     	 and r3,r2
 4609 0030 0133     	 add r3,r3,#1
 4610 0032 7B61     	 str r3,[r7,#20]
 4611              	.L193:
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 4612              	 .loc 2 1499 0
 4613 0034 FA68     	 ldr r2,[r7,#12]
 4614 0036 8023     	 mov r3,#128
 4615 0038 5B00     	 lsl r3,r3,#1
 4616 003a 1340     	 and r3,r2
 4617 003c 02D0     	 beq .L194
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1501:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 4618              	 .loc 2 1501 0
 4619 003e 7B69     	 ldr r3,[r7,#20]
 4620 0040 0133     	 add r3,r3,#1
 4621 0042 7B61     	 str r3,[r7,#20]
 4622              	.L194:
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1503:../Libraries/XMCLib/src/xmc_vadc.c **** 
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 4623              	 .loc 2 1504 0
 4624 0044 7B69     	 ldr r3,[r7,#20]
1505:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4625              	 .loc 2 1505 0
 4626 0046 181C     	 mov r0,r3
 4627 0048 BD46     	 mov sp,r7
 4628 004a 06B0     	 add sp,sp,#24
 4629              	 
 4630 004c 80BD     	 pop {r7,pc}
 4631              	 .cfi_endproc
 4632              	.LFE179:
 4634 004e C046     	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 4635              	 .align 2
 4636              	 .global XMC_VADC_GROUP_QueueAbortSequence
 4637              	 .code 16
 4638              	 .thumb_func
 4640              	XMC_VADC_GROUP_QueueAbortSequence:
 4641              	.LFB180:
1506:../Libraries/XMCLib/src/xmc_vadc.c **** 
1507:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1508:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1509:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4642              	 .loc 2 1509 0
 4643              	 .cfi_startproc
 4644 0000 80B5     	 push {r7,lr}
 4645              	.LCFI187:
 4646              	 .cfi_def_cfa_offset 8
 4647              	 .cfi_offset 7,-8
 4648              	 .cfi_offset 14,-4
 4649 0002 84B0     	 sub sp,sp,#16
 4650              	.LCFI188:
 4651              	 .cfi_def_cfa_offset 24
 4652 0004 00AF     	 add r7,sp,#0
 4653              	.LCFI189:
 4654              	 .cfi_def_cfa_register 7
 4655 0006 7860     	 str r0,[r7,#4]
1510:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1511:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1512:../Libraries/XMCLib/src/xmc_vadc.c **** 
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1514:../Libraries/XMCLib/src/xmc_vadc.c **** 
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1516:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 4656              	 .loc 2 1516 0
 4657 0008 7A68     	 ldr r2,[r7,#4]
 4658 000a 8023     	 mov r3,#128
 4659 000c 5B00     	 lsl r3,r3,#1
 4660 000e D358     	 ldr r3,[r2,r3]
 4661 0010 FB60     	 str r3,[r7,#12]
1517:../Libraries/XMCLib/src/xmc_vadc.c **** 
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4662              	 .loc 2 1518 0
 4663 0012 7A68     	 ldr r2,[r7,#4]
 4664 0014 8023     	 mov r3,#128
 4665 0016 5B00     	 lsl r3,r3,#1
 4666 0018 1549     	 ldr r1,.L197
 4667 001a D150     	 str r1,[r2,r3]
1519:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   
1521:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4668              	 .loc 2 1522 0
 4669 001c 7B68     	 ldr r3,[r7,#4]
 4670 001e 8422     	 mov r2,#132
 4671 0020 9B58     	 ldr r3,[r3,r2]
 4672 0022 1B0E     	 lsr r3,r3,#24
 4673 0024 0122     	 mov r2,#1
 4674 0026 1A40     	 and r2,r3
 4675 0028 0B23     	 mov r3,#11
 4676 002a FB18     	 add r3,r7,r3
 4677 002c 511E     	 sub r1,r2,#1
 4678 002e 8A41     	 sbc r2,r2,r1
 4679 0030 1A70     	 strb r2,[r3]
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4680              	 .loc 2 1523 0
 4681 0032 7B68     	 ldr r3,[r7,#4]
 4682 0034 181C     	 mov r0,r3
 4683 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1524:../Libraries/XMCLib/src/xmc_vadc.c ****    
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 4684              	 .loc 2 1526 0
 4685 003a 7B68     	 ldr r3,[r7,#4]
 4686 003c 181C     	 mov r0,r3
 4687 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1529:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4688              	 .loc 2 1529 0
 4689 0042 7B68     	 ldr r3,[r7,#4]
 4690 0044 8422     	 mov r2,#132
 4691 0046 9A58     	 ldr r2,[r3,r2]
 4692 0048 0B23     	 mov r3,#11
 4693 004a FB18     	 add r3,r7,r3
 4694 004c 1B78     	 ldrb r3,[r3]
 4695 004e 1B06     	 lsl r3,r3,#24
 4696 0050 1A43     	 orr r2,r3
 4697 0052 7B68     	 ldr r3,[r7,#4]
 4698 0054 8421     	 mov r1,#132
 4699 0056 5A50     	 str r2,[r3,r1]
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1533:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4700              	 .loc 2 1533 0
 4701 0058 FB68     	 ldr r3,[r7,#12]
 4702 005a 054A     	 ldr r2,.L197
 4703 005c 1A43     	 orr r2,r3
 4704 005e 111C     	 mov r1,r2
1532:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4705              	 .loc 2 1532 0
 4706 0060 7A68     	 ldr r2,[r7,#4]
 4707 0062 8023     	 mov r3,#128
 4708 0064 5B00     	 lsl r3,r3,#1
 4709 0066 D150     	 str r1,[r2,r3]
1534:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4710              	 .loc 2 1534 0
 4711 0068 BD46     	 mov sp,r7
 4712 006a 04B0     	 add sp,sp,#16
 4713              	 
 4714 006c 80BD     	 pop {r7,pc}
 4715              	.L198:
 4716 006e C046     	 .align 2
 4717              	.L197:
 4718 0070 00808080 	 .word -2139062272
 4719              	 .cfi_endproc
 4720              	.LFE180:
 4722              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 4723              	 .align 2
 4724              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 4725              	 .code 16
 4726              	 .thumb_func
 4728              	XMC_VADC_GROUP_QueueRemoveChannel:
 4729              	.LFB181:
1535:../Libraries/XMCLib/src/xmc_vadc.c **** 
1536:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1537:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1538:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4730              	 .loc 2 1538 0
 4731              	 .cfi_startproc
 4732 0000 80B5     	 push {r7,lr}
 4733              	.LCFI190:
 4734              	 .cfi_def_cfa_offset 8
 4735              	 .cfi_offset 7,-8
 4736              	 .cfi_offset 14,-4
 4737 0002 86B0     	 sub sp,sp,#24
 4738              	.LCFI191:
 4739              	 .cfi_def_cfa_offset 32
 4740 0004 00AF     	 add r7,sp,#0
 4741              	.LCFI192:
 4742              	 .cfi_def_cfa_register 7
 4743 0006 7860     	 str r0,[r7,#4]
1539:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1540:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1541:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1543:../Libraries/XMCLib/src/xmc_vadc.c **** 
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1545:../Libraries/XMCLib/src/xmc_vadc.c ****   
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 4744              	 .loc 2 1547 0
 4745 0008 7A68     	 ldr r2,[r7,#4]
 4746 000a 8023     	 mov r3,#128
 4747 000c 5B00     	 lsl r3,r3,#1
 4748 000e D358     	 ldr r3,[r2,r3]
 4749 0010 3B61     	 str r3,[r7,#16]
1548:../Libraries/XMCLib/src/xmc_vadc.c **** 
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4750              	 .loc 2 1549 0
 4751 0012 7A68     	 ldr r2,[r7,#4]
 4752 0014 8023     	 mov r3,#128
 4753 0016 5B00     	 lsl r3,r3,#1
 4754 0018 2649     	 ldr r1,.L203
 4755 001a D150     	 str r1,[r2,r3]
1550:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   
1552:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4756              	 .loc 2 1553 0
 4757 001c 7B68     	 ldr r3,[r7,#4]
 4758 001e 8422     	 mov r2,#132
 4759 0020 9B58     	 ldr r3,[r3,r2]
 4760 0022 1B0E     	 lsr r3,r3,#24
 4761 0024 0122     	 mov r2,#1
 4762 0026 1A40     	 and r2,r3
 4763 0028 0F23     	 mov r3,#15
 4764 002a FB18     	 add r3,r7,r3
 4765 002c 511E     	 sub r1,r2,#1
 4766 002e 8A41     	 sbc r2,r2,r1
 4767 0030 1A70     	 strb r2,[r3]
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4768              	 .loc 2 1554 0
 4769 0032 7B68     	 ldr r3,[r7,#4]
 4770 0034 181C     	 mov r0,r3
 4771 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1555:../Libraries/XMCLib/src/xmc_vadc.c **** 
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4772              	 .loc 2 1556 0
 4773 003a 7B68     	 ldr r3,[r7,#4]
 4774 003c 181C     	 mov r0,r3
 4775 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4776 0042 031C     	 mov r3,r0
 4777 0044 BB60     	 str r3,[r7,#8]
1557:../Libraries/XMCLib/src/xmc_vadc.c **** 
1558:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 4778              	 .loc 2 1558 0
 4779 0046 BB68     	 ldr r3,[r7,#8]
 4780 0048 002B     	 cmp r3,#0
 4781 004a 1CD0     	 beq .L200
1559:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1560:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1561:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 4782              	 .loc 2 1561 0
 4783 004c 7A68     	 ldr r2,[r7,#4]
 4784 004e 8223     	 mov r3,#130
 4785 0050 5B00     	 lsl r3,r3,#1
 4786 0052 D358     	 ldr r3,[r2,r3]
 4787 0054 8022     	 mov r2,#128
 4788 0056 5200     	 lsl r2,r2,#1
 4789 0058 1A43     	 orr r2,r3
 4790 005a 111C     	 mov r1,r2
 4791 005c 7A68     	 ldr r2,[r7,#4]
 4792 005e 8223     	 mov r3,#130
 4793 0060 5B00     	 lsl r3,r3,#1
 4794 0062 D150     	 str r1,[r2,r3]
1562:../Libraries/XMCLib/src/xmc_vadc.c **** 
1563:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4795              	 .loc 2 1563 0
 4796 0064 7B68     	 ldr r3,[r7,#4]
 4797 0066 181C     	 mov r0,r3
 4798 0068 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4799 006c 031C     	 mov r3,r0
 4800 006e 7B61     	 str r3,[r7,#20]
1564:../Libraries/XMCLib/src/xmc_vadc.c **** 
1565:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 4801              	 .loc 2 1566 0
 4802 0070 05E0     	 b .L201
 4803              	.L202:
1567:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1568:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4804              	 .loc 2 1568 0
 4805 0072 7B68     	 ldr r3,[r7,#4]
 4806 0074 181C     	 mov r0,r3
 4807 0076 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4808 007a 031C     	 mov r3,r0
 4809 007c 7B61     	 str r3,[r7,#20]
 4810              	.L201:
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4811              	 .loc 2 1566 0
 4812 007e 7A69     	 ldr r2,[r7,#20]
 4813 0080 BB68     	 ldr r3,[r7,#8]
 4814 0082 9A42     	 cmp r2,r3
 4815 0084 F5D0     	 beq .L202
 4816              	.L200:
1569:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1570:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1571:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1572:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4817              	 .loc 2 1572 0
 4818 0086 7B68     	 ldr r3,[r7,#4]
 4819 0088 8422     	 mov r2,#132
 4820 008a 9A58     	 ldr r2,[r3,r2]
 4821 008c 0F23     	 mov r3,#15
 4822 008e FB18     	 add r3,r7,r3
 4823 0090 1B78     	 ldrb r3,[r3]
 4824 0092 1B06     	 lsl r3,r3,#24
 4825 0094 1A43     	 orr r2,r3
 4826 0096 7B68     	 ldr r3,[r7,#4]
 4827 0098 8421     	 mov r1,#132
 4828 009a 5A50     	 str r2,[r3,r1]
1573:../Libraries/XMCLib/src/xmc_vadc.c ****   
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1576:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4829              	 .loc 2 1576 0
 4830 009c 3B69     	 ldr r3,[r7,#16]
 4831 009e 054A     	 ldr r2,.L203
 4832 00a0 1A43     	 orr r2,r3
 4833 00a2 111C     	 mov r1,r2
1575:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4834              	 .loc 2 1575 0
 4835 00a4 7A68     	 ldr r2,[r7,#4]
 4836 00a6 8023     	 mov r3,#128
 4837 00a8 5B00     	 lsl r3,r3,#1
 4838 00aa D150     	 str r1,[r2,r3]
1577:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4839              	 .loc 2 1577 0
 4840 00ac BD46     	 mov sp,r7
 4841 00ae 06B0     	 add sp,sp,#24
 4842              	 
 4843 00b0 80BD     	 pop {r7,pc}
 4844              	.L204:
 4845 00b2 C046     	 .align 2
 4846              	.L203:
 4847 00b4 00808080 	 .word -2139062272
 4848              	 .cfi_endproc
 4849              	.LFE181:
 4851              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 4852              	 .align 2
 4853              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 4854              	 .code 16
 4855              	 .thumb_func
 4857              	XMC_VADC_GROUP_QueueGetNextChannel:
 4858              	.LFB182:
1578:../Libraries/XMCLib/src/xmc_vadc.c **** 
1579:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1580:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1581:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4859              	 .loc 2 1581 0
 4860              	 .cfi_startproc
 4861 0000 80B5     	 push {r7,lr}
 4862              	.LCFI193:
 4863              	 .cfi_def_cfa_offset 8
 4864              	 .cfi_offset 7,-8
 4865              	 .cfi_offset 14,-4
 4866 0002 84B0     	 sub sp,sp,#16
 4867              	.LCFI194:
 4868              	 .cfi_def_cfa_offset 24
 4869 0004 00AF     	 add r7,sp,#0
 4870              	.LCFI195:
 4871              	 .cfi_def_cfa_register 7
 4872 0006 7860     	 str r0,[r7,#4]
1582:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1583:../Libraries/XMCLib/src/xmc_vadc.c **** 
1584:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1585:../Libraries/XMCLib/src/xmc_vadc.c ****   
1586:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1587:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1588:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1589:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4873              	 .loc 2 1590 0
 4874 0008 7A68     	 ldr r2,[r7,#4]
 4875 000a 8823     	 mov r3,#136
 4876 000c 5B00     	 lsl r3,r3,#1
 4877 000e D258     	 ldr r2,[r2,r3]
 4878 0010 8023     	 mov r3,#128
 4879 0012 5B00     	 lsl r3,r3,#1
 4880 0014 1340     	 and r3,r2
 4881 0016 08D0     	 beq .L206
1591:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1592:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4882              	 .loc 2 1592 0
 4883 0018 7A68     	 ldr r2,[r7,#4]
 4884 001a 8823     	 mov r3,#136
 4885 001c 5B00     	 lsl r3,r3,#1
 4886 001e D358     	 ldr r3,[r2,r3]
 4887 0020 1A1C     	 mov r2,r3
 4888 0022 1F23     	 mov r3,#31
 4889 0024 1340     	 and r3,r2
 4890 0026 FB60     	 str r3,[r7,#12]
 4891 0028 13E0     	 b .L207
 4892              	.L206:
1593:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1594:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 4893              	 .loc 2 1594 0
 4894 002a 7A68     	 ldr r2,[r7,#4]
 4895 002c 8623     	 mov r3,#134
 4896 002e 5B00     	 lsl r3,r3,#1
 4897 0030 D258     	 ldr r2,[r2,r3]
 4898 0032 8023     	 mov r3,#128
 4899 0034 5B00     	 lsl r3,r3,#1
 4900 0036 1340     	 and r3,r2
 4901 0038 08D0     	 beq .L208
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1596:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 4902              	 .loc 2 1596 0
 4903 003a 7A68     	 ldr r2,[r7,#4]
 4904 003c 8623     	 mov r3,#134
 4905 003e 5B00     	 lsl r3,r3,#1
 4906 0040 D358     	 ldr r3,[r2,r3]
 4907 0042 1A1C     	 mov r2,r3
 4908 0044 1F23     	 mov r3,#31
 4909 0046 1340     	 and r3,r2
 4910 0048 FB60     	 str r3,[r7,#12]
 4911 004a 02E0     	 b .L207
 4912              	.L208:
1597:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1598:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1600:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1601:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4913              	 .loc 2 1601 0
 4914 004c 0123     	 mov r3,#1
 4915 004e 5B42     	 neg r3,r3
 4916 0050 FB60     	 str r3,[r7,#12]
 4917              	.L207:
1602:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1603:../Libraries/XMCLib/src/xmc_vadc.c **** 
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4918              	 .loc 2 1604 0
 4919 0052 FB68     	 ldr r3,[r7,#12]
1605:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4920              	 .loc 2 1605 0
 4921 0054 181C     	 mov r0,r3
 4922 0056 BD46     	 mov sp,r7
 4923 0058 04B0     	 add sp,sp,#16
 4924              	 
 4925 005a 80BD     	 pop {r7,pc}
 4926              	 .cfi_endproc
 4927              	.LFE182:
 4929              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 4930              	 .align 2
 4931              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 4932              	 .code 16
 4933              	 .thumb_func
 4935              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 4936              	.LFB183:
1606:../Libraries/XMCLib/src/xmc_vadc.c **** 
1607:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1608:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1609:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4937              	 .loc 2 1609 0
 4938              	 .cfi_startproc
 4939 0000 80B5     	 push {r7,lr}
 4940              	.LCFI196:
 4941              	 .cfi_def_cfa_offset 8
 4942              	 .cfi_offset 7,-8
 4943              	 .cfi_offset 14,-4
 4944 0002 84B0     	 sub sp,sp,#16
 4945              	.LCFI197:
 4946              	 .cfi_def_cfa_offset 24
 4947 0004 00AF     	 add r7,sp,#0
 4948              	.LCFI198:
 4949              	 .cfi_def_cfa_register 7
 4950 0006 7860     	 str r0,[r7,#4]
1610:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1611:../Libraries/XMCLib/src/xmc_vadc.c **** 
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1613:../Libraries/XMCLib/src/xmc_vadc.c ****   
1614:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4951              	 .loc 2 1614 0
 4952 0008 7A68     	 ldr r2,[r7,#4]
 4953 000a 8823     	 mov r3,#136
 4954 000c 5B00     	 lsl r3,r3,#1
 4955 000e D258     	 ldr r2,[r2,r3]
 4956 0010 8023     	 mov r3,#128
 4957 0012 5B00     	 lsl r3,r3,#1
 4958 0014 1340     	 and r3,r2
 4959 0016 08D0     	 beq .L211
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1616:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4960              	 .loc 2 1616 0
 4961 0018 7A68     	 ldr r2,[r7,#4]
 4962 001a 8823     	 mov r3,#136
 4963 001c 5B00     	 lsl r3,r3,#1
 4964 001e D358     	 ldr r3,[r2,r3]
 4965 0020 1A1C     	 mov r2,r3
 4966 0022 1F23     	 mov r3,#31
 4967 0024 1340     	 and r3,r2
 4968 0026 FB60     	 str r3,[r7,#12]
 4969 0028 02E0     	 b .L212
 4970              	.L211:
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1618:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1620:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1621:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4971              	 .loc 2 1621 0
 4972 002a 0123     	 mov r3,#1
 4973 002c 5B42     	 neg r3,r3
 4974 002e FB60     	 str r3,[r7,#12]
 4975              	.L212:
1622:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1623:../Libraries/XMCLib/src/xmc_vadc.c **** 
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4976              	 .loc 2 1624 0
 4977 0030 FB68     	 ldr r3,[r7,#12]
1625:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4978              	 .loc 2 1625 0
 4979 0032 181C     	 mov r0,r3
 4980 0034 BD46     	 mov sp,r7
 4981 0036 04B0     	 add sp,sp,#16
 4982              	 
 4983 0038 80BD     	 pop {r7,pc}
 4984              	 .cfi_endproc
 4985              	.LFE183:
 4987 003a C046     	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 4988              	 .align 2
 4989              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 4990              	 .code 16
 4991              	 .thumb_func
 4993              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 4994              	.LFB184:
1626:../Libraries/XMCLib/src/xmc_vadc.c **** 
1627:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1628:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1629:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4995              	 .loc 2 1629 0
 4996              	 .cfi_startproc
 4997 0000 80B5     	 push {r7,lr}
 4998              	.LCFI199:
 4999              	 .cfi_def_cfa_offset 8
 5000              	 .cfi_offset 7,-8
 5001              	 .cfi_offset 14,-4
 5002 0002 84B0     	 sub sp,sp,#16
 5003              	.LCFI200:
 5004              	 .cfi_def_cfa_offset 24
 5005 0004 00AF     	 add r7,sp,#0
 5006              	.LCFI201:
 5007              	 .cfi_def_cfa_register 7
 5008 0006 7860     	 str r0,[r7,#4]
 5009 0008 0A1C     	 mov r2,r1
 5010 000a FB1C     	 add r3,r7,#3
 5011 000c 1A70     	 strb r2,[r3]
1630:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1631:../Libraries/XMCLib/src/xmc_vadc.c **** 
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1633:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1634:../Libraries/XMCLib/src/xmc_vadc.c **** 
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 5012              	 .loc 2 1635 0
 5013 000e 7A68     	 ldr r2,[r7,#4]
 5014 0010 E023     	 mov r3,#224
 5015 0012 5B00     	 lsl r3,r3,#1
 5016 0014 D358     	 ldr r3,[r2,r3]
 5017 0016 FB60     	 str r3,[r7,#12]
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 5018              	 .loc 2 1637 0
 5019 0018 FB68     	 ldr r3,[r7,#12]
 5020 001a 0F22     	 mov r2,#15
 5021 001c 9343     	 bic r3,r2
 5022 001e FB60     	 str r3,[r7,#12]
1638:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 5023              	 .loc 2 1638 0
 5024 0020 FB1C     	 add r3,r7,#3
 5025 0022 1B78     	 ldrb r3,[r3]
 5026 0024 FA68     	 ldr r2,[r7,#12]
 5027 0026 1343     	 orr r3,r2
 5028 0028 FB60     	 str r3,[r7,#12]
1639:../Libraries/XMCLib/src/xmc_vadc.c **** 
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 5029              	 .loc 2 1640 0
 5030 002a 7A68     	 ldr r2,[r7,#4]
 5031 002c E023     	 mov r3,#224
 5032 002e 5B00     	 lsl r3,r3,#1
 5033 0030 F968     	 ldr r1,[r7,#12]
 5034 0032 D150     	 str r1,[r2,r3]
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5035              	 .loc 2 1642 0
 5036 0034 BD46     	 mov sp,r7
 5037 0036 04B0     	 add sp,sp,#16
 5038              	 
 5039 0038 80BD     	 pop {r7,pc}
 5040              	 .cfi_endproc
 5041              	.LFE184:
 5043 003a C046     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 5044              	 .align 2
 5045              	 .global XMC_VADC_GROUP_ChannelInit
 5046              	 .code 16
 5047              	 .thumb_func
 5049              	XMC_VADC_GROUP_ChannelInit:
 5050              	.LFB185:
1643:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_QUEUE_AVAILABLE*/
1644:../Libraries/XMCLib/src/xmc_vadc.c **** 
1645:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1646:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1647:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1648:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1649:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5051              	 .loc 2 1649 0
 5052              	 .cfi_startproc
 5053 0000 80B5     	 push {r7,lr}
 5054              	.LCFI202:
 5055              	 .cfi_def_cfa_offset 8
 5056              	 .cfi_offset 7,-8
 5057              	 .cfi_offset 14,-4
 5058 0002 88B0     	 sub sp,sp,#32
 5059              	.LCFI203:
 5060              	 .cfi_def_cfa_offset 40
 5061 0004 00AF     	 add r7,sp,#0
 5062              	.LCFI204:
 5063              	 .cfi_def_cfa_register 7
 5064 0006 F860     	 str r0,[r7,#12]
 5065 0008 B960     	 str r1,[r7,#8]
 5066 000a 7A60     	 str r2,[r7,#4]
1650:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1651:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1653:../Libraries/XMCLib/src/xmc_vadc.c **** 
1654:../Libraries/XMCLib/src/xmc_vadc.c **** 
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1656:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 5067              	 .loc 2 1658 0
 5068 000c 7B68     	 ldr r3,[r7,#4]
 5069 000e 1B7B     	 ldrb r3,[r3,#12]
 5070 0010 BB61     	 str r3,[r7,#24]
1659:../Libraries/XMCLib/src/xmc_vadc.c **** 
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1661:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 5071              	 .loc 2 1661 0
 5072 0012 FB68     	 ldr r3,[r7,#12]
 5073 0014 8822     	 mov r2,#136
 5074 0016 9B58     	 ldr r3,[r3,r2]
 5075 0018 7B61     	 str r3,[r7,#20]
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 5076              	 .loc 2 1662 0
 5077 001a BB68     	 ldr r3,[r7,#8]
 5078 001c 0122     	 mov r2,#1
 5079 001e 9A40     	 lsl r2,r2,r3
 5080 0020 131C     	 mov r3,r2
 5081 0022 DA43     	 mvn r2,r3
 5082 0024 7B69     	 ldr r3,[r7,#20]
 5083 0026 1340     	 and r3,r2
 5084 0028 7B61     	 str r3,[r7,#20]
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 5085              	 .loc 2 1663 0
 5086 002a BB68     	 ldr r3,[r7,#8]
 5087 002c BA69     	 ldr r2,[r7,#24]
 5088 002e 9A40     	 lsl r2,r2,r3
 5089 0030 131C     	 mov r3,r2
 5090 0032 7A69     	 ldr r2,[r7,#20]
 5091 0034 1343     	 orr r3,r2
 5092 0036 7B61     	 str r3,[r7,#20]
1664:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 5093              	 .loc 2 1664 0
 5094 0038 FB68     	 ldr r3,[r7,#12]
 5095 003a 8821     	 mov r1,#136
 5096 003c 7A69     	 ldr r2,[r7,#20]
 5097 003e 5A50     	 str r2,[r3,r1]
1665:../Libraries/XMCLib/src/xmc_vadc.c **** 
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1667:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 5098              	 .loc 2 1667 0
 5099 0040 7B68     	 ldr r3,[r7,#4]
 5100 0042 5B7B     	 ldrb r3,[r3,#13]
 5101 0044 5BB2     	 sxtb r3,r3
 5102 0046 002B     	 cmp r3,#0
 5103 0048 2ADB     	 blt .L216
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1669:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 5104              	 .loc 2 1669 0
 5105 004a 0023     	 mov r3,#0
 5106 004c FB61     	 str r3,[r7,#28]
1670:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 5107              	 .loc 2 1670 0
 5108 004e BB68     	 ldr r3,[r7,#8]
 5109 0050 012B     	 cmp r3,#1
 5110 0052 0AD1     	 bne .L217
1671:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1672:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 5111              	 .loc 2 1672 0
 5112 0054 0823     	 mov r3,#8
 5113 0056 FB61     	 str r3,[r7,#28]
1673:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 5114              	 .loc 2 1673 0
 5115 0058 FB68     	 ldr r3,[r7,#12]
 5116 005a B022     	 mov r2,#176
 5117 005c 9B58     	 ldr r3,[r3,r2]
 5118 005e 1E4A     	 ldr r2,.L219
 5119 0060 1A40     	 and r2,r3
 5120 0062 FB68     	 ldr r3,[r7,#12]
 5121 0064 B021     	 mov r1,#176
 5122 0066 5A50     	 str r2,[r3,r1]
 5123 0068 0DE0     	 b .L218
 5124              	.L217:
1674:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1675:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 5125              	 .loc 2 1675 0
 5126 006a BB68     	 ldr r3,[r7,#8]
 5127 006c 002B     	 cmp r3,#0
 5128 006e 0AD1     	 bne .L218
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1677:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 5129              	 .loc 2 1677 0
 5130 0070 0023     	 mov r3,#0
 5131 0072 FB61     	 str r3,[r7,#28]
1678:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 5132              	 .loc 2 1678 0
 5133 0074 FB68     	 ldr r3,[r7,#12]
 5134 0076 B022     	 mov r2,#176
 5135 0078 9B58     	 ldr r3,[r3,r2]
 5136 007a 1F22     	 mov r2,#31
 5137 007c 9343     	 bic r3,r2
 5138 007e 1A1C     	 mov r2,r3
 5139 0080 FB68     	 ldr r3,[r7,#12]
 5140 0082 B021     	 mov r1,#176
 5141 0084 5A50     	 str r2,[r3,r1]
 5142              	.L218:
1679:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1680:../Libraries/XMCLib/src/xmc_vadc.c **** 
1681:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 5143              	 .loc 2 1681 0
 5144 0086 FB68     	 ldr r3,[r7,#12]
 5145 0088 B022     	 mov r2,#176
 5146 008a 9B58     	 ldr r3,[r3,r2]
 5147 008c 7A68     	 ldr r2,[r7,#4]
 5148 008e 527B     	 ldrb r2,[r2,#13]
 5149 0090 51B2     	 sxtb r1,r2
 5150 0092 FA69     	 ldr r2,[r7,#28]
 5151 0094 9140     	 lsl r1,r1,r2
 5152 0096 0A1C     	 mov r2,r1
 5153 0098 1A43     	 orr r2,r3
 5154 009a FB68     	 ldr r3,[r7,#12]
 5155 009c B021     	 mov r1,#176
 5156 009e 5A50     	 str r2,[r3,r1]
 5157              	.L216:
1682:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1683:../Libraries/XMCLib/src/xmc_vadc.c **** 
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 5158              	 .loc 2 1684 0
 5159 00a0 FB68     	 ldr r3,[r7,#12]
 5160 00a2 C822     	 mov r2,#200
 5161 00a4 9A58     	 ldr r2,[r3,r2]
 5162 00a6 7B68     	 ldr r3,[r7,#4]
 5163 00a8 5B68     	 ldr r3,[r3,#4]
 5164 00aa 1A43     	 orr r2,r3
 5165 00ac FB68     	 ldr r3,[r7,#12]
 5166 00ae C821     	 mov r1,#200
 5167 00b0 5A50     	 str r2,[r3,r1]
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1687:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 5168              	 .loc 2 1687 0
 5169 00b2 FB68     	 ldr r3,[r7,#12]
 5170 00b4 D022     	 mov r2,#208
 5171 00b6 9A58     	 ldr r2,[r3,r2]
 5172 00b8 7B68     	 ldr r3,[r7,#4]
 5173 00ba 9B68     	 ldr r3,[r3,#8]
 5174 00bc 1A43     	 orr r2,r3
 5175 00be FB68     	 ldr r3,[r7,#12]
 5176 00c0 D021     	 mov r1,#208
 5177 00c2 5A50     	 str r2,[r3,r1]
1688:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1690:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 5178              	 .loc 2 1690 0
 5179 00c4 7B68     	 ldr r3,[r7,#4]
 5180 00c6 1968     	 ldr r1,[r3]
 5181 00c8 FB68     	 ldr r3,[r7,#12]
 5182 00ca BA68     	 ldr r2,[r7,#8]
 5183 00cc 8032     	 add r2,r2,#128
 5184 00ce 9200     	 lsl r2,r2,#2
 5185 00d0 D150     	 str r1,[r2,r3]
1691:../Libraries/XMCLib/src/xmc_vadc.c **** 
1692:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5186              	 .loc 2 1692 0
 5187 00d2 BD46     	 mov sp,r7
 5188 00d4 08B0     	 add sp,sp,#32
 5189              	 
 5190 00d6 80BD     	 pop {r7,pc}
 5191              	.L220:
 5192              	 .align 2
 5193              	.L219:
 5194 00d8 FFE0FFFF 	 .word -7937
 5195              	 .cfi_endproc
 5196              	.LFE185:
 5198              	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 5199              	 .align 2
 5200              	 .global XMC_VADC_GROUP_SetChannelAlias
 5201              	 .code 16
 5202              	 .thumb_func
 5204              	XMC_VADC_GROUP_SetChannelAlias:
 5205              	.LFB186:
1693:../Libraries/XMCLib/src/xmc_vadc.c **** 
1694:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1695:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1696:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1697:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1698:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5206              	 .loc 2 1698 0
 5207              	 .cfi_startproc
 5208 0000 80B5     	 push {r7,lr}
 5209              	.LCFI205:
 5210              	 .cfi_def_cfa_offset 8
 5211              	 .cfi_offset 7,-8
 5212              	 .cfi_offset 14,-4
 5213 0002 88B0     	 sub sp,sp,#32
 5214              	.LCFI206:
 5215              	 .cfi_def_cfa_offset 40
 5216 0004 00AF     	 add r7,sp,#0
 5217              	.LCFI207:
 5218              	 .cfi_def_cfa_register 7
 5219 0006 F860     	 str r0,[r7,#12]
 5220 0008 B960     	 str r1,[r7,#8]
 5221 000a 7A60     	 str r2,[r7,#4]
1699:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1700:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1702:../Libraries/XMCLib/src/xmc_vadc.c **** 
1703:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1706:../Libraries/XMCLib/src/xmc_vadc.c **** 
1707:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 5222              	 .loc 2 1707 0
 5223 000c FB68     	 ldr r3,[r7,#12]
 5224 000e B022     	 mov r2,#176
 5225 0010 9B58     	 ldr r3,[r3,r2]
 5226 0012 7B61     	 str r3,[r7,#20]
1708:../Libraries/XMCLib/src/xmc_vadc.c **** 
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 5227              	 .loc 2 1709 0
 5228 0014 7B68     	 ldr r3,[r7,#4]
 5229 0016 002B     	 cmp r3,#0
 5230 0018 04D1     	 bne .L222
1710:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1711:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 5231              	 .loc 2 1711 0
 5232 001a 1F23     	 mov r3,#31
 5233 001c FB61     	 str r3,[r7,#28]
1712:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 5234              	 .loc 2 1712 0
 5235 001e 0023     	 mov r3,#0
 5236 0020 BB61     	 str r3,[r7,#24]
 5237 0022 04E0     	 b .L223
 5238              	.L222:
1713:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1714:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1716:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 5239              	 .loc 2 1716 0
 5240 0024 F823     	 mov r3,#248
 5241 0026 5B01     	 lsl r3,r3,#5
 5242 0028 FB61     	 str r3,[r7,#28]
1717:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 5243              	 .loc 2 1717 0
 5244 002a 0823     	 mov r3,#8
 5245 002c BB61     	 str r3,[r7,#24]
 5246              	.L223:
1718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 5247              	 .loc 2 1719 0
 5248 002e FB69     	 ldr r3,[r7,#28]
 5249 0030 DA43     	 mvn r2,r3
 5250 0032 7B69     	 ldr r3,[r7,#20]
 5251 0034 1340     	 and r3,r2
 5252 0036 7B61     	 str r3,[r7,#20]
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 5253              	 .loc 2 1720 0
 5254 0038 BB69     	 ldr r3,[r7,#24]
 5255 003a BA68     	 ldr r2,[r7,#8]
 5256 003c 9A40     	 lsl r2,r2,r3
 5257 003e 131C     	 mov r3,r2
 5258 0040 7A69     	 ldr r2,[r7,#20]
 5259 0042 1343     	 orr r3,r2
 5260 0044 7B61     	 str r3,[r7,#20]
1721:../Libraries/XMCLib/src/xmc_vadc.c **** 
1722:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 5261              	 .loc 2 1722 0
 5262 0046 FB68     	 ldr r3,[r7,#12]
 5263 0048 B021     	 mov r1,#176
 5264 004a 7A69     	 ldr r2,[r7,#20]
 5265 004c 5A50     	 str r2,[r3,r1]
1723:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5266              	 .loc 2 1723 0
 5267 004e BD46     	 mov sp,r7
 5268 0050 08B0     	 add sp,sp,#32
 5269              	 
 5270 0052 80BD     	 pop {r7,pc}
 5271              	 .cfi_endproc
 5272              	.LFE186:
 5274              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 5275              	 .align 2
 5276              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 5277              	 .code 16
 5278              	 .thumb_func
 5280              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 5281              	.LFB187:
1724:../Libraries/XMCLib/src/xmc_vadc.c **** 
1725:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1726:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1727:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5282              	 .loc 2 1727 0
 5283              	 .cfi_startproc
 5284 0000 80B5     	 push {r7,lr}
 5285              	.LCFI208:
 5286              	 .cfi_def_cfa_offset 8
 5287              	 .cfi_offset 7,-8
 5288              	 .cfi_offset 14,-4
 5289 0002 86B0     	 sub sp,sp,#24
 5290              	.LCFI209:
 5291              	 .cfi_def_cfa_offset 32
 5292 0004 00AF     	 add r7,sp,#0
 5293              	.LCFI210:
 5294              	 .cfi_def_cfa_register 7
 5295 0006 7860     	 str r0,[r7,#4]
 5296 0008 3960     	 str r1,[r7]
1728:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1729:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1730:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1731:../Libraries/XMCLib/src/xmc_vadc.c **** 
1732:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1734:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1735:../Libraries/XMCLib/src/xmc_vadc.c **** 
1736:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 5297              	 .loc 2 1736 0
 5298 000a 1723     	 mov r3,#23
 5299 000c FB18     	 add r3,r7,r3
 5300 000e 0022     	 mov r2,#0
 5301 0010 1A70     	 strb r2,[r3]
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1738:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1739:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1740:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1741:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5302              	 .loc 2 1742 0
 5303 0012 7B68     	 ldr r3,[r7,#4]
 5304 0014 3A68     	 ldr r2,[r7]
 5305 0016 8032     	 add r2,r2,#128
 5306 0018 9200     	 lsl r2,r2,#2
 5307 001a D358     	 ldr r3,[r2,r3]
 5308 001c 3B61     	 str r3,[r7,#16]
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 5309              	 .loc 2 1743 0
 5310 001e 3B69     	 ldr r3,[r7,#16]
 5311 0020 1B0A     	 lsr r3,r3,#8
 5312 0022 0322     	 mov r2,#3
 5313 0024 1340     	 and r3,r2
 5314 0026 3B61     	 str r3,[r7,#16]
1744:../Libraries/XMCLib/src/xmc_vadc.c **** 
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1746:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 5315              	 .loc 2 1746 0
 5316 0028 7A68     	 ldr r2,[r7,#4]
 5317 002a C023     	 mov r3,#192
 5318 002c 5B00     	 lsl r3,r3,#1
 5319 002e D358     	 ldr r3,[r2,r3]
 5320 0030 FB60     	 str r3,[r7,#12]
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 5321              	 .loc 2 1747 0
 5322 0032 3B68     	 ldr r3,[r7]
 5323 0034 0122     	 mov r2,#1
 5324 0036 9A40     	 lsl r2,r2,r3
 5325 0038 FB68     	 ldr r3,[r7,#12]
 5326 003a 1340     	 and r3,r2
 5327 003c FB60     	 str r3,[r7,#12]
1748:../Libraries/XMCLib/src/xmc_vadc.c **** 
1749:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1750:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 5328              	 .loc 2 1750 0
 5329 003e 3B69     	 ldr r3,[r7,#16]
 5330 0040 012B     	 cmp r3,#1
 5331 0042 02D0     	 beq .L225
1751:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 5332              	 .loc 2 1751 0
 5333 0044 3B69     	 ldr r3,[r7,#16]
 5334 0046 022B     	 cmp r3,#2
 5335 0048 06D1     	 bne .L226
 5336              	.L225:
 5337              	 .loc 2 1751 0 is_stmt 0 discriminator 1
 5338 004a FB68     	 ldr r3,[r7,#12]
 5339 004c 002B     	 cmp r3,#0
 5340 004e 03D0     	 beq .L226
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1753:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 5341              	 .loc 2 1753 0 is_stmt 1
 5342 0050 1723     	 mov r3,#23
 5343 0052 FB18     	 add r3,r7,r3
 5344 0054 0122     	 mov r2,#1
 5345 0056 1A70     	 strb r2,[r3]
 5346              	.L226:
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1755:../Libraries/XMCLib/src/xmc_vadc.c **** 
1756:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 5347              	 .loc 2 1756 0
 5348 0058 1723     	 mov r3,#23
 5349 005a FB18     	 add r3,r7,r3
 5350 005c 1B78     	 ldrb r3,[r3]
1757:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5351              	 .loc 2 1757 0
 5352 005e 181C     	 mov r0,r3
 5353 0060 BD46     	 mov sp,r7
 5354 0062 06B0     	 add sp,sp,#24
 5355              	 
 5356 0064 80BD     	 pop {r7,pc}
 5357              	 .cfi_endproc
 5358              	.LFE187:
 5360 0066 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 5361              	 .align 2
 5362              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 5363              	 .code 16
 5364              	 .thumb_func
 5366              	XMC_VADC_GROUP_ChannelSetInputReference:
 5367              	.LFB188:
1758:../Libraries/XMCLib/src/xmc_vadc.c **** 
1759:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1760:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1761:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1762:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1763:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5368              	 .loc 2 1763 0
 5369              	 .cfi_startproc
 5370 0000 80B5     	 push {r7,lr}
 5371              	.LCFI211:
 5372              	 .cfi_def_cfa_offset 8
 5373              	 .cfi_offset 7,-8
 5374              	 .cfi_offset 14,-4
 5375 0002 86B0     	 sub sp,sp,#24
 5376              	.LCFI212:
 5377              	 .cfi_def_cfa_offset 32
 5378 0004 00AF     	 add r7,sp,#0
 5379              	.LCFI213:
 5380              	 .cfi_def_cfa_register 7
 5381 0006 F860     	 str r0,[r7,#12]
 5382 0008 B960     	 str r1,[r7,#8]
 5383 000a FB1D     	 add r3,r7,#7
 5384 000c 1A70     	 strb r2,[r3]
1764:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1765:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1766:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1768:../Libraries/XMCLib/src/xmc_vadc.c **** 
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5385              	 .loc 2 1769 0
 5386 000e FB68     	 ldr r3,[r7,#12]
 5387 0010 BA68     	 ldr r2,[r7,#8]
 5388 0012 8032     	 add r2,r2,#128
 5389 0014 9200     	 lsl r2,r2,#2
 5390 0016 D358     	 ldr r3,[r2,r3]
 5391 0018 7B61     	 str r3,[r7,#20]
1770:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 5392              	 .loc 2 1770 0
 5393 001a 7B69     	 ldr r3,[r7,#20]
 5394 001c 084A     	 ldr r2,.L229
 5395 001e 1340     	 and r3,r2
 5396 0020 7B61     	 str r3,[r7,#20]
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 5397              	 .loc 2 1771 0
 5398 0022 FB1D     	 add r3,r7,#7
 5399 0024 1B78     	 ldrb r3,[r3]
 5400 0026 DB02     	 lsl r3,r3,#11
 5401 0028 7A69     	 ldr r2,[r7,#20]
 5402 002a 1343     	 orr r3,r2
 5403 002c 7B61     	 str r3,[r7,#20]
1772:../Libraries/XMCLib/src/xmc_vadc.c **** 
1773:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5404              	 .loc 2 1773 0
 5405 002e FB68     	 ldr r3,[r7,#12]
 5406 0030 BA68     	 ldr r2,[r7,#8]
 5407 0032 8032     	 add r2,r2,#128
 5408 0034 9200     	 lsl r2,r2,#2
 5409 0036 7969     	 ldr r1,[r7,#20]
 5410 0038 D150     	 str r1,[r2,r3]
1774:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5411              	 .loc 2 1774 0
 5412 003a BD46     	 mov sp,r7
 5413 003c 06B0     	 add sp,sp,#24
 5414              	 
 5415 003e 80BD     	 pop {r7,pc}
 5416              	.L230:
 5417              	 .align 2
 5418              	.L229:
 5419 0040 FFF7FFFF 	 .word -2049
 5420              	 .cfi_endproc
 5421              	.LFE188:
 5423              	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 5424              	 .align 2
 5425              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 5426              	 .code 16
 5427              	 .thumb_func
 5429              	XMC_VADC_GROUP_ChannelSetResultRegister:
 5430              	.LFB189:
1775:../Libraries/XMCLib/src/xmc_vadc.c **** 
1776:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1777:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1778:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1779:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1780:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5431              	 .loc 2 1780 0
 5432              	 .cfi_startproc
 5433 0000 80B5     	 push {r7,lr}
 5434              	.LCFI214:
 5435              	 .cfi_def_cfa_offset 8
 5436              	 .cfi_offset 7,-8
 5437              	 .cfi_offset 14,-4
 5438 0002 86B0     	 sub sp,sp,#24
 5439              	.LCFI215:
 5440              	 .cfi_def_cfa_offset 32
 5441 0004 00AF     	 add r7,sp,#0
 5442              	.LCFI216:
 5443              	 .cfi_def_cfa_register 7
 5444 0006 F860     	 str r0,[r7,#12]
 5445 0008 B960     	 str r1,[r7,#8]
 5446 000a 7A60     	 str r2,[r7,#4]
1781:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1782:../Libraries/XMCLib/src/xmc_vadc.c **** 
1783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1784:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1785:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1787:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1788:../Libraries/XMCLib/src/xmc_vadc.c **** 
1789:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5447              	 .loc 2 1789 0
 5448 000c FB68     	 ldr r3,[r7,#12]
 5449 000e BA68     	 ldr r2,[r7,#8]
 5450 0010 8032     	 add r2,r2,#128
 5451 0012 9200     	 lsl r2,r2,#2
 5452 0014 D358     	 ldr r3,[r2,r3]
 5453 0016 7B61     	 str r3,[r7,#20]
1790:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 5454              	 .loc 2 1790 0
 5455 0018 7B69     	 ldr r3,[r7,#20]
 5456 001a 084A     	 ldr r2,.L232
 5457 001c 1340     	 and r3,r2
 5458 001e 7B61     	 str r3,[r7,#20]
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 5459              	 .loc 2 1791 0
 5460 0020 7B68     	 ldr r3,[r7,#4]
 5461 0022 1B04     	 lsl r3,r3,#16
 5462 0024 7A69     	 ldr r2,[r7,#20]
 5463 0026 1343     	 orr r3,r2
 5464 0028 7B61     	 str r3,[r7,#20]
1792:../Libraries/XMCLib/src/xmc_vadc.c **** 
1793:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5465              	 .loc 2 1793 0
 5466 002a FB68     	 ldr r3,[r7,#12]
 5467 002c BA68     	 ldr r2,[r7,#8]
 5468 002e 8032     	 add r2,r2,#128
 5469 0030 9200     	 lsl r2,r2,#2
 5470 0032 7969     	 ldr r1,[r7,#20]
 5471 0034 D150     	 str r1,[r2,r3]
1794:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5472              	 .loc 2 1794 0
 5473 0036 BD46     	 mov sp,r7
 5474 0038 06B0     	 add sp,sp,#24
 5475              	 
 5476 003a 80BD     	 pop {r7,pc}
 5477              	.L233:
 5478              	 .align 2
 5479              	.L232:
 5480 003c FFFFF0FF 	 .word -983041
 5481              	 .cfi_endproc
 5482              	.LFE189:
 5484              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 5485              	 .align 2
 5486              	 .global XMC_VADC_GROUP_ChannelSetIclass
 5487              	 .code 16
 5488              	 .thumb_func
 5490              	XMC_VADC_GROUP_ChannelSetIclass:
 5491              	.LFB190:
1795:../Libraries/XMCLib/src/xmc_vadc.c **** 
1796:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1797:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1798:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1799:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1800:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5492              	 .loc 2 1800 0
 5493              	 .cfi_startproc
 5494 0000 80B5     	 push {r7,lr}
 5495              	.LCFI217:
 5496              	 .cfi_def_cfa_offset 8
 5497              	 .cfi_offset 7,-8
 5498              	 .cfi_offset 14,-4
 5499 0002 86B0     	 sub sp,sp,#24
 5500              	.LCFI218:
 5501              	 .cfi_def_cfa_offset 32
 5502 0004 00AF     	 add r7,sp,#0
 5503              	.LCFI219:
 5504              	 .cfi_def_cfa_register 7
 5505 0006 F860     	 str r0,[r7,#12]
 5506 0008 B960     	 str r1,[r7,#8]
 5507 000a FB1D     	 add r3,r7,#7
 5508 000c 1A70     	 strb r2,[r3]
1801:../Libraries/XMCLib/src/xmc_vadc.c **** 
1802:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1803:../Libraries/XMCLib/src/xmc_vadc.c **** 
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1805:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1806:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1808:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1809:../Libraries/XMCLib/src/xmc_vadc.c **** 
1810:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5509              	 .loc 2 1810 0
 5510 000e FB68     	 ldr r3,[r7,#12]
 5511 0010 BA68     	 ldr r2,[r7,#8]
 5512 0012 8032     	 add r2,r2,#128
 5513 0014 9200     	 lsl r2,r2,#2
 5514 0016 D358     	 ldr r3,[r2,r3]
 5515 0018 7B61     	 str r3,[r7,#20]
1811:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 5516              	 .loc 2 1811 0
 5517 001a 7B69     	 ldr r3,[r7,#20]
 5518 001c 0322     	 mov r2,#3
 5519 001e 9343     	 bic r3,r2
 5520 0020 7B61     	 str r3,[r7,#20]
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 5521              	 .loc 2 1812 0
 5522 0022 FB1D     	 add r3,r7,#7
 5523 0024 1B78     	 ldrb r3,[r3]
 5524 0026 7A69     	 ldr r2,[r7,#20]
 5525 0028 1343     	 orr r3,r2
 5526 002a 7B61     	 str r3,[r7,#20]
1813:../Libraries/XMCLib/src/xmc_vadc.c **** 
1814:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5527              	 .loc 2 1814 0
 5528 002c FB68     	 ldr r3,[r7,#12]
 5529 002e BA68     	 ldr r2,[r7,#8]
 5530 0030 8032     	 add r2,r2,#128
 5531 0032 9200     	 lsl r2,r2,#2
 5532 0034 7969     	 ldr r1,[r7,#20]
 5533 0036 D150     	 str r1,[r2,r3]
1815:../Libraries/XMCLib/src/xmc_vadc.c **** 
1816:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5534              	 .loc 2 1816 0
 5535 0038 BD46     	 mov sp,r7
 5536 003a 06B0     	 add sp,sp,#24
 5537              	 
 5538 003c 80BD     	 pop {r7,pc}
 5539              	 .cfi_endproc
 5540              	.LFE190:
 5542 003e C046     	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 5543              	 .align 2
 5544              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 5545              	 .code 16
 5546              	 .thumb_func
 5548              	XMC_VADC_GROUP_ChannelGetResultRegister:
 5549              	.LFB191:
1817:../Libraries/XMCLib/src/xmc_vadc.c **** 
1818:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1819:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1820:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5550              	 .loc 2 1820 0
 5551              	 .cfi_startproc
 5552 0000 80B5     	 push {r7,lr}
 5553              	.LCFI220:
 5554              	 .cfi_def_cfa_offset 8
 5555              	 .cfi_offset 7,-8
 5556              	 .cfi_offset 14,-4
 5557 0002 84B0     	 sub sp,sp,#16
 5558              	.LCFI221:
 5559              	 .cfi_def_cfa_offset 24
 5560 0004 00AF     	 add r7,sp,#0
 5561              	.LCFI222:
 5562              	 .cfi_def_cfa_register 7
 5563 0006 7860     	 str r0,[r7,#4]
 5564 0008 3960     	 str r1,[r7]
1821:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1822:../Libraries/XMCLib/src/xmc_vadc.c **** 
1823:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1824:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1825:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1826:../Libraries/XMCLib/src/xmc_vadc.c **** 
1827:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 5565              	 .loc 2 1827 0
 5566 000a 7B68     	 ldr r3,[r7,#4]
 5567 000c 3A68     	 ldr r2,[r7]
 5568 000e 8032     	 add r2,r2,#128
 5569 0010 9200     	 lsl r2,r2,#2
 5570 0012 D258     	 ldr r2,[r2,r3]
 5571 0014 F023     	 mov r3,#240
 5572 0016 1B03     	 lsl r3,r3,#12
 5573 0018 1340     	 and r3,r2
 5574 001a 1A0C     	 lsr r2,r3,#16
 5575 001c 0F23     	 mov r3,#15
 5576 001e FB18     	 add r3,r7,r3
 5577 0020 1A70     	 strb r2,[r3]
1828:../Libraries/XMCLib/src/xmc_vadc.c **** 
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 5578              	 .loc 2 1829 0
 5579 0022 0F23     	 mov r3,#15
 5580 0024 FB18     	 add r3,r7,r3
 5581 0026 1B78     	 ldrb r3,[r3]
1830:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5582              	 .loc 2 1830 0
 5583 0028 181C     	 mov r0,r3
 5584 002a BD46     	 mov sp,r7
 5585 002c 04B0     	 add sp,sp,#16
 5586              	 
 5587 002e 80BD     	 pop {r7,pc}
 5588              	 .cfi_endproc
 5589              	.LFE191:
 5591              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 5592              	 .align 2
 5593              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 5594              	 .code 16
 5595              	 .thumb_func
 5597              	XMC_VADC_GROUP_ChannelTriggerEvent:
 5598              	.LFB192:
1831:../Libraries/XMCLib/src/xmc_vadc.c **** 
1832:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1833:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1834:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5599              	 .loc 2 1834 0
 5600              	 .cfi_startproc
 5601 0000 80B5     	 push {r7,lr}
 5602              	.LCFI223:
 5603              	 .cfi_def_cfa_offset 8
 5604              	 .cfi_offset 7,-8
 5605              	 .cfi_offset 14,-4
 5606 0002 84B0     	 sub sp,sp,#16
 5607              	.LCFI224:
 5608              	 .cfi_def_cfa_offset 24
 5609 0004 00AF     	 add r7,sp,#0
 5610              	.LCFI225:
 5611              	 .cfi_def_cfa_register 7
 5612 0006 7860     	 str r0,[r7,#4]
 5613 0008 3960     	 str r1,[r7]
1835:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1836:../Libraries/XMCLib/src/xmc_vadc.c **** 
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1838:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1839:../Libraries/XMCLib/src/xmc_vadc.c **** 
1840:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 5614              	 .loc 2 1840 0
 5615 000a 7A68     	 ldr r2,[r7,#4]
 5616 000c C023     	 mov r3,#192
 5617 000e 5B00     	 lsl r3,r3,#1
 5618 0010 D358     	 ldr r3,[r2,r3]
 5619 0012 FB60     	 str r3,[r7,#12]
1841:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 5620              	 .loc 2 1841 0
 5621 0014 3B68     	 ldr r3,[r7]
 5622 0016 0122     	 mov r2,#1
 5623 0018 9A40     	 lsl r2,r2,r3
 5624 001a 131C     	 mov r3,r2
 5625 001c FA68     	 ldr r2,[r7,#12]
 5626 001e 1343     	 orr r3,r2
 5627 0020 FB60     	 str r3,[r7,#12]
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 5628              	 .loc 2 1842 0
 5629 0022 7A68     	 ldr r2,[r7,#4]
 5630 0024 C023     	 mov r3,#192
 5631 0026 5B00     	 lsl r3,r3,#1
 5632 0028 F968     	 ldr r1,[r7,#12]
 5633 002a D150     	 str r1,[r2,r3]
1843:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5634              	 .loc 2 1843 0
 5635 002c BD46     	 mov sp,r7
 5636 002e 04B0     	 add sp,sp,#16
 5637              	 
 5638 0030 80BD     	 pop {r7,pc}
 5639              	 .cfi_endproc
 5640              	.LFE192:
 5642 0032 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 5643              	 .align 2
 5644              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 5645              	 .code 16
 5646              	 .thumb_func
 5648              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 5649              	.LFB193:
1844:../Libraries/XMCLib/src/xmc_vadc.c **** 
1845:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1846:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1847:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1848:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1849:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5650              	 .loc 2 1849 0
 5651              	 .cfi_startproc
 5652 0000 80B5     	 push {r7,lr}
 5653              	.LCFI226:
 5654              	 .cfi_def_cfa_offset 8
 5655              	 .cfi_offset 7,-8
 5656              	 .cfi_offset 14,-4
 5657 0002 86B0     	 sub sp,sp,#24
 5658              	.LCFI227:
 5659              	 .cfi_def_cfa_offset 32
 5660 0004 00AF     	 add r7,sp,#0
 5661              	.LCFI228:
 5662              	 .cfi_def_cfa_register 7
 5663 0006 F860     	 str r0,[r7,#12]
 5664 0008 B960     	 str r1,[r7,#8]
 5665 000a FB1D     	 add r3,r7,#7
 5666 000c 1A70     	 strb r2,[r3]
1850:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1851:../Libraries/XMCLib/src/xmc_vadc.c **** 
1852:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1853:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1854:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1856:../Libraries/XMCLib/src/xmc_vadc.c **** 
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 5667              	 .loc 2 1857 0
 5668 000e FA68     	 ldr r2,[r7,#12]
 5669 0010 D023     	 mov r3,#208
 5670 0012 5B00     	 lsl r3,r3,#1
 5671 0014 D358     	 ldr r3,[r2,r3]
 5672 0016 7B61     	 str r3,[r7,#20]
1858:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 5673              	 .loc 2 1858 0
 5674 0018 BB68     	 ldr r3,[r7,#8]
 5675 001a 9B00     	 lsl r3,r3,#2
 5676 001c 1A1C     	 mov r2,r3
 5677 001e 0F23     	 mov r3,#15
 5678 0020 9340     	 lsl r3,r3,r2
 5679 0022 DA43     	 mvn r2,r3
 5680 0024 7B69     	 ldr r3,[r7,#20]
 5681 0026 1340     	 and r3,r2
 5682 0028 7B61     	 str r3,[r7,#20]
1859:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 5683              	 .loc 2 1859 0
 5684 002a FB1D     	 add r3,r7,#7
 5685 002c 1B78     	 ldrb r3,[r3]
 5686 002e BA68     	 ldr r2,[r7,#8]
 5687 0030 9200     	 lsl r2,r2,#2
 5688 0032 9340     	 lsl r3,r3,r2
 5689 0034 7A69     	 ldr r2,[r7,#20]
 5690 0036 1343     	 orr r3,r2
 5691 0038 7B61     	 str r3,[r7,#20]
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 5692              	 .loc 2 1860 0
 5693 003a FA68     	 ldr r2,[r7,#12]
 5694 003c D023     	 mov r3,#208
 5695 003e 5B00     	 lsl r3,r3,#1
 5696 0040 7969     	 ldr r1,[r7,#20]
 5697 0042 D150     	 str r1,[r2,r3]
1861:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5698              	 .loc 2 1861 0
 5699 0044 BD46     	 mov sp,r7
 5700 0046 06B0     	 add sp,sp,#24
 5701              	 
 5702 0048 80BD     	 pop {r7,pc}
 5703              	 .cfi_endproc
 5704              	.LFE193:
 5706 004a C046     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 5707              	 .align 2
 5708              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 5709              	 .code 16
 5710              	 .thumb_func
 5712              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 5713              	.LFB194:
1862:../Libraries/XMCLib/src/xmc_vadc.c **** 
1863:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1864:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1865:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1866:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1867:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5714              	 .loc 2 1867 0
 5715              	 .cfi_startproc
 5716 0000 80B5     	 push {r7,lr}
 5717              	.LCFI229:
 5718              	 .cfi_def_cfa_offset 8
 5719              	 .cfi_offset 7,-8
 5720              	 .cfi_offset 14,-4
 5721 0002 86B0     	 sub sp,sp,#24
 5722              	.LCFI230:
 5723              	 .cfi_def_cfa_offset 32
 5724 0004 00AF     	 add r7,sp,#0
 5725              	.LCFI231:
 5726              	 .cfi_def_cfa_register 7
 5727 0006 F860     	 str r0,[r7,#12]
 5728 0008 B960     	 str r1,[r7,#8]
 5729 000a FB1D     	 add r3,r7,#7
 5730 000c 1A70     	 strb r2,[r3]
1868:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1869:../Libraries/XMCLib/src/xmc_vadc.c **** 
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1871:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1872:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1874:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1875:../Libraries/XMCLib/src/xmc_vadc.c **** 
1876:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5731              	 .loc 2 1876 0
 5732 000e FB68     	 ldr r3,[r7,#12]
 5733 0010 BA68     	 ldr r2,[r7,#8]
 5734 0012 8032     	 add r2,r2,#128
 5735 0014 9200     	 lsl r2,r2,#2
 5736 0016 D358     	 ldr r3,[r2,r3]
 5737 0018 7B61     	 str r3,[r7,#20]
1877:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 5738              	 .loc 2 1877 0
 5739 001a 7B69     	 ldr r3,[r7,#20]
 5740 001c 084A     	 ldr r2,.L240
 5741 001e 1340     	 and r3,r2
 5742 0020 7B61     	 str r3,[r7,#20]
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 5743              	 .loc 2 1878 0
 5744 0022 FB1D     	 add r3,r7,#7
 5745 0024 1B78     	 ldrb r3,[r3]
 5746 0026 1B02     	 lsl r3,r3,#8
 5747 0028 7A69     	 ldr r2,[r7,#20]
 5748 002a 1343     	 orr r3,r2
 5749 002c 7B61     	 str r3,[r7,#20]
1879:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5750              	 .loc 2 1879 0
 5751 002e FB68     	 ldr r3,[r7,#12]
 5752 0030 BA68     	 ldr r2,[r7,#8]
 5753 0032 8032     	 add r2,r2,#128
 5754 0034 9200     	 lsl r2,r2,#2
 5755 0036 7969     	 ldr r1,[r7,#20]
 5756 0038 D150     	 str r1,[r2,r3]
1880:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5757              	 .loc 2 1880 0
 5758 003a BD46     	 mov sp,r7
 5759 003c 06B0     	 add sp,sp,#24
 5760              	 
 5761 003e 80BD     	 pop {r7,pc}
 5762              	.L241:
 5763              	 .align 2
 5764              	.L240:
 5765 0040 FFFCFFFF 	 .word -769
 5766              	 .cfi_endproc
 5767              	.LFE194:
 5769              	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 5770              	 .align 2
 5771              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 5772              	 .code 16
 5773              	 .thumb_func
 5775              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 5776              	.LFB195:
1881:../Libraries/XMCLib/src/xmc_vadc.c **** 
1882:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1883:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1884:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1885:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1886:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1887:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5777              	 .loc 2 1887 0
 5778              	 .cfi_startproc
 5779 0000 80B5     	 push {r7,lr}
 5780              	.LCFI232:
 5781              	 .cfi_def_cfa_offset 8
 5782              	 .cfi_offset 7,-8
 5783              	 .cfi_offset 14,-4
 5784 0002 84B0     	 sub sp,sp,#16
 5785              	.LCFI233:
 5786              	 .cfi_def_cfa_offset 24
 5787 0004 00AF     	 add r7,sp,#0
 5788              	.LCFI234:
 5789              	 .cfi_def_cfa_register 7
 5790 0006 F860     	 str r0,[r7,#12]
 5791 0008 B960     	 str r1,[r7,#8]
 5792 000a 191C     	 mov r1,r3
 5793 000c FB1D     	 add r3,r7,#7
 5794 000e 1A70     	 strb r2,[r3]
 5795 0010 BB1D     	 add r3,r7,#6
 5796 0012 0A1C     	 add r2,r1,#0
 5797 0014 1A70     	 strb r2,[r3]
1888:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1890:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1891:../Libraries/XMCLib/src/xmc_vadc.c **** 
1892:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 5798              	 .loc 2 1892 0
 5799 0016 FB68     	 ldr r3,[r7,#12]
 5800 0018 BA68     	 ldr r2,[r7,#8]
 5801 001a 8032     	 add r2,r2,#128
 5802 001c 9200     	 lsl r2,r2,#2
 5803 001e D358     	 ldr r3,[r2,r3]
 5804 0020 FA1D     	 add r2,r7,#7
 5805 0022 1278     	 ldrb r2,[r2]
 5806 0024 3021     	 mov r1,#48
 5807 0026 9140     	 lsl r1,r1,r2
 5808 0028 0A1C     	 mov r2,r1
 5809 002a D243     	 mvn r2,r2
 5810 002c 1A40     	 and r2,r3
 5811 002e 111C     	 mov r1,r2
 5812 0030 FB68     	 ldr r3,[r7,#12]
 5813 0032 BA68     	 ldr r2,[r7,#8]
 5814 0034 8032     	 add r2,r2,#128
 5815 0036 9200     	 lsl r2,r2,#2
 5816 0038 D150     	 str r1,[r2,r3]
1893:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 5817              	 .loc 2 1893 0
 5818 003a FB68     	 ldr r3,[r7,#12]
 5819 003c BA68     	 ldr r2,[r7,#8]
 5820 003e 8032     	 add r2,r2,#128
 5821 0040 9200     	 lsl r2,r2,#2
 5822 0042 D358     	 ldr r3,[r2,r3]
 5823 0044 BA1D     	 add r2,r7,#6
 5824 0046 1278     	 ldrb r2,[r2]
 5825 0048 F91D     	 add r1,r7,#7
 5826 004a 0978     	 ldrb r1,[r1]
 5827 004c 0431     	 add r1,r1,#4
 5828 004e 8A40     	 lsl r2,r2,r1
 5829 0050 1343     	 orr r3,r2
 5830 0052 191C     	 mov r1,r3
 5831 0054 FB68     	 ldr r3,[r7,#12]
 5832 0056 BA68     	 ldr r2,[r7,#8]
 5833 0058 8032     	 add r2,r2,#128
 5834 005a 9200     	 lsl r2,r2,#2
 5835 005c D150     	 str r1,[r2,r3]
1894:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5836              	 .loc 2 1894 0
 5837 005e BD46     	 mov sp,r7
 5838 0060 04B0     	 add sp,sp,#16
 5839              	 
 5840 0062 80BD     	 pop {r7,pc}
 5841              	 .cfi_endproc
 5842              	.LFE195:
 5844              	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 5845              	 .align 2
 5846              	 .global XMC_VADC_GROUP_AddResultToFifo
 5847              	 .code 16
 5848              	 .thumb_func
 5850              	XMC_VADC_GROUP_AddResultToFifo:
 5851              	.LFB196:
1895:../Libraries/XMCLib/src/xmc_vadc.c **** 
1896:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1897:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1898:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5852              	 .loc 2 1898 0
 5853              	 .cfi_startproc
 5854 0000 80B5     	 push {r7,lr}
 5855              	.LCFI235:
 5856              	 .cfi_def_cfa_offset 8
 5857              	 .cfi_offset 7,-8
 5858              	 .cfi_offset 14,-4
 5859 0002 84B0     	 sub sp,sp,#16
 5860              	.LCFI236:
 5861              	 .cfi_def_cfa_offset 24
 5862 0004 00AF     	 add r7,sp,#0
 5863              	.LCFI237:
 5864              	 .cfi_def_cfa_register 7
 5865 0006 7860     	 str r0,[r7,#4]
 5866 0008 3960     	 str r1,[r7]
1899:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1900:../Libraries/XMCLib/src/xmc_vadc.c **** 
1901:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1902:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1903:../Libraries/XMCLib/src/xmc_vadc.c **** 
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1905:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 5867              	 .loc 2 1905 0
 5868 000a 7B68     	 ldr r3,[r7,#4]
 5869 000c 3A68     	 ldr r2,[r7]
 5870 000e A032     	 add r2,r2,#160
 5871 0010 9200     	 lsl r2,r2,#2
 5872 0012 D358     	 ldr r3,[r2,r3]
 5873 0014 FB60     	 str r3,[r7,#12]
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 5874              	 .loc 2 1906 0
 5875 0016 FB68     	 ldr r3,[r7,#12]
 5876 0018 084A     	 ldr r2,.L244
 5877 001a 1340     	 and r3,r2
 5878 001c FB60     	 str r3,[r7,#12]
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1908:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 5879              	 .loc 2 1908 0
 5880 001e FB68     	 ldr r3,[r7,#12]
 5881 0020 8022     	 mov r2,#128
 5882 0022 9204     	 lsl r2,r2,#18
 5883 0024 1343     	 orr r3,r2
 5884 0026 FB60     	 str r3,[r7,#12]
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 5885              	 .loc 2 1909 0
 5886 0028 7B68     	 ldr r3,[r7,#4]
 5887 002a 3A68     	 ldr r2,[r7]
 5888 002c A032     	 add r2,r2,#160
 5889 002e 9200     	 lsl r2,r2,#2
 5890 0030 F968     	 ldr r1,[r7,#12]
 5891 0032 D150     	 str r1,[r2,r3]
1910:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5892              	 .loc 2 1910 0
 5893 0034 BD46     	 mov sp,r7
 5894 0036 04B0     	 add sp,sp,#16
 5895              	 
 5896 0038 80BD     	 pop {r7,pc}
 5897              	.L245:
 5898 003a C046     	 .align 2
 5899              	.L244:
 5900 003c FFFFFFF9 	 .word -100663297
 5901              	 .cfi_endproc
 5902              	.LFE196:
 5904              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 5905              	 .align 2
 5906              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 5907              	 .code 16
 5908              	 .thumb_func
 5910              	XMC_VADC_GROUP_SetResultFastCompareValue:
 5911              	.LFB197:
1911:../Libraries/XMCLib/src/xmc_vadc.c **** 
1912:../Libraries/XMCLib/src/xmc_vadc.c **** 
1913:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1914:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1915:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1916:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1917:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5912              	 .loc 2 1917 0
 5913              	 .cfi_startproc
 5914 0000 80B5     	 push {r7,lr}
 5915              	.LCFI238:
 5916              	 .cfi_def_cfa_offset 8
 5917              	 .cfi_offset 7,-8
 5918              	 .cfi_offset 14,-4
 5919 0002 86B0     	 sub sp,sp,#24
 5920              	.LCFI239:
 5921              	 .cfi_def_cfa_offset 32
 5922 0004 00AF     	 add r7,sp,#0
 5923              	.LCFI240:
 5924              	 .cfi_def_cfa_register 7
 5925 0006 F860     	 str r0,[r7,#12]
 5926 0008 B960     	 str r1,[r7,#8]
 5927 000a BB1D     	 add r3,r7,#6
 5928 000c 1A80     	 strh r2,[r3]
1918:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 5929              	 .loc 2 1918 0
 5930 000e FB68     	 ldr r3,[r7,#12]
 5931 0010 BA68     	 ldr r2,[r7,#8]
 5932 0012 C032     	 add r2,r2,#192
 5933 0014 9200     	 lsl r2,r2,#2
 5934 0016 D358     	 ldr r3,[r2,r3]
 5935 0018 7B61     	 str r3,[r7,#20]
1919:../Libraries/XMCLib/src/xmc_vadc.c **** 
1920:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1921:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1922:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1923:../Libraries/XMCLib/src/xmc_vadc.c **** 
1924:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5936              	 .loc 2 1924 0
 5937 001a 7B69     	 ldr r3,[r7,#20]
 5938 001c 1B0C     	 lsr r3,r3,#16
 5939 001e 1B04     	 lsl r3,r3,#16
 5940 0020 7B61     	 str r3,[r7,#20]
1925:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 5941              	 .loc 2 1925 0
 5942 0022 BB1D     	 add r3,r7,#6
 5943 0024 1B88     	 ldrh r3,[r3]
 5944 0026 9B00     	 lsl r3,r3,#2
 5945 0028 7A69     	 ldr r2,[r7,#20]
 5946 002a 1343     	 orr r3,r2
 5947 002c 7B61     	 str r3,[r7,#20]
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 5948              	 .loc 2 1926 0
 5949 002e FB68     	 ldr r3,[r7,#12]
 5950 0030 BA68     	 ldr r2,[r7,#8]
 5951 0032 C032     	 add r2,r2,#192
 5952 0034 9200     	 lsl r2,r2,#2
 5953 0036 7969     	 ldr r1,[r7,#20]
 5954 0038 D150     	 str r1,[r2,r3]
1927:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5955              	 .loc 2 1927 0
 5956 003a BD46     	 mov sp,r7
 5957 003c 06B0     	 add sp,sp,#24
 5958              	 
 5959 003e 80BD     	 pop {r7,pc}
 5960              	 .cfi_endproc
 5961              	.LFE197:
 5963              	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 5964              	 .align 2
 5965              	 .global XMC_VADC_GROUP_GetFastCompareResult
 5966              	 .code 16
 5967              	 .thumb_func
 5969              	XMC_VADC_GROUP_GetFastCompareResult:
 5970              	.LFB198:
1928:../Libraries/XMCLib/src/xmc_vadc.c **** 
1929:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1930:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1931:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5971              	 .loc 2 1931 0
 5972              	 .cfi_startproc
 5973 0000 80B5     	 push {r7,lr}
 5974              	.LCFI241:
 5975              	 .cfi_def_cfa_offset 8
 5976              	 .cfi_offset 7,-8
 5977              	 .cfi_offset 14,-4
 5978 0002 84B0     	 sub sp,sp,#16
 5979              	.LCFI242:
 5980              	 .cfi_def_cfa_offset 24
 5981 0004 00AF     	 add r7,sp,#0
 5982              	.LCFI243:
 5983              	 .cfi_def_cfa_register 7
 5984 0006 7860     	 str r0,[r7,#4]
 5985 0008 3960     	 str r1,[r7]
1932:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1933:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1934:../Libraries/XMCLib/src/xmc_vadc.c **** 
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1936:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1937:../Libraries/XMCLib/src/xmc_vadc.c **** 
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 5986              	 .loc 2 1938 0
 5987 000a 7B68     	 ldr r3,[r7,#4]
 5988 000c 3A68     	 ldr r2,[r7]
 5989 000e C032     	 add r2,r2,#192
 5990 0010 9200     	 lsl r2,r2,#2
 5991 0012 D358     	 ldr r3,[r2,r3]
 5992 0014 BB60     	 str r3,[r7,#8]
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 5993              	 .loc 2 1940 0
 5994 0016 BB68     	 ldr r3,[r7,#8]
 5995 0018 002B     	 cmp r3,#0
 5996 001a 08DA     	 bge .L248
1941:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1942:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 5997              	 .loc 2 1942 0
 5998 001c BB68     	 ldr r3,[r7,#8]
 5999 001e 9B0F     	 lsr r3,r3,#30
 6000 0020 DAB2     	 uxtb r2,r3
 6001 0022 0F23     	 mov r3,#15
 6002 0024 FB18     	 add r3,r7,r3
 6003 0026 0121     	 mov r1,#1
 6004 0028 0A40     	 and r2,r1
 6005 002a 1A70     	 strb r2,[r3]
 6006 002c 03E0     	 b .L249
 6007              	.L248:
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1944:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1945:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1946:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 6008              	 .loc 2 1946 0
 6009 002e 0F23     	 mov r3,#15
 6010 0030 FB18     	 add r3,r7,r3
 6011 0032 0222     	 mov r2,#2
 6012 0034 1A70     	 strb r2,[r3]
 6013              	.L249:
1947:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1948:../Libraries/XMCLib/src/xmc_vadc.c **** 
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 6014              	 .loc 2 1949 0
 6015 0036 0F23     	 mov r3,#15
 6016 0038 FB18     	 add r3,r7,r3
 6017 003a 1B78     	 ldrb r3,[r3]
1950:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6018              	 .loc 2 1950 0
 6019 003c 181C     	 mov r0,r3
 6020 003e BD46     	 mov sp,r7
 6021 0040 04B0     	 add sp,sp,#16
 6022              	 
 6023 0042 80BD     	 pop {r7,pc}
 6024              	 .cfi_endproc
 6025              	.LFE198:
 6027              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 6028              	 .align 2
 6029              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 6030              	 .code 16
 6031              	 .thumb_func
 6033              	XMC_VADC_GROUP_SetResultSubtractionValue:
 6034              	.LFB199:
1951:../Libraries/XMCLib/src/xmc_vadc.c **** 
1952:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1953:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1954:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1955:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6035              	 .loc 2 1955 0
 6036              	 .cfi_startproc
 6037 0000 80B5     	 push {r7,lr}
 6038              	.LCFI244:
 6039              	 .cfi_def_cfa_offset 8
 6040              	 .cfi_offset 7,-8
 6041              	 .cfi_offset 14,-4
 6042 0002 84B0     	 sub sp,sp,#16
 6043              	.LCFI245:
 6044              	 .cfi_def_cfa_offset 24
 6045 0004 00AF     	 add r7,sp,#0
 6046              	.LCFI246:
 6047              	 .cfi_def_cfa_register 7
 6048 0006 7860     	 str r0,[r7,#4]
 6049 0008 0A1C     	 mov r2,r1
 6050 000a BB1C     	 add r3,r7,#2
 6051 000c 1A80     	 strh r2,[r3]
1956:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1957:../Libraries/XMCLib/src/xmc_vadc.c **** 
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1959:../Libraries/XMCLib/src/xmc_vadc.c **** 
1960:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 6052              	 .loc 2 1960 0
 6053 000e 7A68     	 ldr r2,[r7,#4]
 6054 0010 C023     	 mov r3,#192
 6055 0012 9B00     	 lsl r3,r3,#2
 6056 0014 D358     	 ldr r3,[r2,r3]
 6057 0016 FB60     	 str r3,[r7,#12]
1961:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6058              	 .loc 2 1961 0
 6059 0018 FB68     	 ldr r3,[r7,#12]
 6060 001a 1B0C     	 lsr r3,r3,#16
 6061 001c 1B04     	 lsl r3,r3,#16
 6062 001e FB60     	 str r3,[r7,#12]
1962:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 6063              	 .loc 2 1962 0
 6064 0020 BB1C     	 add r3,r7,#2
 6065 0022 1B88     	 ldrh r3,[r3]
 6066 0024 FA68     	 ldr r2,[r7,#12]
 6067 0026 1343     	 orr r3,r2
 6068 0028 FB60     	 str r3,[r7,#12]
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 6069              	 .loc 2 1963 0
 6070 002a 7A68     	 ldr r2,[r7,#4]
 6071 002c C023     	 mov r3,#192
 6072 002e 9B00     	 lsl r3,r3,#2
 6073 0030 F968     	 ldr r1,[r7,#12]
 6074 0032 D150     	 str r1,[r2,r3]
1964:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6075              	 .loc 2 1964 0
 6076 0034 BD46     	 mov sp,r7
 6077 0036 04B0     	 add sp,sp,#16
 6078              	 
 6079 0038 80BD     	 pop {r7,pc}
 6080              	 .cfi_endproc
 6081              	.LFE199:
 6083 003a C046     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 6084              	 .align 2
 6085              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 6086              	 .code 16
 6087              	 .thumb_func
 6089              	XMC_VADC_GROUP_SetResultInterruptNode:
 6090              	.LFB200:
1965:../Libraries/XMCLib/src/xmc_vadc.c **** 
1966:../Libraries/XMCLib/src/xmc_vadc.c **** 
1967:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1968:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1969:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1970:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1971:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6091              	 .loc 2 1971 0
 6092              	 .cfi_startproc
 6093 0000 80B5     	 push {r7,lr}
 6094              	.LCFI247:
 6095              	 .cfi_def_cfa_offset 8
 6096              	 .cfi_offset 7,-8
 6097              	 .cfi_offset 14,-4
 6098 0002 86B0     	 sub sp,sp,#24
 6099              	.LCFI248:
 6100              	 .cfi_def_cfa_offset 32
 6101 0004 00AF     	 add r7,sp,#0
 6102              	.LCFI249:
 6103              	 .cfi_def_cfa_register 7
 6104 0006 F860     	 str r0,[r7,#12]
 6105 0008 B960     	 str r1,[r7,#8]
 6106 000a FB1D     	 add r3,r7,#7
 6107 000c 1A70     	 strb r2,[r3]
1972:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1973:../Libraries/XMCLib/src/xmc_vadc.c **** 
1974:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1975:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1977:../Libraries/XMCLib/src/xmc_vadc.c **** 
1978:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 6108              	 .loc 2 1978 0
 6109 000e BB68     	 ldr r3,[r7,#8]
 6110 0010 072B     	 cmp r3,#7
 6111 0012 1BD8     	 bhi .L253
1979:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1980:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 6112              	 .loc 2 1980 0
 6113 0014 FA68     	 ldr r2,[r7,#12]
 6114 0016 D823     	 mov r3,#216
 6115 0018 5B00     	 lsl r3,r3,#1
 6116 001a D358     	 ldr r3,[r2,r3]
 6117 001c 7B61     	 str r3,[r7,#20]
1981:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 6118              	 .loc 2 1981 0
 6119 001e BB68     	 ldr r3,[r7,#8]
 6120 0020 9B00     	 lsl r3,r3,#2
 6121 0022 1A1C     	 mov r2,r3
 6122 0024 0F23     	 mov r3,#15
 6123 0026 9340     	 lsl r3,r3,r2
 6124 0028 DA43     	 mvn r2,r3
 6125 002a 7B69     	 ldr r3,[r7,#20]
 6126 002c 1340     	 and r3,r2
 6127 002e 7B61     	 str r3,[r7,#20]
1982:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 6128              	 .loc 2 1982 0
 6129 0030 FB1D     	 add r3,r7,#7
 6130 0032 1B78     	 ldrb r3,[r3]
 6131 0034 BA68     	 ldr r2,[r7,#8]
 6132 0036 9200     	 lsl r2,r2,#2
 6133 0038 9340     	 lsl r3,r3,r2
 6134 003a 7A69     	 ldr r2,[r7,#20]
 6135 003c 1343     	 orr r3,r2
 6136 003e 7B61     	 str r3,[r7,#20]
1983:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 6137              	 .loc 2 1983 0
 6138 0040 FA68     	 ldr r2,[r7,#12]
 6139 0042 D823     	 mov r3,#216
 6140 0044 5B00     	 lsl r3,r3,#1
 6141 0046 7969     	 ldr r1,[r7,#20]
 6142 0048 D150     	 str r1,[r2,r3]
 6143 004a 20E0     	 b .L252
 6144              	.L253:
1984:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1985:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1986:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1987:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 6145              	 .loc 2 1987 0
 6146 004c FA68     	 ldr r2,[r7,#12]
 6147 004e DA23     	 mov r3,#218
 6148 0050 5B00     	 lsl r3,r3,#1
 6149 0052 D358     	 ldr r3,[r2,r3]
 6150 0054 7B61     	 str r3,[r7,#20]
1988:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 6151              	 .loc 2 1988 0
 6152 0056 BB68     	 ldr r3,[r7,#8]
 6153 0058 0E4A     	 ldr r2,.L255
 6154 005a 9446     	 mov ip,r2
 6155 005c 6344     	 add r3,r3,ip
 6156 005e 9B00     	 lsl r3,r3,#2
 6157 0060 1A1C     	 mov r2,r3
 6158 0062 0F23     	 mov r3,#15
 6159 0064 9340     	 lsl r3,r3,r2
 6160 0066 DA43     	 mvn r2,r3
 6161 0068 7B69     	 ldr r3,[r7,#20]
 6162 006a 1340     	 and r3,r2
 6163 006c 7B61     	 str r3,[r7,#20]
1989:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 6164              	 .loc 2 1989 0
 6165 006e FB1D     	 add r3,r7,#7
 6166 0070 1B78     	 ldrb r3,[r3]
 6167 0072 BA68     	 ldr r2,[r7,#8]
 6168 0074 0749     	 ldr r1,.L255
 6169 0076 8C46     	 mov ip,r1
 6170 0078 6244     	 add r2,r2,ip
 6171 007a 9200     	 lsl r2,r2,#2
 6172 007c 9340     	 lsl r3,r3,r2
 6173 007e 7A69     	 ldr r2,[r7,#20]
 6174 0080 1343     	 orr r3,r2
 6175 0082 7B61     	 str r3,[r7,#20]
1990:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 6176              	 .loc 2 1990 0
 6177 0084 FA68     	 ldr r2,[r7,#12]
 6178 0086 DA23     	 mov r3,#218
 6179 0088 5B00     	 lsl r3,r3,#1
 6180 008a 7969     	 ldr r1,[r7,#20]
 6181 008c D150     	 str r1,[r2,r3]
 6182              	.L252:
1991:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1992:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6183              	 .loc 2 1992 0
 6184 008e BD46     	 mov sp,r7
 6185 0090 06B0     	 add sp,sp,#24
 6186              	 
 6187 0092 80BD     	 pop {r7,pc}
 6188              	.L256:
 6189              	 .align 2
 6190              	.L255:
 6191 0094 F8FFFF3F 	 .word 1073741816
 6192              	 .cfi_endproc
 6193              	.LFE200:
 6195              	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 6196              	 .align 2
 6197              	 .global XMC_VADC_GROUP_GetResultFifoTail
 6198              	 .code 16
 6199              	 .thumb_func
 6201              	XMC_VADC_GROUP_GetResultFifoTail:
 6202              	.LFB201:
1993:../Libraries/XMCLib/src/xmc_vadc.c **** 
1994:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1995:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1996:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6203              	 .loc 2 1996 0
 6204              	 .cfi_startproc
 6205 0000 80B5     	 push {r7,lr}
 6206              	.LCFI250:
 6207              	 .cfi_def_cfa_offset 8
 6208              	 .cfi_offset 7,-8
 6209              	 .cfi_offset 14,-4
 6210 0002 86B0     	 sub sp,sp,#24
 6211              	.LCFI251:
 6212              	 .cfi_def_cfa_offset 32
 6213 0004 00AF     	 add r7,sp,#0
 6214              	.LCFI252:
 6215              	 .cfi_def_cfa_register 7
 6216 0006 7860     	 str r0,[r7,#4]
 6217 0008 3960     	 str r1,[r7]
1997:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
1998:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2001:../Libraries/XMCLib/src/xmc_vadc.c **** 
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2003:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2004:../Libraries/XMCLib/src/xmc_vadc.c **** 
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 6218              	 .loc 2 2005 0
 6219 000a 0023     	 mov r3,#0
 6220 000c 7B61     	 str r3,[r7,#20]
2006:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 6221              	 .loc 2 2006 0
 6222 000e 0F23     	 mov r3,#15
 6223 0010 FB18     	 add r3,r7,r3
 6224 0012 0022     	 mov r2,#0
 6225 0014 1A70     	 strb r2,[r3]
2007:../Libraries/XMCLib/src/xmc_vadc.c **** 
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6226              	 .loc 2 2008 0
 6227 0016 7A68     	 ldr r2,[r7,#4]
 6228 0018 3B68     	 ldr r3,[r7]
 6229 001a 101C     	 mov r0,r2
 6230 001c 191C     	 mov r1,r3
 6231 001e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6232 0022 031E     	 sub r3,r0,#0
 6233 0024 02D0     	 beq .L258
2009:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2010:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 6234              	 .loc 2 2010 0
 6235 0026 3B68     	 ldr r3,[r7]
 6236 0028 013B     	 sub r3,r3,#1
 6237 002a 3B60     	 str r3,[r7]
 6238              	.L258:
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2012:../Libraries/XMCLib/src/xmc_vadc.c **** 
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2014:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 6239              	 .loc 2 2014 0
 6240 002c 3B68     	 ldr r3,[r7]
 6241 002e 002B     	 cmp r3,#0
 6242 0030 02D1     	 bne .L259
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2016:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 6243              	 .loc 2 2016 0
 6244 0032 0023     	 mov r3,#0
 6245 0034 7B61     	 str r3,[r7,#20]
 6246 0036 2DE0     	 b .L260
 6247              	.L259:
2017:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2018:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2019:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2020:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 6248              	 .loc 2 2021 0
 6249 0038 3B68     	 ldr r3,[r7]
 6250 003a 3B61     	 str r3,[r7,#16]
 6251 003c 27E0     	 b .L261
 6252              	.L266:
2022:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2023:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 6253              	 .loc 2 2023 0
 6254 003e 7B68     	 ldr r3,[r7,#4]
 6255 0040 3A69     	 ldr r2,[r7,#16]
 6256 0042 A032     	 add r2,r2,#160
 6257 0044 9200     	 lsl r2,r2,#2
 6258 0046 D358     	 ldr r3,[r2,r3]
 6259 0048 BB60     	 str r3,[r7,#8]
2024:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6260              	 .loc 2 2024 0
 6261 004a BA68     	 ldr r2,[r7,#8]
 6262 004c C023     	 mov r3,#192
 6263 004e DB04     	 lsl r3,r3,#19
 6264 0050 1340     	 and r3,r2
 6265 0052 BB60     	 str r3,[r7,#8]
2025:../Libraries/XMCLib/src/xmc_vadc.c **** 
2026:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 6266              	 .loc 2 2026 0
 6267 0054 BB68     	 ldr r3,[r7,#8]
 6268 0056 002B     	 cmp r3,#0
 6269 0058 09D0     	 beq .L262
2027:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2028:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 6270              	 .loc 2 2028 0
 6271 005a 3B69     	 ldr r3,[r7,#16]
 6272 005c 002B     	 cmp r3,#0
 6273 005e 0DD1     	 bne .L264
2029:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2030:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2031:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 6274              	 .loc 2 2031 0
 6275 0060 0023     	 mov r3,#0
 6276 0062 7B61     	 str r3,[r7,#20]
2032:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 6277              	 .loc 2 2032 0
 6278 0064 0F23     	 mov r3,#15
 6279 0066 FB18     	 add r3,r7,r3
 6280 0068 0122     	 mov r2,#1
 6281 006a 1A70     	 strb r2,[r3]
 6282 006c 06E0     	 b .L264
 6283              	.L262:
2033:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2034:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2035:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2036:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2037:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2038:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 6284              	 .loc 2 2038 0
 6285 006e 3B69     	 ldr r3,[r7,#16]
 6286 0070 0133     	 add r3,r3,#1
 6287 0072 7B61     	 str r3,[r7,#20]
2039:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 6288              	 .loc 2 2039 0
 6289 0074 0F23     	 mov r3,#15
 6290 0076 FB18     	 add r3,r7,r3
 6291 0078 0122     	 mov r2,#1
 6292 007a 1A70     	 strb r2,[r3]
 6293              	.L264:
2040:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2041:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 6294              	 .loc 2 2041 0
 6295 007c 0F23     	 mov r3,#15
 6296 007e FB18     	 add r3,r7,r3
 6297 0080 1B78     	 ldrb r3,[r3]
 6298 0082 002B     	 cmp r3,#0
 6299 0084 00D0     	 beq .L265
2042:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2043:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 6300              	 .loc 2 2043 0
 6301 0086 05E0     	 b .L260
 6302              	.L265:
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6303              	 .loc 2 2021 0 discriminator 2
 6304 0088 3B69     	 ldr r3,[r7,#16]
 6305 008a 013B     	 sub r3,r3,#1
 6306 008c 3B61     	 str r3,[r7,#16]
 6307              	.L261:
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6308              	 .loc 2 2021 0 is_stmt 0 discriminator 1
 6309 008e 3B69     	 ldr r3,[r7,#16]
 6310 0090 002B     	 cmp r3,#0
 6311 0092 D4DA     	 bge .L266
 6312              	.L260:
2044:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2045:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2046:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2047:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 6313              	 .loc 2 2047 0 is_stmt 1
 6314 0094 7B69     	 ldr r3,[r7,#20]
2048:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6315              	 .loc 2 2048 0
 6316 0096 181C     	 mov r0,r3
 6317 0098 BD46     	 mov sp,r7
 6318 009a 06B0     	 add sp,sp,#24
 6319              	 
 6320 009c 80BD     	 pop {r7,pc}
 6321              	 .cfi_endproc
 6322              	.LFE201:
 6324 009e C046     	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 6325              	 .align 2
 6326              	 .global XMC_VADC_GROUP_GetResultFifoHead
 6327              	 .code 16
 6328              	 .thumb_func
 6330              	XMC_VADC_GROUP_GetResultFifoHead:
 6331              	.LFB202:
2049:../Libraries/XMCLib/src/xmc_vadc.c **** 
2050:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2051:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2052:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6332              	 .loc 2 2052 0
 6333              	 .cfi_startproc
 6334 0000 80B5     	 push {r7,lr}
 6335              	.LCFI253:
 6336              	 .cfi_def_cfa_offset 8
 6337              	 .cfi_offset 7,-8
 6338              	 .cfi_offset 14,-4
 6339 0002 86B0     	 sub sp,sp,#24
 6340              	.LCFI254:
 6341              	 .cfi_def_cfa_offset 32
 6342 0004 00AF     	 add r7,sp,#0
 6343              	.LCFI255:
 6344              	 .cfi_def_cfa_register 7
 6345 0006 7860     	 str r0,[r7,#4]
 6346 0008 3960     	 str r1,[r7]
2053:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2054:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2055:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2056:../Libraries/XMCLib/src/xmc_vadc.c **** 
2057:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2058:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2059:../Libraries/XMCLib/src/xmc_vadc.c **** 
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6347              	 .loc 2 2060 0
 6348 000a 7A68     	 ldr r2,[r7,#4]
 6349 000c 3B68     	 ldr r3,[r7]
 6350 000e 101C     	 mov r0,r2
 6351 0010 191C     	 mov r1,r3
 6352 0012 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6353 0016 031E     	 sub r3,r0,#0
 6354 0018 02D0     	 beq .L269
2061:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2062:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 6355              	 .loc 2 2062 0
 6356 001a 3B68     	 ldr r3,[r7]
 6357 001c 7B61     	 str r3,[r7,#20]
 6358 001e 1BE0     	 b .L270
 6359              	.L269:
2063:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2064:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2066:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 6360              	 .loc 2 2066 0
 6361 0020 0F23     	 mov r3,#15
 6362 0022 7B61     	 str r3,[r7,#20]
2067:../Libraries/XMCLib/src/xmc_vadc.c **** 
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 6363              	 .loc 2 2068 0
 6364 0024 3B68     	 ldr r3,[r7]
 6365 0026 3B61     	 str r3,[r7,#16]
 6366 0028 13E0     	 b .L271
 6367              	.L273:
2069:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 6368              	 .loc 2 2070 0
 6369 002a 7B68     	 ldr r3,[r7,#4]
 6370 002c 3A69     	 ldr r2,[r7,#16]
 6371 002e A032     	 add r2,r2,#160
 6372 0030 9200     	 lsl r2,r2,#2
 6373 0032 D358     	 ldr r3,[r2,r3]
 6374 0034 FB60     	 str r3,[r7,#12]
2071:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6375              	 .loc 2 2071 0
 6376 0036 FA68     	 ldr r2,[r7,#12]
 6377 0038 C023     	 mov r3,#192
 6378 003a DB04     	 lsl r3,r3,#19
 6379 003c 1340     	 and r3,r2
 6380 003e FB60     	 str r3,[r7,#12]
2072:../Libraries/XMCLib/src/xmc_vadc.c **** 
2073:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 6381              	 .loc 2 2073 0
 6382 0040 FB68     	 ldr r3,[r7,#12]
 6383 0042 002B     	 cmp r3,#0
 6384 0044 02D1     	 bne .L272
2074:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2075:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2076:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 6385              	 .loc 2 2076 0
 6386 0046 3B69     	 ldr r3,[r7,#16]
 6387 0048 7B61     	 str r3,[r7,#20]
2077:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 6388              	 .loc 2 2077 0
 6389 004a 05E0     	 b .L270
 6390              	.L272:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6391              	 .loc 2 2068 0 discriminator 2
 6392 004c 3B69     	 ldr r3,[r7,#16]
 6393 004e 0133     	 add r3,r3,#1
 6394 0050 3B61     	 str r3,[r7,#16]
 6395              	.L271:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6396              	 .loc 2 2068 0 is_stmt 0 discriminator 1
 6397 0052 3B69     	 ldr r3,[r7,#16]
 6398 0054 0F2B     	 cmp r3,#15
 6399 0056 E8D9     	 bls .L273
 6400              	.L270:
2078:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2079:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2080:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2081:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 6401              	 .loc 2 2081 0 is_stmt 1
 6402 0058 7B69     	 ldr r3,[r7,#20]
2082:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6403              	 .loc 2 2082 0
 6404 005a 181C     	 mov r0,r3
 6405 005c BD46     	 mov sp,r7
 6406 005e 06B0     	 add sp,sp,#24
 6407              	 
 6408 0060 80BD     	 pop {r7,pc}
 6409              	 .cfi_endproc
 6410              	.LFE202:
 6412 0062 C046     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 6413              	 .align 2
 6414              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 6415              	 .code 16
 6416              	 .thumb_func
 6418              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 6419              	.LFB203:
2083:../Libraries/XMCLib/src/xmc_vadc.c **** 
2084:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2085:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2086:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6420              	 .loc 2 2086 0
 6421              	 .cfi_startproc
 6422 0000 80B5     	 push {r7,lr}
 6423              	.LCFI256:
 6424              	 .cfi_def_cfa_offset 8
 6425              	 .cfi_offset 7,-8
 6426              	 .cfi_offset 14,-4
 6427 0002 86B0     	 sub sp,sp,#24
 6428              	.LCFI257:
 6429              	 .cfi_def_cfa_offset 32
 6430 0004 00AF     	 add r7,sp,#0
 6431              	.LCFI258:
 6432              	 .cfi_def_cfa_register 7
 6433 0006 7860     	 str r0,[r7,#4]
 6434 0008 3960     	 str r1,[r7]
2087:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2088:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2089:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2090:../Libraries/XMCLib/src/xmc_vadc.c **** 
2091:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2093:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2094:../Libraries/XMCLib/src/xmc_vadc.c **** 
2095:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 6435              	 .loc 2 2095 0
 6436 000a 7B68     	 ldr r3,[r7,#4]
 6437 000c 3A68     	 ldr r2,[r7]
 6438 000e A032     	 add r2,r2,#160
 6439 0010 9200     	 lsl r2,r2,#2
 6440 0012 D358     	 ldr r3,[r2,r3]
 6441 0014 3B61     	 str r3,[r7,#16]
2096:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6442              	 .loc 2 2096 0
 6443 0016 3A69     	 ldr r2,[r7,#16]
 6444 0018 C023     	 mov r3,#192
 6445 001a DB04     	 lsl r3,r3,#19
 6446 001c 1340     	 and r3,r2
 6447 001e 3B61     	 str r3,[r7,#16]
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 6448              	 .loc 2 2097 0
 6449 0020 3B68     	 ldr r3,[r7]
 6450 0022 5A1E     	 sub r2,r3,#1
 6451 0024 7B68     	 ldr r3,[r7,#4]
 6452 0026 A032     	 add r2,r2,#160
 6453 0028 9200     	 lsl r2,r2,#2
 6454 002a D358     	 ldr r3,[r2,r3]
 6455 002c FB60     	 str r3,[r7,#12]
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6456              	 .loc 2 2098 0
 6457 002e FA68     	 ldr r2,[r7,#12]
 6458 0030 C023     	 mov r3,#192
 6459 0032 DB04     	 lsl r3,r3,#19
 6460 0034 1340     	 and r3,r2
 6461 0036 FB60     	 str r3,[r7,#12]
2099:../Libraries/XMCLib/src/xmc_vadc.c **** 
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 6462              	 .loc 2 2100 0
 6463 0038 3B69     	 ldr r3,[r7,#16]
 6464 003a 002B     	 cmp r3,#0
 6465 003c 04D0     	 beq .L276
2101:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2102:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6466              	 .loc 2 2102 0
 6467 003e 1723     	 mov r3,#23
 6468 0040 FB18     	 add r3,r7,r3
 6469 0042 0022     	 mov r2,#0
 6470 0044 1A70     	 strb r2,[r3]
 6471 0046 0BE0     	 b .L277
 6472              	.L276:
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2104:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 6473              	 .loc 2 2104 0
 6474 0048 FB68     	 ldr r3,[r7,#12]
 6475 004a 002B     	 cmp r3,#0
 6476 004c 04D0     	 beq .L278
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2106:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 6477              	 .loc 2 2106 0
 6478 004e 1723     	 mov r3,#23
 6479 0050 FB18     	 add r3,r7,r3
 6480 0052 0122     	 mov r2,#1
 6481 0054 1A70     	 strb r2,[r3]
 6482 0056 03E0     	 b .L277
 6483              	.L278:
2107:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2108:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2110:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6484              	 .loc 2 2110 0
 6485 0058 1723     	 mov r3,#23
 6486 005a FB18     	 add r3,r7,r3
 6487 005c 0022     	 mov r2,#0
 6488 005e 1A70     	 strb r2,[r3]
 6489              	.L277:
2111:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2112:../Libraries/XMCLib/src/xmc_vadc.c **** 
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 6490              	 .loc 2 2113 0
 6491 0060 1723     	 mov r3,#23
 6492 0062 FB18     	 add r3,r7,r3
 6493 0064 1B78     	 ldrb r3,[r3]
2114:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6494              	 .loc 2 2114 0
 6495 0066 181C     	 mov r0,r3
 6496 0068 BD46     	 mov sp,r7
 6497 006a 06B0     	 add sp,sp,#24
 6498              	 
 6499 006c 80BD     	 pop {r7,pc}
 6500              	 .cfi_endproc
 6501              	.LFE203:
 6503 006e C046     	 .text
 6504              	.Letext0:
 6505              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6506              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6507              	 .file 5 "C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 6508              	 .file 6 "C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/XMCLib/inc/xmc1_scu.h"
 6509              	 .file 7 "C:/DAVEv4-64Bit/work/Demo_7_Mix/Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:18     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:22     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:123    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:127    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:162    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:166    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:199    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000020 $d
    {standard input}:204    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:208    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:243    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:247    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:280    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000020 $d
    {standard input}:285    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:289    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:324    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:328    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:361    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000020 $d
    {standard input}:366    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:370    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:419    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:422    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:426    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:431    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:458    .text.XMC_VADC_GLOBAL_EnableModule:00000014 $d
    {standard input}:463    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:468    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:491    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:496    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:563    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:568    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:624    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:630    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:635    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:719    .text.XMC_VADC_GLOBAL_StartupCalibration:00000070 $d
    {standard input}:724    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:729    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:775    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:780    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:858    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000068 $d
    {standard input}:863    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:868    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:921    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:926    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:983    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:988    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1062   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1067   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1136   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:0000005c $d
    {standard input}:1141   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1146   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1215   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1220   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1306   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1301   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1450   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1455   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1504   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1509   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1566   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1571   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1611   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1616   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1651   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1656   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1692   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1697   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1749   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1754   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1804   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000003c $d
    {standard input}:1809   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1814   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:1858   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:1863   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:1920   .text.XMC_VADC_GROUP_SetBoundaries:00000044 $d
    {standard input}:1925   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:1930   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2008   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000068 $d
    {standard input}:2013   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2018   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2083   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:2088   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2152   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 $t
    {standard input}:2157   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 XMC_VADC_GLOBAL_SHS_Init
    {standard input}:2211   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 $t
    {standard input}:2216   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
    {standard input}:2275   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 $t
    {standard input}:2280   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
    {standard input}:2341   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 $t
    {standard input}:2346   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 XMC_VADC_GLOBAL_SHS_SetShortSampleTime
    {standard input}:2431   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000078 $d
    {standard input}:2436   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 $t
    {standard input}:2441   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 XMC_VADC_GLOBAL_SHS_SetGainFactor
    {standard input}:2561   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2566   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
    {standard input}:2625   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2630   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
    {standard input}:2691   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 $t
    {standard input}:2696   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
    {standard input}:2771   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 $t
    {standard input}:2776   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
    {standard input}:2895   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 $t
    {standard input}:2900   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
    {standard input}:2967   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000005c $d
    {standard input}:2972   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:2977   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:3091   .text.XMC_VADC_GROUP_ScanInit:000000ac $d
    {standard input}:3096   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:3101   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:3158   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000048 $d
    {standard input}:3163   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:3168   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:3225   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000048 $d
    {standard input}:3230   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:3235   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:3292   .text.XMC_VADC_GROUP_ScanSelectGating:00000048 $d
    {standard input}:3297   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:3302   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:3401   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000094 $d
    {standard input}:3406   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:3411   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:3484   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:3489   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:3541   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:3546   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:3594   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:3599   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3806   .text.XMC_VADC_GLOBAL_BackgroundInit:00000144 $d
    {standard input}:3813   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3818   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:3872   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000040 $d
    {standard input}:3877   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:3882   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:3939   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000048 $d
    {standard input}:3944   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:3949   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:4003   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000040 $d
    {standard input}:4008   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:4013   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:4137   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000b4 $d
    {standard input}:4143   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:4148   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:4237   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:4242   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:4356   .text.XMC_VADC_GROUP_QueueInit:000000ac $d
    {standard input}:4361   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:4366   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:4423   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000048 $d
    {standard input}:4428   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:4433   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:4490   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000048 $d
    {standard input}:4495   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:4500   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:4557   .text.XMC_VADC_GROUP_QueueSelectGating:00000048 $d
    {standard input}:4562   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:4567   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:4635   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:4640   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:4718   .text.XMC_VADC_GROUP_QueueAbortSequence:00000070 $d
    {standard input}:4723   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:4728   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:4847   .text.XMC_VADC_GROUP_QueueRemoveChannel:000000b4 $d
    {standard input}:4852   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:4857   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:4930   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:4935   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:4988   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:4993   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:5044   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:5049   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:5194   .text.XMC_VADC_GROUP_ChannelInit:000000d8 $d
    {standard input}:5199   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:5204   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:5275   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:5280   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:5361   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:5366   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:5419   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000040 $d
    {standard input}:5424   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:5429   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:5480   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000003c $d
    {standard input}:5485   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:5490   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:5543   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:5548   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:5592   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:5597   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:5643   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:5648   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:5707   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:5712   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:5765   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000040 $d
    {standard input}:5770   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:5775   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:5845   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:5850   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:5900   .text.XMC_VADC_GROUP_AddResultToFifo:0000003c $d
    {standard input}:5905   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:5910   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:5964   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:5969   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:6028   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:6033   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:6084   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:6089   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:6191   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000094 $d
    {standard input}:6196   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:6201   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:6418   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:6325   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:6330   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:6413   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GatePeripheralClock
