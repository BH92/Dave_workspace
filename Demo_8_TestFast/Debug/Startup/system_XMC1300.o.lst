   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "system_XMC1300.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .global SystemCoreClock
  18              	 .section .no_init,"aw",%progbits
  19              	 .align 2
  22              	SystemCoreClock:
  23 0000 00000000 	 .space 4
  24              	 .section .text.SystemInit,"ax",%progbits
  25              	 .align 2
  26              	 .weak SystemInit
  27              	 .code 16
  28              	 .thumb_func
  30              	SystemInit:
  31              	.LFB34:
  32              	 .file 1 "../Startup/system_XMC1300.c"
   1:../Startup/system_XMC1300.c **** /**************************************************************************************************
   2:../Startup/system_XMC1300.c ****  * @file     system_XMC1300.c
   3:../Startup/system_XMC1300.c ****  * @brief    Device specific initialization for the XMC1300-Series according to CMSIS
   4:../Startup/system_XMC1300.c ****  * @version  V1.9
   5:../Startup/system_XMC1300.c ****  * @date     31 Mar 2016
   6:../Startup/system_XMC1300.c ****  *
   7:../Startup/system_XMC1300.c ****  * @cond
   8:../Startup/system_XMC1300.c ****  **************************************************************************************************
   9:../Startup/system_XMC1300.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Startup/system_XMC1300.c ****  * All rights reserved.                        
  11:../Startup/system_XMC1300.c ****  *                                             
  12:../Startup/system_XMC1300.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Startup/system_XMC1300.c ****  * following conditions are met:   
  14:../Startup/system_XMC1300.c ****  *                                                                              
  15:../Startup/system_XMC1300.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Startup/system_XMC1300.c ****  * disclaimer.                        
  17:../Startup/system_XMC1300.c ****  * 
  18:../Startup/system_XMC1300.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Startup/system_XMC1300.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Startup/system_XMC1300.c ****  * 
  21:../Startup/system_XMC1300.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Startup/system_XMC1300.c ****  * products derived from this software without specific prior written permission.                  
  23:../Startup/system_XMC1300.c ****  *                                                                              
  24:../Startup/system_XMC1300.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Startup/system_XMC1300.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Startup/system_XMC1300.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Startup/system_XMC1300.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Startup/system_XMC1300.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Startup/system_XMC1300.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Startup/system_XMC1300.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Startup/system_XMC1300.c ****  *                                                                              
  32:../Startup/system_XMC1300.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Startup/system_XMC1300.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Startup/system_XMC1300.c ****  **************************************************************************************************
  35:../Startup/system_XMC1300.c ****  *
  36:../Startup/system_XMC1300.c ****  * *************************** Change history ********************************
  37:../Startup/system_XMC1300.c ****  * V1.2, 13 Dec 2012, PKB : Created change history table
  38:../Startup/system_XMC1300.c ****  * V1.3, 20 Dec 2012, PKB : Fixed SystemCoreClock computation
  39:../Startup/system_XMC1300.c ****  * V1.4, 02 Feb 2013, PKB : SCU_CLOCK -> SCU_CLK
  40:../Startup/system_XMC1300.c ****  * V1.5, 27 Nov 2013, DNE : Comments added in SystemInit function for MCLK support
  41:../Startup/system_XMC1300.c ****  * V1.6, 19 Feb 2014, JFT : Fixed SystemCoreClock when FDIV != 0 
  42:../Startup/system_XMC1300.c ****  * V1.7, 11 Dec 2014, JFT : SystemCoreClockSetup, SystemCoreSetup as weak functions
  43:../Startup/system_XMC1300.c ****  * V1.8, 03 Sep 2015, JFT : Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table (s
  44:../Startup/system_XMC1300.c ****  *                          MCLK = 32MHz, PCLK = 64MHz
  45:../Startup/system_XMC1300.c ****  * V1.9, 31 Mar 2016, JFT : Fix flash wait states to 1 cycle
  46:../Startup/system_XMC1300.c ****  *
  47:../Startup/system_XMC1300.c ****  * @endcond 
  48:../Startup/system_XMC1300.c ****  */
  49:../Startup/system_XMC1300.c **** 
  50:../Startup/system_XMC1300.c **** /*******************************************************************************
  51:../Startup/system_XMC1300.c ****  * HEADER FILES
  52:../Startup/system_XMC1300.c ****  *******************************************************************************/
  53:../Startup/system_XMC1300.c **** 
  54:../Startup/system_XMC1300.c **** #include <XMC1300.h>
  55:../Startup/system_XMC1300.c **** #include "system_XMC1300.h"
  56:../Startup/system_XMC1300.c **** 
  57:../Startup/system_XMC1300.c **** /*******************************************************************************
  58:../Startup/system_XMC1300.c ****  * MACROS
  59:../Startup/system_XMC1300.c ****  *******************************************************************************/
  60:../Startup/system_XMC1300.c **** 
  61:../Startup/system_XMC1300.c **** /* Define WEAK attribute */
  62:../Startup/system_XMC1300.c **** #if !defined(__WEAK)
  63:../Startup/system_XMC1300.c **** #if defined ( __CC_ARM )
  64:../Startup/system_XMC1300.c **** #define __WEAK __attribute__ ((weak))
  65:../Startup/system_XMC1300.c **** #elif defined ( __ICCARM__ )
  66:../Startup/system_XMC1300.c **** #define __WEAK __weak
  67:../Startup/system_XMC1300.c **** #elif defined ( __GNUC__ )
  68:../Startup/system_XMC1300.c **** #define __WEAK __attribute__ ((weak))
  69:../Startup/system_XMC1300.c **** #elif defined ( __TASKING__ )
  70:../Startup/system_XMC1300.c **** #define __WEAK __attribute__ ((weak))
  71:../Startup/system_XMC1300.c **** #endif
  72:../Startup/system_XMC1300.c **** #endif
  73:../Startup/system_XMC1300.c **** 
  74:../Startup/system_XMC1300.c **** #define DCO1_FREQUENCY (64000000U)
  75:../Startup/system_XMC1300.c **** 
  76:../Startup/system_XMC1300.c **** /* Macros to apply fixed wait states to flash read access (see DS Addendum) */
  77:../Startup/system_XMC1300.c **** #define NVM_NVMCONF_WS_Msk    (0x1000UL)
  78:../Startup/system_XMC1300.c **** #define NVM_CONFIG1           ((uint32_t *)0x40050048)
  79:../Startup/system_XMC1300.c **** #define NVM_CONFIG1_FIXWS_Msk (0x800UL)
  80:../Startup/system_XMC1300.c **** 
  81:../Startup/system_XMC1300.c **** /*******************************************************************************
  82:../Startup/system_XMC1300.c ****  * GLOBAL VARIABLES
  83:../Startup/system_XMC1300.c ****  *******************************************************************************/
  84:../Startup/system_XMC1300.c **** 
  85:../Startup/system_XMC1300.c **** #if defined ( __CC_ARM )
  86:../Startup/system_XMC1300.c **** uint32_t SystemCoreClock __attribute__((at(0x20003FFC)));
  87:../Startup/system_XMC1300.c **** #elif defined ( __ICCARM__ )
  88:../Startup/system_XMC1300.c **** __no_init uint32_t SystemCoreClock;
  89:../Startup/system_XMC1300.c **** #elif defined ( __GNUC__ )
  90:../Startup/system_XMC1300.c **** uint32_t SystemCoreClock __attribute__((section(".no_init")));
  91:../Startup/system_XMC1300.c **** #elif defined ( __TASKING__ )
  92:../Startup/system_XMC1300.c **** uint32_t SystemCoreClock __at( 0x20003FFC );
  93:../Startup/system_XMC1300.c **** #endif
  94:../Startup/system_XMC1300.c **** 
  95:../Startup/system_XMC1300.c **** /*******************************************************************************
  96:../Startup/system_XMC1300.c ****  * API IMPLEMENTATION
  97:../Startup/system_XMC1300.c ****  *******************************************************************************/
  98:../Startup/system_XMC1300.c **** 
  99:../Startup/system_XMC1300.c **** __WEAK void SystemInit(void)
 100:../Startup/system_XMC1300.c **** {    
  33              	 .loc 1 100 0
  34              	 .cfi_startproc
  35 0000 80B5     	 push {r7,lr}
  36              	.LCFI0:
  37              	 .cfi_def_cfa_offset 8
  38              	 .cfi_offset 7,-8
  39              	 .cfi_offset 14,-4
  40 0002 00AF     	 add r7,sp,#0
  41              	.LCFI1:
  42              	 .cfi_def_cfa_register 7
 101:../Startup/system_XMC1300.c ****   SystemCoreSetup();
  43              	 .loc 1 101 0
  44 0004 FFF7FEFF 	 bl SystemCoreSetup
 102:../Startup/system_XMC1300.c ****   SystemCoreClockSetup();
  45              	 .loc 1 102 0
  46 0008 FFF7FEFF 	 bl SystemCoreClockSetup
 103:../Startup/system_XMC1300.c **** }
  47              	 .loc 1 103 0
  48 000c BD46     	 mov sp,r7
  49              	 
  50 000e 80BD     	 pop {r7,pc}
  51              	 .cfi_endproc
  52              	.LFE34:
  54              	 .section .text.SystemCoreSetup,"ax",%progbits
  55              	 .align 2
  56              	 .weak SystemCoreSetup
  57              	 .code 16
  58              	 .thumb_func
  60              	SystemCoreSetup:
  61              	.LFB35:
 104:../Startup/system_XMC1300.c **** 
 105:../Startup/system_XMC1300.c **** __WEAK void SystemCoreSetup(void)
 106:../Startup/system_XMC1300.c **** {
  62              	 .loc 1 106 0
  63              	 .cfi_startproc
  64 0000 80B5     	 push {r7,lr}
  65              	.LCFI2:
  66              	 .cfi_def_cfa_offset 8
  67              	 .cfi_offset 7,-8
  68              	 .cfi_offset 14,-4
  69 0002 00AF     	 add r7,sp,#0
  70              	.LCFI3:
  71              	 .cfi_def_cfa_register 7
 107:../Startup/system_XMC1300.c ****   /* Fix flash wait states to 1 cycle */
 108:../Startup/system_XMC1300.c ****   NVM->NVMCONF |= NVM_NVMCONF_WS_Msk;
  72              	 .loc 1 108 0
  73 0004 0849     	 ldr r1,.L3
  74 0006 084B     	 ldr r3,.L3
  75 0008 1B89     	 ldrh r3,[r3,#8]
  76 000a 9BB2     	 uxth r3,r3
  77 000c 8022     	 mov r2,#128
  78 000e 5201     	 lsl r2,r2,#5
  79 0010 1343     	 orr r3,r2
  80 0012 9BB2     	 uxth r3,r3
  81 0014 0B81     	 strh r3,[r1,#8]
 109:../Startup/system_XMC1300.c ****   *NVM_CONFIG1 |= NVM_CONFIG1_FIXWS_Msk; 
  82              	 .loc 1 109 0
  83 0016 054B     	 ldr r3,.L3+4
  84 0018 044A     	 ldr r2,.L3+4
  85 001a 1268     	 ldr r2,[r2]
  86 001c 8021     	 mov r1,#128
  87 001e 0901     	 lsl r1,r1,#4
  88 0020 0A43     	 orr r2,r1
  89 0022 1A60     	 str r2,[r3]
 110:../Startup/system_XMC1300.c **** }
  90              	 .loc 1 110 0
  91 0024 BD46     	 mov sp,r7
  92              	 
  93 0026 80BD     	 pop {r7,pc}
  94              	.L4:
  95              	 .align 2
  96              	.L3:
  97 0028 00000540 	 .word 1074069504
  98 002c 48000540 	 .word 1074069576
  99              	 .cfi_endproc
 100              	.LFE35:
 102              	 .section .text.SystemCoreClockSetup,"ax",%progbits
 103              	 .align 2
 104              	 .weak SystemCoreClockSetup
 105              	 .code 16
 106              	 .thumb_func
 108              	SystemCoreClockSetup:
 109              	.LFB36:
 111:../Startup/system_XMC1300.c **** 
 112:../Startup/system_XMC1300.c **** __WEAK void SystemCoreClockSetup(void)
 113:../Startup/system_XMC1300.c **** {
 110              	 .loc 1 113 0
 111              	 .cfi_startproc
 112 0000 80B5     	 push {r7,lr}
 113              	.LCFI4:
 114              	 .cfi_def_cfa_offset 8
 115              	 .cfi_offset 7,-8
 116              	 .cfi_offset 14,-4
 117 0002 00AF     	 add r7,sp,#0
 118              	.LCFI5:
 119              	 .cfi_def_cfa_register 7
 114:../Startup/system_XMC1300.c ****   /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
 115:../Startup/system_XMC1300.c ****   /* MCLK = 32MHz, PCLK = 64MHz */
 116:../Startup/system_XMC1300.c ****   
 117:../Startup/system_XMC1300.c ****   SCU_GENERAL->PASSWD = 0x000000C0UL; /* disable bit protection */
 120              	 .loc 1 117 0
 121 0004 094B     	 ldr r3,.L7
 122 0006 C022     	 mov r2,#192
 123 0008 5A62     	 str r2,[r3,#36]
 118:../Startup/system_XMC1300.c ****   SCU_CLK->CLKCR = 0x3FF10100UL;
 124              	 .loc 1 118 0
 125 000a 094B     	 ldr r3,.L7+4
 126 000c 094A     	 ldr r2,.L7+8
 127 000e 1A60     	 str r2,[r3]
 119:../Startup/system_XMC1300.c ****   while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
 128              	 .loc 1 119 0
 129 0010 C046     	 mov r8,r8
 130              	.L6:
 131              	 .loc 1 119 0 is_stmt 0 discriminator 1
 132 0012 074B     	 ldr r3,.L7+4
 133 0014 1A68     	 ldr r2,[r3]
 134 0016 8023     	 mov r3,#128
 135 0018 DB05     	 lsl r3,r3,#23
 136 001a 1340     	 and r3,r2
 137 001c F9D1     	 bne .L6
 120:../Startup/system_XMC1300.c ****   SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
 138              	 .loc 1 120 0 is_stmt 1
 139 001e 034B     	 ldr r3,.L7
 140 0020 C322     	 mov r2,#195
 141 0022 5A62     	 str r2,[r3,#36]
 121:../Startup/system_XMC1300.c **** 
 122:../Startup/system_XMC1300.c ****   SystemCoreClockUpdate();
 142              	 .loc 1 122 0
 143 0024 FFF7FEFF 	 bl SystemCoreClockUpdate
 123:../Startup/system_XMC1300.c **** }
 144              	 .loc 1 123 0
 145 0028 BD46     	 mov sp,r7
 146              	 
 147 002a 80BD     	 pop {r7,pc}
 148              	.L8:
 149              	 .align 2
 150              	.L7:
 151 002c 00000140 	 .word 1073807360
 152 0030 00030140 	 .word 1073808128
 153 0034 0001F13F 	 .word 1072759040
 154              	 .cfi_endproc
 155              	.LFE36:
 157              	 .global __aeabi_uidiv
 158              	 .section .text.SystemCoreClockUpdate,"ax",%progbits
 159              	 .align 2
 160              	 .weak SystemCoreClockUpdate
 161              	 .code 16
 162              	 .thumb_func
 164              	SystemCoreClockUpdate:
 165              	.LFB37:
 124:../Startup/system_XMC1300.c **** 
 125:../Startup/system_XMC1300.c **** __WEAK void SystemCoreClockUpdate(void)
 126:../Startup/system_XMC1300.c **** {
 166              	 .loc 1 126 0
 167              	 .cfi_startproc
 168 0000 80B5     	 push {r7,lr}
 169              	.LCFI6:
 170              	 .cfi_def_cfa_offset 8
 171              	 .cfi_offset 7,-8
 172              	 .cfi_offset 14,-4
 173 0002 00AF     	 add r7,sp,#0
 174              	.LCFI7:
 175              	 .cfi_def_cfa_register 7
 127:../Startup/system_XMC1300.c ****   static uint32_t IDIV, FDIV;
 128:../Startup/system_XMC1300.c **** 
 129:../Startup/system_XMC1300.c ****   IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 176              	 .loc 1 129 0
 177 0004 124B     	 ldr r3,.L12
 178 0006 1A68     	 ldr r2,[r3]
 179 0008 FF23     	 mov r3,#255
 180 000a 1B02     	 lsl r3,r3,#8
 181 000c 1340     	 and r3,r2
 182 000e 1A0A     	 lsr r2,r3,#8
 183 0010 104B     	 ldr r3,.L12+4
 184 0012 1A60     	 str r2,[r3]
 130:../Startup/system_XMC1300.c ****   FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
 185              	 .loc 1 130 0
 186 0014 0E4B     	 ldr r3,.L12
 187 0016 1B68     	 ldr r3,[r3]
 188 0018 FF22     	 mov r2,#255
 189 001a 1A40     	 and r2,r3
 190 001c 0E4B     	 ldr r3,.L12+8
 191 001e 1A60     	 str r2,[r3]
 131:../Startup/system_XMC1300.c ****   
 132:../Startup/system_XMC1300.c ****   if (IDIV != 0)
 192              	 .loc 1 132 0
 193 0020 0C4B     	 ldr r3,.L12+4
 194 0022 1B68     	 ldr r3,[r3]
 195 0024 002B     	 cmp r3,#0
 196 0026 0ED0     	 beq .L10
 133:../Startup/system_XMC1300.c ****   {
 134:../Startup/system_XMC1300.c ****     /* Fractional divider is enabled and used */
 135:../Startup/system_XMC1300.c ****     SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
 197              	 .loc 1 135 0
 198 0028 0A4B     	 ldr r3,.L12+4
 199 002a 1B68     	 ldr r3,[r3]
 200 002c 1A02     	 lsl r2,r3,#8
 201 002e 0A4B     	 ldr r3,.L12+8
 202 0030 1B68     	 ldr r3,[r3]
 203 0032 D318     	 add r3,r2,r3
 204 0034 0948     	 ldr r0,.L12+12
 205 0036 191C     	 mov r1,r3
 206 0038 FFF7FEFF 	 bl __aeabi_uidiv
 207 003c 031C     	 mov r3,r0
 208 003e 5A00     	 lsl r2,r3,#1
 209 0040 074B     	 ldr r3,.L12+16
 210 0042 1A60     	 str r2,[r3]
 211 0044 02E0     	 b .L9
 212              	.L10:
 136:../Startup/system_XMC1300.c ****   }
 137:../Startup/system_XMC1300.c ****   else
 138:../Startup/system_XMC1300.c ****   {
 139:../Startup/system_XMC1300.c ****     /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
 140:../Startup/system_XMC1300.c ****     SystemCoreClock = DCO1_FREQUENCY >> 1U;
 213              	 .loc 1 140 0
 214 0046 064B     	 ldr r3,.L12+16
 215 0048 064A     	 ldr r2,.L12+20
 216 004a 1A60     	 str r2,[r3]
 217              	.L9:
 141:../Startup/system_XMC1300.c ****   }
 142:../Startup/system_XMC1300.c **** }
 218              	 .loc 1 142 0
 219 004c BD46     	 mov sp,r7
 220              	 
 221 004e 80BD     	 pop {r7,pc}
 222              	.L13:
 223              	 .align 2
 224              	.L12:
 225 0050 00030140 	 .word 1073808128
 226 0054 00000000 	 .word IDIV.4926
 227 0058 00000000 	 .word FDIV.4927
 228 005c 000024F4 	 .word -198967296
 229 0060 00000000 	 .word SystemCoreClock
 230 0064 0048E801 	 .word 32000000
 231              	 .cfi_endproc
 232              	.LFE37:
 234              	 .section .bss.IDIV.4926,"aw",%nobits
 235              	 .align 2
 238              	IDIV.4926:
 239 0000 00000000 	 .space 4
 240              	 .section .bss.FDIV.4927,"aw",%nobits
 241              	 .align 2
 244              	FDIV.4927:
 245 0000 00000000 	 .space 4
 246              	 .text
 247              	.Letext0:
 248              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 249              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 250              	 .file 4 "C:/DAVEv4-64Bit/work/Demo_8_TestFast/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_XMC1300.c
    {standard input}:22     .no_init:00000000 SystemCoreClock
    {standard input}:19     .no_init:00000000 $d
    {standard input}:25     .text.SystemInit:00000000 $t
    {standard input}:30     .text.SystemInit:00000000 SystemInit
    {standard input}:60     .text.SystemCoreSetup:00000000 SystemCoreSetup
    {standard input}:108    .text.SystemCoreClockSetup:00000000 SystemCoreClockSetup
    {standard input}:55     .text.SystemCoreSetup:00000000 $t
    {standard input}:97     .text.SystemCoreSetup:00000028 $d
    {standard input}:103    .text.SystemCoreClockSetup:00000000 $t
    {standard input}:164    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
    {standard input}:151    .text.SystemCoreClockSetup:0000002c $d
    {standard input}:159    .text.SystemCoreClockUpdate:00000000 $t
    {standard input}:225    .text.SystemCoreClockUpdate:00000050 $d
    {standard input}:238    .bss.IDIV.4926:00000000 IDIV.4926
    {standard input}:244    .bss.FDIV.4927:00000000 FDIV.4927
    {standard input}:235    .bss.IDIV.4926:00000000 $d
    {standard input}:241    .bss.FDIV.4927:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
