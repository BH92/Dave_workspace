/**
 * @file pdm_dimmed_led_lamp.h
 * @date 2016-07-08
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * PDM_DIMMED_LED_LAMP v4.0.4 - Creates a virtual lamp with up to 9 BCCU channels,optionally controls the peak current using various internal driver methods.
 *                              The APP provides a run-time functions to change a color, dimming level and adjustable peak current reference.
 *
 * Copyright (c) 2015-2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-10-08:
 *     - Initial version.<br>
 *
 * 2016-07-08:
 *     - Fixed incorrect case for an included header.<br>
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

#ifndef PDM_DIMMED_LED_LAMP_H
#define PDM_DIMMED_LED_LAMP_H

#include <xmc_bccu.h>
#include <DAVE_Common.h>
#include "pdm_dimmed_led_lamp_conf.h"
#include "../PDM_BCCU/pdm_bccu.h"
#if (1U == PDM_DIMMED_LED_LAMP_DIMAPP_USED)
#include "../DIM_BCCU/dim_bccu.h"
#endif
#if (1U == PDM_DIMMED_LED_LAMP_PWM_CCU4_APP_USED)
#include "../PWM_CCU4/pwm_ccu4.h"
#endif
#if (1U == PDM_DIMMED_LED_LAMP_PWM_CCU8_APP_USED)
#include "../PWM_CCU8/pwm_ccu8.h"
#endif
#if (1U == PDM_DIMMED_LED_LAMP_COMP_REF_APP_USED)
#include "../COMP_REF/comp_ref.h"
#endif

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/

#if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
       (XMC_LIB_MINOR_VERSION >= 0U) && \
       (XMC_LIB_PATCH_VERSION >= 0U)))
#error "PDM_DIMMED_LED_LAMP requires XMC Peripheral Library v2.0.0 or higher"
#endif

/**********************************************************************************************************************
 * ENUMS
 **********************************************************************************************************************/

/**
 * @ingroup PDM_DIMMED_LED_LAMP_enumerations
 * @{
 */

/**
 * Defines status of PDM_DIMMED_LED_LAMP of APP
 */
typedef enum PDM_DIMMED_LED_LAMP_STATUS
{
  PDM_DIMMED_LED_LAMP_STATUS_SUCCESS = 0U, /**< Status Success if initialization is successful */
  PDM_DIMMED_LED_LAMP_STATUS_FAILURE      /**< Status Failure if initialization is failed */
} PDM_DIMMED_LED_LAMP_STATUS_t;

/**
 * Defines control methods of PDM_DIMMED_LED_LAMP of APP
 */
typedef enum PDM_DIMMED_LED_LAMP_CTRL_METHOD
{
  PDM_DIMMED_LED_LAMP_CTRL_METHOD_DIRECT_PDM = 0, /**< Direct PDM (External LED Drivers) */
  PDM_DIMMED_LED_LAMP_CTRL_METHOD_SLOW_DCDC,      /**< Slow DCDC Buck with PDM */
  PDM_DIMMED_LED_LAMP_CTRL_METHOD_SIMPLE_DCDC,    /**< Simple DCDC Buck with PDM */
  PDM_DIMMED_LED_LAMP_CTRL_METHOD_FAST_DCDC       /**< Fast DCDC Buck with PDM */
} PDM_DIMMED_LED_LAMP_CTRL_METHOD_t;

/**
 * Defines types of peak current reference
 */
typedef enum PDM_DIMMED_LED_LAMP_PEAK_CUR_REF
{
  PDM_DIMMED_LED_LAMP_PEAK_CUR_REF_EXTERNAL = 0, /**< External Reference */
  PDM_DIMMED_LED_LAMP_PEAK_CUR_REF_INTERNAL,     /**< Internal Reference with External Filter */
} PDM_DIMMED_LED_LAMP_PEAK_CUR_REF_t;

/**
 * @}
 */

/**********************************************************************************************************************
* DATA STRUCTURES
**********************************************************************************************************************/

/**
 * @ingroup PDM_DIMMED_LED_LAMP_datastructures
 * @{
 */
/**
 *  @Defines configuration data structure for PDM_DIMMED_LED_LAMP APP
 */
typedef struct PDM_DIMMED_LED_LAMP_CONFIG
{
  uint16_t led_intensity[9]; /**< Channel intensity update run time */
  uint16_t dim_level; /**< Dimming level update run time */
#if (1U == PDM_DIMMED_LED_LAMP_PEAK_CUR_CTRL_ENABLE)
  uint32_t peakcur_ctrl_offtime[9]; /**< OFF-Time update run time (in ns) */
  PDM_DIMMED_LED_LAMP_PEAK_CUR_REF_t peak_cur_ctrl_ref[9]; /**< Peak reference update run time (in mv)*/
  uint32_t peak_cur_ctrl_refval[9];
#endif
} PDM_DIMMED_LED_LAMP_CONFIG_t;

/**
 *  @Defines configuration GPIO output data structure for PDM_DIMMED_LED_LAMP APP
 */
#if (1U == PDM_DIMMED_LED_LAMP_SIMPLE_DCDC_USED)
const typedef struct PDM_DIMMED_LED_LAMP_GPIO_COMPOUT_CONFIG
{
  XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
  const uint8_t pin;                      /**< Pin number in the port*/
  const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
}PDM_DIMMED_LED_LAMP_GPIO_COMPOUT_CONFIG_t;
/**
 *  @Defines configuration GPIO input data structure for PDM_DIMMED_LED_LAMP APP
 */

const typedef struct PDM_DIMMED_LED_LAMP_GPIO_CCUIN_CONFIG
{
  XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
  const uint8_t pin;                      /**< Pin number in the port*/
  const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
}PDM_DIMMED_LED_LAMP_GPIO_CCUIN_CONFIG_t;
#endif

/**
 *  @Defines data structure for PDM_DIMMED_LED_LAMP APP
 */
typedef struct PDM_DIMMED_LED_LAMP
{
  PDM_BCCU_t *led[9]; /**< Pointer to PDM_BCCU APP handle */
  PDM_DIMMED_LED_LAMP_CTRL_METHOD_t method;
#if (1U == PDM_DIMMED_LED_LAMP_DIMAPP_USED)
  DIM_BCCU_t *dim_engine; /**< Pointer to DIM_BCCU APP handle */
#endif
#if (1U == PDM_DIMMED_LED_LAMP_PWM_CCU4_APP_USED)
  PWM_CCU4_t *peak_cur_ctrl_ccu4[9]; /**< Pointer to PWM_CCU4 APP handle */
#endif
#if (1U == PDM_DIMMED_LED_LAMP_PWM_CCU8_APP_USED)
  PWM_CCU8_t *peak_cur_ctrl_ccu8[9]; /**< Pointer to PWM_CCU8 APP handle */
#endif
#if (1U == PDM_DIMMED_LED_LAMP_COMP_REF_APP_USED)
  COMP_REF_t *peak_cur_ctrl_comp[9]; /**< Pointer to COMP_REF APP handle */
#endif
  PDM_DIMMED_LED_LAMP_CONFIG_t *config; /**< Reference to hardware channel configuration */
#if (1U == PDM_DIMMED_LED_LAMP_SIMPLE_DCDC_USED)
  const PDM_DIMMED_LED_LAMP_GPIO_COMPOUT_CONFIG_t const *gpio_config_out[9];
  const PDM_DIMMED_LED_LAMP_GPIO_CCUIN_CONFIG_t const *gpio_config_in[9];
#endif
#if (1U == PDM_DIMMED_LED_LAMP_PEAK_CUR_CTRL_ENABLE)
  uint32_t peak_cur_ctrl_freq;
#endif
  uint16_t led_channel_mask; /**< Channel mask  */
  uint16_t linearwalk_prescaler; /**< Linear-walk prescaler update run time */
  uint16_t dim_div; /**< Dimming divider update run time */
  uint16_t dim_prescaler; /**< Dimming engine prescaler update run time */
  uint8_t dim_no; /**< Dimming engine number */
  uint8_t no_of_leds_used; /**< Number of LED channels used */
  bool  dimming_used; /**< DIM_BCCU APP Used  */
} PDM_DIMMED_LED_LAMP_t;
/**
 * @}
 */

#ifdef __cplusplus
extern "C" {
#endif

/***********************************************************************************************************************
 * API Prototypes
 **********************************************************************************************************************/

/**
 * @ingroup PDM_DIMMED_LED_LAMP_apidoc
 * @{
 */

/**
 * @brief Get PDM_DIMMED_LED_LAMP APP version
 * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 *
 * \par<b>Description: </b><br>
 * The function can be used to check application software compatibility with a
 * specific version of the APP.
 *
 * \par<b>Example Usage:</b><br>
 *
 * @code
 * #include <DAVE.h>
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *   DAVE_APP_VERSION_t version;
 *
 *   // Initialize PDM_DIMMED_LED_LAMP APP:
 *   // PDM_DIMMED_LED_LAMP_Init() is called from within DAVE_Init().
 *   init_status = DAVE_Init();
 *   if(DAVE_STATUS_SUCCESS == init_status)
 *   {
 *
 *     version = PDM_DIMMED_LED_LAMP_GetAppVersion();
 *     if (version.major != 4U) {
 *       // Probably, not the right version.
 *     }
 *
 *     // More code here
 *     while(1) {
 *
 *     }
 *   }
 *   return (1);
 * }
 * @endcode<BR>
 */

DAVE_APP_VERSION_t PDM_DIMMED_LED_LAMP_GetAppVersion(void);

 /**
 * @brief BCCU resources of global, channel and dimming engine.
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return PDM_DIMMED_LED_LAMP_STATUS_t APP status. Refer @ref PDM_DIMMED_LED_LAMP_STATUS_t for details.
 *
 * \par<b>Description: </b><br>
 * Initialize the BCCU peripheral by using the services of PDM_BCCU, DIM_BCCU and GLOBAL_BCCU APPs.
 * <BR>
 *
 * \par<b>Example Usage:</b><br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       // Add application code here
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
PDM_DIMMED_LED_LAMP_STATUS_t PDM_DIMMED_LED_LAMP_Init(PDM_DIMMED_LED_LAMP_t *handle);

/**
 * @brief Enables RGB lamp or RGBWAF lamp or Street lamp run time
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return None
 *
 * \par<b>Description: </b><br>
 * Enable the mapped channels by solver during run time using the services of BCCU LLD.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configures desired channel intensity, dimming level, dimming transition time as well as linear-walk
 * time at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       // handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       //Observe the LED to see the change in color (red)
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 *
 */
__STATIC_INLINE void PDM_DIMMED_LED_LAMP_Enable(PDM_DIMMED_LED_LAMP_t *handle)
{
  XMC_ASSERT("PDM_DIMMED_LED_LAMP APP handle function pointer uninitialized", (handle != NULL));
  XMC_BCCU_ConcurrentEnableChannels(handle->led[0]->bccu_regs, handle->led_channel_mask);
#if (1U == PDM_DIMMED_LED_LAMP_DIMAPP_USED)
  if (true == handle->dimming_used)
  {
    XMC_BCCU_EnableDimmingEngine(handle->dim_engine->global_bccu_handleptr->bccuregs,handle->dim_no);
  }
#endif
}

/**
 * @brief Disables RGB lamp or RGBWAF lamp or Street lamp run time
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return None
 *
 * \par<b>Description: </b><br>
 * Disable mapped channels during run time using the services of BCCU LLD.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configures desired channel intensity, dimming level, dimming transition time as well as linear-walk
 * time at initial time.<br>
 *
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       // ... Enables Channels Mapped by Solver ...
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       // ... Add User's Application Code ...
 *       // ... Disables Channels Mapped by Solver ...
 *       PDM_DIMMED_LED_LAMP_Disable(&PDM_DIMMED_LED_LAMP_0);
 *
 *       while(1U)
 *       {
 *       }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void PDM_DIMMED_LED_LAMP_Disable(PDM_DIMMED_LED_LAMP_t *handle)
{
  XMC_ASSERT("PDM_DIMMED_LED_LAMP APP handle function pointer uninitialized", (handle != NULL));
  XMC_BCCU_ConcurrentDisableChannels(handle->led[0]->bccu_regs, handle->led_channel_mask);
#if (1U == PDM_DIMMED_LED_LAMP_DIMAPP_USED)
  if (true == handle->dimming_used)
  {
    XMC_BCCU_DisableDimmingEngine(handle->dim_engine->global_bccu_handleptr->bccuregs,
                                  handle->dim_no);
  }
#endif
}

/**
 * @brief Change desired color run time
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return None
 *
 * \par<b>Description: </b><br>
 * Changes the desired color for mapped channels during run time.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configure desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       //Observe the LED to see the change in color (red)
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
void PDM_DIMMED_LED_LAMP_SetColor(PDM_DIMMED_LED_LAMP_t *handle);

/**
 * @brief Change desired color run time
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @param linearwalk_prescaler
 * @return None
 *
 * \par<b>Description: </b><br>
 * Change the desired color for mapped channels during run time with configurable fade time.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configure desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0U;
 *       PDM_DIMMED_LED_LAMP_SetColorAdv(&PDM_DIMMED_LED_LAMP_0, 107U);
 *       //Observe the LED to see the change in color (red)
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
void PDM_DIMMED_LED_LAMP_SetColorAdv(PDM_DIMMED_LED_LAMP_t *handle, uint32_t linearwalk_prescaler);

/**
 * @brief Abort color change run time
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return None
 *
 * \par<b>Description: </b><br>
 * Stops the color change for mapped channels during run time.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configures desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       //Observe the LED to see the change in color (red)
 *       // ... Add a wait state in milli secs ...
 *       PDM_DIMMED_LED_LAMP_AbortColorChange(&PDM_DIMMED_LED_LAMP_0);
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
void PDM_DIMMED_LED_LAMP_AbortColorChange(PDM_DIMMED_LED_LAMP_t *handle);

#if (1U == PDM_DIMMED_LED_LAMP_DIMAPP_USED)
/**
 * @brief Function to change dimming level exponentially.
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return None
 *
 * \par<b>Description: </b><br>
 * Dimming level is changed exponentially by setting a new target and starting a new dimming process.
 * Dimming clock divider and dimming engine clock (dclk) prescaler value are fetched from the PDM_DIMMED_LED_LAMP handle.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configure desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       // ...Observe the LED to see the change in color (red) ...
 *       // Dim Down to 0%
 *       PDM_DIMMED_LED_LAMP_0.config->dim_level = 0U;
 *       PDM_DIMMED_LED_LAMP_SetDimLevelExponential(&PDM_DIMMED_LED_LAMP_0);;
 *       // Dim up to 25%
 *       PDM_DIMMED_LED_LAMP_0.config->dim_level = 1024U;
 *       PDM_DIMMED_LED_LAMP_SetDimLevelExponential(&PDM_DIMMED_LED_LAMP_0);
 *       while(1U)
 *       {
 *       }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
void PDM_DIMMED_LED_LAMP_SetDimLevelExponential(PDM_DIMMED_LED_LAMP_t *handle);
/**
 * @brief Function to change dimming level exponentially with configurable fade rate.
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @param dim_prescaler dimming engine clock (dclk) prescaler value
 * @return None
 *
 * \par<b>Description: </b><br>
 * Dimming level is changed exponentially by setting a new target and starting a new dimming process.
 * Dimming clock divider and dimming engine clock (dclk) prescaler value are configurable as function input parameters.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configure desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       // ...Observe the LED to see the change in color (red) ...
 *       // Dim Down to 0%
 *       PDM_DIMMED_LED_LAMP_0.config->dim_level = 0U;
 *       PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,100U,0xDB);
 *       // Dim up to 25%
 *       PDM_DIMMED_LED_LAMP_0.config->dim_level = 1024U;
 *       PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,100U,0xDB);
 *       while(1U)
 *       {
 *       }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */

void PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(PDM_DIMMED_LED_LAMP_t *handle, uint32_t dim_div ,uint32_t dim_prescaler);
/**
 * @brief Abort dimming process run time.
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return None
 *
 * \par<b>Description: </b><br>
 * Stop exponential dimming process.
 *
 * \par<b>Example Usage for RGB Lamp:</b><br>
 * Step1: Select 3 channels.<br>
 * Step2: Select "Direct PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configure desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0U;
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       // ...Observe the LED to see the change in color (red) ...
 *       // Dim Down to 0%
 *       PDM_DIMMED_LED_LAMP_0.config->dim_level = 0U;
 *       PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,100U,0xDB);
 *
 *       // some user code here
 *
 *       // the user has decided that a new target needs to be reached --> first abort current process
 *       PDM_DIMMED_LED_LAMP_AbortDimming(&PDM_DIMMED_LED_LAMP_0);
 *
 *       // new target
 *       // Set Target Level to 25%
 *       // Dim up to 25%
 *       PDM_DIMMED_LED_LAMP_0.config->dim_level = 1024U;
 *       PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,100U,0xDB);
 *       while(1U)
 *       {
 *       }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */

void PDM_DIMMED_LED_LAMP_AbortDimming(PDM_DIMMED_LED_LAMP_t *handle);
#endif

#if (1U == PDM_DIMMED_LED_LAMP_PEAK_CUR_CTRL_ENABLE)
/**
 * @brief Controls ripple in peak current
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return PDM_DIMMED_LED_LAMP_STATUS_t APP status. Refer @ref PDM_DIMMED_LED_LAMP_STATUS_t for details.
 *
 * \par<b>Description: </b><br>
 * The OFF time and Free running frequency together controls the ripple in peak current. Basically it configures a duty cycle <br>
 * of CCU4/ CCU8 slice using the following formula. Duty cycle in turn configures a compare value of CCU4/CCU8 timer. <br>
 *   Duty cycle = 100 - ((Generated_OFF_Time * 100) * Free_running_freq) / 1E9
 *
 * \par<b>Example Usage for white lamp using 1 Channel DCDC buck:</b><br>
 * Step1: Select 1 channel.<br>
 * Step2: Select "Fast DCDC Buck with PDM" as a LED Driver Control method.<br>
 * Step3: Optionally configure desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * Step4: Optionally configure peak reference source, generated OFF time and free running frequency at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       PDM_DIMMED_LED_LAMP_0.config->peakcur_ctrl_offtime[0] = 200U; //200ns
 *       PDM_DIMMED_LED_LAMP_SetOffTime(&PDM_DIMMED_LED_LAMP_0);
 *       //Observe the current at shunt resistor through oscilloscope; change the off time if ripple more
 *       PDM_DIMMED_LED_LAMP_0.config->peakcur_ctrl_offtime[0] = 300U; //change if 300ns
 *       PDM_DIMMED_LED_LAMP_SetOffTime(&PDM_DIMMED_LED_LAMP_0);
 *       //Observe the current and ripple through oscilloscope
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
PDM_DIMMED_LED_LAMP_STATUS_t PDM_DIMMED_LED_LAMP_SetOffTime(PDM_DIMMED_LED_LAMP_t *handle);
#endif

#if ((1U == PDM_DIMMED_LED_LAMP_PEAK_CUR_CTRL_ENABLE) && (1U == PDM_DIMMED_LED_LAMP_PEAK_CUR_INTERNAL_REF))
/**
 * @brief Adjusts the peack current reference
 * @param handle Pointer pointing to APP data structure. Refer @ref PDM_DIMMED_LED_LAMP_t for details.
 * @return PDM_DIMMED_LED_LAMP_STATUS_t APP status. Refer @ref PDM_DIMMED_LED_LAMP_STATUS_t for details.
 *
 * \par<b>Description: </b><br>
 * The peak reference value configures comparator reference voltage. The reference voltage derived from either<br>
 * average ON-time of BCCU channel output or duty cycle of CCU4 slice output <br>
 *
 * \par<b>Example Usage for white lamp using 1 Channel DCDC buck:</b><br>
 * Step1: Select 1 channel.<br>
 * Step2: Select "Fast DCDC Buck with PDM" as a LED Driver Control method.<br>
 * Step3: Select "Internal Reference with External Filter" as reference generation.<br>
 * Step4: Optionally configure desired channel intensity, dimming level, dimming transition time as well as linear-walk
 *        time at initial time.<br>
 * Step5: Optionally configure peak reference source, generated OFF time and free running frequency at initial time.<br>
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     PDM_DIMMED_LED_LAMP_STATUS_t init_status;
 *
 *     init_status = (PDM_DIMMED_LED_LAMP_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0);
 *     if (init_status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS)
 *     {
 *       PDM_DIMMED_LED_LAMP_Enable(&PDM_DIMMED_LED_LAMP_0);
 *       //Fill the desired channel intensity, dimming level, transition time, linear-walk time into PDM_DIMMED_LED_LAMP_CONFIG_t
 *       //handle
 *       PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4095U;
 *       PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
 *       PDM_DIMMED_LED_LAMP_0.config->peak_cur_ctrl_refval[0] = 125U; //125mv
 *       PDM_DIMMED_LED_LAMP_SetPeakReference(&PDM_DIMMED_LED_LAMP_0);
 *       //Observe the current at shunt resistor through oscilloscope; change the peak reference if current more
 *       PDM_DIMMED_LED_LAMP_0.config->peak_cur_ctrl_refval[0] = 100U; //100mv
 *       PDM_DIMMED_LED_LAMP_SetPeakReference(&PDM_DIMMED_LED_LAMP_0);
 *       //Observe the current through oscilloscope
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1);
 *  }
 *  @endcode
 */
PDM_DIMMED_LED_LAMP_STATUS_t PDM_DIMMED_LED_LAMP_SetPeakReference(PDM_DIMMED_LED_LAMP_t *handle);
#endif
/**
 * @}
 */

/* Support for C++ codebase */
#ifdef __cplusplus
}
#endif

/* Inclusion of APP extern file */
#include"PDM_DIMMED_LED_LAMP_extern.h"

#endif /* End of PDM_DIMMED_LED_LAMP_H */
