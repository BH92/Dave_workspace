   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "e_eeprom_xmc1.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_FLASH_ReadWord,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_FLASH_ReadWord:
  23              	.LFB39:
  24              	 .file 1 "C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc/xmc1_flash.h"
   1:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
   2:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @file xmc1_flash.h
   3:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @date 2015-06-20
   4:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
   5:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @cond
   6:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
   7:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
   9:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * All rights reserved.                        
  11:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *                                             
  12:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * following conditions are met:   
  14:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *                                                                              
  15:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * disclaimer.                        
  17:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
  18:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
  21:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *                                                                              
  24:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *                                                                              
  32:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
  35:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  36:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Change History
  37:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * --------------
  38:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  39:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2014-12-10:
  40:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Initial <br>
  41:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2015-02-20:
  42:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Updated for Documentation related changes<br>
  43:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 2015-06-20: 
  44:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *     - Removed version macros and declaration of GetDriverVersion API 
  45:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  46:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @endcond 
  47:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
  48:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
  49:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  50:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #ifndef XMC1_FLASH_H
  51:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC1_FLASH_H
  52:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  53:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
  54:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * HEADER FILES
  55:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
  56:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  57:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #include "xmc_common.h"
  58:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  59:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #if UC_FAMILY == XMC1
  60:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  61:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #include <XMC1000_RomFunctionTable.h>
  62:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  63:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
  64:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** * @addtogroup XMClib XMC Peripheral Library
  65:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** * @{
  66:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** */
  67:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  68:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
  69:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** * @addtogroup FLASH
  70:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** * @{
  71:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** */
  72:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  73:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
  74:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * MACROS
  75:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
  76:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  77:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_PAGES_PER_SECTOR (16U)    /**< Number of pages in a sector. A page consists of 16
  78:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BLOCKS_PER_PAGE  (16U)    /**< Number of blocks in a page. A block consists of 4 
  79:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  80:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_SECTOR (4096U)  /**< Number of bytes in a sector. (16 pages * 256 bytes
  81:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_PAGE   (256U)   /**< Number of bytes in a page. (16 blocks * 16 bytes =
  82:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BYTES_PER_BLOCK  (16U)    /**< Number of bytes in a block. (128 bits = 16 bytes)*
  83:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  84:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_SECTOR (1024U)  /**< Number of words in a sector. (16 pages * 64 words 
  85:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_PAGE   (64U)    /**< Number of words in a page. (16 blocks * 4 words = 
  86:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_WORDS_PER_BLOCK  (4U)     /**< Number of words in a block. (128 bit / 32 bit = 4 
  87:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  88:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_BLOCK_ADDR_MASK      (15U)    /*   Bitwise AND with block address is done to check th
  89:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_WriteBlocks() and XMC_FLAS
  90:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  APIs.*/
  91:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_PAGE_ADDR_MASK       (255U)   /*   Bitwise AND with page address is done to check the
  92:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_ErasePages() API.*/
  93:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define FLASH_SECTOR_ADDR_MASK     (4095U)  /*   Bitwise AND with sector address is done to check t
  94:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                  Applicable to XMC_FLASH_EraseSector API.*/
  95:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  96:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #define XMC_FLASH_BASE             (0x10001000U) /**< Starting address of flash for XMC1 family of 
  97:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
  98:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
  99:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * ENUMS
 100:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
 101:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 102:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines the status of flash, to verify the flash related API calls. Use type \a XMC_FLASH_STATU
 103:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *  The members defines the respective masked status bits of \a NVMSTATUS register.
 104:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 105:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_STATUS
 106:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
 107:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_OK                   = 0U,                          /**< Flash related operation
 108:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             completed*/
 109:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_BUSY                 = NVM_NVMSTATUS_BUSY_Msk    ,  /**< Cannot execute the flas
 110:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             another operation is in
 111:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_SLEEP_MODE           = NVM_NVMSTATUS_SLEEP_Msk   ,  /**< Flash is in sleep mode*
 112:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_VERIFY_ERROR         = NVM_NVMSTATUS_VERR_Msk    ,  /**< Flash reported a verifi
 113:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_ECC1_READ_ERROR      = NVM_NVMSTATUS_ECC1READ_Msk,  /**< Flash reports a single 
 114:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             is automatically correc
 115:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_ECC2_READ_ERROR      = NVM_NVMSTATUS_ECC2READ_Msk,  /**< Flash reported at least
 116:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTOCOL_ERROR = NVM_NVMSTATUS_WRPERR_Msk  ,  /**< Write/Verify operation 
 117:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             failed due to protocol 
 118:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****                                                                             protected sectors*/
 119:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_STATUS_t;
 120:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 121:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 122:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines NVM ready interrupt event. Use type \a XMC_FLASH_EVENT_t for this enum.
 123:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 124:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_EVENT
 125:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
 126:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_EVENT_READY = NVM_NVMCONF_INT_ON_Msk  /**< Generates the NVM ready interrupts on flash 
 127:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_EVENT_t;
 128:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 129:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 130:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *  Defines hard read levels for strict data verification. Use type \a XMC_FLASH_HARDREAD_LEVEL_t f
 131:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *  These \a hardread levels provide some margin to ensure that the data is really programmed with 
 132:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *  levels for written and erased bits.
 133:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 134:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** typedef enum XMC_FLASH_HARDREAD_LEVEL
 135:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
 136:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_NORMAL  = (uint16_t)0x0, /**< No \a hardread level verification enabled 
 137:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_WRITTEN = (uint16_t)0x1, /**< Enables strict margin compare for written 
 138:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   XMC_FLASH_HARDREAD_LEVEL_ERASED  = (uint16_t)0x2  /**< Enables strict margin compare for erased d
 139:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** } XMC_FLASH_HARDREAD_LEVEL_t;
 140:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 141:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**************************************************************************************************
 142:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * API PROTOTYPES
 143:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  **************************************************************************************************
 144:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 145:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #ifdef __cplusplus
 146:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** extern "C" {
 147:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** #endif
 148:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 149:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 150:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 151:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address   Pointer to the starting address of the flash page from where the erase starts
 152:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_pages Number of pages to be erased.<BR> Range: [1 to (flash size / 256)]
 153:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 154:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 155:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 156:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><BR>
 157:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a set of flash memory pages.<BR><BR>
 158:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erase starts from the  specified \a address.
 159:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * It erases a maximum number of \a num_pages flash pages. The maximum erasable pages are limited t
 160:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * microcontroller flash size. It sets NVMPROG register to continuous page erase mode before erase 
 161:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * it action back to normal state on completion. Call XMC_FLASH_GetStatus() after calling this API 
 162:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * operation.\n
 163:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 164:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note:</b><BR>
 165:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be in busy state during erase operation. Hence no operations on flash are allowed unt
 166:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 167:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 168:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EraseSector(), XMC_FLASH_ErasePage() \n\n\n
 169:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 170:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 171:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 172:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
 173:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 174:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages);
 175:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 176:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 177:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 178:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash block from where the write starts.
 179:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 180:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_blocks Maximum number of flash block writes needed.<BR> Range:  [1 to (flash size / 1
 181:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param verify     If \a true, hardware verification after block write is enabled else disabled.
 182:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 183:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 184:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 185:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 186:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Writes a set of data blocks into the flash.\n\n Minimum possible writable area is 16 byte block.
 187:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * register to continuous block write mode before write and resets it action back to normal state o
 188:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Call XMC_FLASH_GetStatus() API after calling this API to verify the erase operation.
 189:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 190:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Note</b><br>
 191:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash will be busy state during write is ongoing, hence no operations allowed until it completes
 192:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 193:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 194:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 195:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
 196:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 197:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verif
 198:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 199:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 200:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 201:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash block from where the verification sta
 202:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 203:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_blocks Maximum number of flash blocks writes needed.<BR> Range:  [1 to (flash size / 
 204:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 205:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 206:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 207:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 208:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Performs verification of written data blocks.\n\n After calling XMC_FLASH_WriteBlocks() API, cal
 209:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * verify the correctness of written blocks. It sets the \a NVMPROG register into continuous block 
 210:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * write and resets it action back to normal state on completion. It reads back the written data bl
 211:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * and verify the values against the internal buffer values. Calling XMC_FLASH_GetStatus() API afte
 212:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * validates the result of verification.
 213:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 214:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 215:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 216:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
 217:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 218:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_VerifyBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks);
 219:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 220:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 221:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 222:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 223:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  address    Pointer to the starting address of flash block from where the read starts.
 224:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  data       Pointer to the destination address, where the read data blocks to be stored.
 225:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param  num_blocks Number of blocks to be read.<BR> Range:  [1 to (flash size / 16)]
 226:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 227:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 228:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 229:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 230:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Reads multiple blocks from flash in one shot, starting from the \a address specified.\n\n The re
 231:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * into the locations starting from the \a data address. Calling XMC_FLASH_GetStatus() API after ca
 232:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * verifies the read operation.
 233:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 234:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 235:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 236:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
 237:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 238:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks);
 239:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 240:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 241:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 242:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 243:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the flash word address from where the read is expected
 244:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 245:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return <BR>
 246:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *   a 32bit data word stored in the specified \a address.
 247:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 248:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 249:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Reads a single word from the specified flash\a address.\n\n Calling XMC_FLASH_GetStatus() API af
 250:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * API returns the read status.
 251:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 252:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 253:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ReadBlocks() 
 254:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 255:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 256:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE uint32_t XMC_FLASH_ReadWord(const uint32_t *const address)
 257:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
  25              	 .loc 1 257 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 258:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   return *address;
  39              	 .loc 1 258 0
  40 0008 7B68     	 ldr r3,[r7,#4]
  41 000a 1B68     	 ldr r3,[r3]
 259:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** }
  42              	 .loc 1 259 0
  43 000c 181C     	 mov r0,r3
  44 000e BD46     	 mov sp,r7
  45 0010 02B0     	 add sp,sp,#8
  46              	 
  47 0012 80BD     	 pop {r7,pc}
  48              	 .cfi_endproc
  49              	.LFE39:
  51              	 .section .text.XMC_FLASH_SetHardReadLevel,"ax",%progbits
  52              	 .align 2
  53              	 .code 16
  54              	 .thumb_func
  56              	XMC_FLASH_SetHardReadLevel:
  57              	.LFB44:
 260:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 261:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 262:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 263:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address Pointer to the starting address of the page to be erased
 264:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 265:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 266:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 267:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 268:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases a single flash page associated to the specified \a address.\n\n XMC1000 Flash can be eras
 269:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls the Flash Fi
 270:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \a XMC1000_NvmErasePage(unsigned long pageAddr) to perform the erase operation. Refer XMC1000 re
 271:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * for more details on flash firmware routines (Section 25.3). Call XMC_FLASH_GetStatus() API after
 272:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * to verify the erase operation.\n
 273:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 274:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 275:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ErasePages() \n\n\n
 276:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 277:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_ErasePage(uint32_t *address);
 278:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 279:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 280:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 281:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param address    Pointer to the starting address of flash page from where the programming start
 282:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param data       Pointer to the source address where targeted data blocks are located.
 283:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 284:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 285:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 286:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 287:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Erases, programs and verifies a single flash page starting from the \a address specified.\n\n XM
 288:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * programmed with granularity of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It i
 289:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Flash Firmware routine \a XMC1000_NvmProgVerify(unsigned long pageAddr) to perform the programmi
 290:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * reference manual of for more details on flash firmware routines (Section 25.3). Call XMC_FLASH_G
 291:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * calling this API, to verify the erase operation.
 292:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 293:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 294:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 295:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
 296:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 297:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** void XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data);
 298:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 299:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 300:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 301:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param None
 302:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 303:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 304:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 305:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 306:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Enables the flash to enter into sleep mode by resetting the NVMCONF register NVM_ON bit.\n\n Fla
 307:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * sleep mode on any flash operation completion ready event trigger. To disable the sleep mode any 
 308:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * call the API XMC_FLASH_ExitSleepMode().\n
 309:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 310:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 311:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_ExitSleepMode()\n\n\n
 312:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 313:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 314:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_EnterSleepMode(void)
 315:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
 316:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (uint16_t)(~(uint32_t)NVM_NVMCONF_NVM_ON_Msk);
 317:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** }
 318:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 319:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 320:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 321:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param None
 322:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 323:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 324:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 325:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 326:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Enables the flash to exit from sleep mode by setting the NVMCONF register NVM_ON bit.\n\n Callin
 327:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EnterSleepMode() allows the flash to renter into sleep mode.\n
 328:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 329:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 330:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * XMC_FLASH_EnterSleepMode()\n\n\n
 331:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 332:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 333:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_ExitSleepMode(void)
 334:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
 335:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)NVM_NVMCONF_NVM_ON_Msk;
 336:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** }
 337:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 338:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 339:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 340:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 341:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param sector Flash sector number for which the address extraction is needed<BR> Range:  [0 to 5
 342:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 343:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return uint32_t Starting address of the sector specified<BR> Range:  [0x10001000 to 0x10032000]
 344:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 345:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 346:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Finds the starting address of the specified \a sector number.\n\n
 347:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 348:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 349:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 350:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 351:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 352:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE uint32_t XMC_FLASH_GetSectorAddress(uint32_t sector)
 353:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
 354:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   return (XMC_FLASH_BASE + (XMC_FLASH_BYTES_PER_SECTOR * sector));
 355:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** }
 356:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 357:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 358:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 359:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
 360:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param num_sectors    Number of sectors to be protected<BR> Range:  [0 to 51]
 361:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 362:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 363:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 364:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 365:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Protect the flash sectors starting from 0th sector to the specified \a num_sectors.\n\n It sets 
 366:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * SECPROT field with the value specified in \a num_sectors. Changing the protection limit can be a
 367:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * this API at runtime with a different value of \a num_sectors.\n\n
 368:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 369:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 370:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 371:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 372:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 373:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_SetSectorProtection(uint32_t num_sectors)
 374:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
 375:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (~(uint16_t)NVM_NVMCONF_SECPROT_Msk);
 376:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)((uint16_t)num_sectors << NVM_NVMCONF_SECPROT_Pos);
 377:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** }
 378:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 379:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** 
 380:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** /**
 381:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * 
 382:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @param level Hard read levels specified in \a XMC_FLASH_HARDREAD_LEVEL_t.
 383:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 384:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * @return None
 385:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 386:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Description:</b><br>
 387:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * Sets the hard read level for verification process.\n\n It insists the flash to do a strict margi
 388:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * with the written/erased data against the internal buffer. Sets the NVMCONF register HRLEV field 
 389:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * value. This hardread level is used until the end of the verification sequence and, may not be ch
 390:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 391:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * \par<b>Related APIs:</b><BR>
 392:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  * None 
 393:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  *
 394:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****  */
 395:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** __STATIC_INLINE void XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_t level)
 396:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** {
  58              	 .loc 1 396 0
  59              	 .cfi_startproc
  60 0000 80B5     	 push {r7,lr}
  61              	.LCFI3:
  62              	 .cfi_def_cfa_offset 8
  63              	 .cfi_offset 7,-8
  64              	 .cfi_offset 14,-4
  65 0002 82B0     	 sub sp,sp,#8
  66              	.LCFI4:
  67              	 .cfi_def_cfa_offset 16
  68 0004 00AF     	 add r7,sp,#0
  69              	.LCFI5:
  70              	 .cfi_def_cfa_register 7
  71 0006 021C     	 mov r2,r0
  72 0008 FB1D     	 add r3,r7,#7
  73 000a 1A70     	 strb r2,[r3]
 397:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF &= (uint16_t)(~(uint16_t)NVM_NVMCONF_HRLEV_Msk);
  74              	 .loc 1 397 0
  75 000c 0B4A     	 ldr r2,.L4
  76 000e 0B4B     	 ldr r3,.L4
  77 0010 1B89     	 ldrh r3,[r3,#8]
  78 0012 9BB2     	 uxth r3,r3
  79 0014 0621     	 mov r1,#6
  80 0016 8B43     	 bic r3,r1
  81 0018 9BB2     	 uxth r3,r3
  82 001a 1381     	 strh r3,[r2,#8]
 398:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h ****   NVM->NVMCONF |= (uint16_t)(level<< (uint16_t)NVM_NVMCONF_HRLEV_Pos);
  83              	 .loc 1 398 0
  84 001c 0749     	 ldr r1,.L4
  85 001e 074B     	 ldr r3,.L4
  86 0020 1B89     	 ldrh r3,[r3,#8]
  87 0022 9AB2     	 uxth r2,r3
  88 0024 FB1D     	 add r3,r7,#7
  89 0026 1B78     	 ldrb r3,[r3]
  90 0028 9BB2     	 uxth r3,r3
  91 002a DB18     	 add r3,r3,r3
  92 002c 9BB2     	 uxth r3,r3
  93 002e 1343     	 orr r3,r2
  94 0030 9BB2     	 uxth r3,r3
  95 0032 0B81     	 strh r3,[r1,#8]
 399:C:/DAVEv4-64Bit/work/Demo_1/Libraries/XMCLib/inc\xmc1_flash.h **** }
  96              	 .loc 1 399 0
  97 0034 BD46     	 mov sp,r7
  98 0036 02B0     	 add sp,sp,#8
  99              	 
 100 0038 80BD     	 pop {r7,pc}
 101              	.L5:
 102 003a C046     	 .align 2
 103              	.L4:
 104 003c 00000540 	 .word 1074069504
 105              	 .cfi_endproc
 106              	.LFE44:
 108              	 .section .text.E_EEPROM_XMC1_GetAppVersion,"ax",%progbits
 109              	 .align 2
 110              	 .global E_EEPROM_XMC1_GetAppVersion
 111              	 .code 16
 112              	 .thumb_func
 114              	E_EEPROM_XMC1_GetAppVersion:
 115              	.LFB46:
 116              	 .file 2 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c"
   1:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**
   2:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @file e_eeprom_xmc1.c
   3:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @date 2015-04-24
   4:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
   5:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * NOTE:
   6:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
   8:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @cond
   9:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  10:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * E_EEPROM_XMC1 v4.1.6 - Emulates a portion of flash as an EEPROM for data storage.
  11:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  12:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Copyright (c) 2015, Infineon Technologies AG
  13:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * All rights reserved.
  14:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  15:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * following conditions are met:
  17:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  18:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   disclaimer.
  20:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  21:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  24:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  27:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  35:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  38:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  39:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Change History
  40:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * --------------
  41:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  42:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2015-02-16:
  43:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - Initial version<br>
  44:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  45:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 2015-04-24:
  46:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - E_EEPROM_XMC1_ReadBlockWithCRC API renamed to E_EEPROM_XMC1_VerifyBlockCrcStatus<br>
  47:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *     - E_EEPROM_XMC1_OPERATION_STATUS_t enumeration parameter names changed and additional status
  48:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *       E_EEPROM_XMC1_OPERATION_STATUS_NO_CRC_WRITTEN added.
  49:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  50:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * @endcond
  51:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
  52:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
  53:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  54:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
  55:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * HEADER FILES
  56:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  57:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  58:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #include "e_eeprom_xmc1.h"
  59:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  60:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
  61:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * MACROS
  62:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
  63:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  64:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Define WEAK attribute */
  65:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #if !defined(__WEAK)
  66:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #if defined ( __CC_ARM )
  67:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  68:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __ICCARM__ )
  69:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __weak
  70:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __GNUC__ )
  71:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  72:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #elif defined ( __TASKING__ )
  73:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define __WEAK __attribute__ ((weak))
  74:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
  75:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
  76:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  77:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Garbage Collection procedure States */
  78:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_UNINT             (0x0U)
  79:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_START        (0x1U)
  80:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_READ_NXTBLOCK     (0x2U)
  81:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_ERASE_PREV_BANK   (0x3U)
  82:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_REQUESTED         (0x4U)
  83:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_WRITE        (0x5U)
  84:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_COPY_END          (0x6U)
  85:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_NEXT_BANK_VALID   (0x7U)
  86:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_MARK_END_ERASE1   (0x8U)
  87:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_FAIL              (0x9U)
  88:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_GC_IDLE              (0xAU)
  89:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  90:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Prepare DFLASH states states */
  91:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_FF         (0x1U)
  92:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_2F         (0x4U)
  93:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PREPFLASH_2E         (0x5U)
  94:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  95:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
  96:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Cache Update states */ 
  97:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_IDLE           (0U)
  98:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_EMPTY_BLOCK    (1U)
  99:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_NEXT_BLK       (2U)
 100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CACHE_UPDATE_DONE    (4U)
 101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Bank BLOCK values, used to store current status of the DFLASH */
 103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_ALL_ONES             ((uint32_t)0xFFFFFFFFU)
 104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_ALL_ZEROS            ((uint32_t)0x00000000U)
 105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_START_BIT            (0x80U)
 106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_BIT            (0x40U)
 107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_BIT              (0x10U)
 108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_MASK           ((uint32_t)(0x00004000U))
 109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_MASK             ((uint32_t)(0x00001000U))
 110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Internal Block status macros for implementation*/
 112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK1_DATA_SIZE     (12U)
 113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK2_DATA_SIZE     (14U)
 114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_8BIT_ALL_ONE         (0xFFU)
 115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND  ((uint32_t)(0xFFU))
 116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_CRC_SHIFT            (16U)
 117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_DUMMY_CRC            (0xA5A50000U)
 118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MASK_CRC             (0xFFFF0000U)
 119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* Bank BLOCK offsets */
 121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_NEXT_VALID_OFFSET    (0U)
 122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BEGIN_OFFSET         (E_EEPROM_XMC1_FLASH_BLOCK_SIZE)
 123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_END_OF_COPY_OFFSET   (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 2U)
 124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_END_ERASE_OFFSET     (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 3U)
 125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_DATA_BLOCK_OFFSET    (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * 16U)
 126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK1_DATA_OFFSET   (4U)
 127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK2_DATA_OFFSET   (2U)
 128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BLOCK_WRITE_IDLE     (0U)
 130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_FIRST_BLOCK_WRITE    (1U)
 131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_NEXT_BLOCK_WRITE     (2U)
 132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_LAST_BLOCK_WRITE     (3U)
 133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /* States to monitor Garbage Collection completion, if it was interrupted earlier due to reset */
 135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NORMAL1         (0x2EU) /* Bank0 = VALID        BANK 1 = ERASED */
 136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_DATA_COPY1      (0x2AU) /* Bank0 = VALID        BANK 1 = COPY ON-GOING *
 137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_COPY_DONE2      (0x0AU) /* Bank0 = COPY COMPLETED  BANK 1 = COPY ON-GOIN
 138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NEXT_VALID2     (0x02U) /* Bank0 = COPY COMPLETED  BANK 1 = VALID */
 139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_END_ERASE2      (0xF2U) /* Bank0 = ERASE ON-GOING  BANK 1 = VALID */
 140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NORMAL2         (0xE2U) /* Bank1 = VALID        BANK 0 = ERASED */
 142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_DATA_COPY2      (0xA2U) /* Bank1 = VALID        BANK 0 = COPY ON-GOING *
 143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_COPY_DONE1      (0xA0U) /* Bank1 = COPY COMPLETED  BANK 0 = COPY ON-GOIN
 144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_NEXT_VALID1     (0x20U) /* Bank1 = COPY COMPLETED  BANK 0 = VALID */
 145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_END_ERASE1      (0x2FU) /* Bank1 = ERASE ON-GOING  BANK 0 = VALID */
 146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_ALL_ERASED      (0xFFU)
 148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_2D        (0x2DU)
 150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_D2        (0xD2U)
 151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_AD        (0xADU)
 152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_DA        (0xDAU)
 153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_0D        (0x0DU)
 154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_D0        (0xD0U)
 155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_AF        (0xAFU)
 156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_FA        (0xFAU)
 157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_0F        (0x0FU)
 158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_INIT_STATE_F0        (0xF0U)
 159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_VALID_STATE          ((uint32_t)(0x20U))
 161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_COPY_COMPLETED       ((uint32_t)(0x00U))
 162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MARKER_MAX_SHIFT     ((uint32_t)(4U))
 164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK   ((uint32_t)(4U))
 165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_PAGE1_EXTRA_WORDS    ((uint8_t)(48U))
 166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MARKER_POSITION      ((uint32_t)0x80U)
 167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /** Marker states on Init GC operation */
 169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_0                 ((uint32_t)0x00U)
 170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_1                 ((uint32_t)0x01U)
 171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_WRITTEN           ((uint32_t)0x00U)
 172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_ERASED            ((uint32_t)0x0FU)
 173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_MB_DIRTY             ((uint32_t)0xDDU)
 174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BOTH_BANKS_VALID     ((uint32_t)0U) /* Both banks have clean markers */
 176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BANK0_INVALID        ((uint32_t)1U) /* Bank 0 is having dirty marker */
 177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BANK1_INVALID        ((uint32_t)2U) /* Bank 1 is having dirty marker */
 178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_BOTH_BANKS_INVALID   ((uint32_t)3U) /* Both banks are having dirty markers */
 179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_TWO_BYTES            ((uint32_t)0x02U)
 181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_TWO_BIT_POS          ((uint32_t)0x02U)
 182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_FOUR_BYTES           ((uint32_t)0x04U)
 183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EIGHT_BYTES          ((uint32_t)0x08U)
 184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EIGHT_BIT_POS        ((uint32_t)0x08U)
 185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE (0x0U)
 187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_PREP_FLASH   (0x1U)
 188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #define E_EEPROM_XMC1_EXECUTE_GC_STATE     (0x2U)
 189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * LOCAL DATA
 192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
 193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * LOCAL ROUTINES
 196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  **************************************************************************************************
 197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data);
 199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data);
 200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data);
 201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address);
 202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadSingleWord(uint32_t const address);
 203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void);
 204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitDirtyStateMachine(void);
 206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitNormalStateMachine(void);
 207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitllegalStateMachine(void);
 208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void);
 209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void);
 210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void);
 211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGc(const uint32_t  marker_dirty_state);
 212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process);
 213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset);
 214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPrepareDFlash(void);
 216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lGarbageCollection(void);
 217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void);
 218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state);
 219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block);
 220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset);
 221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void);
 222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery(uint32_t current_state ,
 223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                          uint32_t NextState,
 224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                          uint32_t page_addr_select);
 225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCache(void);
 227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEvalBlockStatus(void);
 228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void);
 229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void);
 230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr);
 231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void);
 233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number);
 234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size);
 235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address);
 236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address);
 237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcStartCopy(void);
 239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcRequested(void);
 240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void);
 241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcCopyWrite(void);
 242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state);
 243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void);
 244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t user_block_index);
 245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr);
 246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lLocalWrite(uint8_t block_number,
 247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                           uint8_t* data_buffer_ptr,
 248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                           uint32_t invalidate);
 249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateNextBlock(uint8_t block_number,
 250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                              uint8_t* const user_data_buffer_ptr ,
 251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                              uint32_t block_size);
 252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number, uint8_t* user_data_buffer_ptr, 
 253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_lReadBlockCrcStatus(uint8_t block_number,
 255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                           uint8_t* data_buffer_ptr,
 256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                           uint32_t block_size);
 257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *data_buffer_ptr, uint32_t length, uint32_
 259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetPrevData(uint8_t block_number);
 260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lSearchBlockCopy(uint8_t required_block_number,
 261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t read_addr ,
 262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t data_sec_start_addr);
 263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *  These are global functions used only for internal testing purpose.
 265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *  Application code shall not use these variables by enabling E_EEPROM_XMC1_TEST_HOOK_ENABLE macro
 266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
 268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(uint32_t const address, const uint32_t *const 
 269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(uint32_t const address, uint32_t *const data)
 272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(uint32_t const address, const uint32_t *const d
 275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK void E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(uint32_t const address)
 278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK uint32_t E_EEPROM_XMC1_TEST_HOOK_ReadSingleWord(uint32_t const address)
 281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** return (0U);
 283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** __WEAK uint32_t E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus(void)
 285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** return (0U);
 287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /**************************************************************************************************
 291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * API IMPLEMENTATION
 292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** ***************************************************************************************************
 293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : DAVE_APP_VERSION_t
 298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Reads the APP implementation version.
 300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** DAVE_APP_VERSION_t E_EEPROM_XMC1_GetAppVersion(void)
 302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 117              	 .loc 2 302 0
 118              	 .cfi_startproc
 119 0000 80B5     	 push {r7,lr}
 120              	.LCFI6:
 121              	 .cfi_def_cfa_offset 8
 122              	 .cfi_offset 7,-8
 123              	 .cfi_offset 14,-4
 124 0002 82B0     	 sub sp,sp,#8
 125              	.LCFI7:
 126              	 .cfi_def_cfa_offset 16
 127 0004 00AF     	 add r7,sp,#0
 128              	.LCFI8:
 129              	 .cfi_def_cfa_register 7
 303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   DAVE_APP_VERSION_t version;
 304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.major = E_EEPROM_XMC1_MAJOR_VERSION;
 130              	 .loc 2 305 0
 131 0006 3B1C     	 mov r3,r7
 132 0008 0422     	 mov r2,#4
 133 000a 1A70     	 strb r2,[r3]
 306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.minor = E_EEPROM_XMC1_MINOR_VERSION;
 134              	 .loc 2 306 0
 135 000c 3B1C     	 mov r3,r7
 136 000e 0122     	 mov r2,#1
 137 0010 5A70     	 strb r2,[r3,#1]
 307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   version.patch = E_EEPROM_XMC1_PATCH_VERSION;
 138              	 .loc 2 307 0
 139 0012 3B1C     	 mov r3,r7
 140 0014 0622     	 mov r2,#6
 141 0016 9A70     	 strb r2,[r3,#2]
 308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return version;
 142              	 .loc 2 309 0
 143 0018 3B1D     	 add r3,r7,#4
 144 001a 3A1C     	 mov r2,r7
 145 001c 1188     	 ldrh r1,[r2]
 146 001e 1980     	 strh r1,[r3]
 147 0020 9278     	 ldrb r2,[r2,#2]
 148 0022 9A70     	 strb r2,[r3,#2]
 149 0024 3A1D     	 add r2,r7,#4
 150 0026 0023     	 mov r3,#0
 151 0028 1178     	 ldrb r1,[r2]
 152 002a FF20     	 mov r0,#255
 153 002c 0140     	 and r1,r0
 154 002e FF20     	 mov r0,#255
 155 0030 8343     	 bic r3,r0
 156 0032 0B43     	 orr r3,r1
 157 0034 5178     	 ldrb r1,[r2,#1]
 158 0036 FF20     	 mov r0,#255
 159 0038 0140     	 and r1,r0
 160 003a 0902     	 lsl r1,r1,#8
 161 003c 0648     	 ldr r0,.L8
 162 003e 0340     	 and r3,r0
 163 0040 0B43     	 orr r3,r1
 164 0042 9278     	 ldrb r2,[r2,#2]
 165 0044 FF21     	 mov r1,#255
 166 0046 0A40     	 and r2,r1
 167 0048 1204     	 lsl r2,r2,#16
 168 004a 0449     	 ldr r1,.L8+4
 169 004c 0B40     	 and r3,r1
 170 004e 1343     	 orr r3,r2
 310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 171              	 .loc 2 310 0
 172 0050 181C     	 mov r0,r3
 173 0052 BD46     	 mov sp,r7
 174 0054 02B0     	 add sp,sp,#8
 175              	 
 176 0056 80BD     	 pop {r7,pc}
 177              	.L9:
 178              	 .align 2
 179              	.L8:
 180 0058 FF00FFFF 	 .word -65281
 181 005c FFFF00FF 	 .word -16711681
 182              	 .cfi_endproc
 183              	.LFE46:
 185              	 .section .text.E_EEPROM_XMC1_Init,"ax",%progbits
 186              	 .align 2
 187              	 .global E_EEPROM_XMC1_Init
 188              	 .code 16
 189              	 .thumb_func
 191              	E_EEPROM_XMC1_Init:
 192              	.LFB47:
 311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : handle_ptr
 314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Driver Module Initialization function. This service shall initialize the Flash
 318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   module using the values provided by configuration set.
 319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_Init(E_EEPROM_XMC1_t *const handle_ptr)
 321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 193              	 .loc 2 321 0
 194              	 .cfi_startproc
 195 0000 80B5     	 push {r7,lr}
 196              	.LCFI9:
 197              	 .cfi_def_cfa_offset 8
 198              	 .cfi_offset 7,-8
 199              	 .cfi_offset 14,-4
 200 0002 86B0     	 sub sp,sp,#24
 201              	.LCFI10:
 202              	 .cfi_def_cfa_offset 32
 203 0004 00AF     	 add r7,sp,#0
 204              	.LCFI11:
 205              	 .cfi_def_cfa_register 7
 206 0006 7860     	 str r0,[r7,#4]
 322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
 323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_state;
 324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (handle_ptr != NULL))
 326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the E_EEPROM_XMC1_Init API is called once*/
 328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
 207              	 .loc 2 328 0
 208 0008 7B68     	 ldr r3,[r7,#4]
 209 000a 1B7A     	 ldrb r3,[r3,#8]
 210 000c 002B     	 cmp r3,#0
 211 000e 00D1     	 bne .LCB174
 212 0010 84E0     	 b .L11
 213              	.LCB174:
 329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     handle_ptr->state = (E_EEPROM_XMC1_STATUS_t)CRC_SW_Init(handle_ptr->crc_handle_ptr);
 332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
 333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
 335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     #endif
 338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Initialize the cache variables for the User defined Block configuration list */
 340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       indx = 0U;
 214              	 .loc 2 340 0
 215 0012 0023     	 mov r3,#0
 216 0014 7B61     	 str r3,[r7,#20]
 217              	.L12:
 218              	.LBB2:
 341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       do
 342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_CACHE_t * block_ptr;
 344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr = &(handle_ptr->data_ptr->block_info[indx]);
 219              	 .loc 2 344 0 discriminator 1
 220 0016 7B68     	 ldr r3,[r7,#4]
 221 0018 5A68     	 ldr r2,[r3,#4]
 222 001a 7B69     	 ldr r3,[r7,#20]
 223 001c DB00     	 lsl r3,r3,#3
 224 001e D318     	 add r3,r2,r3
 225 0020 3B61     	 str r3,[r7,#16]
 345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->address = 0U;
 226              	 .loc 2 346 0 discriminator 1
 227 0022 3B69     	 ldr r3,[r7,#16]
 228 0024 0022     	 mov r2,#0
 229 0026 1A60     	 str r2,[r3]
 347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.consistent = 0U;
 230              	 .loc 2 347 0 discriminator 1
 231 0028 3B69     	 ldr r3,[r7,#16]
 232 002a 1A79     	 ldrb r2,[r3,#4]
 233 002c 0221     	 mov r1,#2
 234 002e 8A43     	 bic r2,r1
 235 0030 1A71     	 strb r2,[r3,#4]
 348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.valid = 1U;
 236              	 .loc 2 348 0 discriminator 1
 237 0032 3B69     	 ldr r3,[r7,#16]
 238 0034 1A79     	 ldrb r2,[r3,#4]
 239 0036 0121     	 mov r1,#1
 240 0038 0A43     	 orr r2,r1
 241 003a 1A71     	 strb r2,[r3,#4]
 349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.copied = 0U;
 242              	 .loc 2 349 0 discriminator 1
 243 003c 3B69     	 ldr r3,[r7,#16]
 244 003e 1A79     	 ldrb r2,[r3,#4]
 245 0040 0421     	 mov r1,#4
 246 0042 8A43     	 bic r2,r1
 247 0044 1A71     	 strb r2,[r3,#4]
 350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_ptr->status.crc = 0U;
 248              	 .loc 2 350 0 discriminator 1
 249 0046 3B69     	 ldr r3,[r7,#16]
 250 0048 1A79     	 ldrb r2,[r3,#4]
 251 004a 0821     	 mov r1,#8
 252 004c 8A43     	 bic r2,r1
 253 004e 1A71     	 strb r2,[r3,#4]
 351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         indx++;
 254              	 .loc 2 351 0 discriminator 1
 255 0050 7B69     	 ldr r3,[r7,#20]
 256 0052 0133     	 add r3,r3,#1
 257 0054 7B61     	 str r3,[r7,#20]
 258              	.LBE2:
 352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       } while (indx < handle_ptr->block_count);
 259              	 .loc 2 352 0 discriminator 1
 260 0056 7B68     	 ldr r3,[r7,#4]
 261 0058 5B7A     	 ldrb r3,[r3,#9]
 262 005a 1A1E     	 sub r2,r3,#0
 263 005c 7B69     	 ldr r3,[r7,#20]
 264 005e 9A42     	 cmp r2,r3
 265 0060 D9D8     	 bhi .L12
 353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /********* Initialize all global variables *****************/
 355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->updated_cache_index = 0U;
 266              	 .loc 2 355 0
 267 0062 7B68     	 ldr r3,[r7,#4]
 268 0064 5A68     	 ldr r2,[r3,#4]
 269 0066 C223     	 mov r3,#194
 270 0068 5B00     	 lsl r3,r3,#1
 271 006a 0021     	 mov r1,#0
 272 006c D150     	 str r1,[r2,r3]
 356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->cache_state = E_EEPROM_XMC1_CACHE_IDLE;
 273              	 .loc 2 356 0
 274 006e 7B68     	 ldr r3,[r7,#4]
 275 0070 5A68     	 ldr r2,[r3,#4]
 276 0072 C023     	 mov r3,#192
 277 0074 5B00     	 lsl r3,r3,#1
 278 0076 0021     	 mov r1,#0
 279 0078 D150     	 str r1,[r2,r3]
 357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_state = E_EEPROM_XMC1_GC_UNINT;
 280              	 .loc 2 357 0
 281 007a 7B68     	 ldr r3,[r7,#4]
 282 007c 5A68     	 ldr r2,[r3,#4]
 283 007e BA23     	 mov r3,#186
 284 0080 5B00     	 lsl r3,r3,#1
 285 0082 0021     	 mov r1,#0
 286 0084 D150     	 str r1,[r2,r3]
 358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->init_gc_state = 0U;
 287              	 .loc 2 358 0
 288 0086 7B68     	 ldr r3,[r7,#4]
 289 0088 5A68     	 ldr r2,[r3,#4]
 290 008a BC23     	 mov r3,#188
 291 008c 5B00     	 lsl r3,r3,#1
 292 008e 0021     	 mov r1,#0
 293 0090 D150     	 str r1,[r2,r3]
 359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_log_block_count = 0U;
 294              	 .loc 2 359 0
 295 0092 7B68     	 ldr r3,[r7,#4]
 296 0094 5A68     	 ldr r2,[r3,#4]
 297 0096 BE23     	 mov r3,#190
 298 0098 5B00     	 lsl r3,r3,#1
 299 009a 0021     	 mov r1,#0
 300 009c D150     	 str r1,[r2,r3]
 360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->crc_buffer = 0U;
 301              	 .loc 2 360 0
 302 009e 7B68     	 ldr r3,[r7,#4]
 303 00a0 5B68     	 ldr r3,[r3,#4]
 304 00a2 0022     	 mov r2,#0
 305 00a4 DA66     	 str r2,[r3,#108]
 361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->written_block_counter = (uint32_t)0;
 306              	 .loc 2 362 0
 307 00a6 7B68     	 ldr r3,[r7,#4]
 308 00a8 5B68     	 ldr r3,[r3,#4]
 309 00aa 0022     	 mov r2,#0
 310 00ac 9A65     	 str r2,[r3,#88]
 363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->curr_bank_src_addr = 0U;
 311              	 .loc 2 363 0
 312 00ae 7B68     	 ldr r3,[r7,#4]
 313 00b0 5B68     	 ldr r3,[r3,#4]
 314 00b2 0022     	 mov r2,#0
 315 00b4 1A65     	 str r2,[r3,#80]
 364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_src_addr = 0U;
 316              	 .loc 2 364 0
 317 00b6 7B68     	 ldr r3,[r7,#4]
 318 00b8 5B68     	 ldr r3,[r3,#4]
 319 00ba 0022     	 mov r2,#0
 320 00bc 1A64     	 str r2,[r3,#64]
 365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_dest_addr = 0U;
 321              	 .loc 2 365 0
 322 00be 7B68     	 ldr r3,[r7,#4]
 323 00c0 5B68     	 ldr r3,[r3,#4]
 324 00c2 0022     	 mov r2,#0
 325 00c4 DA63     	 str r2,[r3,#60]
 366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->next_free_block_addr = 0U;
 326              	 .loc 2 366 0
 327 00c6 7B68     	 ldr r3,[r7,#4]
 328 00c8 5B68     	 ldr r3,[r3,#4]
 329 00ca 0022     	 mov r2,#0
 330 00cc DA64     	 str r2,[r3,#76]
 367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->gc_block_counter = (uint32_t)0;
 331              	 .loc 2 367 0
 332 00ce 7B68     	 ldr r3,[r7,#4]
 333 00d0 5B68     	 ldr r3,[r3,#4]
 334 00d2 0022     	 mov r2,#0
 335 00d4 5A65     	 str r2,[r3,#84]
 368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->user_write_bytes_count = 0U;
 336              	 .loc 2 368 0
 337 00d6 7B68     	 ldr r3,[r7,#4]
 338 00d8 5A68     	 ldr r2,[r3,#4]
 339 00da B823     	 mov r3,#184
 340 00dc 5B00     	 lsl r3,r3,#1
 341 00de 0021     	 mov r1,#0
 342 00e0 D150     	 str r1,[r2,r3]
 369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       handle_ptr->data_ptr->current_bank = 0U;
 343              	 .loc 2 370 0
 344 00e2 7B68     	 ldr r3,[r7,#4]
 345 00e4 5B68     	 ldr r3,[r3,#4]
 346 00e6 0022     	 mov r2,#0
 347 00e8 9A63     	 str r2,[r3,#56]
 371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_WRITTEN);
 348              	 .loc 2 372 0
 349 00ea 0120     	 mov r0,#1
 350 00ec FFF7FEFF 	 bl XMC_FLASH_SetHardReadLevel
 373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Read the marker blocks from flash and decide the MARKER STATES */
 375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       marker_state = E_EEPROM_XMC1_lReadMarkerBlocks();
 351              	 .loc 2 375 0
 352 00f0 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadMarkerBlocks
 353 00f4 031C     	 mov r3,r0
 354 00f6 FB60     	 str r3,[r7,#12]
 376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*
 379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * Call INIT-GC state machine function to take decision on current MARKER STATE available.
 380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * Progress to GC state machine or PrepareDFLASH State machine after completing  the Cache up
 381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        */
 382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGc(marker_state);
 355              	 .loc 2 382 0
 356 00f8 FB68     	 ldr r3,[r7,#12]
 357 00fa 181C     	 mov r0,r3
 358 00fc FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGc
 383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If Initialization is done without any errors, set the INIT API called state into Initializ
 385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (handle_ptr->data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 359              	 .loc 2 385 0
 360 0100 7B68     	 ldr r3,[r7,#4]
 361 0102 5A68     	 ldr r2,[r3,#4]
 362 0104 BA23     	 mov r3,#186
 363 0106 5B00     	 lsl r3,r3,#1
 364 0108 D358     	 ldr r3,[r2,r3]
 365 010a 0A2B     	 cmp r3,#10
 366 010c 03D1     	 bne .L13
 386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         handle_ptr->state = E_EEPROM_XMC1_STATUS_SUCCESS;
 367              	 .loc 2 387 0
 368 010e 7B68     	 ldr r3,[r7,#4]
 369 0110 0022     	 mov r2,#0
 370 0112 1A72     	 strb r2,[r3,#8]
 371 0114 02E0     	 b .L11
 372              	.L13:
 388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
 373              	 .loc 2 391 0
 374 0116 7B68     	 ldr r3,[r7,#4]
 375 0118 0122     	 mov r2,#1
 376 011a 1A72     	 strb r2,[r3,#8]
 377              	.L11:
 392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (handle_ptr->state);
 378              	 .loc 2 395 0
 379 011c 7B68     	 ldr r3,[r7,#4]
 380 011e 1B7A     	 ldrb r3,[r3,#8]
 396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 381              	 .loc 2 396 0
 382 0120 181C     	 mov r0,r3
 383 0122 BD46     	 mov sp,r7
 384 0124 06B0     	 add sp,sp,#24
 385              	 
 386 0126 80BD     	 pop {r7,pc}
 387              	 .cfi_endproc
 388              	.LFE47:
 390              	 .section .text.E_EEPROM_XMC1_Write,"ax",%progbits
 391              	 .align 2
 392              	 .global E_EEPROM_XMC1_Write
 393              	 .code 16
 394              	 .thumb_func
 396              	E_EEPROM_XMC1_Write:
 397              	.LFB48:
 397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block (Block-ID)
 400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Pointer to user data buffer
 401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : E_EEPROM_XMC1_OPERATION_STATUS_t
 403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function shall write user data block into flash.
 405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Write(uint8_t block_number, uint8_t *data_buffer_ptr
 407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 398              	 .loc 2 407 0
 399              	 .cfi_startproc
 400 0000 80B5     	 push {r7,lr}
 401              	.LCFI12:
 402              	 .cfi_def_cfa_offset 8
 403              	 .cfi_offset 7,-8
 404              	 .cfi_offset 14,-4
 405 0002 84B0     	 sub sp,sp,#16
 406              	.LCFI13:
 407              	 .cfi_def_cfa_offset 24
 408 0004 00AF     	 add r7,sp,#0
 409              	.LCFI14:
 410              	 .cfi_def_cfa_register 7
 411 0006 021C     	 mov r2,r0
 412 0008 3960     	 str r1,[r7]
 413 000a FB1D     	 add r3,r7,#7
 414 000c 1A70     	 strb r2,[r3]
 408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 415              	 .loc 2 411 0
 416 000e 104B     	 ldr r3,.L18
 417 0010 5B68     	 ldr r3,[r3,#4]
 418 0012 BB60     	 str r3,[r7,#8]
 412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(block_numbe
 414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                         E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND))
 415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (data_buffer_ptr != NULL))
 416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 419              	 .loc 2 417 0
 420 0014 0F23     	 mov r3,#15
 421 0016 FB18     	 add r3,r7,r3
 422 0018 0522     	 mov r2,#5
 423 001a 1A70     	 strb r2,[r3]
 418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute only if there is no previous pending request and the GC process is in IDLE state */
 420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 424              	 .loc 2 420 0
 425 001c BA68     	 ldr r2,[r7,#8]
 426 001e BA23     	 mov r3,#186
 427 0020 5B00     	 lsl r3,r3,#1
 428 0022 D358     	 ldr r3,[r2,r3]
 429 0024 0A2B     	 cmp r3,#10
 430 0026 0BD1     	 bne .L16
 421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to write the specified block of data into flash */
 423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite(block_number, data_buffer_
 431              	 .loc 2 423 0
 432 0028 FB1D     	 add r3,r7,#7
 433 002a 1A78     	 ldrb r2,[r3]
 434 002c 3B68     	 ldr r3,[r7]
 435 002e 101C     	 mov r0,r2
 436 0030 191C     	 mov r1,r3
 437 0032 0022     	 mov r2,#0
 438 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lLocalWrite
 439 0038 021C     	 mov r2,r0
 440 003a 0F23     	 mov r3,#15
 441 003c FB18     	 add r3,r7,r3
 442 003e 1A70     	 strb r2,[r3]
 443              	.L16:
 424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 444              	 .loc 2 426 0
 445 0040 0F23     	 mov r3,#15
 446 0042 FB18     	 add r3,r7,r3
 447 0044 1B78     	 ldrb r3,[r3]
 427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 448              	 .loc 2 427 0
 449 0046 181C     	 mov r0,r3
 450 0048 BD46     	 mov sp,r7
 451 004a 04B0     	 add sp,sp,#16
 452              	 
 453 004c 80BD     	 pop {r7,pc}
 454              	.L19:
 455 004e C046     	 .align 2
 456              	.L18:
 457 0050 00000000 	 .word E_EEPROM_XMC1_0
 458              	 .cfi_endproc
 459              	.LFE48:
 461              	 .section .text.E_EEPROM_XMC1_InvalidateBlock,"ax",%progbits
 462              	 .align 2
 463              	 .global E_EEPROM_XMC1_InvalidateBlock
 464              	 .code 16
 465              	 .thumb_func
 467              	E_EEPROM_XMC1_InvalidateBlock:
 468              	.LFB49:
 428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : block_number  - Number of logical block (Block-ID)
 431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
 432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * 
 434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : This function shall invalidate user data block.
 435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
 436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_InvalidateBlock(uint8_t block_number)
 437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 469              	 .loc 2 437 0
 470              	 .cfi_startproc
 471 0000 80B5     	 push {r7,lr}
 472              	.LCFI15:
 473              	 .cfi_def_cfa_offset 8
 474              	 .cfi_offset 7,-8
 475              	 .cfi_offset 14,-4
 476 0002 86B0     	 sub sp,sp,#24
 477              	.LCFI16:
 478              	 .cfi_def_cfa_offset 32
 479 0004 00AF     	 add r7,sp,#0
 480              	.LCFI17:
 481              	 .cfi_def_cfa_register 7
 482 0006 021C     	 mov r2,r0
 483 0008 FB1D     	 add r3,r7,#7
 484 000a 1A70     	 strb r2,[r3]
 438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* data_buffer_ptr;
 439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 485              	 .loc 2 442 0
 486 000c 114B     	 ldr r3,.L23
 487 000e 5B68     	 ldr r3,[r3,#4]
 488 0010 3B61     	 str r3,[r7,#16]
 443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_InvalidateBlock:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(b
 444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                   E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND
 445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_buffer_ptr =  data_ptr->read_write_buffer;
 489              	 .loc 2 445 0
 490 0012 3B69     	 ldr r3,[r7,#16]
 491 0014 5C33     	 add r3,r3,#92
 492 0016 FB60     	 str r3,[r7,#12]
 446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 493              	 .loc 2 446 0
 494 0018 1723     	 mov r3,#23
 495 001a FB18     	 add r3,r7,r3
 496 001c 0522     	 mov r2,#5
 497 001e 1A70     	 strb r2,[r3]
 447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute only if there is no previous pending request and the GC process is in IDLE state */
 449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 498              	 .loc 2 449 0
 499 0020 3A69     	 ldr r2,[r7,#16]
 500 0022 BA23     	 mov r3,#186
 501 0024 5B00     	 lsl r3,r3,#1
 502 0026 D358     	 ldr r3,[r2,r3]
 503 0028 0A2B     	 cmp r3,#10
 504 002a 0BD1     	 bne .L21
 450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to write the specified block of data into flash */
 452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite( block_number, data_buffer
 505              	 .loc 2 452 0
 506 002c FB1D     	 add r3,r7,#7
 507 002e 1A78     	 ldrb r2,[r3]
 508 0030 FB68     	 ldr r3,[r7,#12]
 509 0032 101C     	 mov r0,r2
 510 0034 191C     	 mov r1,r3
 511 0036 0122     	 mov r2,#1
 512 0038 FFF7FEFF 	 bl E_EEPROM_XMC1_lLocalWrite
 513 003c 021C     	 mov r2,r0
 514 003e 1723     	 mov r3,#23
 515 0040 FB18     	 add r3,r7,r3
 516 0042 1A70     	 strb r2,[r3]
 517              	.L21:
 453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 518              	 .loc 2 455 0
 519 0044 1723     	 mov r3,#23
 520 0046 FB18     	 add r3,r7,r3
 521 0048 1B78     	 ldrb r3,[r3]
 456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 522              	 .loc 2 456 0
 523 004a 181C     	 mov r0,r3
 524 004c BD46     	 mov sp,r7
 525 004e 06B0     	 add sp,sp,#24
 526              	 
 527 0050 80BD     	 pop {r7,pc}
 528              	.L24:
 529 0052 C046     	 .align 2
 530              	.L23:
 531 0054 00000000 	 .word E_EEPROM_XMC1_0
 532              	 .cfi_endproc
 533              	.LFE49:
 535              	 .section .text.E_EEPROM_XMC1_Read,"ax",%progbits
 536              	 .align 2
 537              	 .global E_EEPROM_XMC1_Read
 538              	 .code 16
 539              	 .thumb_func
 541              	E_EEPROM_XMC1_Read:
 542              	.LFB50:
 457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block
 460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset      - Start Location for Read start
 461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length      - End Location for read completion
 463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                                                                   
 466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall read user data blocks from flash.
 467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Read(uint8_t block_number,
 469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint32_t offset,
 470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint8_t *data_buffer_ptr,
 471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     uint32_t length)
 472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 543              	 .loc 2 472 0
 544              	 .cfi_startproc
 545 0000 80B5     	 push {r7,lr}
 546              	.LCFI18:
 547              	 .cfi_def_cfa_offset 8
 548              	 .cfi_offset 7,-8
 549              	 .cfi_offset 14,-4
 550 0002 88B0     	 sub sp,sp,#32
 551              	.LCFI19:
 552              	 .cfi_def_cfa_offset 40
 553 0004 00AF     	 add r7,sp,#0
 554              	.LCFI20:
 555              	 .cfi_def_cfa_register 7
 556 0006 B960     	 str r1,[r7,#8]
 557 0008 7A60     	 str r2,[r7,#4]
 558 000a 3B60     	 str r3,[r7]
 559 000c 0F23     	 mov r3,#15
 560 000e FB18     	 add r3,r7,r3
 561 0010 021C     	 add r2,r0,#0
 562 0012 1A70     	 strb r2,[r3]
 473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 563              	 .loc 2 478 0
 564 0014 314B     	 ldr r3,.L30
 565 0016 5B68     	 ldr r3,[r3,#4]
 566 0018 BB61     	 str r3,[r7,#24]
 479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 567              	 .loc 2 479 0
 568 001a 0F23     	 mov r3,#15
 569 001c FB18     	 add r3,r7,r3
 570 001e 1B78     	 ldrb r3,[r3]
 571 0020 181C     	 mov r0,r3
 572 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 573 0026 031C     	 mov r3,r0
 574 0028 7B61     	 str r3,[r7,#20]
 480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 575              	 .loc 2 480 0
 576 002a 2C4B     	 ldr r3,.L30
 577 002c 1A68     	 ldr r2,[r3]
 578 002e 7B69     	 ldr r3,[r7,#20]
 579 0030 DB00     	 lsl r3,r3,#3
 580 0032 D318     	 add r3,r2,r3
 581 0034 5B68     	 ldr r3,[r3,#4]
 582 0036 3B61     	 str r3,[r7,#16]
 481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Read:Wrong Block Number", (user_block_index  != E_EEPROM_XMC1_LOG_BLOCK
 483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_Read:Invalid Buffer Pointer", (data_buffer_ptr != NULL))
 484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 583              	 .loc 2 485 0
 584 0038 1F23     	 mov r3,#31
 585 003a FB18     	 add r3,r7,r3
 586 003c 0522     	 mov r2,#5
 587 003e 1A70     	 strb r2,[r3]
 486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
 588              	 .loc 2 488 0
 589 0040 BA69     	 ldr r2,[r7,#24]
 590 0042 BA23     	 mov r3,#186
 591 0044 5B00     	 lsl r3,r3,#1
 592 0046 D358     	 ldr r3,[r2,r3]
 593 0048 0A2B     	 cmp r3,#10
 594 004a 40D1     	 bne .L26
 595              	 .loc 2 488 0 is_stmt 0 discriminator 1
 596 004c BA68     	 ldr r2,[r7,#8]
 597 004e 3B68     	 ldr r3,[r7]
 598 0050 D218     	 add r2,r2,r3
 599 0052 3B69     	 ldr r3,[r7,#16]
 600 0054 9A42     	 cmp r2,r3
 601 0056 3AD8     	 bhi .L26
 489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
 602              	 .loc 2 490 0 is_stmt 1
 603 0058 BA69     	 ldr r2,[r7,#24]
 604 005a 7B69     	 ldr r3,[r7,#20]
 605 005c DB00     	 lsl r3,r3,#3
 606 005e D318     	 add r3,r2,r3
 607 0060 1B79     	 ldrb r3,[r3,#4]
 608 0062 DB07     	 lsl r3,r3,#31
 609 0064 DB0F     	 lsr r3,r3,#31
 610 0066 DBB2     	 uxtb r3,r3
 611 0068 002B     	 cmp r3,#0
 612 006a 04D1     	 bne .L27
 491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
 613              	 .loc 2 492 0
 614 006c 1F23     	 mov r3,#31
 615 006e FB18     	 add r3,r7,r3
 616 0070 0322     	 mov r2,#3
 617 0072 1A70     	 strb r2,[r3]
 618 0074 2BE0     	 b .L26
 619              	.L27:
 493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Inval
 620              	 .loc 2 494 0
 621 0076 BA69     	 ldr r2,[r7,#24]
 622 0078 7B69     	 ldr r3,[r7,#20]
 623 007a DB00     	 lsl r3,r3,#3
 624 007c D318     	 add r3,r2,r3
 625 007e 1B79     	 ldrb r3,[r3,#4]
 626 0080 9B07     	 lsl r3,r3,#30
 627 0082 DB0F     	 lsr r3,r3,#31
 628 0084 DBB2     	 uxtb r3,r3
 629 0086 002B     	 cmp r3,#0
 630 0088 04D1     	 bne .L28
 495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 631              	 .loc 2 496 0
 632 008a 1F23     	 mov r3,#31
 633 008c FB18     	 add r3,r7,r3
 634 008e 0222     	 mov r2,#2
 635 0090 1A70     	 strb r2,[r3]
 636 0092 1CE0     	 b .L26
 637              	.L28:
 497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address = data_ptr->block_info[user_block_index].address;
 638              	 .loc 2 500 0
 639 0094 BB69     	 ldr r3,[r7,#24]
 640 0096 7A69     	 ldr r2,[r7,#20]
 641 0098 D200     	 lsl r2,r2,#3
 642 009a D158     	 ldr r1,[r2,r3]
 643 009c BA69     	 ldr r2,[r7,#24]
 644 009e C623     	 mov r3,#198
 645 00a0 5B00     	 lsl r3,r3,#1
 646 00a2 D150     	 str r1,[r2,r3]
 501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr ,
 647              	 .loc 2 501 0
 648 00a4 7968     	 ldr r1,[r7,#4]
 649 00a6 3A68     	 ldr r2,[r7]
 650 00a8 BB68     	 ldr r3,[r7,#8]
 651 00aa 081C     	 mov r0,r1
 652 00ac 111C     	 mov r1,r2
 653 00ae 1A1C     	 mov r2,r3
 654 00b0 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadBlockContents
 655 00b4 021C     	 mov r2,r0
 656 00b6 1F23     	 mov r3,#31
 657 00b8 FB18     	 add r3,r7,r3
 658 00ba 1A70     	 strb r2,[r3]
 502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((uint32_t)status != 0U)
 659              	 .loc 2 503 0
 660 00bc 1F23     	 mov r3,#31
 661 00be FB18     	 add r3,r7,r3
 662 00c0 1B78     	 ldrb r3,[r3]
 663 00c2 002B     	 cmp r3,#0
 664 00c4 03D0     	 beq .L26
 504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****          status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 665              	 .loc 2 505 0
 666 00c6 1F23     	 mov r3,#31
 667 00c8 FB18     	 add r3,r7,r3
 668 00ca 0122     	 mov r2,#1
 669 00cc 1A70     	 strb r2,[r3]
 670              	.L26:
 506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 671              	 .loc 2 509 0
 672 00ce 1F23     	 mov r3,#31
 673 00d0 FB18     	 add r3,r7,r3
 674 00d2 1B78     	 ldrb r3,[r3]
 510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 675              	 .loc 2 510 0
 676 00d4 181C     	 mov r0,r3
 677 00d6 BD46     	 mov sp,r7
 678 00d8 08B0     	 add sp,sp,#32
 679              	 
 680 00da 80BD     	 pop {r7,pc}
 681              	.L31:
 682              	 .align 2
 683              	.L30:
 684 00dc 00000000 	 .word E_EEPROM_XMC1_0
 685              	 .cfi_endproc
 686              	.LFE50:
 688              	 .section .text.E_EEPROM_XMC1_StartGarbageCollection,"ax",%progbits
 689              	 .align 2
 690              	 .global E_EEPROM_XMC1_StartGarbageCollection
 691              	 .code 16
 692              	 .thumb_func
 694              	E_EEPROM_XMC1_StartGarbageCollection:
 695              	.LFB51:
 511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * 
 517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall start Garbage collection.
 518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_StartGarbageCollection(void)
 520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 696              	 .loc 2 520 0
 697              	 .cfi_startproc
 698 0000 80B5     	 push {r7,lr}
 699              	.LCFI21:
 700              	 .cfi_def_cfa_offset 8
 701              	 .cfi_offset 7,-8
 702              	 .cfi_offset 14,-4
 703 0002 82B0     	 sub sp,sp,#8
 704              	.LCFI22:
 705              	 .cfi_def_cfa_offset 16
 706 0004 00AF     	 add r7,sp,#0
 707              	.LCFI23:
 708              	 .cfi_def_cfa_register 7
 521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 709              	 .loc 2 524 0
 710 0006 134B     	 ldr r3,.L36
 711 0008 5B68     	 ldr r3,[r3,#4]
 712 000a 3B60     	 str r3,[r7]
 525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 713              	 .loc 2 526 0
 714 000c FB1D     	 add r3,r7,#7
 715 000e 0522     	 mov r2,#5
 716 0010 1A70     	 strb r2,[r3]
 527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the E_EEPROM_XMC1_Init API is called */
 529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 717              	 .loc 2 529 0
 718 0012 3A68     	 ldr r2,[r7]
 719 0014 BA23     	 mov r3,#186
 720 0016 5B00     	 lsl r3,r3,#1
 721 0018 D358     	 ldr r3,[r2,r3]
 722 001a 0A2B     	 cmp r3,#10
 723 001c 13D1     	 bne .L33
 530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
 724              	 .loc 2 531 0
 725 001e 3A68     	 ldr r2,[r7]
 726 0020 BA23     	 mov r3,#186
 727 0022 5B00     	 lsl r3,r3,#1
 728 0024 0421     	 mov r1,#4
 729 0026 D150     	 str r1,[r2,r3]
 532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Call local function to start garbage collection process from scratch */
 534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 730              	 .loc 2 534 0
 731 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->gc_state == E_EEPROM_XMC1_GC_FAIL)
 732              	 .loc 2 536 0
 733 002c 3A68     	 ldr r2,[r7]
 734 002e BA23     	 mov r3,#186
 735 0030 5B00     	 lsl r3,r3,#1
 736 0032 D358     	 ldr r3,[r2,r3]
 737 0034 092B     	 cmp r3,#9
 738 0036 03D1     	 bne .L34
 537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 739              	 .loc 2 538 0
 740 0038 FB1D     	 add r3,r7,#7
 741 003a 0122     	 mov r2,#1
 742 003c 1A70     	 strb r2,[r3]
 743 003e 02E0     	 b .L33
 744              	.L34:
 539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS;
 745              	 .loc 2 542 0
 746 0040 FB1D     	 add r3,r7,#7
 747 0042 0022     	 mov r2,#0
 748 0044 1A70     	 strb r2,[r3]
 749              	.L33:
 543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 750              	 .loc 2 546 0
 751 0046 FB1D     	 add r3,r7,#7
 752 0048 1B78     	 ldrb r3,[r3]
 547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 753              	 .loc 2 547 0
 754 004a 181C     	 mov r0,r3
 755 004c BD46     	 mov sp,r7
 756 004e 02B0     	 add sp,sp,#8
 757              	 
 758 0050 80BD     	 pop {r7,pc}
 759              	.L37:
 760 0052 C046     	 .align 2
 761              	.L36:
 762 0054 00000000 	 .word E_EEPROM_XMC1_0
 763              	 .cfi_endproc
 764              	.LFE51:
 766              	 .section .text.E_EEPROM_XMC1_GetStatus,"ax",%progbits
 767              	 .align 2
 768              	 .global E_EEPROM_XMC1_GetStatus
 769              	 .code 16
 770              	 .thumb_func
 772              	E_EEPROM_XMC1_GetStatus:
 773              	.LFB52:
 548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall return the status of the APP
 555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_GetStatus(void)
 557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 774              	 .loc 2 557 0
 775              	 .cfi_startproc
 776 0000 80B5     	 push {r7,lr}
 777              	.LCFI24:
 778              	 .cfi_def_cfa_offset 8
 779              	 .cfi_offset 7,-8
 780              	 .cfi_offset 14,-4
 781 0002 82B0     	 sub sp,sp,#8
 782              	.LCFI25:
 783              	 .cfi_def_cfa_offset 16
 784 0004 00AF     	 add r7,sp,#0
 785              	.LCFI26:
 786              	 .cfi_def_cfa_register 7
 558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_STATUS_t status;
 559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 787              	 .loc 2 560 0
 788 0006 104B     	 ldr r3,.L43
 789 0008 5B68     	 ldr r3,[r3,#4]
 790 000a 3B60     	 str r3,[r7]
 561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If the GC/InitGC has failed */
 563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
 791              	 .loc 2 563 0
 792 000c 3A68     	 ldr r2,[r7]
 793 000e BA23     	 mov r3,#186
 794 0010 5B00     	 lsl r3,r3,#1
 795 0012 D358     	 ldr r3,[r2,r3]
 796 0014 0A2B     	 cmp r3,#10
 797 0016 03D1     	 bne .L39
 564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_IDLE;
 798              	 .loc 2 565 0
 799 0018 FB1D     	 add r3,r7,#7
 800 001a 0322     	 mov r2,#3
 801 001c 1A70     	 strb r2,[r3]
 802 001e 0CE0     	 b .L40
 803              	.L39:
 566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (data_ptr->gc_state == E_EEPROM_XMC1_GC_FAIL)
 804              	 .loc 2 567 0
 805 0020 3A68     	 ldr r2,[r7]
 806 0022 BA23     	 mov r3,#186
 807 0024 5B00     	 lsl r3,r3,#1
 808 0026 D358     	 ldr r3,[r2,r3]
 809 0028 092B     	 cmp r3,#9
 810 002a 03D1     	 bne .L41
 568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_FAILURE;
 811              	 .loc 2 569 0
 812 002c FB1D     	 add r3,r7,#7
 813 002e 0122     	 mov r2,#1
 814 0030 1A70     	 strb r2,[r3]
 815 0032 02E0     	 b .L40
 816              	.L41:
 570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = E_EEPROM_XMC1_STATUS_BUSY;
 817              	 .loc 2 573 0
 818 0034 FB1D     	 add r3,r7,#7
 819 0036 0422     	 mov r2,#4
 820 0038 1A70     	 strb r2,[r3]
 821              	.L40:
 574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 822              	 .loc 2 576 0
 823 003a FB1D     	 add r3,r7,#7
 824 003c 1B78     	 ldrb r3,[r3]
 577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 825              	 .loc 2 577 0
 826 003e 181C     	 mov r0,r3
 827 0040 BD46     	 mov sp,r7
 828 0042 02B0     	 add sp,sp,#8
 829              	 
 830 0044 80BD     	 pop {r7,pc}
 831              	.L44:
 832 0046 C046     	 .align 2
 833              	.L43:
 834 0048 00000000 	 .word E_EEPROM_XMC1_0
 835              	 .cfi_endproc
 836              	.LFE52:
 838              	 .section .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded,"ax",%progbits
 839              	 .align 2
 840              	 .global E_EEPROM_XMC1_IsGarbageCollectionNeeded
 841              	 .code 16
 842              	 .thumb_func
 844              	E_EEPROM_XMC1_IsGarbageCollectionNeeded:
 845              	.LFB53:
 578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*This function returns the whether the block can be fit inside the bank or it needs a garbage coll
 580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** bool E_EEPROM_XMC1_IsGarbageCollectionNeeded(uint8_t block_number)
 581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 846              	 .loc 2 581 0
 847              	 .cfi_startproc
 848 0000 80B5     	 push {r7,lr}
 849              	.LCFI27:
 850              	 .cfi_def_cfa_offset 8
 851              	 .cfi_offset 7,-8
 852              	 .cfi_offset 14,-4
 853 0002 88B0     	 sub sp,sp,#32
 854              	.LCFI28:
 855              	 .cfi_def_cfa_offset 40
 856 0004 00AF     	 add r7,sp,#0
 857              	.LCFI29:
 858              	 .cfi_def_cfa_register 7
 859 0006 021C     	 mov r2,r0
 860 0008 FB1D     	 add r3,r7,#7
 861 000a 1A70     	 strb r2,[r3]
 582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   bool status;
 583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_blocks;
 584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_blocks;
 586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
 587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = false;
 862              	 .loc 2 588 0
 863 000c 1F23     	 mov r3,#31
 864 000e FB18     	 add r3,r7,r3
 865 0010 0022     	 mov r2,#0
 866 0012 1A70     	 strb r2,[r3]
 589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 867              	 .loc 2 589 0
 868 0014 FB1D     	 add r3,r7,#7
 869 0016 1B78     	 ldrb r3,[r3]
 870 0018 181C     	 mov r0,r3
 871 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 872 001e 031C     	 mov r3,r0
 873 0020 BB61     	 str r3,[r7,#24]
 590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 874              	 .loc 2 590 0
 875 0022 104B     	 ldr r3,.L48
 876 0024 1A68     	 ldr r2,[r3]
 877 0026 BB69     	 ldr r3,[r7,#24]
 878 0028 DB00     	 lsl r3,r3,#3
 879 002a D318     	 add r3,r2,r3
 880 002c 7B61     	 str r3,[r7,#20]
 591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_IsGarbageCollectionNeeded:Wrong Block Number", (user_block_index  !=
 593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                             E_EEPROM_XMC1_LOG_BLOCK
 594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 881              	 .loc 2 595 0
 882 002e 7B69     	 ldr r3,[r7,#20]
 883 0030 5B68     	 ldr r3,[r3,#4]
 884 0032 181C     	 mov r0,r3
 885 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 886 0038 031C     	 mov r3,r0
 887 003a 3B61     	 str r3,[r7,#16]
 596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 888              	 .loc 2 596 0
 889 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 890 0040 031C     	 mov r3,r0
 891 0042 FB60     	 str r3,[r7,#12]
 597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (remaining_blocks < flash_blocks)
 892              	 .loc 2 598 0
 893 0044 FA68     	 ldr r2,[r7,#12]
 894 0046 3B69     	 ldr r3,[r7,#16]
 895 0048 9A42     	 cmp r2,r3
 896 004a 03D2     	 bcs .L46
 599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      status = true;
 897              	 .loc 2 600 0
 898 004c 1F23     	 mov r3,#31
 899 004e FB18     	 add r3,r7,r3
 900 0050 0122     	 mov r2,#1
 901 0052 1A70     	 strb r2,[r3]
 902              	.L46:
 601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 903              	 .loc 2 603 0
 904 0054 1F23     	 mov r3,#31
 905 0056 FB18     	 add r3,r7,r3
 906 0058 1B78     	 ldrb r3,[r3]
 604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 907              	 .loc 2 604 0
 908 005a 181C     	 mov r0,r3
 909 005c BD46     	 mov sp,r7
 910 005e 08B0     	 add sp,sp,#32
 911              	 
 912 0060 80BD     	 pop {r7,pc}
 913              	.L49:
 914 0062 C046     	 .align 2
 915              	.L48:
 916 0064 00000000 	 .word E_EEPROM_XMC1_0
 917              	 .cfi_endproc
 918              	.LFE53:
 920              	 .section .text.E_EEPROM_XMC1_GetPreviousData,"ax",%progbits
 921              	 .align 2
 922              	 .global E_EEPROM_XMC1_GetPreviousData
 923              	 .code 16
 924              	 .thumb_func
 926              	E_EEPROM_XMC1_GetPreviousData:
 927              	.LFB54:
 605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
 607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - Number of logical block
 610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_t
 613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : It reads the complete data block from the flash and compare the CRC from heade
 615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   with the computed CRC using CRC_SW APP. Read from arbitrary location and limit
 616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   possible under this API.
 617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_VerifyBlockCrcStatus(uint8_t block_number, uint8_t *
 619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = (uint32_t)E_EEPROM_XMC1_lGetUsrBlockIndex( block_number);
 627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_ReadBlockWithCRC:Wrong Block Number", (user_block_index  !=
 630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                    E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUN
 631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_ReadBlockWithCRC:Invalid Buffer Pointer", (data_buffer_ptr != NULL))
 632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state) == E_EEPROM_XMC1_GC_IDLE)
 637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
 639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
 641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Inval
 643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address = data_ptr->block_info[user_block_index].address ;
 649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Call local function to read the specified block of data from flash */
 650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr,
 651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                                   block_size , 0U);
 652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS)
 654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Call local function to cross check the CRC, No ECC check done again for the CRC read fun
 656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockCrcStatus(block_number, 
 657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                                      block_size);
 658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
 668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  :
 671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   block_number   - Number of logical block
 672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset       - Start Location for Read start
 673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Pointer to user data buffer
 674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length       - End Location for read completion
 675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_STATUS_t
 677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall read the just previous copy of the particular block when r
 679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   function is used commonly when the latest copy gets corrupted.
 680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_GetPreviousData(uint8_t block_number,
 682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint32_t offset,
 683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint8_t *data_buffer_ptr,
 684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                uint32_t length)
 685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 928              	 .loc 2 685 0
 929              	 .cfi_startproc
 930 0000 80B5     	 push {r7,lr}
 931              	.LCFI30:
 932              	 .cfi_def_cfa_offset 8
 933              	 .cfi_offset 7,-8
 934              	 .cfi_offset 14,-4
 935 0002 8AB0     	 sub sp,sp,#40
 936              	.LCFI31:
 937              	 .cfi_def_cfa_offset 48
 938 0004 00AF     	 add r7,sp,#0
 939              	.LCFI32:
 940              	 .cfi_def_cfa_register 7
 941 0006 B960     	 str r1,[r7,#8]
 942 0008 7A60     	 str r2,[r7,#4]
 943 000a 3B60     	 str r3,[r7]
 944 000c 0F23     	 mov r3,#15
 945 000e FB18     	 add r3,r7,r3
 946 0010 021C     	 add r2,r0,#0
 947 0012 1A70     	 strb r2,[r3]
 686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_start_addr;
 688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
 689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
 691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 948              	 .loc 2 692 0
 949 0014 2A4B     	 ldr r3,.L57
 950 0016 5B68     	 ldr r3,[r3,#4]
 951 0018 3B62     	 str r3,[r7,#32]
 693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 952              	 .loc 2 693 0
 953 001a 0F23     	 mov r3,#15
 954 001c FB18     	 add r3,r7,r3
 955 001e 1B78     	 ldrb r3,[r3]
 956 0020 181C     	 mov r0,r3
 957 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 958 0026 031C     	 mov r3,r0
 959 0028 FB61     	 str r3,[r7,#28]
 694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
 960              	 .loc 2 694 0
 961 002a 254B     	 ldr r3,.L57
 962 002c 1A68     	 ldr r2,[r3]
 963 002e FB69     	 ldr r3,[r7,#28]
 964 0030 DB00     	 lsl r3,r3,#3
 965 0032 D318     	 add r3,r2,r3
 966 0034 5B68     	 ldr r3,[r3,#4]
 967 0036 BB61     	 str r3,[r7,#24]
 695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_GetPreviousData:Wrong Block Number", (user_block_index  !=
 697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                   E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND
 698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_ASSERT("E_EEPROM_XMC1_GetPreviousData:Invalid Buffer Pointer", (data_buffer_ptr != NULL))
 699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*Execute only if GC process is in IDLE state */
 701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
 968              	 .loc 2 701 0
 969 0038 3A6A     	 ldr r2,[r7,#32]
 970 003a BA23     	 mov r3,#186
 971 003c 5B00     	 lsl r3,r3,#1
 972 003e D358     	 ldr r3,[r2,r3]
 973 0040 0A2B     	 cmp r3,#10
 974 0042 31D1     	 bne .L51
 975              	 .loc 2 701 0 is_stmt 0 discriminator 1
 976 0044 BA68     	 ldr r2,[r7,#8]
 977 0046 3B68     	 ldr r3,[r7]
 978 0048 D218     	 add r2,r2,r3
 979 004a BB69     	 ldr r3,[r7,#24]
 980 004c 9A42     	 cmp r2,r3
 981 004e 2BD8     	 bhi .L51
 702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_start_addr = E_EEPROM_XMC1_lGetPrevData(block_number);
 982              	 .loc 2 704 0 is_stmt 1
 983 0050 0F23     	 mov r3,#15
 984 0052 FB18     	 add r3,r7,r3
 985 0054 1B78     	 ldrb r3,[r3]
 986 0056 181C     	 mov r0,r3
 987 0058 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetPrevData
 988 005c 031C     	 mov r3,r0
 989 005e 7B61     	 str r3,[r7,#20]
 705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (read_start_addr != 0U )
 990              	 .loc 2 706 0
 991 0060 7B69     	 ldr r3,[r7,#20]
 992 0062 002B     	 cmp r3,#0
 993 0064 1AD0     	 beq .L52
 707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->read_start_address =  read_start_addr;
 994              	 .loc 2 708 0
 995 0066 3A6A     	 ldr r2,[r7,#32]
 996 0068 C623     	 mov r3,#198
 997 006a 5B00     	 lsl r3,r3,#1
 998 006c 7969     	 ldr r1,[r7,#20]
 999 006e D150     	 str r1,[r2,r3]
 709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
 710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Call local function to read the specified block of data from flash */
 711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr, 
 1000              	 .loc 2 711 0
 1001 0070 7968     	 ldr r1,[r7,#4]
 1002 0072 3A68     	 ldr r2,[r7]
 1003 0074 BB68     	 ldr r3,[r7,#8]
 1004 0076 081C     	 mov r0,r1
 1005 0078 111C     	 mov r1,r2
 1006 007a 1A1C     	 mov r2,r3
 1007 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadBlockContents
 1008 0080 021C     	 mov r2,r0
 1009 0082 2723     	 mov r3,#39
 1010 0084 FB18     	 add r3,r7,r3
 1011 0086 1A70     	 strb r2,[r3]
 712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((uint32_t)status != 0U)
 1012              	 .loc 2 712 0
 1013 0088 2723     	 mov r3,#39
 1014 008a FB18     	 add r3,r7,r3
 1015 008c 1B78     	 ldrb r3,[r3]
 1016 008e 002B     	 cmp r3,#0
 1017 0090 09D0     	 beq .L54
 713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****          status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 1018              	 .loc 2 714 0
 1019 0092 2723     	 mov r3,#39
 1020 0094 FB18     	 add r3,r7,r3
 1021 0096 0122     	 mov r2,#1
 1022 0098 1A70     	 strb r2,[r3]
 706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1023              	 .loc 2 706 0
 1024 009a 09E0     	 b .L55
 1025              	.L52:
 715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
 1026              	 .loc 2 719 0
 1027 009c 2723     	 mov r3,#39
 1028 009e FB18     	 add r3,r7,r3
 1029 00a0 0222     	 mov r2,#2
 1030 00a2 1A70     	 strb r2,[r3]
 706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1031              	 .loc 2 706 0
 1032 00a4 04E0     	 b .L55
 1033              	.L54:
 706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 1034              	 .loc 2 706 0 is_stmt 0 discriminator 1
 1035 00a6 03E0     	 b .L55
 1036              	.L51:
 720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 1037              	 .loc 2 724 0 is_stmt 1
 1038 00a8 2723     	 mov r3,#39
 1039 00aa FB18     	 add r3,r7,r3
 1040 00ac 0522     	 mov r2,#5
 1041 00ae 1A70     	 strb r2,[r3]
 1042              	.L55:
 725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
 1043              	 .loc 2 727 0
 1044 00b0 2723     	 mov r3,#39
 1045 00b2 FB18     	 add r3,r7,r3
 1046 00b4 1B78     	 ldrb r3,[r3]
 728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1047              	 .loc 2 728 0
 1048 00b6 181C     	 mov r0,r3
 1049 00b8 BD46     	 mov sp,r7
 1050 00ba 0AB0     	 add sp,sp,#40
 1051              	 
 1052 00bc 80BD     	 pop {r7,pc}
 1053              	.L58:
 1054 00be C046     	 .align 2
 1055              	.L57:
 1056 00c0 00000000 	 .word E_EEPROM_XMC1_0
 1057              	 .cfi_endproc
 1058              	.LFE54:
 1060              	 .section .text.E_EEPROM_XMC1_lGetPrevData,"ax",%progbits
 1061              	 .align 2
 1062              	 .code 16
 1063              	 .thumb_func
 1065              	E_EEPROM_XMC1_lGetPrevData:
 1066              	.LFB55:
 729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  ***********************************  Private Function Definitions  *******************************
 733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User block number / ID
 738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
 740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will traverse through the bank and find the previous copy of the
 742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetPrevData(uint8_t block_number)
 744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1067              	 .loc 2 744 0
 1068              	 .cfi_startproc
 1069 0000 80B5     	 push {r7,lr}
 1070              	.LCFI33:
 1071              	 .cfi_def_cfa_offset 8
 1072              	 .cfi_offset 7,-8
 1073              	 .cfi_offset 14,-4
 1074 0002 88B0     	 sub sp,sp,#32
 1075              	.LCFI34:
 1076              	 .cfi_def_cfa_offset 40
 1077 0004 00AF     	 add r7,sp,#0
 1078              	.LCFI35:
 1079              	 .cfi_def_cfa_register 7
 1080 0006 021C     	 mov r2,r0
 1081 0008 FB1D     	 add r3,r7,#7
 1082 000a 1A70     	 strb r2,[r3]
 745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
 746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_index;
 747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_sec_start_addr;
 748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t expected_block_count;
 749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_read_start_addr;
 750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1083              	 .loc 2 752 0
 1084 000c 364B     	 ldr r3,.L69
 1085 000e 5B68     	 ldr r3,[r3,#4]
 1086 0010 7B61     	 str r3,[r7,#20]
 753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_sec_start_addr = data_ptr->next_free_block_addr;
 1087              	 .loc 2 753 0
 1088 0012 7B69     	 ldr r3,[r7,#20]
 1089 0014 DB6C     	 ldr r3,[r3,#76]
 1090 0016 FB61     	 str r3,[r7,#28]
 754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Get the block details */
 756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_index = (uint32_t)E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 1091              	 .loc 2 756 0
 1092 0018 FB1D     	 add r3,r7,#7
 1093 001a 1B78     	 ldrb r3,[r3]
 1094 001c 181C     	 mov r0,r3
 1095 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 1096 0022 031C     	 mov r3,r0
 1097 0024 3B61     	 str r3,[r7,#16]
 757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_index].size;
 1098              	 .loc 2 757 0
 1099 0026 304B     	 ldr r3,.L69
 1100 0028 1A68     	 ldr r2,[r3]
 1101 002a 3B69     	 ldr r3,[r7,#16]
 1102 002c DB00     	 lsl r3,r3,#3
 1103 002e D318     	 add r3,r2,r3
 1104 0030 5B68     	 ldr r3,[r3,#4]
 1105 0032 FB60     	 str r3,[r7,#12]
 758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   expected_block_count = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_size);
 1106              	 .loc 2 758 0
 1107 0034 FB68     	 ldr r3,[r7,#12]
 1108 0036 181C     	 mov r0,r3
 1109 0038 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 1110 003c 031C     	 mov r3,r0
 1111 003e BB60     	 str r3,[r7,#8]
 759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Find the data bank starting address from current Bank to decide when to stop reading of blocks
 761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 1112              	 .loc 2 761 0
 1113 0040 7B69     	 ldr r3,[r7,#20]
 1114 0042 9B6B     	 ldr r3,[r3,#56]
 1115 0044 002B     	 cmp r3,#0
 1116 0046 02D1     	 bne .L60
 762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_sec_start_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 1117              	 .loc 2 763 0
 1118 0048 284B     	 ldr r3,.L69+4
 1119 004a FB61     	 str r3,[r7,#28]
 1120 004c 01E0     	 b .L61
 1121              	.L60:
 764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_sec_start_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 1122              	 .loc 2 767 0
 1123 004e 284B     	 ldr r3,.L69+8
 1124 0050 FB61     	 str r3,[r7,#28]
 1125              	.L61:
 768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Load */
 771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_read_start_addr = data_ptr->next_free_block_addr;
 1126              	 .loc 2 771 0
 1127 0052 7B69     	 ldr r3,[r7,#20]
 1128 0054 DB6C     	 ldr r3,[r3,#76]
 1129 0056 BB61     	 str r3,[r7,#24]
 772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_read_start_addr = E_EEPROM_XMC1_lSearchBlockCopy(block_number, block_read_start_addr, data_
 1130              	 .loc 2 772 0
 1131 0058 FB1D     	 add r3,r7,#7
 1132 005a 1978     	 ldrb r1,[r3]
 1133 005c BA69     	 ldr r2,[r7,#24]
 1134 005e FB69     	 ldr r3,[r7,#28]
 1135 0060 081C     	 mov r0,r1
 1136 0062 111C     	 mov r1,r2
 1137 0064 1A1C     	 mov r2,r3
 1138 0066 FFF7FEFF 	 bl E_EEPROM_XMC1_lSearchBlockCopy
 1139 006a 031C     	 mov r3,r0
 1140 006c BB61     	 str r3,[r7,#24]
 773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ((block_read_start_addr == 0U) || (block_read_start_addr <= data_sec_start_addr))
 1141              	 .loc 2 774 0
 1142 006e BB69     	 ldr r3,[r7,#24]
 1143 0070 002B     	 cmp r3,#0
 1144 0072 03D0     	 beq .L62
 1145              	 .loc 2 774 0 is_stmt 0 discriminator 1
 1146 0074 BA69     	 ldr r2,[r7,#24]
 1147 0076 FB69     	 ldr r3,[r7,#28]
 1148 0078 9A42     	 cmp r2,r3
 1149 007a 02D8     	 bhi .L63
 1150              	.L62:
 775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_read_start_addr = 0U;  /* No block exist*/
 1151              	 .loc 2 776 0 is_stmt 1
 1152 007c 0023     	 mov r3,#0
 1153 007e BB61     	 str r3,[r7,#24]
 1154 0080 2DE0     	 b .L64
 1155              	.L63:
 777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_read_start_addr = E_EEPROM_XMC1_lSearchBlockCopy(block_number,
 1156              	 .loc 2 780 0
 1157 0082 BB69     	 ldr r3,[r7,#24]
 1158 0084 103B     	 sub r3,r3,#16
 1159 0086 1A1C     	 mov r2,r3
 1160 0088 FB1D     	 add r3,r7,#7
 1161 008a 1978     	 ldrb r1,[r3]
 1162 008c FB69     	 ldr r3,[r7,#28]
 1163 008e 081C     	 mov r0,r1
 1164 0090 111C     	 mov r1,r2
 1165 0092 1A1C     	 mov r2,r3
 1166 0094 FFF7FEFF 	 bl E_EEPROM_XMC1_lSearchBlockCopy
 1167 0098 031C     	 mov r3,r0
 1168 009a BB61     	 str r3,[r7,#24]
 781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                            (block_read_start_addr - E_EEPROM_XMC1_F
 782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                            data_sec_start_addr);
 783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ((block_read_start_addr == 0U) || (block_read_start_addr < data_sec_start_addr) )
 1169              	 .loc 2 783 0
 1170 009c BB69     	 ldr r3,[r7,#24]
 1171 009e 002B     	 cmp r3,#0
 1172 00a0 03D0     	 beq .L65
 1173              	 .loc 2 783 0 is_stmt 0 discriminator 1
 1174 00a2 BA69     	 ldr r2,[r7,#24]
 1175 00a4 FB69     	 ldr r3,[r7,#28]
 1176 00a6 9A42     	 cmp r2,r3
 1177 00a8 02D2     	 bcs .L66
 1178              	.L65:
 784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_read_start_addr = 0U;  /* No Previous copy of block exist*/
 1179              	 .loc 2 785 0 is_stmt 1
 1180 00aa 0023     	 mov r3,#0
 1181 00ac BB61     	 str r3,[r7,#24]
 1182 00ae 16E0     	 b .L64
 1183              	.L66:
 786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((data_ptr->block_result.status.consistent != 1U) ||
 1184              	 .loc 2 789 0
 1185 00b0 7B69     	 ldr r3,[r7,#20]
 1186 00b2 3422     	 mov r2,#52
 1187 00b4 9B5C     	 ldrb r3,[r3,r2]
 1188 00b6 0222     	 mov r2,#2
 1189 00b8 1340     	 and r3,r2
 1190 00ba DBB2     	 uxtb r3,r3
 1191 00bc 002B     	 cmp r3,#0
 1192 00be 0CD0     	 beq .L67
 790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         (data_ptr->block_result.block_count != expected_block_count) ||
 1193              	 .loc 2 790 0 discriminator 1
 1194 00c0 7B69     	 ldr r3,[r7,#20]
 1195 00c2 1A6B     	 ldr r2,[r3,#48]
 789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         (data_ptr->block_result.block_count != expected_block_count) ||
 1196              	 .loc 2 789 0 discriminator 1
 1197 00c4 BB68     	 ldr r3,[r7,#8]
 1198 00c6 9A42     	 cmp r2,r3
 1199 00c8 07D1     	 bne .L67
 791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         (data_ptr->block_result.status.valid != 1U))
 1200              	 .loc 2 791 0
 1201 00ca 7B69     	 ldr r3,[r7,#20]
 1202 00cc 3422     	 mov r2,#52
 1203 00ce 9B5C     	 ldrb r3,[r3,r2]
 1204 00d0 0122     	 mov r2,#1
 1205 00d2 1340     	 and r3,r2
 1206 00d4 DBB2     	 uxtb r3,r3
 790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         (data_ptr->block_result.block_count != expected_block_count) ||
 1207              	 .loc 2 790 0
 1208 00d6 002B     	 cmp r3,#0
 1209 00d8 01D1     	 bne .L64
 1210              	.L67:
 792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_read_start_addr = 0U;  /* No Previous copy of block exist*/
 1211              	 .loc 2 793 0
 1212 00da 0023     	 mov r3,#0
 1213 00dc BB61     	 str r3,[r7,#24]
 1214              	.L64:
 794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (block_read_start_addr);
 1215              	 .loc 2 797 0
 1216 00de BB69     	 ldr r3,[r7,#24]
 798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1217              	 .loc 2 798 0
 1218 00e0 181C     	 mov r0,r3
 1219 00e2 BD46     	 mov sp,r7
 1220 00e4 08B0     	 add sp,sp,#32
 1221              	 
 1222 00e6 80BD     	 pop {r7,pc}
 1223              	.L70:
 1224              	 .align 2
 1225              	.L69:
 1226 00e8 00000000 	 .word E_EEPROM_XMC1_0
 1227 00ec 000B0110 	 .word 268503808
 1228 00f0 000E0110 	 .word 268504576
 1229              	 .cfi_endproc
 1230              	.LFE55:
 1232              	 .section .text.E_EEPROM_XMC1_lSearchBlockCopy,"ax",%progbits
 1233              	 .align 2
 1234              	 .code 16
 1235              	 .thumb_func
 1237              	E_EEPROM_XMC1_lSearchBlockCopy:
 1238              	.LFB56:
 799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User block number / ID
 802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
 804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function reads the block header bytes and compare the block number to fin
 806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lSearchBlockCopy(uint8_t required_block_number,
 808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t read_addr,
 809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                uint32_t data_sec_start_addr)
 810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1239              	 .loc 2 810 0
 1240              	 .cfi_startproc
 1241 0000 80B5     	 push {r7,lr}
 1242              	.LCFI36:
 1243              	 .cfi_def_cfa_offset 8
 1244              	 .cfi_offset 7,-8
 1245              	 .cfi_offset 14,-4
 1246 0002 8CB0     	 sub sp,sp,#48
 1247              	.LCFI37:
 1248              	 .cfi_def_cfa_offset 56
 1249 0004 00AF     	 add r7,sp,#0
 1250              	.LCFI38:
 1251              	 .cfi_def_cfa_register 7
 1252 0006 B960     	 str r1,[r7,#8]
 1253 0008 7A60     	 str r2,[r7,#4]
 1254 000a 0F23     	 mov r3,#15
 1255 000c FB18     	 add r3,r7,r3
 1256 000e 021C     	 add r2,r0,#0
 1257 0010 1A70     	 strb r2,[r3]
 811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t header_word;
 812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
 813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t block_status;
 814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t read_block_number;
 815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_start_address;
 816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t is_all_blocks_clean;
 817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_HEADER_t* block_header_ptr;
 819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1258              	 .loc 2 820 0
 1259 0012 3A4B     	 ldr r3,.L82
 1260 0014 5B68     	 ldr r3,[r3,#4]
 1261 0016 3B62     	 str r3,[r7,#32]
 821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = 0U;
 1262              	 .loc 2 822 0
 1263 0018 0023     	 mov r3,#0
 1264 001a FB62     	 str r3,[r7,#44]
 823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_start_address = 0U;
 1265              	 .loc 2 823 0
 1266 001c 0023     	 mov r3,#0
 1267 001e BB62     	 str r3,[r7,#40]
 824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   is_all_blocks_clean = 1U;
 1268              	 .loc 2 824 0
 1269 0020 0123     	 mov r3,#1
 1270 0022 7B62     	 str r3,[r7,#36]
 825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.status.consistent = 0U;
 1271              	 .loc 2 825 0
 1272 0024 3B6A     	 ldr r3,[r7,#32]
 1273 0026 3422     	 mov r2,#52
 1274 0028 995C     	 ldrb r1,[r3,r2]
 1275 002a 0220     	 mov r0,#2
 1276 002c 8143     	 bic r1,r0
 1277 002e 9954     	 strb r1,[r3,r2]
 826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.status.valid = 0U;
 1278              	 .loc 2 826 0
 1279 0030 3B6A     	 ldr r3,[r7,#32]
 1280 0032 3422     	 mov r2,#52
 1281 0034 995C     	 ldrb r1,[r3,r2]
 1282 0036 0120     	 mov r0,#1
 1283 0038 8143     	 bic r1,r0
 1284 003a 9954     	 strb r1,[r3,r2]
 827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_result.block_count = 0U;
 1285              	 .loc 2 827 0
 1286 003c 3B6A     	 ldr r3,[r7,#32]
 1287 003e 0022     	 mov r2,#0
 1288 0040 1A63     	 str r2,[r3,#48]
 828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Loop until the first block address and check if any block number is matching the required bloc
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ((data_sec_start_addr <= read_addr) && (block_start_address == 0U))
 1289              	 .loc 2 830 0
 1290 0042 4FE0     	 b .L72
 1291              	.L80:
 831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
 833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();      
 1292              	 .loc 2 833 0
 1293 0044 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
 834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Read the header word */
 836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     header_word = E_EEPROM_XMC1_lReadSingleWord(read_addr);
 1294              	 .loc 2 836 0
 1295 0048 BB68     	 ldr r3,[r7,#8]
 1296 004a 181C     	 mov r0,r3
 1297 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleWord
 1298 0050 031C     	 mov r3,r0
 1299 0052 7B61     	 str r3,[r7,#20]
 837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_header_ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t*)(void *)(&header_word);
 1300              	 .loc 2 838 0
 1301 0054 1423     	 mov r3,#20
 1302 0056 FB18     	 add r3,r7,r3
 1303 0058 FB61     	 str r3,[r7,#28]
 839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_block_number = block_header_ptr->block_number;
 1304              	 .loc 2 839 0
 1305 005a 1B23     	 mov r3,#27
 1306 005c FB18     	 add r3,r7,r3
 1307 005e FA69     	 ldr r2,[r7,#28]
 1308 0060 1278     	 ldrb r2,[r2]
 1309 0062 1A70     	 strb r2,[r3]
 840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_status = block_header_ptr->status;
 1310              	 .loc 2 840 0
 1311 0064 1A23     	 mov r3,#26
 1312 0066 FB18     	 add r3,r7,r3
 1313 0068 FA69     	 ldr r2,[r7,#28]
 1314 006a 5278     	 ldrb r2,[r2,#1]
 1315 006c 1A70     	 strb r2,[r3]
 841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
 842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*Check whether the block number is matching the required block number*/
 843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (read_block_number == required_block_number)
 1316              	 .loc 2 843 0
 1317 006e 1B23     	 mov r3,#27
 1318 0070 FA18     	 add r2,r7,r3
 1319 0072 0F23     	 mov r3,#15
 1320 0074 FB18     	 add r3,r7,r3
 1321 0076 1278     	 ldrb r2,[r2]
 1322 0078 1B78     	 ldrb r3,[r3]
 1323 007a 9A42     	 cmp r2,r3
 1324 007c 2FD1     	 bne .L73
 844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 1325              	 .loc 2 845 0
 1326 007e FB6A     	 ldr r3,[r7,#44]
 1327 0080 0133     	 add r3,r3,#1
 1328 0082 FB62     	 str r3,[r7,#44]
 846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
 847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if any ECC error in the header */
 848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( ( E_EEPROM_XMC1_lGetFlashStatus() & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR ) != 0U )
 1329              	 .loc 2 848 0
 1330 0084 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 1331 0088 021C     	 mov r2,r0
 1332 008a 2023     	 mov r3,#32
 1333 008c 1340     	 and r3,r2
 1334 008e 01D0     	 beq .L74
 849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         is_all_blocks_clean = 0U;
 1335              	 .loc 2 850 0
 1336 0090 0023     	 mov r3,#0
 1337 0092 7B62     	 str r3,[r7,#36]
 1338              	.L74:
 851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if block header is of the starting block */
 853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (block_status & E_EEPROM_XMC1_START_BIT)
 1339              	 .loc 2 853 0
 1340 0094 1A23     	 mov r3,#26
 1341 0096 FB18     	 add r3,r7,r3
 1342 0098 1B78     	 ldrb r3,[r3]
 1343 009a 5BB2     	 sxtb r3,r3
 1344 009c 002B     	 cmp r3,#0
 1345 009e 1ADA     	 bge .L75
 854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ( is_all_blocks_clean == 1U )
 1346              	 .loc 2 855 0
 1347 00a0 7B6A     	 ldr r3,[r7,#36]
 1348 00a2 012B     	 cmp r3,#1
 1349 00a4 05D1     	 bne .L76
 856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
 857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_result.status.consistent = 1U;
 1350              	 .loc 2 857 0
 1351 00a6 3B6A     	 ldr r3,[r7,#32]
 1352 00a8 3422     	 mov r2,#52
 1353 00aa 995C     	 ldrb r1,[r3,r2]
 1354 00ac 0220     	 mov r0,#2
 1355 00ae 0143     	 orr r1,r0
 1356 00b0 9954     	 strb r1,[r3,r2]
 1357              	.L76:
 858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (block_status & (uint8_t)E_EEPROM_XMC1_VALID_BIT)
 1358              	 .loc 2 860 0
 1359 00b2 1A23     	 mov r3,#26
 1360 00b4 FB18     	 add r3,r7,r3
 1361 00b6 1B78     	 ldrb r3,[r3]
 1362 00b8 4022     	 mov r2,#64
 1363 00ba 1340     	 and r3,r2
 1364 00bc 05D0     	 beq .L77
 861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
 862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_result.status.valid = 1U;
 1365              	 .loc 2 862 0
 1366 00be 3B6A     	 ldr r3,[r7,#32]
 1367 00c0 3422     	 mov r2,#52
 1368 00c2 995C     	 ldrb r1,[r3,r2]
 1369 00c4 0120     	 mov r0,#1
 1370 00c6 0143     	 orr r1,r0
 1371 00c8 9954     	 strb r1,[r3,r2]
 1372              	.L77:
 863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_result.block_count = block_count;
 1373              	 .loc 2 865 0
 1374 00ca 3B6A     	 ldr r3,[r7,#32]
 1375 00cc FA6A     	 ldr r2,[r7,#44]
 1376 00ce 1A63     	 str r2,[r3,#48]
 866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         block_start_address = read_addr;
 1377              	 .loc 2 866 0
 1378 00d0 BB68     	 ldr r3,[r7,#8]
 1379 00d2 BB62     	 str r3,[r7,#40]
 1380 00d4 06E0     	 b .L72
 1381              	.L75:
 867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
 869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
 870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         read_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 1382              	 .loc 2 870 0
 1383 00d6 BB68     	 ldr r3,[r7,#8]
 1384 00d8 103B     	 sub r3,r3,#16
 1385 00da BB60     	 str r3,[r7,#8]
 1386 00dc 02E0     	 b .L72
 1387              	.L73:
 871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
 874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 1388              	 .loc 2 875 0
 1389 00de BB68     	 ldr r3,[r7,#8]
 1390 00e0 103B     	 sub r3,r3,#16
 1391 00e2 BB60     	 str r3,[r7,#8]
 1392              	.L72:
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 1393              	 .loc 2 830 0
 1394 00e4 7A68     	 ldr r2,[r7,#4]
 1395 00e6 BB68     	 ldr r3,[r7,#8]
 1396 00e8 9A42     	 cmp r2,r3
 1397 00ea 02D8     	 bhi .L79
 830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 1398              	 .loc 2 830 0 is_stmt 0 discriminator 1
 1399 00ec BB6A     	 ldr r3,[r7,#40]
 1400 00ee 002B     	 cmp r3,#0
 1401 00f0 A8D0     	 beq .L80
 1402              	.L79:
 876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
 877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return(block_start_address);
 1403              	 .loc 2 878 0 is_stmt 1
 1404 00f2 BB6A     	 ldr r3,[r7,#40]
 879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1405              	 .loc 2 879 0
 1406 00f4 181C     	 mov r0,r3
 1407 00f6 BD46     	 mov sp,r7
 1408 00f8 0CB0     	 add sp,sp,#48
 1409              	 
 1410 00fa 80BD     	 pop {r7,pc}
 1411              	.L83:
 1412              	 .align 2
 1413              	.L82:
 1414 00fc 00000000 	 .word E_EEPROM_XMC1_0
 1415              	 .cfi_endproc
 1416              	.LFE56:
 1418              	 .section .text.E_EEPROM_XMC1_lInitGc,"ax",%progbits
 1419              	 .align 2
 1420              	 .code 16
 1421              	 .thumb_func
 1423              	E_EEPROM_XMC1_lInitGc:
 1424              	.LFB57:
 880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : marker_dirty_state  - Dirty state
 883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
 885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall detect if there was any interruption in the ongoing runnin
 887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   (Read/Write/GC). If yes, then this routine shall decide to run a state machine
 888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   emulation to normal state
 889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGc(const uint32_t marker_dirty_state)
 891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1425              	 .loc 2 891 0
 1426              	 .cfi_startproc
 1427 0000 80B5     	 push {r7,lr}
 1428              	.LCFI39:
 1429              	 .cfi_def_cfa_offset 8
 1430              	 .cfi_offset 7,-8
 1431              	 .cfi_offset 14,-4
 1432 0002 84B0     	 sub sp,sp,#16
 1433              	.LCFI40:
 1434              	 .cfi_def_cfa_offset 24
 1435 0004 00AF     	 add r7,sp,#0
 1436              	.LCFI41:
 1437              	 .cfi_def_cfa_register 7
 1438 0006 7860     	 str r0,[r7,#4]
 892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1439              	 .loc 2 893 0
 1440 0008 254B     	 ldr r3,.L89
 1441 000a 5B68     	 ldr r3,[r3,#4]
 1442 000c FB60     	 str r3,[r7,#12]
 894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( marker_dirty_state == E_EEPROM_XMC1_BOTH_BANKS_INVALID )  /* If both Bank state markers are 
 1443              	 .loc 2 895 0
 1444 000e 7B68     	 ldr r3,[r7,#4]
 1445 0010 032B     	 cmp r3,#3
 1446 0012 07D1     	 bne .L85
 896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state = E_EEPROM_XMC1_MB_DIRTY;
 1447              	 .loc 2 897 0
 1448 0014 FA68     	 ldr r2,[r7,#12]
 1449 0016 BC23     	 mov r3,#188
 1450 0018 5B00     	 lsl r3,r3,#1
 1451 001a DD21     	 mov r1,#221
 1452 001c D150     	 str r1,[r2,r3]
 898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitllegalStateMachine();
 1453              	 .loc 2 898 0
 1454 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
 1455 0022 39E0     	 b .L84
 1456              	.L85:
 899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if ( marker_dirty_state == E_EEPROM_XMC1_BANK0_INVALID )  /* If Only Bank0 state marker is i
 1457              	 .loc 2 900 0
 1458 0024 7B68     	 ldr r3,[r7,#4]
 1459 0026 012B     	 cmp r3,#1
 1460 0028 18D1     	 bne .L87
 901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_0F;
 1461              	 .loc 2 902 0
 1462 002a FA68     	 ldr r2,[r7,#12]
 1463 002c BC23     	 mov r3,#188
 1464 002e 5B00     	 lsl r3,r3,#1
 1465 0030 D358     	 ldr r3,[r2,r3]
 1466 0032 0F22     	 mov r2,#15
 1467 0034 1340     	 and r3,r2
 1468 0036 191C     	 mov r1,r3
 1469 0038 FA68     	 ldr r2,[r7,#12]
 1470 003a BC23     	 mov r3,#188
 1471 003c 5B00     	 lsl r3,r3,#1
 1472 003e D150     	 str r1,[r2,r3]
 903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_D0;
 1473              	 .loc 2 903 0
 1474 0040 FA68     	 ldr r2,[r7,#12]
 1475 0042 BC23     	 mov r3,#188
 1476 0044 5B00     	 lsl r3,r3,#1
 1477 0046 D358     	 ldr r3,[r2,r3]
 1478 0048 D022     	 mov r2,#208
 1479 004a 1A43     	 orr r2,r3
 1480 004c 111C     	 mov r1,r2
 1481 004e FA68     	 ldr r2,[r7,#12]
 1482 0050 BC23     	 mov r3,#188
 1483 0052 5B00     	 lsl r3,r3,#1
 1484 0054 D150     	 str r1,[r2,r3]
 904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitDirtyStateMachine();
 1485              	 .loc 2 904 0
 1486 0056 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitDirtyStateMachine
 1487 005a 1DE0     	 b .L84
 1488              	.L87:
 905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if ( marker_dirty_state == E_EEPROM_XMC1_BANK1_INVALID )  /* If Only Bank1 state marker is i
 1489              	 .loc 2 906 0
 1490 005c 7B68     	 ldr r3,[r7,#4]
 1491 005e 022B     	 cmp r3,#2
 1492 0060 18D1     	 bne .L88
 907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_F0;
 1493              	 .loc 2 908 0
 1494 0062 FA68     	 ldr r2,[r7,#12]
 1495 0064 BC23     	 mov r3,#188
 1496 0066 5B00     	 lsl r3,r3,#1
 1497 0068 D358     	 ldr r3,[r2,r3]
 1498 006a F022     	 mov r2,#240
 1499 006c 1340     	 and r3,r2
 1500 006e 191C     	 mov r1,r3
 1501 0070 FA68     	 ldr r2,[r7,#12]
 1502 0072 BC23     	 mov r3,#188
 1503 0074 5B00     	 lsl r3,r3,#1
 1504 0076 D150     	 str r1,[r2,r3]
 909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_0D;
 1505              	 .loc 2 909 0
 1506 0078 FA68     	 ldr r2,[r7,#12]
 1507 007a BC23     	 mov r3,#188
 1508 007c 5B00     	 lsl r3,r3,#1
 1509 007e D358     	 ldr r3,[r2,r3]
 1510 0080 0D22     	 mov r2,#13
 1511 0082 1A43     	 orr r2,r3
 1512 0084 111C     	 mov r1,r2
 1513 0086 FA68     	 ldr r2,[r7,#12]
 1514 0088 BC23     	 mov r3,#188
 1515 008a 5B00     	 lsl r3,r3,#1
 1516 008c D150     	 str r1,[r2,r3]
 910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitDirtyStateMachine();
 1517              	 .loc 2 910 0
 1518 008e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitDirtyStateMachine
 1519 0092 01E0     	 b .L84
 1520              	.L88:
 911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else                                      /* If both Bank state markers have valid state */
 913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitNormalStateMachine();
 1521              	 .loc 2 914 0
 1522 0094 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitNormalStateMachine
 1523              	.L84:
 915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1524              	 .loc 2 916 0
 1525 0098 BD46     	 mov sp,r7
 1526 009a 04B0     	 add sp,sp,#16
 1527              	 
 1528 009c 80BD     	 pop {r7,pc}
 1529              	.L90:
 1530 009e C046     	 .align 2
 1531              	.L89:
 1532 00a0 00000000 	 .word E_EEPROM_XMC1_0
 1533              	 .cfi_endproc
 1534              	.LFE57:
 1536              	 .section .text.E_EEPROM_XMC1_lInitllegalStateMachine,"ax",%progbits
 1537              	 .align 2
 1538              	 .code 16
 1539              	 .thumb_func
 1541              	E_EEPROM_XMC1_lInitllegalStateMachine:
 1542              	.LFB58:
 917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
 922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function shall erase all flash and start from fresh depending upon the us
 924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitllegalStateMachine(void)
 926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1543              	 .loc 2 926 0
 1544              	 .cfi_startproc
 1545 0000 80B5     	 push {r7,lr}
 1546              	.LCFI42:
 1547              	 .cfi_def_cfa_offset 8
 1548              	 .cfi_offset 7,-8
 1549              	 .cfi_offset 14,-4
 1550 0002 82B0     	 sub sp,sp,#8
 1551              	.LCFI43:
 1552              	 .cfi_def_cfa_offset 16
 1553 0004 00AF     	 add r7,sp,#0
 1554              	.LCFI44:
 1555              	 .cfi_def_cfa_register 7
 927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1556              	 .loc 2 928 0
 1557 0006 0B4B     	 ldr r3,.L94
 1558 0008 5B68     	 ldr r3,[r3,#4]
 1559 000a 7B60     	 str r3,[r7,#4]
 929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
 930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
 931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Any state apart from the normal states is considered as Illegal state. Next operation = Start 
 932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * (Only if the configuration option Erase all is 1U) IF Configuration Option is 0U, Next Operati
 933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
 934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_HANDLE_PTR->erase_all_auto_recovery == 1U)
 1560              	 .loc 2 934 0
 1561 000c 094B     	 ldr r3,.L94
 1562 000e 9B7A     	 ldrb r3,[r3,#10]
 1563 0010 012B     	 cmp r3,#1
 1564 0012 07D1     	 bne .L92
 935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Change the current Bank to Bank0 */
 937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = 0U;
 1565              	 .loc 2 937 0
 1566 0014 7B68     	 ldr r3,[r7,#4]
 1567 0016 0022     	 mov r2,#0
 1568 0018 9A63     	 str r2,[r3,#56]
 938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, 1U);
 1569              	 .loc 2 938 0
 1570 001a 0120     	 mov r0,#1
 1571 001c 0121     	 mov r1,#1
 1572 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
 1573 0022 04E0     	 b .L91
 1574              	.L92:
 939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
 941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 1575              	 .loc 2 942 0
 1576 0024 7A68     	 ldr r2,[r7,#4]
 1577 0026 BA23     	 mov r3,#186
 1578 0028 5B00     	 lsl r3,r3,#1
 1579 002a 0921     	 mov r1,#9
 1580 002c D150     	 str r1,[r2,r3]
 1581              	.L91:
 943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
 944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1582              	 .loc 2 944 0
 1583 002e BD46     	 mov sp,r7
 1584 0030 02B0     	 add sp,sp,#8
 1585              	 
 1586 0032 80BD     	 pop {r7,pc}
 1587              	.L95:
 1588              	 .align 2
 1589              	.L94:
 1590 0034 00000000 	 .word E_EEPROM_XMC1_0
 1591              	 .cfi_endproc
 1592              	.LFE58:
 1594              	 .section .text.E_EEPROM_XMC1_lInitDirtyStateMachine,"ax",%progbits
 1595              	 .align 2
 1596              	 .code 16
 1597              	 .thumb_func
 1599              	E_EEPROM_XMC1_lInitDirtyStateMachine:
 1600              	.LFB59:
 945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
 946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
 947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
 948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
 950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
 951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function shall address the dirty state recovery mechanism by erasing and r
 952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
 953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitDirtyStateMachine(void)
 954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1601              	 .loc 2 954 0
 1602              	 .cfi_startproc
 1603 0000 80B5     	 push {r7,lr}
 1604              	.LCFI45:
 1605              	 .cfi_def_cfa_offset 8
 1606              	 .cfi_offset 7,-8
 1607              	 .cfi_offset 14,-4
 1608 0002 82B0     	 sub sp,sp,#8
 1609              	.LCFI46:
 1610              	 .cfi_def_cfa_offset 16
 1611 0004 00AF     	 add r7,sp,#0
 1612              	.LCFI47:
 1613              	 .cfi_def_cfa_register 7
 955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
 956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1614              	 .loc 2 956 0
 1615 0006 274B     	 ldr r3,.L106
 1616 0008 5B68     	 ldr r3,[r3,#4]
 1617 000a 7B60     	 str r3,[r7,#4]
 957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1618              	 .loc 2 957 0
 1619 000c 7A68     	 ldr r2,[r7,#4]
 1620 000e BC23     	 mov r3,#188
 1621 0010 5B00     	 lsl r3,r3,#1
 1622 0012 D358     	 ldr r3,[r2,r3]
 1623 0014 AD2B     	 cmp r3,#173
 1624 0016 1AD0     	 beq .L98
 1625 0018 04D8     	 bhi .L99
 1626 001a 0D2B     	 cmp r3,#13
 1627 001c 29D0     	 beq .L100
 1628 001e 2D2B     	 cmp r3,#45
 1629 0020 07D0     	 beq .L101
 1630 0022 38E0     	 b .L97
 1631              	.L99:
 1632 0024 D22B     	 cmp r3,#210
 1633 0026 0BD0     	 beq .L102
 1634 0028 DA2B     	 cmp r3,#218
 1635 002a 19D0     	 beq .L103
 1636 002c D02B     	 cmp r3,#208
 1637 002e 29D0     	 beq .L104
 1638 0030 31E0     	 b .L97
 1639              	.L101:
 958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_2D:
 960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E  */
 961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1640              	 .loc 2 961 0
 1641 0032 7B68     	 ldr r3,[r7,#4]
 1642 0034 0022     	 mov r2,#0
 1643 0036 9A63     	 str r2,[r3,#56]
 962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : 2D -> 2F -> 2E */
 963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
 1644              	 .loc 2 963 0
 1645 0038 3020     	 mov r0,#48
 1646 003a FFF7FEFF 	 bl E_EEPROM_XMC1_lErasedDirtyStateRecovery
 964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1647              	 .loc 2 964 0
 1648 003e 2DE0     	 b .L96
 1649              	.L102:
 965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_D2:
 966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
 967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1650              	 .loc 2 967 0
 1651 0040 7B68     	 ldr r3,[r7,#4]
 1652 0042 0122     	 mov r2,#1
 1653 0044 9A63     	 str r2,[r3,#56]
 968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D2 -> F2 -> E2 */
 969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
 1654              	 .loc 2 969 0
 1655 0046 3020     	 mov r0,#48
 1656 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lErasedDirtyStateRecovery
 970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1657              	 .loc 2 970 0
 1658 004c 26E0     	 b .L96
 1659              	.L98:
 971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_AD:
 972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
 973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1660              	 .loc 2 973 0
 1661 004e 7B68     	 ldr r3,[r7,#4]
 1662 0050 0022     	 mov r2,#0
 1663 0052 9A63     	 str r2,[r3,#56]
 974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : AD -> A0 -> GC PROCESS -> 2E */
 975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 1664              	 .loc 2 975 0
 1665 0054 0020     	 mov r0,#0
 1666 0056 0721     	 mov r1,#7
 1667 0058 0122     	 mov r2,#1
 1668 005a FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
 977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1669              	 .loc 2 977 0
 1670 005e 1DE0     	 b .L96
 1671              	.L103:
 978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_DA:
 979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1  and recover from the dirty state to E2*/
 980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1672              	 .loc 2 980 0
 1673 0060 7B68     	 ldr r3,[r7,#4]
 1674 0062 0122     	 mov r2,#1
 1675 0064 9A63     	 str r2,[r3,#56]
 981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : DA -> 0A -> GC PROCESS -> E2 */
 982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 1676              	 .loc 2 982 0
 1677 0066 0020     	 mov r0,#0
 1678 0068 0721     	 mov r1,#7
 1679 006a 0122     	 mov r2,#1
 1680 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
 984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1681              	 .loc 2 984 0
 1682 0070 14E0     	 b .L96
 1683              	.L100:
 985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_0D:
 986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
 987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1684              	 .loc 2 987 0
 1685 0072 7B68     	 ldr r3,[r7,#4]
 1686 0074 0122     	 mov r2,#1
 1687 0076 9A63     	 str r2,[r3,#56]
 988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : 0D -> 02 -> GC PROCESS -> E2 */
 989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 1688              	 .loc 2 989 0
 1689 0078 2020     	 mov r0,#32
 1690 007a 0321     	 mov r1,#3
 1691 007c 0022     	 mov r2,#0
 1692 007e FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
 991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1693              	 .loc 2 991 0
 1694 0082 0BE0     	 b .L96
 1695              	.L104:
 992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_D0:
 993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
 994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1696              	 .loc 2 994 0
 1697 0084 7B68     	 ldr r3,[r7,#4]
 1698 0086 0022     	 mov r2,#0
 1699 0088 9A63     	 str r2,[r3,#56]
 995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
 996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 1700              	 .loc 2 996 0
 1701 008a 2020     	 mov r0,#32
 1702 008c 0321     	 mov r1,#3
 1703 008e 0022     	 mov r2,#0
 1704 0090 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
 997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
 998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1705              	 .loc 2 998 0
 1706 0094 02E0     	 b .L96
 1707              	.L97:
 999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Any state apart from the normal states is considered as Illegal state */
1001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : Illegal -> PREPARE DFLASH -> 2E */
1002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitllegalStateMachine();
 1708              	 .loc 2 1002 0
 1709 0096 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
1003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1710              	 .loc 2 1003 0
 1711 009a C046     	 mov r8,r8
 1712              	.L96:
1004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1713              	 .loc 2 1005 0
 1714 009c BD46     	 mov sp,r7
 1715 009e 02B0     	 add sp,sp,#8
 1716              	 
 1717 00a0 80BD     	 pop {r7,pc}
 1718              	.L107:
 1719 00a2 C046     	 .align 2
 1720              	.L106:
 1721 00a4 00000000 	 .word E_EEPROM_XMC1_0
 1722              	 .cfi_endproc
 1723              	.LFE59:
 1725              	 .section .text.E_EEPROM_XMC1_lInitNormalStateMachine,"ax",%progbits
 1726              	 .align 2
 1727              	 .code 16
 1728              	 .thumb_func
 1730              	E_EEPROM_XMC1_lInitNormalStateMachine:
 1731              	.LFB60:
1006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value   : void
1011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description    : Check which normal bank state machine process has executed.
1013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitNormalStateMachine(void)
1015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1732              	 .loc 2 1015 0
 1733              	 .cfi_startproc
 1734 0000 80B5     	 push {r7,lr}
 1735              	.LCFI48:
 1736              	 .cfi_def_cfa_offset 8
 1737              	 .cfi_offset 7,-8
 1738              	 .cfi_offset 14,-4
 1739 0002 00AF     	 add r7,sp,#0
 1740              	.LCFI49:
 1741              	 .cfi_def_cfa_register 7
1016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check if the state matches with any of the normal marker states with active bank as bank-0*/
1017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_lInitBank0NormalStateMachine() == 0U)
 1742              	 .loc 2 1017 0
 1743 0004 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitBank0NormalStateMachine
 1744 0008 031E     	 sub r3,r0,#0
 1745 000a 09D1     	 bne .L108
1018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the state matches with any of the normal marker states with active bank as bank-1*/
1020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (E_EEPROM_XMC1_lInitBank1NormalStateMachine() == 0U)
 1746              	 .loc 2 1020 0
 1747 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitBank1NormalStateMachine
 1748 0010 031E     	 sub r3,r0,#0
 1749 0012 05D1     	 bne .L108
1021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if the state matches with any other intermediate states from where a recover is poss
1023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (E_EEPROM_XMC1_lInitOtherNormalStateMachine() == 0U)
 1750              	 .loc 2 1023 0
 1751 0014 FFF7FEFF 	 bl E_EEPROM_XMC1_lInitOtherNormalStateMachine
 1752 0018 031E     	 sub r3,r0,#0
 1753 001a 01D1     	 bne .L108
1024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* If no matches found then go to illegal state and try to recover by erasing complete DFLA
1026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lInitllegalStateMachine();
 1754              	 .loc 2 1026 0
 1755 001c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitllegalStateMachine
 1756              	.L108:
1027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1757              	 .loc 2 1030 0
 1758 0020 BD46     	 mov sp,r7
 1759              	 
 1760 0022 80BD     	 pop {r7,pc}
 1761              	 .cfi_endproc
 1762              	.LFE60:
 1764              	 .section .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine,"ax",%progbits
 1765              	 .align 2
 1766              	 .code 16
 1767              	 .thumb_func
 1769              	E_EEPROM_XMC1_lInitBank0NormalStateMachine:
 1770              	.LFB61:
1031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute bank 0 state machine process and return the found states.
1038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void)
1040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1771              	 .loc 2 1040 0
 1772              	 .cfi_startproc
 1773 0000 80B5     	 push {r7,lr}
 1774              	.LCFI50:
 1775              	 .cfi_def_cfa_offset 8
 1776              	 .cfi_offset 7,-8
 1777              	 .cfi_offset 14,-4
 1778 0002 82B0     	 sub sp,sp,#8
 1779              	.LCFI51:
 1780              	 .cfi_def_cfa_offset 16
 1781 0004 00AF     	 add r7,sp,#0
 1782              	.LCFI52:
 1783              	 .cfi_def_cfa_register 7
1041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1784              	 .loc 2 1043 0
 1785 0006 234B     	 ldr r3,.L120
 1786 0008 5B68     	 ldr r3,[r3,#4]
 1787 000a 3B60     	 str r3,[r7]
1044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 1788              	 .loc 2 1045 0
 1789 000c 0123     	 mov r3,#1
 1790 000e 7B60     	 str r3,[r7,#4]
1046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1791              	 .loc 2 1047 0
 1792 0010 3A68     	 ldr r2,[r7]
 1793 0012 BC23     	 mov r3,#188
 1794 0014 5B00     	 lsl r3,r3,#1
 1795 0016 D358     	 ldr r3,[r2,r3]
 1796 0018 2E2B     	 cmp r3,#46
 1797 001a 0AD0     	 beq .L112
 1798 001c 04D8     	 bhi .L113
 1799 001e 202B     	 cmp r3,#32
 1800 0020 1FD0     	 beq .L114
 1801 0022 2A2B     	 cmp r3,#42
 1802 0024 0DD0     	 beq .L115
 1803 0026 2CE0     	 b .L111
 1804              	.L113:
 1805 0028 2F2B     	 cmp r3,#47
 1806 002a 22D0     	 beq .L116
 1807 002c A02B     	 cmp r3,#160
 1808 002e 10D0     	 beq .L117
 1809 0030 27E0     	 b .L111
 1810              	.L112:
1048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Normal Data write in Bank-0 interrupted (2E), Next step = Cache Update and get ready to acce
1051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : Nothing
1052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NORMAL1:
1054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = 0U;
 1811              	 .loc 2 1054 0
 1812 0032 3B68     	 ldr r3,[r7]
 1813 0034 0022     	 mov r2,#0
 1814 0036 9A63     	 str r2,[r3,#56]
1055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE)
 1815              	 .loc 2 1055 0
 1816 0038 0A20     	 mov r0,#10
 1817 003a 0021     	 mov r1,#0
 1818 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1819              	 .loc 2 1056 0
 1820 0040 22E0     	 b .L118
 1821              	.L115:
1057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Data copy from Bank0 to Bank1 interrupted (2A), Next step = Erasing Bank-1 and restart copy 
1060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (2A) -> ERASE_BANK0 (2F) -> 2E -> GC_PROCESS (2A -> 0A -> 20 -> F2 -> E2
1061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_DATA_COPY1:
1063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1822              	 .loc 2 1063 0
 1823 0042 3B68     	 ldr r3,[r7]
 1824 0044 0022     	 mov r2,#0
 1825 0046 9A63     	 str r2,[r3,#56]
1064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSE
 1826              	 .loc 2 1064 0
 1827 0048 0420     	 mov r0,#4
 1828 004a 3021     	 mov r1,#48
 1829 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcDataCopyState
1065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1830              	 .loc 2 1065 0
 1831 0050 1AE0     	 b .L118
 1832              	.L117:
1066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after copy completion from Bank1 to Bank0 (A0),Next step = Writing Valid state i
1069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (A0) -> (20) -> GC_PROCESS (2F -> 2E)
1070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_COPY_DONE1:
1072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1833              	 .loc 2 1072 0
 1834 0052 3B68     	 ldr r3,[r7]
 1835 0054 0022     	 mov r2,#0
 1836 0056 9A63     	 str r2,[r3,#56]
1073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC
 1837              	 .loc 2 1073 0
 1838 0058 0720     	 mov r0,#7
 1839 005a 0221     	 mov r1,#2
 1840 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1841              	 .loc 2 1074 0
 1842 0060 12E0     	 b .L118
 1843              	.L114:
1075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after writing valid state to Bank0 (20), Next step = Erase of old redundant Bank
1078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (20) -> (2F) -> GC_PROCESS (2E)
1079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NEXT_VALID1:
1081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1844              	 .loc 2 1081 0
 1845 0062 3B68     	 ldr r3,[r7]
 1846 0064 0022     	 mov r2,#0
 1847 0066 9A63     	 str r2,[r3,#56]
1082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC
 1848              	 .loc 2 1082 0
 1849 0068 0320     	 mov r0,#3
 1850 006a 0221     	 mov r1,#2
 1851 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1852              	 .loc 2 1083 0
 1853 0070 0AE0     	 b .L118
 1854              	.L116:
1084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of old bank completed(2F), Next step = Mark erased Bank-1 with Forma
1087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (2F) -> GC_PROCESS (2E)
1088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_END_ERASE1:
1090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 1855              	 .loc 2 1090 0
 1856 0072 3B68     	 ldr r3,[r7]
 1857 0074 0022     	 mov r2,#0
 1858 0076 9A63     	 str r2,[r3,#56]
1091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC
 1859              	 .loc 2 1091 0
 1860 0078 0820     	 mov r0,#8
 1861 007a 0221     	 mov r1,#2
 1862 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1863              	 .loc 2 1092 0
 1864 0080 02E0     	 b .L118
 1865              	.L111:
1093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 1866              	 .loc 2 1095 0
 1867 0082 0023     	 mov r3,#0
 1868 0084 7B60     	 str r3,[r7,#4]
1096:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1869              	 .loc 2 1096 0
 1870 0086 C046     	 mov r8,r8
 1871              	.L118:
1097:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1098:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 1872              	 .loc 2 1098 0
 1873 0088 7B68     	 ldr r3,[r7,#4]
1099:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1874              	 .loc 2 1099 0
 1875 008a 181C     	 mov r0,r3
 1876 008c BD46     	 mov sp,r7
 1877 008e 02B0     	 add sp,sp,#8
 1878              	 
 1879 0090 80BD     	 pop {r7,pc}
 1880              	.L121:
 1881 0092 C046     	 .align 2
 1882              	.L120:
 1883 0094 00000000 	 .word E_EEPROM_XMC1_0
 1884              	 .cfi_endproc
 1885              	.LFE61:
 1887              	 .section .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine,"ax",%progbits
 1888              	 .align 2
 1889              	 .code 16
 1890              	 .thumb_func
 1892              	E_EEPROM_XMC1_lInitBank1NormalStateMachine:
 1893              	.LFB62:
1100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute bank 1 state machine process and return the found states.
1107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void)
1109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 1894              	 .loc 2 1109 0
 1895              	 .cfi_startproc
 1896 0000 80B5     	 push {r7,lr}
 1897              	.LCFI53:
 1898              	 .cfi_def_cfa_offset 8
 1899              	 .cfi_offset 7,-8
 1900              	 .cfi_offset 14,-4
 1901 0002 82B0     	 sub sp,sp,#8
 1902              	.LCFI54:
 1903              	 .cfi_def_cfa_offset 16
 1904 0004 00AF     	 add r7,sp,#0
 1905              	.LCFI55:
 1906              	 .cfi_def_cfa_register 7
1110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 1907              	 .loc 2 1112 0
 1908 0006 234B     	 ldr r3,.L132
 1909 0008 5B68     	 ldr r3,[r3,#4]
 1910 000a 3B60     	 str r3,[r7]
1113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 1911              	 .loc 2 1114 0
 1912 000c 0123     	 mov r3,#1
 1913 000e 7B60     	 str r3,[r7,#4]
1115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 1914              	 .loc 2 1116 0
 1915 0010 3A68     	 ldr r2,[r7]
 1916 0012 BC23     	 mov r3,#188
 1917 0014 5B00     	 lsl r3,r3,#1
 1918 0016 D358     	 ldr r3,[r2,r3]
 1919 0018 A22B     	 cmp r3,#162
 1920 001a 12D0     	 beq .L124
 1921 001c 04D8     	 bhi .L125
 1922 001e 022B     	 cmp r3,#2
 1923 0020 1FD0     	 beq .L126
 1924 0022 0A2B     	 cmp r3,#10
 1925 0024 15D0     	 beq .L127
 1926 0026 2CE0     	 b .L123
 1927              	.L125:
 1928 0028 E22B     	 cmp r3,#226
 1929 002a 02D0     	 beq .L128
 1930 002c F22B     	 cmp r3,#242
 1931 002e 20D0     	 beq .L129
 1932 0030 27E0     	 b .L123
 1933              	.L128:
1117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Normal Data write in Bank-1 interrupted (E2), Next step = Cache Update and get ready to acce
1120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : Nothing
1121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NORMAL2:
1123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1934              	 .loc 2 1123 0
 1935 0032 3B68     	 ldr r3,[r7]
 1936 0034 0122     	 mov r2,#1
 1937 0036 9A63     	 str r2,[r3,#56]
1124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE)
 1938              	 .loc 2 1124 0
 1939 0038 0A20     	 mov r0,#10
 1940 003a 0021     	 mov r1,#0
 1941 003c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1942              	 .loc 2 1125 0
 1943 0040 22E0     	 b .L130
 1944              	.L124:
1126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Data copy from Bank1 to Bank0 interrupted (A2), Next step = Erasing Bank-0 and restart copy 
1129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (A2) -> ERASE_BANK0 (F2) -> E2 -> GC_PROCESS (A2 -> A0 -> 20 -> 2F -> 2E
1130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_DATA_COPY2:
1132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1945              	 .loc 2 1132 0
 1946 0042 3B68     	 ldr r3,[r7]
 1947 0044 0122     	 mov r2,#1
 1948 0046 9A63     	 str r2,[r3,#56]
1133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSE
 1949              	 .loc 2 1133 0
 1950 0048 0420     	 mov r0,#4
 1951 004a 3021     	 mov r1,#48
 1952 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcDataCopyState
1134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1953              	 .loc 2 1134 0
 1954 0050 1AE0     	 b .L130
 1955              	.L127:
1135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after copy completion from Bank0 to Bank1 (0A),Next step = Writing Valid state i
1138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (0A) -> (02) -> GC_PROCESS (F2 -> E2)
1139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_COPY_DONE2:
1141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1956              	 .loc 2 1141 0
 1957 0052 3B68     	 ldr r3,[r7]
 1958 0054 0122     	 mov r2,#1
 1959 0056 9A63     	 str r2,[r3,#56]
1142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC
 1960              	 .loc 2 1142 0
 1961 0058 0720     	 mov r0,#7
 1962 005a 0221     	 mov r1,#2
 1963 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1964              	 .loc 2 1143 0
 1965 0060 12E0     	 b .L130
 1966              	.L126:
1144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after writing valid state to Bank1 (02), Next step = Erase of old redundant Bank
1147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (02) -> (F2) -> GC_PROCESS (E2)
1148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_NEXT_VALID2:
1150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1967              	 .loc 2 1150 0
 1968 0062 3B68     	 ldr r3,[r7]
 1969 0064 0122     	 mov r2,#1
 1970 0066 9A63     	 str r2,[r3,#56]
1151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC
 1971              	 .loc 2 1151 0
 1972 0068 0320     	 mov r0,#3
 1973 006a 0221     	 mov r1,#2
 1974 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1975              	 .loc 2 1152 0
 1976 0070 0AE0     	 b .L130
 1977              	.L129:
1153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of old bank completed(F2), Next step = Mark erased Bank-0 with Forma
1156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : (F2) -> GC_PROCESS (E2)
1157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_END_ERASE2:
1159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 1978              	 .loc 2 1159 0
 1979 0072 3B68     	 ldr r3,[r7]
 1980 0074 0122     	 mov r2,#1
 1981 0076 9A63     	 str r2,[r3,#56]
1160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC
 1982              	 .loc 2 1160 0
 1983 0078 0820     	 mov r0,#8
 1984 007a 0221     	 mov r1,#2
 1985 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1986              	 .loc 2 1161 0
 1987 0080 02E0     	 b .L130
 1988              	.L123:
1162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 1989              	 .loc 2 1164 0
 1990 0082 0023     	 mov r3,#0
 1991 0084 7B60     	 str r3,[r7,#4]
1165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 1992              	 .loc 2 1165 0
 1993 0086 C046     	 mov r8,r8
 1994              	.L130:
1166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 1995              	 .loc 2 1167 0
 1996 0088 7B68     	 ldr r3,[r7,#4]
1168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 1997              	 .loc 2 1168 0
 1998 008a 181C     	 mov r0,r3
 1999 008c BD46     	 mov sp,r7
 2000 008e 02B0     	 add sp,sp,#8
 2001              	 
 2002 0090 80BD     	 pop {r7,pc}
 2003              	.L133:
 2004 0092 C046     	 .align 2
 2005              	.L132:
 2006 0094 00000000 	 .word E_EEPROM_XMC1_0
 2007              	 .cfi_endproc
 2008              	.LFE62:
 2010              	 .section .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine,"ax",%progbits
 2011              	 .align 2
 2012              	 .code 16
 2013              	 .thumb_func
 2015              	E_EEPROM_XMC1_lInitOtherNormalStateMachine:
 2016              	.LFB63:
1169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : void
1172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : uint32_t : ( 1= state_found / 0 = State not found )
1174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Execute other state machine process and return the found states.
1176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void)
1178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2017              	 .loc 2 1178 0
 2018              	 .cfi_startproc
 2019 0000 80B5     	 push {r7,lr}
 2020              	.LCFI56:
 2021              	 .cfi_def_cfa_offset 8
 2022              	 .cfi_offset 7,-8
 2023              	 .cfi_offset 14,-4
 2024 0002 82B0     	 sub sp,sp,#8
 2025              	.LCFI57:
 2026              	 .cfi_def_cfa_offset 16
 2027 0004 00AF     	 add r7,sp,#0
 2028              	.LCFI58:
 2029              	 .cfi_def_cfa_register 7
1179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_found;
1180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2030              	 .loc 2 1181 0
 2031 0006 244B     	 ldr r3,.L144
 2032 0008 5B68     	 ldr r3,[r3,#4]
 2033 000a 3B60     	 str r3,[r7]
1182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_found = 1U;
 2034              	 .loc 2 1183 0
 2035 000c 0123     	 mov r3,#1
 2036 000e 7B60     	 str r3,[r7,#4]
1184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   switch (data_ptr->init_gc_state)
 2037              	 .loc 2 1185 0
 2038 0010 3A68     	 ldr r2,[r7]
 2039 0012 BC23     	 mov r3,#188
 2040 0014 5B00     	 lsl r3,r3,#1
 2041 0016 D358     	 ldr r3,[r2,r3]
 2042 0018 F02B     	 cmp r3,#240
 2043 001a 2CD0     	 beq .L136
 2044 001c 04D8     	 bhi .L137
 2045 001e 0F2B     	 cmp r3,#15
 2046 0020 20D0     	 beq .L138
 2047 0022 AF2B     	 cmp r3,#175
 2048 0024 0CD0     	 beq .L139
 2049 0026 2FE0     	 b .L135
 2050              	.L137:
 2051 0028 FA2B     	 cmp r3,#250
 2052 002a 12D0     	 beq .L140
 2053 002c FF2B     	 cmp r3,#255
 2054 002e 2BD1     	 bne .L135
1186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Interrupted after erase of both banks completed (FF), Next step = Start Prepare DFlash  */
1188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_ALL_ERASED:
1189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 */
1190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2055              	 .loc 2 1190 0
 2056 0030 3B68     	 ldr r3,[r7]
 2057 0032 0022     	 mov r2,#0
 2058 0034 9A63     	 str r2,[r3,#56]
1191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : FF ->  PREPARE_DFLASH (2F) -> 2E */
1192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, E_EEPROM_XMC1_EXECUTE_PREP_FLA
 2059              	 .loc 2 1192 0
 2060 0036 0120     	 mov r0,#1
 2061 0038 0121     	 mov r1,#1
 2062 003a FFF7FEFF 	 bl E_EEPROM_XMC1_lInitGcNormalStates
1193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2063              	 .loc 2 1193 0
 2064 003e 26E0     	 b .L142
 2065              	.L139:
1194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recovery(AF), Next step = Bank0 marker Page
1197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : AF -> A0 -> GC PROCESS -> 20 -> 2F -> 2E
1198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_AF:
1200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank1 */
1201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2066              	 .loc 2 1201 0
 2067 0040 3B68     	 ldr r3,[r7]
 2068 0042 0022     	 mov r2,#0
 2069 0044 9A63     	 str r2,[r3,#56]
1202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 2070              	 .loc 2 1203 0
 2071 0046 0020     	 mov r0,#0
 2072 0048 0721     	 mov r1,#7
 2073 004a 0122     	 mov r2,#1
 2074 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
1205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2075              	 .loc 2 1205 0
 2076 0050 1DE0     	 b .L142
 2077              	.L140:
1206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank0 during previous recovery(FA), Next step = Bank1 marker Page
1209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : FA -> 0A -> GC PROCESS -> 02 -> F2 -> E2
1210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_FA:
1212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 2078              	 .loc 2 1212 0
 2079 0052 3B68     	 ldr r3,[r7]
 2080 0054 0122     	 mov r2,#1
 2081 0056 9A63     	 str r2,[r3,#56]
1213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
 2082              	 .loc 2 1213 0
 2083 0058 0020     	 mov r0,#0
 2084 005a 0721     	 mov r1,#7
 2085 005c 0122     	 mov r2,#1
 2086 005e FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
1215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2087              	 .loc 2 1215 0
 2088 0062 14E0     	 b .L142
 2089              	.L138:
1216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recover(0F), Next step = Bank1 marker Page 
1219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : 0F -> 02 -> GC PROCESS -> F2 -> E2
1220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_0F:
1222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 1U;
 2090              	 .loc 2 1222 0
 2091 0064 3B68     	 ldr r3,[r7]
 2092 0066 0122     	 mov r2,#1
 2093 0068 9A63     	 str r2,[r3,#56]
1223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 2094              	 .loc 2 1223 0
 2095 006a 2020     	 mov r0,#32
 2096 006c 0321     	 mov r1,#3
 2097 006e 0022     	 mov r2,#0
 2098 0070 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
1225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2099              	 .loc 2 1225 0
 2100 0074 0BE0     	 b .L142
 2101              	.L136:
1226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /*
1228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Interrupted after erase of Bank1 during previous recover(F0), Next step = Bank1 marker Page 
1229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      * Transition states : F0 -> 20 -> GC PROCESS -> 2F -> 2E
1230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      */
1231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     case E_EEPROM_XMC1_INIT_STATE_F0:
1232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Change the current Bank to Bank0 */
1233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->current_bank = 0U;
 2102              	 .loc 2 1233 0
 2103 0076 3B68     	 ldr r3,[r7]
 2104 0078 0022     	 mov r2,#0
 2105 007a 9A63     	 str r2,[r3,#56]
1234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
1235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
 2106              	 .loc 2 1235 0
 2107 007c 2020     	 mov r0,#32
 2108 007e 0321     	 mov r1,#3
 2109 0080 0022     	 mov r2,#0
 2110 0082 FFF7FEFF 	 bl E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
1236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                     E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
1237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2111              	 .loc 2 1237 0
 2112 0086 02E0     	 b .L142
 2113              	.L135:
1238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     default:
1240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_found = 0U;
 2114              	 .loc 2 1240 0
 2115 0088 0023     	 mov r3,#0
 2116 008a 7B60     	 str r3,[r7,#4]
1241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2117              	 .loc 2 1241 0
 2118 008c C046     	 mov r8,r8
 2119              	.L142:
1242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (state_found);
 2120              	 .loc 2 1243 0
 2121 008e 7B68     	 ldr r3,[r7,#4]
1244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2122              	 .loc 2 1244 0
 2123 0090 181C     	 mov r0,r3
 2124 0092 BD46     	 mov sp,r7
 2125 0094 02B0     	 add sp,sp,#8
 2126              	 
 2127 0096 80BD     	 pop {r7,pc}
 2128              	.L145:
 2129              	 .align 2
 2130              	.L144:
 2131 0098 00000000 	 .word E_EEPROM_XMC1_0
 2132              	 .cfi_endproc
 2133              	.LFE63:
 2135              	 .section .text.E_EEPROM_XMC1_lInitGcNormalStates,"ax",%progbits
 2136              	 .align 2
 2137              	 .code 16
 2138              	 .thumb_func
 2140              	E_EEPROM_XMC1_lInitGcNormalStates:
 2141              	.LFB64:
1245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : current_state  - Current GC state
1247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *                   next_process  - Number of logical block
1248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : void
1250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Executes normal Garbage collection state machine sub process
1252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process)
1254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2142              	 .loc 2 1254 0
 2143              	 .cfi_startproc
 2144 0000 80B5     	 push {r7,lr}
 2145              	.LCFI59:
 2146              	 .cfi_def_cfa_offset 8
 2147              	 .cfi_offset 7,-8
 2148              	 .cfi_offset 14,-4
 2149 0002 84B0     	 sub sp,sp,#16
 2150              	.LCFI60:
 2151              	 .cfi_def_cfa_offset 24
 2152 0004 00AF     	 add r7,sp,#0
 2153              	.LCFI61:
 2154              	 .cfi_def_cfa_register 7
 2155 0006 7860     	 str r0,[r7,#4]
 2156 0008 3960     	 str r1,[r7]
1255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2157              	 .loc 2 1256 0
 2158 000a 144B     	 ldr r3,.L150
 2159 000c 5B68     	 ldr r3,[r3,#4]
 2160 000e FB60     	 str r3,[r7,#12]
1257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2161              	 .loc 2 1259 0
 2162 0010 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (next_process == E_EEPROM_XMC1_EXECUTE_PREP_FLASH)
 2163              	 .loc 2 1261 0
 2164 0014 3B68     	 ldr r3,[r7]
 2165 0016 012B     	 cmp r3,#1
 2166 0018 09D1     	 bne .L147
1262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state*/
1264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2167              	 .loc 2 1264 0
 2168 001a FA68     	 ldr r2,[r7,#12]
 2169 001c BA23     	 mov r3,#186
 2170 001e 5B00     	 lsl r3,r3,#1
 2171 0020 7968     	 ldr r1,[r7,#4]
 2172 0022 D150     	 str r1,[r2,r3]
1265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Prepare DFlash routine to build FEE base  */
1266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lPrepareDFlash();
 2173              	 .loc 2 1266 0
 2174 0024 FFF7FEFF 	 bl E_EEPROM_XMC1_lPrepareDFlash
1267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2175              	 .loc 2 1268 0
 2176 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
 2177 002c 13E0     	 b .L146
 2178              	.L147:
1269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }  
1270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (next_process == E_EEPROM_XMC1_EXECUTE_GC_STATE)
 2179              	 .loc 2 1270 0
 2180 002e 3B68     	 ldr r3,[r7]
 2181 0030 022B     	 cmp r3,#2
 2182 0032 09D1     	 bne .L149
1271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state */
1273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2183              	 .loc 2 1273 0
 2184 0034 FA68     	 ldr r2,[r7,#12]
 2185 0036 BA23     	 mov r3,#186
 2186 0038 5B00     	 lsl r3,r3,#1
 2187 003a 7968     	 ldr r1,[r7,#4]
 2188 003c D150     	 str r1,[r2,r3]
1274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2189              	 .loc 2 1275 0
 2190 003e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Garbage Collection */
1277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 2191              	 .loc 2 1277 0
 2192 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2193 0046 06E0     	 b .L146
 2194              	.L149:
1278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else /* if ( next_process == E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE ) */
1280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2195              	 .loc 2 1282 0
 2196 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state as Bank-0 Erase Completed state */
1284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = current_state;
 2197              	 .loc 2 1284 0
 2198 004c FA68     	 ldr r2,[r7,#12]
 2199 004e BA23     	 mov r3,#186
 2200 0050 5B00     	 lsl r3,r3,#1
 2201 0052 7968     	 ldr r1,[r7,#4]
 2202 0054 D150     	 str r1,[r2,r3]
 2203              	.L146:
1285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2204              	 .loc 2 1286 0
 2205 0056 BD46     	 mov sp,r7
 2206 0058 04B0     	 add sp,sp,#16
 2207              	 
 2208 005a 80BD     	 pop {r7,pc}
 2209              	.L151:
 2210              	 .align 2
 2211              	.L150:
 2212 005c 00000000 	 .word E_EEPROM_XMC1_0
 2213              	 .cfi_endproc
 2214              	.LFE64:
 2216              	 .section .text.E_EEPROM_XMC1_lInitGcDataCopyState,"ax",%progbits
 2217              	 .align 2
 2218              	 .code 16
 2219              	 .thumb_func
 2221              	E_EEPROM_XMC1_lInitGcDataCopyState:
 2222              	.LFB65:
1287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Parameters(IN)  : current_state  - Current GC state
1290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *                   marker_offset  - Marker block offset
1291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Return value    : void
1293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** *
1294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** * Description     : Executes data copy state GC state machine sub process.
1295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset)
1297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2223              	 .loc 2 1297 0
 2224              	 .cfi_startproc
 2225 0000 80B5     	 push {r7,lr}
 2226              	.LCFI62:
 2227              	 .cfi_def_cfa_offset 8
 2228              	 .cfi_offset 7,-8
 2229              	 .cfi_offset 14,-4
 2230 0002 84B0     	 sub sp,sp,#16
 2231              	.LCFI63:
 2232              	 .cfi_def_cfa_offset 24
 2233 0004 00AF     	 add r7,sp,#0
 2234              	.LCFI64:
 2235              	 .cfi_def_cfa_register 7
 2236 0006 7860     	 str r0,[r7,#4]
 2237 0008 3960     	 str r1,[r7]
1298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2238              	 .loc 2 1300 0
 2239 000a 1A4B     	 ldr r3,.L157
 2240 000c 5B68     	 ldr r3,[r3,#4]
 2241 000e FB60     	 str r3,[r7,#12]
1301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2242              	 .loc 2 1303 0
 2243 0010 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the GC state as restart copy process */
1306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_state = current_state ;
 2244              	 .loc 2 1306 0
 2245 0014 FA68     	 ldr r2,[r7,#12]
 2246 0016 BA23     	 mov r3,#186
 2247 0018 5B00     	 lsl r3,r3,#1
 2248 001a 7968     	 ldr r1,[r7,#4]
 2249 001c D150     	 str r1,[r2,r3]
1307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the RAM Cache Table with */
1309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCache();
 2250              	 .loc 2 1309 0
 2251 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Erase the previous redundant bank */
1312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 2252              	 .loc 2 1312 0
 2253 0022 FB68     	 ldr r3,[r7,#12]
 2254 0024 9B6C     	 ldr r3,[r3,#72]
 2255 0026 181C     	 mov r0,r3
 2256 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 2257 002c 031C     	 mov r3,r0
 2258 002e BB60     	 str r3,[r7,#8]
1313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2259              	 .loc 2 1314 0
 2260 0030 BB68     	 ldr r3,[r7,#8]
 2261 0032 002B     	 cmp r3,#0
 2262 0034 16D1     	 bne .L153
1315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2263              	 .loc 2 1316 0
 2264 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the erased bank (2E)  */
1319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
 2265              	 .loc 2 1319 0
 2266 003a FB68     	 ldr r3,[r7,#12]
 2267 003c DA6B     	 ldr r2,[r3,#60]
 2268 003e 3B68     	 ldr r3,[r7]
 2269 0040 D318     	 add r3,r2,r3
 2270 0042 181C     	 mov r0,r3
 2271 0044 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2272 0048 031C     	 mov r3,r0
 2273 004a BB60     	 str r3,[r7,#8]
1320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status == 0U)
 2274              	 .loc 2 1321 0
 2275 004c BB68     	 ldr r3,[r7,#8]
 2276 004e 002B     	 cmp r3,#0
 2277 0050 02D1     	 bne .L154
1322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Start Garbage Collection */
1324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lGarbageCollection();
 2278              	 .loc 2 1324 0
 2279 0052 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2280 0056 0AE0     	 b .L152
 2281              	.L154:
1325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2282              	 .loc 2 1328 0
 2283 0058 FA68     	 ldr r2,[r7,#12]
 2284 005a BA23     	 mov r3,#186
 2285 005c 5B00     	 lsl r3,r3,#1
 2286 005e 0921     	 mov r1,#9
 2287 0060 D150     	 str r1,[r2,r3]
 2288 0062 04E0     	 b .L152
 2289              	.L153:
1329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2290              	 .loc 2 1334 0
 2291 0064 FA68     	 ldr r2,[r7,#12]
 2292 0066 BA23     	 mov r3,#186
 2293 0068 5B00     	 lsl r3,r3,#1
 2294 006a 0921     	 mov r1,#9
 2295 006c D150     	 str r1,[r2,r3]
 2296              	.L152:
1335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2297              	 .loc 2 1337 0
 2298 006e BD46     	 mov sp,r7
 2299 0070 04B0     	 add sp,sp,#16
 2300              	 
 2301 0072 80BD     	 pop {r7,pc}
 2302              	.L158:
 2303              	 .align 2
 2304              	.L157:
 2305 0074 00000000 	 .word E_EEPROM_XMC1_0
 2306              	 .cfi_endproc
 2307              	.LFE65:
 2309              	 .section .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery,"ax",%progbits
 2310              	 .align 2
 2311              	 .code 16
 2312              	 .thumb_func
 2314              	E_EEPROM_XMC1_lErasedDirtyStateRecovery:
 2315              	.LFB66:
1338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : marker_offset  - Marker block offset
1341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Executes state machine sub process for erase dirty states to recover.
1345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset)
1347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2316              	 .loc 2 1347 0
 2317              	 .cfi_startproc
 2318 0000 80B5     	 push {r7,lr}
 2319              	.LCFI65:
 2320              	 .cfi_def_cfa_offset 8
 2321              	 .cfi_offset 7,-8
 2322              	 .cfi_offset 14,-4
 2323 0002 84B0     	 sub sp,sp,#16
 2324              	.LCFI66:
 2325              	 .cfi_def_cfa_offset 24
 2326 0004 00AF     	 add r7,sp,#0
 2327              	.LCFI67:
 2328              	 .cfi_def_cfa_register 7
 2329 0006 7860     	 str r0,[r7,#4]
1348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2330              	 .loc 2 1350 0
 2331 0008 194B     	 ldr r3,.L164
 2332 000a 5B68     	 ldr r3,[r3,#4]
 2333 000c FB60     	 str r3,[r7,#12]
1351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2334              	 .loc 2 1353 0
 2335 000e FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Erase the previous redundant bank */
1356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 2336              	 .loc 2 1356 0
 2337 0012 FB68     	 ldr r3,[r7,#12]
 2338 0014 9B6C     	 ldr r3,[r3,#72]
 2339 0016 181C     	 mov r0,r3
 2340 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 2341 001c 031C     	 mov r3,r0
 2342 001e BB60     	 str r3,[r7,#8]
1357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2343              	 .loc 2 1358 0
 2344 0020 BB68     	 ldr r3,[r7,#8]
 2345 0022 002B     	 cmp r3,#0
 2346 0024 1BD1     	 bne .L160
1359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2347              	 .loc 2 1360 0
 2348 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the erased bank */
1363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
 2349              	 .loc 2 1363 0
 2350 002a FB68     	 ldr r3,[r7,#12]
 2351 002c DA6B     	 ldr r2,[r3,#60]
 2352 002e 7B68     	 ldr r3,[r7,#4]
 2353 0030 D318     	 add r3,r2,r3
 2354 0032 181C     	 mov r0,r3
 2355 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2356 0038 031C     	 mov r3,r0
 2357 003a BB60     	 str r3,[r7,#8]
1364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status == 0U)
 2358              	 .loc 2 1364 0
 2359 003c BB68     	 ldr r3,[r7,#8]
 2360 003e 002B     	 cmp r3,#0
 2361 0040 07D1     	 bne .L161
1365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Update the RAM Cache Table with the written blocks of data.*/
1367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lUpdateCache();
 2362              	 .loc 2 1367 0
 2363 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
 2364              	 .loc 2 1369 0
 2365 0046 FA68     	 ldr r2,[r7,#12]
 2366 0048 BA23     	 mov r3,#186
 2367 004a 5B00     	 lsl r3,r3,#1
 2368 004c 0A21     	 mov r1,#10
 2369 004e D150     	 str r1,[r2,r3]
 2370 0050 0AE0     	 b .L159
 2371              	.L161:
1370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2372              	 .loc 2 1373 0
 2373 0052 FA68     	 ldr r2,[r7,#12]
 2374 0054 BA23     	 mov r3,#186
 2375 0056 5B00     	 lsl r3,r3,#1
 2376 0058 0921     	 mov r1,#9
 2377 005a D150     	 str r1,[r2,r3]
 2378 005c 04E0     	 b .L159
 2379              	.L160:
1374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2380              	 .loc 2 1378 0
 2381 005e FA68     	 ldr r2,[r7,#12]
 2382 0060 BA23     	 mov r3,#186
 2383 0062 5B00     	 lsl r3,r3,#1
 2384 0064 0921     	 mov r1,#9
 2385 0066 D150     	 str r1,[r2,r3]
 2386              	.L159:
1379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2387              	 .loc 2 1380 0
 2388 0068 BD46     	 mov sp,r7
 2389 006a 04B0     	 add sp,sp,#16
 2390              	 
 2391 006c 80BD     	 pop {r7,pc}
 2392              	.L165:
 2393 006e C046     	 .align 2
 2394              	.L164:
 2395 0070 00000000 	 .word E_EEPROM_XMC1_0
 2396              	 .cfi_endproc
 2397              	.LFE66:
 2399              	 .section .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery,"ax",%progbits
 2400              	 .align 2
 2401              	 .code 16
 2402              	 .thumb_func
 2404              	E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:
 2405              	.LFB67:
1381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : current_state   - Current GC state
1384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   NextState      - Next GC state
1385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   page_addr_select - Page address from which bank to be written
1386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Recovers from any copy process dirty state.
1390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( uint32_t current_state,
1392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                           uint32_t next_state,
1393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                           uint32_t page_addr_select)
1394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2406              	 .loc 2 1394 0
 2407              	 .cfi_startproc
 2408 0000 80B5     	 push {r7,lr}
 2409              	.LCFI68:
 2410              	 .cfi_def_cfa_offset 8
 2411              	 .cfi_offset 7,-8
 2412              	 .cfi_offset 14,-4
 2413 0002 86B0     	 sub sp,sp,#24
 2414              	.LCFI69:
 2415              	 .cfi_def_cfa_offset 32
 2416 0004 00AF     	 add r7,sp,#0
 2417              	.LCFI70:
 2418              	 .cfi_def_cfa_register 7
 2419 0006 F860     	 str r0,[r7,#12]
 2420 0008 B960     	 str r1,[r7,#8]
 2421 000a 7A60     	 str r2,[r7,#4]
1395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2422              	 .loc 2 1397 0
 2423 000c 1B4B     	 ldr r3,.L171
 2424 000e 5B68     	 ldr r3,[r3,#4]
 2425 0010 7B61     	 str r3,[r7,#20]
1398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update the Bank related global variables */
1400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2426              	 .loc 2 1400 0
 2427 0012 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Set the marker blocks with copy completed state */
1403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerPageBuffer(current_state);
 2428              	 .loc 2 1403 0
 2429 0016 FB68     	 ldr r3,[r7,#12]
 2430 0018 181C     	 mov r0,r3
 2431 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerPageBuffer
1404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
1406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 2432              	 .loc 2 1406 0
 2433 001e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Decide the bank from page_addr_select and Erase the marker page + Program with the current sta
1409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (page_addr_select == 1U)
 2434              	 .loc 2 1409 0
 2435 0022 7B68     	 ldr r3,[r7,#4]
 2436 0024 012B     	 cmp r3,#1
 2437 0026 08D1     	 bne .L167
1410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_dest_addr, (uint32_t*)(void*)data_ptr->page_write_b
 2438              	 .loc 2 1411 0
 2439 0028 7B69     	 ldr r3,[r7,#20]
 2440 002a DA6B     	 ldr r2,[r3,#60]
 2441 002c 7B69     	 ldr r3,[r7,#20]
 2442 002e 7033     	 add r3,r3,#112
 2443 0030 101C     	 mov r0,r2
 2444 0032 191C     	 mov r1,r3
 2445 0034 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
 2446 0038 07E0     	 b .L168
 2447              	.L167:
1412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_src_addr, (uint32_t*)(void*)data_ptr->page_write_bu
 2448              	 .loc 2 1415 0
 2449 003a 7B69     	 ldr r3,[r7,#20]
 2450 003c 1A6C     	 ldr r2,[r3,#64]
 2451 003e 7B69     	 ldr r3,[r7,#20]
 2452 0040 7033     	 add r3,r3,#112
 2453 0042 101C     	 mov r0,r2
 2454 0044 191C     	 mov r1,r3
 2455 0046 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
 2456              	.L168:
1416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 2457              	 .loc 2 1418 0
 2458 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 2459 004e 031C     	 mov r3,r0
 2460 0050 3B61     	 str r3,[r7,#16]
1419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2461              	 .loc 2 1420 0
 2462 0052 3B69     	 ldr r3,[r7,#16]
 2463 0054 002B     	 cmp r3,#0
 2464 0056 09D1     	 bne .L169
1421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the GC state as write next bank valid */
1423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = next_state ;
 2465              	 .loc 2 1423 0
 2466 0058 7A69     	 ldr r2,[r7,#20]
 2467 005a BA23     	 mov r3,#186
 2468 005c 5B00     	 lsl r3,r3,#1
 2469 005e B968     	 ldr r1,[r7,#8]
 2470 0060 D150     	 str r1,[r2,r3]
1424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the RAM Cache Table */
1425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCache();
 2471              	 .loc 2 1425 0
 2472 0062 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCache
1426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Start Garbage Collection */
1427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lGarbageCollection();
 2473              	 .loc 2 1427 0
 2474 0066 FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
 2475 006a 04E0     	 b .L166
 2476              	.L169:
1428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2477              	 .loc 2 1431 0
 2478 006c 7A69     	 ldr r2,[r7,#20]
 2479 006e BA23     	 mov r3,#186
 2480 0070 5B00     	 lsl r3,r3,#1
 2481 0072 0921     	 mov r1,#9
 2482 0074 D150     	 str r1,[r2,r3]
 2483              	.L166:
1432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2484              	 .loc 2 1433 0
 2485 0076 BD46     	 mov sp,r7
 2486 0078 06B0     	 add sp,sp,#24
 2487              	 
 2488 007a 80BD     	 pop {r7,pc}
 2489              	.L172:
 2490              	 .align 2
 2491              	.L171:
 2492 007c 00000000 	 .word E_EEPROM_XMC1_0
 2493              	 .cfi_endproc
 2494              	.LFE67:
 2496              	 .section .text.E_EEPROM_XMC1_lGarbageCollection,"ax",%progbits
 2497              	 .align 2
 2498              	 .code 16
 2499              	 .thumb_func
 2501              	E_EEPROM_XMC1_lGarbageCollection:
 2502              	.LFB68:
1434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function execute's the garbage collection state machine.
1441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lGarbageCollection(void)
1443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2503              	 .loc 2 1443 0
 2504              	 .cfi_startproc
 2505 0000 80B5     	 push {r7,lr}
 2506              	.LCFI71:
 2507              	 .cfi_def_cfa_offset 8
 2508              	 .cfi_offset 7,-8
 2509              	 .cfi_offset 14,-4
 2510 0002 82B0     	 sub sp,sp,#8
 2511              	.LCFI72:
 2512              	 .cfi_def_cfa_offset 16
 2513 0004 00AF     	 add r7,sp,#0
 2514              	.LCFI73:
 2515              	 .cfi_def_cfa_register 7
1444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2516              	 .loc 2 1445 0
 2517 0006 244B     	 ldr r3,.L186
 2518 0008 5B68     	 ldr r3,[r3,#4]
 2519 000a 7B60     	 str r3,[r7,#4]
 2520              	.L185:
1446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
1448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->gc_state)
 2521              	 .loc 2 1449 0
 2522 000c 7A68     	 ldr r2,[r7,#4]
 2523 000e BA23     	 mov r3,#186
 2524 0010 5B00     	 lsl r3,r3,#1
 2525 0012 D358     	 ldr r3,[r2,r3]
 2526 0014 082B     	 cmp r3,#8
 2527 0016 2CD8     	 bhi .L174
 2528 0018 9A00     	 lsl r2,r3,#2
 2529 001a 204B     	 ldr r3,.L186+4
 2530 001c D318     	 add r3,r2,r3
 2531 001e 1B68     	 ldr r3,[r3]
 2532 0020 9F46     	 mov pc,r3
 2533              	 .section .rodata.E_EEPROM_XMC1_lGarbageCollection,"a",%progbits
 2534              	 .align 2
 2535              	.L176:
 2536 0000 72000000 	 .word .L174
 2537 0004 22000000 	 .word .L175
 2538 0008 2E000000 	 .word .L177
 2539 000c 5E000000 	 .word .L178
 2540 0010 72000000 	 .word .L174
 2541 0014 28000000 	 .word .L179
 2542 0018 4E000000 	 .word .L180
 2543 001c 54000000 	 .word .L181
 2544 0020 68000000 	 .word .L182
 2545              	 .section .text.E_EEPROM_XMC1_lGarbageCollection
 2546              	.L175:
1450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_START:
1452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcStartCopy();
 2547              	 .loc 2 1452 0
 2548 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcStartCopy
1453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2549              	 .loc 2 1453 0
 2550 0026 27E0     	 b .L183
 2551              	.L179:
1454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_WRITE:
1456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcCopyWrite();
 2552              	 .loc 2 1456 0
 2553 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcCopyWrite
1457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2554              	 .loc 2 1457 0
 2555 002c 24E0     	 b .L183
 2556              	.L177:
1458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_READ_NXTBLOCK:
1460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         XMC_FLASH_ClearStatus();
 2557              	 .loc 2 1460 0
 2558 002e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr ,(uint32_t*)(void*)data_ptr->read_writ
 2559              	 .loc 2 1461 0
 2560 0032 7B68     	 ldr r3,[r7,#4]
 2561 0034 1A6C     	 ldr r2,[r3,#64]
 2562 0036 7B68     	 ldr r3,[r7,#4]
 2563 0038 5C33     	 add r3,r3,#92
 2564 003a 101C     	 mov r0,r2
 2565 003c 191C     	 mov r1,r3
 2566 003e FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
 2567              	 .loc 2 1462 0
 2568 0042 7A68     	 ldr r2,[r7,#4]
 2569 0044 BA23     	 mov r3,#186
 2570 0046 5B00     	 lsl r3,r3,#1
 2571 0048 0521     	 mov r1,#5
 2572 004a D150     	 str r1,[r2,r3]
1463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2573              	 .loc 2 1463 0
 2574 004c 14E0     	 b .L183
 2575              	.L180:
1464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_COPY_END:
1466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcEndOfCopy();
 2576              	 .loc 2 1466 0
 2577 004e FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcEndOfCopy
1467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2578              	 .loc 2 1467 0
 2579 0052 11E0     	 b .L183
 2580              	.L181:
1468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_NEXT_BANK_VALID:
1470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_GC_ERASE
 2581              	 .loc 2 1470 0
 2582 0054 0720     	 mov r0,#7
 2583 0056 0321     	 mov r1,#3
 2584 0058 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2585              	 .loc 2 1471 0
 2586 005c 0CE0     	 b .L183
 2587              	.L178:
1472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_ERASE_PREV_BANK:
1474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_GC_MARK
 2588              	 .loc 2 1474 0
 2589 005e 0320     	 mov r0,#3
 2590 0060 0821     	 mov r1,#8
 2591 0062 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2592              	 .loc 2 1475 0
 2593 0066 07E0     	 b .L183
 2594              	.L182:
1476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_GC_MARK_END_ERASE1:
1478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_GC_IDLE)
 2595              	 .loc 2 1478 0
 2596 0068 0820     	 mov r0,#8
 2597 006a 0A21     	 mov r1,#10
 2598 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcOtherStates
1479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         break;
 2599              	 .loc 2 1479 0
 2600 0070 02E0     	 b .L183
 2601              	.L174:
1480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:
1482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
 2602              	 .loc 2 1482 0
 2603 0072 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleGcRequested
1483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 2604              	 .loc 2 1483 0
 2605 0076 C046     	 mov r8,r8
 2606              	.L183:
1484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
 2607              	 .loc 2 1486 0
 2608 0078 7A68     	 ldr r2,[r7,#4]
 2609 007a BA23     	 mov r3,#186
 2610 007c 5B00     	 lsl r3,r3,#1
 2611 007e D358     	 ldr r3,[r2,r3]
1487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 2612              	 .loc 2 1487 0
 2613 0080 0A2B     	 cmp r3,#10
 2614 0082 05D0     	 beq .L173
 2615              	 .loc 2 1487 0 is_stmt 0 discriminator 1
 2616 0084 7A68     	 ldr r2,[r7,#4]
 2617 0086 BA23     	 mov r3,#186
 2618 0088 5B00     	 lsl r3,r3,#1
 2619 008a D358     	 ldr r3,[r2,r3]
1486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 2620              	 .loc 2 1486 0 is_stmt 1 discriminator 1
 2621 008c 092B     	 cmp r3,#9
 2622 008e BDD1     	 bne .L185
 2623              	.L173:
1488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2624              	 .loc 2 1488 0
 2625 0090 BD46     	 mov sp,r7
 2626 0092 02B0     	 add sp,sp,#8
 2627              	 
 2628 0094 80BD     	 pop {r7,pc}
 2629              	.L187:
 2630 0096 C046     	 .align 2
 2631              	.L186:
 2632 0098 00000000 	 .word E_EEPROM_XMC1_0
 2633 009c 00000000 	 .word .L176
 2634              	 .cfi_endproc
 2635              	.LFE68:
 2637              	 .section .text.E_EEPROM_XMC1_lHandleGcRequested,"ax",%progbits
 2638              	 .align 2
 2639              	 .code 16
 2640              	 .thumb_func
 2642              	E_EEPROM_XMC1_lHandleGcRequested:
 2643              	.LFB69:
1489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC REQUESTED state
1496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcRequested(void)
1498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2644              	 .loc 2 1498 0
 2645              	 .cfi_startproc
 2646 0000 80B5     	 push {r7,lr}
 2647              	.LCFI74:
 2648              	 .cfi_def_cfa_offset 8
 2649              	 .cfi_offset 7,-8
 2650              	 .cfi_offset 14,-4
 2651 0002 84B0     	 sub sp,sp,#16
 2652              	.LCFI75:
 2653              	 .cfi_def_cfa_offset 24
 2654 0004 00AF     	 add r7,sp,#0
 2655              	.LCFI76:
 2656              	 .cfi_def_cfa_register 7
1499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2657              	 .loc 2 1504 0
 2658 0006 1F4B     	 ldr r3,.L192
 2659 0008 5B68     	 ldr r3,[r3,#4]
 2660 000a 7B60     	 str r3,[r7,#4]
1505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 2661              	 .loc 2 1506 0
 2662 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write Copy start state to new bank  (2A) or (A2) */
1508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_BEGIN_OFFSET));
 2663              	 .loc 2 1508 0
 2664 0010 7B68     	 ldr r3,[r7,#4]
 2665 0012 DB6B     	 ldr r3,[r3,#60]
 2666 0014 1033     	 add r3,r3,#16
 2667 0016 181C     	 mov r0,r3
 2668 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2669 001c 031C     	 mov r3,r0
 2670 001e 3B60     	 str r3,[r7]
1509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2671              	 .loc 2 1509 0
 2672 0020 3B68     	 ldr r3,[r7]
 2673 0022 002B     	 cmp r3,#0
 2674 0024 25D1     	 bne .L189
1510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Initialize the copied status for all the logical blocks */
1512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     cache_ptr = data_ptr->block_info;
 2675              	 .loc 2 1512 0
 2676 0026 7B68     	 ldr r3,[r7,#4]
 2677 0028 BB60     	 str r3,[r7,#8]
1513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count = 0U;
 2678              	 .loc 2 1513 0
 2679 002a 0023     	 mov r3,#0
 2680 002c FB60     	 str r3,[r7,#12]
 2681              	.L190:
1514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     do
1515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->status.copied = 0U;
 2682              	 .loc 2 1516 0 discriminator 1
 2683 002e BB68     	 ldr r3,[r7,#8]
 2684 0030 1A79     	 ldrb r2,[r3,#4]
 2685 0032 0421     	 mov r1,#4
 2686 0034 8A43     	 bic r2,r1
 2687 0036 1A71     	 strb r2,[r3,#4]
1517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2688              	 .loc 2 1517 0 discriminator 1
 2689 0038 FB68     	 ldr r3,[r7,#12]
 2690 003a 0133     	 add r3,r3,#1
 2691 003c FB60     	 str r3,[r7,#12]
1518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr++;
 2692              	 .loc 2 1518 0 discriminator 1
 2693 003e BB68     	 ldr r3,[r7,#8]
 2694 0040 0833     	 add r3,r3,#8
 2695 0042 BB60     	 str r3,[r7,#8]
1519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     } while (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count);
 2696              	 .loc 2 1519 0 discriminator 1
 2697 0044 0F4B     	 ldr r3,.L192
 2698 0046 5B7A     	 ldrb r3,[r3,#9]
 2699 0048 1A1E     	 sub r2,r3,#0
 2700 004a FB68     	 ldr r3,[r7,#12]
 2701 004c 9A42     	 cmp r2,r3
 2702 004e EED1     	 bne .L190
1520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_log_block_count = 0U;
 2703              	 .loc 2 1521 0
 2704 0050 7A68     	 ldr r2,[r7,#4]
 2705 0052 BE23     	 mov r3,#190
 2706 0054 5B00     	 lsl r3,r3,#1
 2707 0056 0021     	 mov r1,#0
 2708 0058 D150     	 str r1,[r2,r3]
1522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
 2709              	 .loc 2 1522 0
 2710 005a 7A68     	 ldr r2,[r7,#4]
 2711 005c BA23     	 mov r3,#186
 2712 005e 5B00     	 lsl r3,r3,#1
 2713 0060 0121     	 mov r1,#1
 2714 0062 D150     	 str r1,[r2,r3]
1523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 2715              	 .loc 2 1523 0
 2716 0064 7B68     	 ldr r3,[r7,#4]
 2717 0066 DB6B     	 ldr r3,[r3,#60]
 2718 0068 5A1C     	 add r2,r3,#1
 2719 006a FF32     	 add r2,r2,#255
 2720 006c 7B68     	 ldr r3,[r7,#4]
 2721 006e DA63     	 str r2,[r3,#60]
 2722 0070 04E0     	 b .L188
 2723              	.L189:
1524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 2724              	 .loc 2 1527 0
 2725 0072 7A68     	 ldr r2,[r7,#4]
 2726 0074 BA23     	 mov r3,#186
 2727 0076 5B00     	 lsl r3,r3,#1
 2728 0078 0921     	 mov r1,#9
 2729 007a D150     	 str r1,[r2,r3]
 2730              	.L188:
1528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2731              	 .loc 2 1529 0
 2732 007c BD46     	 mov sp,r7
 2733 007e 04B0     	 add sp,sp,#16
 2734              	 
 2735 0080 80BD     	 pop {r7,pc}
 2736              	.L193:
 2737 0082 C046     	 .align 2
 2738              	.L192:
 2739 0084 00000000 	 .word E_EEPROM_XMC1_0
 2740              	 .cfi_endproc
 2741              	.LFE69:
 2743              	 .section .text.E_EEPROM_XMC1_lHandleGcStartCopy,"ax",%progbits
 2744              	 .align 2
 2745              	 .code 16
 2746              	 .thumb_func
 2748              	E_EEPROM_XMC1_lHandleGcStartCopy:
 2749              	.LFB70:
1530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC START COPY state
1536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcStartCopy(void)
1538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2750              	 .loc 2 1538 0
 2751              	 .cfi_startproc
 2752 0000 80B5     	 push {r7,lr}
 2753              	.LCFI77:
 2754              	 .cfi_def_cfa_offset 8
 2755              	 .cfi_offset 7,-8
 2756              	 .cfi_offset 14,-4
 2757 0002 84B0     	 sub sp,sp,#16
 2758              	.LCFI78:
 2759              	 .cfi_def_cfa_offset 24
 2760 0004 00AF     	 add r7,sp,#0
 2761              	.LCFI79:
 2762              	 .cfi_def_cfa_register 7
1539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_flag;
1540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2763              	 .loc 2 1544 0
 2764 0006 324B     	 ldr r3,.L201
 2765 0008 5B68     	 ldr r3,[r3,#4]
 2766 000a 3B60     	 str r3,[r7]
1545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_flag = 0U;
 2767              	 .loc 2 1546 0
 2768 000c 0023     	 mov r3,#0
 2769 000e FB60     	 str r3,[r7,#12]
1547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* initialize the copied status for all the logical blocks */
1548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = data_ptr->gc_log_block_count;
 2770              	 .loc 2 1548 0
 2771 0010 3A68     	 ldr r2,[r7]
 2772 0012 BE23     	 mov r3,#190
 2773 0014 5B00     	 lsl r3,r3,#1
 2774 0016 D358     	 ldr r3,[r2,r3]
 2775 0018 BB60     	 str r3,[r7,#8]
1549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info + block_count;
 2776              	 .loc 2 1549 0
 2777 001a BB68     	 ldr r3,[r7,#8]
 2778 001c DB00     	 lsl r3,r3,#3
 2779 001e 3A68     	 ldr r2,[r7]
 2780 0020 D318     	 add r3,r2,r3
 2781 0022 7B60     	 str r3,[r7,#4]
1550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
1551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Check all available blocks in cache table for Copy process. Condition breaks on either the cur
1552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * consistent or all blocks check for consistency is finished
1553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
 2782              	 .loc 2 1554 0
 2783 0024 1AE0     	 b .L195
 2784              	.L198:
1555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If block is consistent set state flag for copy enable*/
1557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (((cache_ptr->address != 0U) && (cache_ptr->status.consistent == 1U)) && (cache_ptr->status.
 2785              	 .loc 2 1557 0
 2786 0026 7B68     	 ldr r3,[r7,#4]
 2787 0028 1B68     	 ldr r3,[r3]
 2788 002a 002B     	 cmp r3,#0
 2789 002c 10D0     	 beq .L196
 2790              	 .loc 2 1557 0 is_stmt 0 discriminator 1
 2791 002e 7B68     	 ldr r3,[r7,#4]
 2792 0030 1B79     	 ldrb r3,[r3,#4]
 2793 0032 0222     	 mov r2,#2
 2794 0034 1340     	 and r3,r2
 2795 0036 DBB2     	 uxtb r3,r3
 2796 0038 002B     	 cmp r3,#0
 2797 003a 09D0     	 beq .L196
 2798              	 .loc 2 1557 0 discriminator 2
 2799 003c 7B68     	 ldr r3,[r7,#4]
 2800 003e 1B79     	 ldrb r3,[r3,#4]
 2801 0040 0422     	 mov r2,#4
 2802 0042 1340     	 and r3,r2
 2803 0044 DBB2     	 uxtb r3,r3
 2804 0046 002B     	 cmp r3,#0
 2805 0048 02D1     	 bne .L196
1558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       state_flag = 1U;
 2806              	 .loc 2 1559 0 is_stmt 1
 2807 004a 0123     	 mov r3,#1
 2808 004c FB60     	 str r3,[r7,#12]
 2809 004e 05E0     	 b .L195
 2810              	.L196:
1560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If block is inconsistent ignore the block from copy and try next block*/
1562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2811              	 .loc 2 1564 0
 2812 0050 BB68     	 ldr r3,[r7,#8]
 2813 0052 0133     	 add r3,r3,#1
 2814 0054 BB60     	 str r3,[r7,#8]
1565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr++;
 2815              	 .loc 2 1565 0
 2816 0056 7B68     	 ldr r3,[r7,#4]
 2817 0058 0833     	 add r3,r3,#8
 2818 005a 7B60     	 str r3,[r7,#4]
 2819              	.L195:
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 2820              	 .loc 2 1554 0
 2821 005c FB68     	 ldr r3,[r7,#12]
 2822 005e 002B     	 cmp r3,#0
 2823 0060 05D1     	 bne .L197
1554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 2824              	 .loc 2 1554 0 is_stmt 0 discriminator 1
 2825 0062 1B4B     	 ldr r3,.L201
 2826 0064 5B7A     	 ldrb r3,[r3,#9]
 2827 0066 1A1E     	 sub r2,r3,#0
 2828 0068 BB68     	 ldr r3,[r7,#8]
 2829 006a 9A42     	 cmp r2,r3
 2830 006c DBD1     	 bne .L198
 2831              	.L197:
1566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } /* end of while */
1568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If block is consistent */
1570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (state_flag == 1U)
 2832              	 .loc 2 1570 0 is_stmt 1
 2833 006e FB68     	 ldr r3,[r7,#12]
 2834 0070 012B     	 cmp r3,#1
 2835 0072 16D1     	 bne .L199
1571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = cache_ptr->address;
 2836              	 .loc 2 1572 0
 2837 0074 7B68     	 ldr r3,[r7,#4]
 2838 0076 1A68     	 ldr r2,[r3]
 2839 0078 3B68     	 ldr r3,[r7]
 2840 007a 1A64     	 str r2,[r3,#64]
1573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_block_counter = 0U;
 2841              	 .loc 2 1573 0
 2842 007c 3B68     	 ldr r3,[r7]
 2843 007e 0022     	 mov r2,#0
 2844 0080 5A65     	 str r2,[r3,#84]
1574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
1576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 2845              	 .loc 2 1576 0
 2846 0082 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr,(uint32_t*)(void*)data_ptr->read_write_buf
 2847              	 .loc 2 1578 0
 2848 0086 3B68     	 ldr r3,[r7]
 2849 0088 1A6C     	 ldr r2,[r3,#64]
 2850 008a 3B68     	 ldr r3,[r7]
 2851 008c 5C33     	 add r3,r3,#92
 2852 008e 101C     	 mov r0,r2
 2853 0090 191C     	 mov r1,r3
 2854 0092 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Return value above is ignored as parameters passed from FEE are correct */
1581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
 2855              	 .loc 2 1581 0
 2856 0096 3A68     	 ldr r2,[r7]
 2857 0098 BA23     	 mov r3,#186
 2858 009a 5B00     	 lsl r3,r3,#1
 2859 009c 0521     	 mov r1,#5
 2860 009e D150     	 str r1,[r2,r3]
 2861 00a0 0EE0     	 b .L200
 2862              	.L199:
1582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Finished copying all the logical blocks */
1584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the next free block pointer */
1587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->next_free_block_addr = data_ptr->gc_dest_addr;
 2863              	 .loc 2 1587 0
 2864 00a2 3B68     	 ldr r3,[r7]
 2865 00a4 DA6B     	 ldr r2,[r3,#60]
 2866 00a6 3B68     	 ldr r3,[r7]
 2867 00a8 DA64     	 str r2,[r3,#76]
1588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = data_ptr->curr_bank_src_addr;
 2868              	 .loc 2 1588 0
 2869 00aa 3B68     	 ldr r3,[r7]
 2870 00ac 1A6D     	 ldr r2,[r3,#80]
 2871 00ae 3B68     	 ldr r3,[r7]
 2872 00b0 1A64     	 str r2,[r3,#64]
1589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCurrBankInfo();
 2873              	 .loc 2 1589 0
 2874 00b2 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_END;
 2875              	 .loc 2 1590 0
 2876 00b6 3A68     	 ldr r2,[r7]
 2877 00b8 BA23     	 mov r3,#186
 2878 00ba 5B00     	 lsl r3,r3,#1
 2879 00bc 0621     	 mov r1,#6
 2880 00be D150     	 str r1,[r2,r3]
 2881              	.L200:
1591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_log_block_count = block_count;
 2882              	 .loc 2 1592 0
 2883 00c0 3A68     	 ldr r2,[r7]
 2884 00c2 BE23     	 mov r3,#190
 2885 00c4 5B00     	 lsl r3,r3,#1
 2886 00c6 B968     	 ldr r1,[r7,#8]
 2887 00c8 D150     	 str r1,[r2,r3]
1593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 2888              	 .loc 2 1593 0
 2889 00ca BD46     	 mov sp,r7
 2890 00cc 04B0     	 add sp,sp,#16
 2891              	 
 2892 00ce 80BD     	 pop {r7,pc}
 2893              	.L202:
 2894              	 .align 2
 2895              	.L201:
 2896 00d0 00000000 	 .word E_EEPROM_XMC1_0
 2897              	 .cfi_endproc
 2898              	.LFE70:
 2900              	 .section .text.E_EEPROM_XMC1_lHandleGcCopyWrite,"ax",%progbits
 2901              	 .align 2
 2902              	 .code 16
 2903              	 .thumb_func
 2905              	E_EEPROM_XMC1_lHandleGcCopyWrite:
 2906              	.LFB71:
1594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC START COPY WRITE state.
1601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcCopyWrite(void)
1603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 2907              	 .loc 2 1603 0
 2908              	 .cfi_startproc
 2909 0000 80B5     	 push {r7,lr}
 2910              	.LCFI80:
 2911              	 .cfi_def_cfa_offset 8
 2912              	 .cfi_offset 7,-8
 2913              	 .cfi_offset 14,-4
 2914 0002 86B0     	 sub sp,sp,#24
 2915              	.LCFI81:
 2916              	 .cfi_def_cfa_offset 32
 2917 0004 00AF     	 add r7,sp,#0
 2918              	.LCFI82:
 2919              	 .cfi_def_cfa_register 7
1604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t size;
1605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
1607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_physical_blocks;
1608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 2920              	 .loc 2 1611 0
 2921 0006 384B     	 ldr r3,.L209
 2922 0008 5B68     	 ldr r3,[r3,#4]
 2923 000a 3B61     	 str r3,[r7,#16]
1612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* initialize the copied status for all the logical blocks */
1614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = data_ptr->gc_log_block_count;
 2924              	 .loc 2 1614 0
 2925 000c 3A69     	 ldr r2,[r7,#16]
 2926 000e BE23     	 mov r3,#190
 2927 0010 5B00     	 lsl r3,r3,#1
 2928 0012 D358     	 ldr r3,[r2,r3]
 2929 0014 7B61     	 str r3,[r7,#20]
1615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info + block_count;
 2930              	 .loc 2 1615 0
 2931 0016 7B69     	 ldr r3,[r7,#20]
 2932 0018 DB00     	 lsl r3,r3,#3
 2933 001a 3A69     	 ldr r2,[r7,#16]
 2934 001c D318     	 add r3,r2,r3
 2935 001e FB60     	 str r3,[r7,#12]
1616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr));
 2936              	 .loc 2 1617 0
 2937 0020 3B69     	 ldr r3,[r7,#16]
 2938 0022 DB6B     	 ldr r3,[r3,#60]
 2939 0024 181C     	 mov r0,r3
 2940 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 2941 002a 031C     	 mov r3,r0
 2942 002c BB60     	 str r3,[r7,#8]
1618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 2943              	 .loc 2 1618 0
 2944 002e BB68     	 ldr r3,[r7,#8]
 2945 0030 002B     	 cmp r3,#0
 2946 0032 4BD1     	 bne .L204
1619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {      
1620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     (data_ptr->gc_block_counter)++;
 2947              	 .loc 2 1620 0
 2948 0034 3B69     	 ldr r3,[r7,#16]
 2949 0036 5B6D     	 ldr r3,[r3,#84]
 2950 0038 5A1C     	 add r2,r3,#1
 2951 003a 3B69     	 ldr r3,[r7,#16]
 2952 003c 5A65     	 str r2,[r3,#84]
1621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     size = (E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_count].size);
 2953              	 .loc 2 1621 0
 2954 003e 2A4B     	 ldr r3,.L209
 2955 0040 1A68     	 ldr r2,[r3]
 2956 0042 7B69     	 ldr r3,[r7,#20]
 2957 0044 DB00     	 lsl r3,r3,#3
 2958 0046 D318     	 add r3,r2,r3
 2959 0048 5B68     	 ldr r3,[r3,#4]
 2960 004a 7B60     	 str r3,[r7,#4]
1622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     flash_physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
 2961              	 .loc 2 1622 0
 2962 004c 7B68     	 ldr r3,[r7,#4]
 2963 004e 181C     	 mov r0,r3
 2964 0050 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 2965 0054 031C     	 mov r3,r0
 2966 0056 3B60     	 str r3,[r7]
1623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* If all the blocks of the logical block are copied */
1624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ((data_ptr->gc_block_counter == flash_physical_blocks) || (cache_ptr->status.valid == 0U))
 2967              	 .loc 2 1624 0
 2968 0058 3B69     	 ldr r3,[r7,#16]
 2969 005a 5A6D     	 ldr r2,[r3,#84]
 2970 005c 3B68     	 ldr r3,[r7]
 2971 005e 9A42     	 cmp r2,r3
 2972 0060 06D0     	 beq .L205
 2973              	 .loc 2 1624 0 is_stmt 0 discriminator 1
 2974 0062 FB68     	 ldr r3,[r7,#12]
 2975 0064 1B79     	 ldrb r3,[r3,#4]
 2976 0066 0122     	 mov r2,#1
 2977 0068 1340     	 and r3,r2
 2978 006a DBB2     	 uxtb r3,r3
 2979 006c 002B     	 cmp r3,#0
 2980 006e 1BD1     	 bne .L206
 2981              	.L205:
1625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->status.copied = 1U;
 2982              	 .loc 2 1626 0 is_stmt 1
 2983 0070 FB68     	 ldr r3,[r7,#12]
 2984 0072 1A79     	 ldrb r2,[r3,#4]
 2985 0074 0421     	 mov r1,#4
 2986 0076 0A43     	 orr r2,r1
 2987 0078 1A71     	 strb r2,[r3,#4]
1627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;
 2988              	 .loc 2 1627 0
 2989 007a 7B69     	 ldr r3,[r7,#20]
 2990 007c 0133     	 add r3,r3,#1
 2991 007e 7B61     	 str r3,[r7,#20]
1628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
 2992              	 .loc 2 1628 0
 2993 0080 3A69     	 ldr r2,[r7,#16]
 2994 0082 BA23     	 mov r3,#186
 2995 0084 5B00     	 lsl r3,r3,#1
 2996 0086 0121     	 mov r1,#1
 2997 0088 D150     	 str r1,[r2,r3]
1629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_dest_addr += E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 2998              	 .loc 2 1629 0
 2999 008a 3B69     	 ldr r3,[r7,#16]
 3000 008c DB6B     	 ldr r3,[r3,#60]
 3001 008e 1033     	 add r3,r3,#16
 3002 0090 1A1C     	 mov r2,r3
 3003 0092 3B69     	 ldr r3,[r7,#16]
 3004 0094 DA63     	 str r2,[r3,#60]
1630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       cache_ptr->address = data_ptr->gc_dest_addr - (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * data_ptr->gc_
 3005              	 .loc 2 1630 0
 3006 0096 3B69     	 ldr r3,[r7,#16]
 3007 0098 DA6B     	 ldr r2,[r3,#60]
 3008 009a 3B69     	 ldr r3,[r7,#16]
 3009 009c 5B6D     	 ldr r3,[r3,#84]
 3010 009e 1B01     	 lsl r3,r3,#4
 3011 00a0 D21A     	 sub r2,r2,r3
 3012 00a2 FB68     	 ldr r3,[r7,#12]
 3013 00a4 1A60     	 str r2,[r3]
 3014 00a6 16E0     	 b .L208
 3015              	.L206:
1631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_src_addr = data_ptr->gc_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3016              	 .loc 2 1634 0
 3017 00a8 3B69     	 ldr r3,[r7,#16]
 3018 00aa 1B6C     	 ldr r3,[r3,#64]
 3019 00ac 1033     	 add r3,r3,#16
 3020 00ae 1A1C     	 mov r2,r3
 3021 00b0 3B69     	 ldr r3,[r7,#16]
 3022 00b2 1A64     	 str r2,[r3,#64]
1635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3023              	 .loc 2 1635 0
 3024 00b4 3B69     	 ldr r3,[r7,#16]
 3025 00b6 DB6B     	 ldr r3,[r3,#60]
 3026 00b8 1033     	 add r3,r3,#16
 3027 00ba 1A1C     	 mov r2,r3
 3028 00bc 3B69     	 ldr r3,[r7,#16]
 3029 00be DA63     	 str r2,[r3,#60]
1636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_READ_NXTBLOCK;
 3030              	 .loc 2 1636 0
 3031 00c0 3A69     	 ldr r2,[r7,#16]
 3032 00c2 BA23     	 mov r3,#186
 3033 00c4 5B00     	 lsl r3,r3,#1
 3034 00c6 0221     	 mov r1,#2
 3035 00c8 D150     	 str r1,[r2,r3]
 3036 00ca 04E0     	 b .L208
 3037              	.L204:
1637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3038              	 .loc 2 1641 0
 3039 00cc 3A69     	 ldr r2,[r7,#16]
 3040 00ce BA23     	 mov r3,#186
 3041 00d0 5B00     	 lsl r3,r3,#1
 3042 00d2 0921     	 mov r1,#9
 3043 00d4 D150     	 str r1,[r2,r3]
 3044              	.L208:
1642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->gc_log_block_count = block_count;
 3045              	 .loc 2 1643 0
 3046 00d6 3A69     	 ldr r2,[r7,#16]
 3047 00d8 BE23     	 mov r3,#190
 3048 00da 5B00     	 lsl r3,r3,#1
 3049 00dc 7969     	 ldr r1,[r7,#20]
 3050 00de D150     	 str r1,[r2,r3]
1644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3051              	 .loc 2 1644 0
 3052 00e0 BD46     	 mov sp,r7
 3053 00e2 06B0     	 add sp,sp,#24
 3054              	 
 3055 00e4 80BD     	 pop {r7,pc}
 3056              	.L210:
 3057 00e6 C046     	 .align 2
 3058              	.L209:
 3059 00e8 00000000 	 .word E_EEPROM_XMC1_0
 3060              	 .cfi_endproc
 3061              	.LFE71:
 3063              	 .section .text.E_EEPROM_XMC1_lHandleGcEndOfCopy,"ax",%progbits
 3064              	 .align 2
 3065              	 .code 16
 3066              	 .thumb_func
 3068              	E_EEPROM_XMC1_lHandleGcEndOfCopy:
 3069              	.LFB72:
1645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC END OF COPY state
1652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void)
1654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3070              	 .loc 2 1654 0
 3071              	 .cfi_startproc
 3072 0000 80B5     	 push {r7,lr}
 3073              	.LCFI83:
 3074              	 .cfi_def_cfa_offset 8
 3075              	 .cfi_offset 7,-8
 3076              	 .cfi_offset 14,-4
 3077 0002 82B0     	 sub sp,sp,#8
 3078              	.LCFI84:
 3079              	 .cfi_def_cfa_offset 16
 3080 0004 00AF     	 add r7,sp,#0
 3081              	.LCFI85:
 3082              	 .cfi_def_cfa_register 7
1655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3083              	 .loc 2 1657 0
 3084 0006 134B     	 ldr r3,.L214
 3085 0008 5B68     	 ldr r3,[r3,#4]
 3086 000a 7B60     	 str r3,[r7,#4]
1658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3087              	 .loc 2 1659 0
 3088 000c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write Copy completed state to old bank (0A) or (A0) */
1661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_END_OF_COPY_OFFS
 3089              	 .loc 2 1661 0
 3090 0010 7B68     	 ldr r3,[r7,#4]
 3091 0012 1B6C     	 ldr r3,[r3,#64]
 3092 0014 2033     	 add r3,r3,#32
 3093 0016 181C     	 mov r0,r3
 3094 0018 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3095 001c 031C     	 mov r3,r0
 3096 001e 3B60     	 str r3,[r7]
1662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 3097              	 .loc 2 1662 0
 3098 0020 3B68     	 ldr r3,[r7]
 3099 0022 002B     	 cmp r3,#0
 3100 0024 0DD1     	 bne .L212
1663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the current bank to next bank */
1665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->current_bank = data_ptr->current_bank ^ 1U;
 3101              	 .loc 2 1665 0
 3102 0026 7B68     	 ldr r3,[r7,#4]
 3103 0028 9B6B     	 ldr r3,[r3,#56]
 3104 002a 0122     	 mov r2,#1
 3105 002c 5A40     	 eor r2,r3
 3106 002e 7B68     	 ldr r3,[r7,#4]
 3107 0030 9A63     	 str r2,[r3,#56]
1666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the Bank related global variables */
1668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lUpdateCurrBankInfo();
 3108              	 .loc 2 1668 0
 3109 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCurrBankInfo
1669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_NEXT_BANK_VALID;
 3110              	 .loc 2 1669 0
 3111 0036 7A68     	 ldr r2,[r7,#4]
 3112 0038 BA23     	 mov r3,#186
 3113 003a 5B00     	 lsl r3,r3,#1
 3114 003c 0721     	 mov r1,#7
 3115 003e D150     	 str r1,[r2,r3]
 3116 0040 04E0     	 b .L211
 3117              	.L212:
1670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3118              	 .loc 2 1673 0
 3119 0042 7A68     	 ldr r2,[r7,#4]
 3120 0044 BA23     	 mov r3,#186
 3121 0046 5B00     	 lsl r3,r3,#1
 3122 0048 0921     	 mov r1,#9
 3123 004a D150     	 str r1,[r2,r3]
 3124              	.L211:
1674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3125              	 .loc 2 1675 0
 3126 004c BD46     	 mov sp,r7
 3127 004e 02B0     	 add sp,sp,#8
 3128              	 
 3129 0050 80BD     	 pop {r7,pc}
 3130              	.L215:
 3131 0052 C046     	 .align 2
 3132              	.L214:
 3133 0054 00000000 	 .word E_EEPROM_XMC1_0
 3134              	 .cfi_endproc
 3135              	.LFE72:
 3137              	 .section .text.E_EEPROM_XMC1_lHandleGcOtherStates,"ax",%progbits
 3138              	 .align 2
 3139              	 .code 16
 3140              	 .thumb_func
 3142              	E_EEPROM_XMC1_lHandleGcOtherStates:
 3143              	.LFB73:
1676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : current_state - current state machine status
1679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   next_state - next state of the state machine
1680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function handles Garbage Collection GC NEXT BANk VALID, ERASE PREV BANK a
1684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   state
1685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** */
1686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state)
1687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3144              	 .loc 2 1687 0
 3145              	 .cfi_startproc
 3146 0000 80B5     	 push {r7,lr}
 3147              	.LCFI86:
 3148              	 .cfi_def_cfa_offset 8
 3149              	 .cfi_offset 7,-8
 3150              	 .cfi_offset 14,-4
 3151 0002 84B0     	 sub sp,sp,#16
 3152              	.LCFI87:
 3153              	 .cfi_def_cfa_offset 24
 3154 0004 00AF     	 add r7,sp,#0
 3155              	.LCFI88:
 3156              	 .cfi_def_cfa_register 7
 3157 0006 7860     	 str r0,[r7,#4]
 3158 0008 3960     	 str r1,[r7]
1688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  status;
1689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3159              	 .loc 2 1690 0
 3160 000a 1B4B     	 ldr r3,.L222
 3161 000c 5B68     	 ldr r3,[r3,#4]
 3162 000e BB60     	 str r3,[r7,#8]
1691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (current_state == E_EEPROM_XMC1_GC_NEXT_BANK_VALID)
 3163              	 .loc 2 1692 0
 3164 0010 7B68     	 ldr r3,[r7,#4]
 3165 0012 072B     	 cmp r3,#7
 3166 0014 09D1     	 bne .L217
1693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3167              	 .loc 2 1694 0
 3168 0016 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write next bank to valid state  (02) or (20) */
1696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_NEXT_VALID_OFF
 3169              	 .loc 2 1696 0
 3170 001a BB68     	 ldr r3,[r7,#8]
 3171 001c 1B6C     	 ldr r3,[r3,#64]
 3172 001e 181C     	 mov r0,r3
 3173 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3174 0024 031C     	 mov r3,r0
 3175 0026 FB60     	 str r3,[r7,#12]
 3176 0028 14E0     	 b .L218
 3177              	.L217:
1697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else if (current_state == E_EEPROM_XMC1_GC_ERASE_PREV_BANK)
 3178              	 .loc 2 1698 0
 3179 002a 7B68     	 ldr r3,[r7,#4]
 3180 002c 032B     	 cmp r3,#3
 3181 002e 07D1     	 bne .L219
1699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Erase the previous redundant bank (F2) or (2F) */
1701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 3182              	 .loc 2 1701 0
 3183 0030 BB68     	 ldr r3,[r7,#8]
 3184 0032 9B6C     	 ldr r3,[r3,#72]
 3185 0034 181C     	 mov r0,r3
 3186 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3187 003a 031C     	 mov r3,r0
 3188 003c FB60     	 str r3,[r7,#12]
 3189 003e 09E0     	 b .L218
 3190              	.L219:
1702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3191              	 .loc 2 1705 0
 3192 0040 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Write formatted state to the old erased bank (E2) or (2E) */
1707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_END_ERASE_OFF
 3193              	 .loc 2 1707 0
 3194 0044 BB68     	 ldr r3,[r7,#8]
 3195 0046 DB6B     	 ldr r3,[r3,#60]
 3196 0048 3033     	 add r3,r3,#48
 3197 004a 181C     	 mov r0,r3
 3198 004c FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3199 0050 031C     	 mov r3,r0
 3200 0052 FB60     	 str r3,[r7,#12]
 3201              	.L218:
1708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 3202              	 .loc 2 1710 0
 3203 0054 FB68     	 ldr r3,[r7,#12]
 3204 0056 002B     	 cmp r3,#0
 3205 0058 05D1     	 bne .L220
1711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = next_state;
 3206              	 .loc 2 1712 0
 3207 005a BA68     	 ldr r2,[r7,#8]
 3208 005c BA23     	 mov r3,#186
 3209 005e 5B00     	 lsl r3,r3,#1
 3210 0060 3968     	 ldr r1,[r7]
 3211 0062 D150     	 str r1,[r2,r3]
 3212 0064 04E0     	 b .L216
 3213              	.L220:
1713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
 3214              	 .loc 2 1716 0
 3215 0066 BA68     	 ldr r2,[r7,#8]
 3216 0068 BA23     	 mov r3,#186
 3217 006a 5B00     	 lsl r3,r3,#1
 3218 006c 0921     	 mov r1,#9
 3219 006e D150     	 str r1,[r2,r3]
 3220              	.L216:
1717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3221              	 .loc 2 1718 0
 3222 0070 BD46     	 mov sp,r7
 3223 0072 04B0     	 add sp,sp,#16
 3224              	 
 3225 0074 80BD     	 pop {r7,pc}
 3226              	.L223:
 3227 0076 C046     	 .align 2
 3228              	.L222:
 3229 0078 00000000 	 .word E_EEPROM_XMC1_0
 3230              	 .cfi_endproc
 3231              	.LFE73:
 3233              	 .section .text.E_EEPROM_XMC1_lPrepareDFlash,"ax",%progbits
 3234              	 .align 2
 3235              	 .code 16
 3236              	 .thumb_func
 3238              	E_EEPROM_XMC1_lPrepareDFlash:
 3239              	.LFB74:
1719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
1724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function executes the prepare data flash to bring the state machine to def
1726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPrepareDFlash(void)
1728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3240              	 .loc 2 1728 0
 3241              	 .cfi_startproc
 3242 0000 80B5     	 push {r7,lr}
 3243              	.LCFI89:
 3244              	 .cfi_def_cfa_offset 8
 3245              	 .cfi_offset 7,-8
 3246              	 .cfi_offset 14,-4
 3247 0002 82B0     	 sub sp,sp,#8
 3248              	.LCFI90:
 3249              	 .cfi_def_cfa_offset 16
 3250 0004 00AF     	 add r7,sp,#0
 3251              	.LCFI91:
 3252              	 .cfi_def_cfa_register 7
1729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3253              	 .loc 2 1731 0
 3254 0006 3B4B     	 ldr r3,.L241
 3255 0008 5B68     	 ldr r3,[r3,#4]
 3256 000a 7B60     	 str r3,[r7,#4]
 3257              	.L238:
1732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
1734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->gc_state)
 3258              	 .loc 2 1735 0
 3259 000c 7A68     	 ldr r2,[r7,#4]
 3260 000e BA23     	 mov r3,#186
 3261 0010 5B00     	 lsl r3,r3,#1
 3262 0012 D358     	 ldr r3,[r2,r3]
 3263 0014 042B     	 cmp r3,#4
 3264 0016 02D0     	 beq .L226
 3265 0018 052B     	 cmp r3,#5
 3266 001a 1FD0     	 beq .L227
 3267 001c 35E0     	 b .L239
 3268              	.L226:
1736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_PREPFLASH_2F:
1738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Set the marker blocks with copy completed state */
1740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lSetMarkerPageBuffer(E_EEPROM_XMC1_VALID_STATE);
 3269              	 .loc 2 1740 0
 3270 001e 2020     	 mov r0,#32
 3271 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerPageBuffer
1741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Clear all error status flags before flash operation*/
1743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       XMC_FLASH_ClearStatus();
 3272              	 .loc 2 1743 0
 3273 0024 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lWriteSinglePage(E_EEPROM_XMC1_FLASH_BANK0_BASE , (uint32_t*)(void*)data_ptr->p
 3274              	 .loc 2 1745 0
 3275 0028 7B68     	 ldr r3,[r7,#4]
 3276 002a 7033     	 add r3,r3,#112
 3277 002c 324A     	 ldr r2,.L241+4
 3278 002e 101C     	 mov r0,r2
 3279 0030 191C     	 mov r1,r3
 3280 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSinglePage
1746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lGetFlashStatus();
 3281              	 .loc 2 1747 0
 3282 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3283 003a 031C     	 mov r3,r0
 3284 003c 3B60     	 str r3,[r7]
1748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3285              	 .loc 2 1749 0
 3286 003e 3B68     	 ldr r3,[r7]
 3287 0040 002B     	 cmp r3,#0
 3288 0042 05D1     	 bne .L228
1750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
 3289              	 .loc 2 1751 0
 3290 0044 7A68     	 ldr r2,[r7,#4]
 3291 0046 BA23     	 mov r3,#186
 3292 0048 5B00     	 lsl r3,r3,#1
 3293 004a 0521     	 mov r1,#5
 3294 004c D150     	 str r1,[r2,r3]
1752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3295              	 .loc 2 1757 0
 3296 004e 42E0     	 b .L230
 3297              	.L228:
1755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3298              	 .loc 2 1755 0
 3299 0050 7A68     	 ldr r2,[r7,#4]
 3300 0052 BA23     	 mov r3,#186
 3301 0054 5B00     	 lsl r3,r3,#1
 3302 0056 0921     	 mov r1,#9
 3303 0058 D150     	 str r1,[r2,r3]
 3304              	 .loc 2 1757 0
 3305 005a 3CE0     	 b .L230
 3306              	.L227:
1758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_PREPFLASH_2E:
1760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
1761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lSetMarkerBlockBuffer();
 3307              	 .loc 2 1761 0
 3308 005c FFF7FEFF 	 bl E_EEPROM_XMC1_lSetMarkerBlockBuffer
1762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Write Bank1 to formatted state  (2E) */
1764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lGCWrite((uint32_t)E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_END_
 3309              	 .loc 2 1764 0
 3310 0060 264B     	 ldr r3,.L241+8
 3311 0062 181C     	 mov r0,r3
 3312 0064 FFF7FEFF 	 bl E_EEPROM_XMC1_lGCWrite
 3313 0068 031C     	 mov r3,r0
 3314 006a 3B60     	 str r3,[r7]
1765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3315              	 .loc 2 1766 0
 3316 006c 3B68     	 ldr r3,[r7]
 3317 006e 002B     	 cmp r3,#0
 3318 0070 05D1     	 bne .L231
1767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
 3319              	 .loc 2 1768 0
 3320 0072 7A68     	 ldr r2,[r7,#4]
 3321 0074 BA23     	 mov r3,#186
 3322 0076 5B00     	 lsl r3,r3,#1
 3323 0078 0A21     	 mov r1,#10
 3324 007a D150     	 str r1,[r2,r3]
1769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3325              	 .loc 2 1774 0
 3326 007c 2BE0     	 b .L230
 3327              	.L231:
1772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3328              	 .loc 2 1772 0
 3329 007e 7A68     	 ldr r2,[r7,#4]
 3330 0080 BA23     	 mov r3,#186
 3331 0082 5B00     	 lsl r3,r3,#1
 3332 0084 0921     	 mov r1,#9
 3333 0086 D150     	 str r1,[r2,r3]
 3334              	 .loc 2 1774 0
 3335 0088 25E0     	 b .L230
 3336              	.L239:
1775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:  /* gc_state : E_EEPROM_XMC1_PREPFLASH_FF*/
1777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Erase the previous redundant bank */
1779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lEraseBank(data_ptr->curr_bank_end_addr);
 3337              	 .loc 2 1779 0
 3338 008a 7B68     	 ldr r3,[r7,#4]
 3339 008c 5B6C     	 ldr r3,[r3,#68]
 3340 008e 181C     	 mov r0,r3
 3341 0090 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3342 0094 031C     	 mov r3,r0
 3343 0096 3B60     	 str r3,[r7]
1780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
1781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Erase the previous redundant bank */
1782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == 0U)
 3344              	 .loc 2 1782 0
 3345 0098 3B68     	 ldr r3,[r7]
 3346 009a 002B     	 cmp r3,#0
 3347 009c 15D1     	 bne .L233
1783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
 3348              	 .loc 2 1784 0
 3349 009e 7B68     	 ldr r3,[r7,#4]
 3350 00a0 9B6C     	 ldr r3,[r3,#72]
 3351 00a2 181C     	 mov r0,r3
 3352 00a4 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseBank
 3353 00a8 031C     	 mov r3,r0
 3354 00aa 3B60     	 str r3,[r7]
1785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
1786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (status == 0U)
 3355              	 .loc 2 1786 0
 3356 00ac 3B68     	 ldr r3,[r7]
 3357 00ae 002B     	 cmp r3,#0
 3358 00b0 05D1     	 bne .L234
1787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
1788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
 3359              	 .loc 2 1788 0
 3360 00b2 7A68     	 ldr r2,[r7,#4]
 3361 00b4 BA23     	 mov r3,#186
 3362 00b6 5B00     	 lsl r3,r3,#1
 3363 00b8 0421     	 mov r1,#4
 3364 00ba D150     	 str r1,[r2,r3]
1789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
1790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
1791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
1792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
1794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
1796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 3365              	 .loc 2 1799 0
 3366 00bc 0AE0     	 b .L240
 3367              	.L234:
1792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
 3368              	 .loc 2 1792 0
 3369 00be 7A68     	 ldr r2,[r7,#4]
 3370 00c0 BA23     	 mov r3,#186
 3371 00c2 5B00     	 lsl r3,r3,#1
 3372 00c4 0921     	 mov r1,#9
 3373 00c6 D150     	 str r1,[r2,r3]
 3374              	 .loc 2 1799 0
 3375 00c8 04E0     	 b .L240
 3376              	.L233:
1797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
 3377              	 .loc 2 1797 0
 3378 00ca 7A68     	 ldr r2,[r7,#4]
 3379 00cc BA23     	 mov r3,#186
 3380 00ce 5B00     	 lsl r3,r3,#1
 3381 00d0 0921     	 mov r1,#9
 3382 00d2 D150     	 str r1,[r2,r3]
 3383              	.L240:
 3384              	 .loc 2 1799 0
 3385 00d4 C046     	 mov r8,r8
 3386              	.L230:
1800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
 3387              	 .loc 2 1801 0
 3388 00d6 7A68     	 ldr r2,[r7,#4]
 3389 00d8 BA23     	 mov r3,#186
 3390 00da 5B00     	 lsl r3,r3,#1
 3391 00dc D358     	 ldr r3,[r2,r3]
1802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 3392              	 .loc 2 1802 0
 3393 00de 0A2B     	 cmp r3,#10
 3394 00e0 05D0     	 beq .L224
 3395              	 .loc 2 1802 0 is_stmt 0 discriminator 1
 3396 00e2 7A68     	 ldr r2,[r7,#4]
 3397 00e4 BA23     	 mov r3,#186
 3398 00e6 5B00     	 lsl r3,r3,#1
 3399 00e8 D358     	 ldr r3,[r2,r3]
1801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
 3400              	 .loc 2 1801 0 is_stmt 1 discriminator 1
 3401 00ea 092B     	 cmp r3,#9
 3402 00ec 8ED1     	 bne .L238
 3403              	.L224:
1803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3404              	 .loc 2 1803 0
 3405 00ee BD46     	 mov sp,r7
 3406 00f0 02B0     	 add sp,sp,#8
 3407              	 
 3408 00f2 80BD     	 pop {r7,pc}
 3409              	.L242:
 3410              	 .align 2
 3411              	.L241:
 3412 00f4 00000000 	 .word E_EEPROM_XMC1_0
 3413 00f8 000A0110 	 .word 268503552
 3414 00fc 300D0110 	 .word 268504368
 3415              	 .cfi_endproc
 3416              	.LFE74:
 3418              	 .section .text.E_EEPROM_XMC1_lUpdateCache,"ax",%progbits
 3419              	 .align 2
 3420              	 .code 16
 3421              	 .thumb_func
 3423              	E_EEPROM_XMC1_lUpdateCache:
 3424              	.LFB75:
1804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This utility function update's the cache table which contains the latest infor
1811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   FLASH contents.
1812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCache(void)
1814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3425              	 .loc 2 1814 0
 3426              	 .cfi_startproc
 3427 0000 80B5     	 push {r7,lr}
 3428              	.LCFI92:
 3429              	 .cfi_def_cfa_offset 8
 3430              	 .cfi_offset 7,-8
 3431              	 .cfi_offset 14,-4
 3432 0002 84B0     	 sub sp,sp,#16
 3433              	.LCFI93:
 3434              	 .cfi_def_cfa_offset 24
 3435 0004 00AF     	 add r7,sp,#0
 3436              	.LCFI94:
 3437              	 .cfi_def_cfa_register 7
1815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t end_addr;
1816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_status;
1817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3438              	 .loc 2 1820 0
 3439 0006 394B     	 ldr r3,.L254
 3440 0008 5B68     	 ldr r3,[r3,#4]
 3441 000a 7B60     	 str r3,[r7,#4]
1821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Evaluate the end address of the bank to start reading blocks for cache update */
1823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 3442              	 .loc 2 1823 0
 3443 000c 7B68     	 ldr r3,[r7,#4]
 3444 000e 9B6B     	 ldr r3,[r3,#56]
 3445 0010 002B     	 cmp r3,#0
 3446 0012 02D1     	 bne .L244
1824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     end_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 3447              	 .loc 2 1825 0
 3448 0014 364B     	 ldr r3,.L254+4
 3449 0016 FB60     	 str r3,[r7,#12]
 3450 0018 01E0     	 b .L245
 3451              	.L244:
1826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     end_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
 3452              	 .loc 2 1829 0
 3453 001a 364B     	 ldr r3,.L254+8
 3454 001c FB60     	 str r3,[r7,#12]
 3455              	.L245:
1830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Reset the read number of blocks count variable and reset cache update index */
1833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->written_block_counter = 0U;
 3456              	 .loc 2 1833 0
 3457 001e 7B68     	 ldr r3,[r7,#4]
 3458 0020 0022     	 mov r2,#0
 3459 0022 9A65     	 str r2,[r3,#88]
1834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3460              	 .loc 2 1834 0
 3461 0024 7A68     	 ldr r2,[r7,#4]
 3462 0026 C223     	 mov r3,#194
 3463 0028 5B00     	 lsl r3,r3,#1
 3464 002a FF21     	 mov r1,#255
 3465 002c D150     	 str r1,[r2,r3]
1835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Start the Cache Update state machine */
1837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->cache_state = E_EEPROM_XMC1_CACHE_EMPTY_BLOCK;
 3466              	 .loc 2 1837 0
 3467 002e 7A68     	 ldr r2,[r7,#4]
 3468 0030 C023     	 mov r3,#192
 3469 0032 5B00     	 lsl r3,r3,#1
 3470 0034 0121     	 mov r1,#1
 3471 0036 D150     	 str r1,[r2,r3]
1838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Point to starting address of last data block of the bank */
1840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->curr_bank_src_addr += ( E_EEPROM_XMC1_FLASH_BANK_SIZE - E_EEPROM_XMC1_FLASH_BLOCK_SIZE)
 3472              	 .loc 2 1840 0
 3473 0038 7B68     	 ldr r3,[r7,#4]
 3474 003a 1B6D     	 ldr r3,[r3,#80]
 3475 003c BC22     	 mov r2,#188
 3476 003e 9200     	 lsl r2,r2,#2
 3477 0040 9A18     	 add r2,r3,r2
 3478 0042 7B68     	 ldr r3,[r7,#4]
 3479 0044 1A65     	 str r2,[r3,#80]
 3480              	.L246:
1841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Search for the first entry of a non empty block inside the valid bank starting from bottom */
1842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do{
1843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_status = E_EEPROM_XMC1_lCacheEmptyBlkEval(end_addr);
 3481              	 .loc 2 1843 0 discriminator 1
 3482 0046 FB68     	 ldr r3,[r7,#12]
 3483 0048 181C     	 mov r0,r3
 3484 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lCacheEmptyBlkEval
 3485 004e 031C     	 mov r3,r0
 3486 0050 BB60     	 str r3,[r7,#8]
1844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (data_ptr->cache_state == E_EEPROM_XMC1_CACHE_EMPTY_BLOCK);
 3487              	 .loc 2 1844 0 discriminator 1
 3488 0052 7A68     	 ldr r2,[r7,#4]
 3489 0054 C023     	 mov r3,#192
 3490 0056 5B00     	 lsl r3,r3,#1
 3491 0058 D358     	 ldr r3,[r2,r3]
 3492 005a 012B     	 cmp r3,#1
 3493 005c F3D0     	 beq .L246
1845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    /* Update the next free block location only if it is not done by the previous function call  */
1847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->next_free_block_addr == 0U)
 3494              	 .loc 2 1847 0
 3495 005e 7B68     	 ldr r3,[r7,#4]
 3496 0060 DB6C     	 ldr r3,[r3,#76]
 3497 0062 002B     	 cmp r3,#0
 3498 0064 05D1     	 bne .L247
1848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 3499              	 .loc 2 1849 0
 3500 0066 7B68     	 ldr r3,[r7,#4]
 3501 0068 1B6D     	 ldr r3,[r3,#80]
 3502 006a 1033     	 add r3,r3,#16
 3503 006c 1A1C     	 mov r2,r3
 3504 006e 7B68     	 ldr r3,[r7,#4]
 3505 0070 DA64     	 str r2,[r3,#76]
 3506              	.L247:
1850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Execute the Cache update state machine until the Start address of bank is reached traversing f
1853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
 3507              	 .loc 2 1853 0
 3508 0072 31E0     	 b .L248
 3509              	.L253:
1854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check If the previous read had an ECC error or not */
1856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (!(read_status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR))
 3510              	 .loc 2 1856 0
 3511 0074 BB68     	 ldr r3,[r7,#8]
 3512 0076 2022     	 mov r2,#32
 3513 0078 1340     	 and r3,r2
 3514 007a 02D1     	 bne .L249
1857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Evaluate the Block status since no error found */
1859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lEvalBlockStatus();
 3515              	 .loc 2 1859 0
 3516 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lEvalBlockStatus
 3517 0080 1BE0     	 b .L250
 3518              	.L249:
1860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If previous read block of the block had correct block number then mark the block as incons
1864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( data_ptr->updated_cache_index != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND )
 3519              	 .loc 2 1864 0
 3520 0082 7A68     	 ldr r2,[r7,#4]
 3521 0084 C223     	 mov r3,#194
 3522 0086 5B00     	 lsl r3,r3,#1
 3523 0088 D358     	 ldr r3,[r2,r3]
 3524 008a FF2B     	 cmp r3,#255
 3525 008c 0DD0     	 beq .L251
1865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Goto the cache table entry for the given block */
1867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr = data_ptr->block_info;
 3526              	 .loc 2 1867 0
 3527 008e 7B68     	 ldr r3,[r7,#4]
 3528 0090 3B60     	 str r3,[r7]
1868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr = cache_ptr + data_ptr->updated_cache_index;
 3529              	 .loc 2 1868 0
 3530 0092 7A68     	 ldr r2,[r7,#4]
 3531 0094 C223     	 mov r3,#194
 3532 0096 5B00     	 lsl r3,r3,#1
 3533 0098 D358     	 ldr r3,[r2,r3]
 3534 009a DB00     	 lsl r3,r3,#3
 3535 009c 3A68     	 ldr r2,[r7]
 3536 009e D318     	 add r3,r2,r3
 3537 00a0 3B60     	 str r3,[r7]
1869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Since CacheUpdateIndex contains valid block the  previous read block must belong to this
1870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr->address = E_EEPROM_XMC1_ALL_ONES;
 3538              	 .loc 2 1870 0
 3539 00a2 3B68     	 ldr r3,[r7]
 3540 00a4 0122     	 mov r2,#1
 3541 00a6 5242     	 neg r2,r2
 3542 00a8 1A60     	 str r2,[r3]
 3543              	.L251:
1871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Prepare for the next block */
1873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3544              	 .loc 2 1873 0
 3545 00aa 7A68     	 ldr r2,[r7,#4]
 3546 00ac C223     	 mov r3,#194
 3547 00ae 5B00     	 lsl r3,r3,#1
 3548 00b0 FF21     	 mov r1,#255
 3549 00b2 D150     	 str r1,[r2,r3]
1874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = 0U;
 3550              	 .loc 2 1874 0
 3551 00b4 7B68     	 ldr r3,[r7,#4]
 3552 00b6 0022     	 mov r2,#0
 3553 00b8 9A65     	 str r2,[r3,#88]
 3554              	.L250:
1875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if all blocks have been read */
1877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( data_ptr->curr_bank_src_addr == end_addr )
 3555              	 .loc 2 1877 0
 3556 00ba 7B68     	 ldr r3,[r7,#4]
 3557 00bc 1A6D     	 ldr r2,[r3,#80]
 3558 00be FB68     	 ldr r3,[r7,#12]
 3559 00c0 9A42     	 cmp r2,r3
 3560 00c2 05D1     	 bne .L252
1878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Goto the next state */
1880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3561              	 .loc 2 1880 0
 3562 00c4 7A68     	 ldr r2,[r7,#4]
 3563 00c6 C023     	 mov r3,#192
 3564 00c8 5B00     	 lsl r3,r3,#1
 3565 00ca 0421     	 mov r1,#4
 3566 00cc D150     	 str r1,[r2,r3]
 3567 00ce 03E0     	 b .L248
 3568              	.L252:
1881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
 3569              	 .loc 2 1884 0
 3570 00d0 FFF7FEFF 	 bl E_EEPROM_XMC1_lUpdateCacheBlockRead
 3571 00d4 031C     	 mov r3,r0
 3572 00d6 BB60     	 str r3,[r7,#8]
 3573              	.L248:
1853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 3574              	 .loc 2 1853 0
 3575 00d8 7A68     	 ldr r2,[r7,#4]
 3576 00da C023     	 mov r3,#192
 3577 00dc 5B00     	 lsl r3,r3,#1
 3578 00de D358     	 ldr r3,[r2,r3]
 3579 00e0 042B     	 cmp r3,#4
 3580 00e2 C7D1     	 bne .L253
1885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3581              	 .loc 2 1887 0
 3582 00e4 BD46     	 mov sp,r7
 3583 00e6 04B0     	 add sp,sp,#16
 3584              	 
 3585 00e8 80BD     	 pop {r7,pc}
 3586              	.L255:
 3587 00ea C046     	 .align 2
 3588              	.L254:
 3589 00ec 00000000 	 .word E_EEPROM_XMC1_0
 3590 00f0 000B0110 	 .word 268503808
 3591 00f4 000E0110 	 .word 268504576
 3592              	 .cfi_endproc
 3593              	.LFE75:
 3595              	 .section .text.E_EEPROM_XMC1_lCacheEmptyBlkEval,"ax",%progbits
 3596              	 .align 2
 3597              	 .code 16
 3598              	 .thumb_func
 3600              	E_EEPROM_XMC1_lCacheEmptyBlkEval:
 3601              	.LFB76:
1888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : end_addr - Last address to stop reading the block data
1891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t
1893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This utility function  will search through the FLASH from the bottom of the ba
1895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   readable data block is found.
1896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr)
1898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3602              	 .loc 2 1898 0
 3603              	 .cfi_startproc
 3604 0000 80B5     	 push {r7,lr}
 3605              	.LCFI95:
 3606              	 .cfi_def_cfa_offset 8
 3607              	 .cfi_offset 7,-8
 3608              	 .cfi_offset 14,-4
 3609 0002 86B0     	 sub sp,sp,#24
 3610              	.LCFI96:
 3611              	 .cfi_def_cfa_offset 32
 3612 0004 00AF     	 add r7,sp,#0
 3613              	.LCFI97:
 3614              	 .cfi_def_cfa_register 7
 3615 0006 7860     	 str r0,[r7,#4]
1899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
1900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *read_word_ptr;
1901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3616              	 .loc 2 1903 0
 3617 0008 2B4B     	 ldr r3,.L265
 3618 000a 5B68     	 ldr r3,[r3,#4]
 3619 000c 7B61     	 str r3,[r7,#20]
1904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 3620              	 .loc 2 1905 0
 3621 000e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
1906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read the complete block */
1908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr, (uint32_t*)(void*)data_ptr->read_wri
 3622              	 .loc 2 1908 0
 3623 0012 7B69     	 ldr r3,[r7,#20]
 3624 0014 1A6D     	 ldr r2,[r3,#80]
 3625 0016 7B69     	 ldr r3,[r7,#20]
 3626 0018 5C33     	 add r3,r3,#92
 3627 001a 101C     	 mov r0,r2
 3628 001c 191C     	 mov r1,r3
 3629 001e FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
1909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 3630              	 .loc 2 1910 0
 3631 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 3632 0026 031C     	 mov r3,r0
 3633 0028 3B61     	 str r3,[r7,#16]
1911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If ECC error exists because of any previous interruptions or power failures during Flash opera
1913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR)
 3634              	 .loc 2 1913 0
 3635 002a 3B69     	 ldr r3,[r7,#16]
 3636 002c 2022     	 mov r2,#32
 3637 002e 1340     	 and r3,r2
 3638 0030 1BD0     	 beq .L257
1914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the free block location of the valid bank once and for ever until new write happens*/
1916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->next_free_block_addr == 0U)
 3639              	 .loc 2 1916 0
 3640 0032 7B69     	 ldr r3,[r7,#20]
 3641 0034 DB6C     	 ldr r3,[r3,#76]
 3642 0036 002B     	 cmp r3,#0
 3643 0038 05D1     	 bne .L258
1917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SI
 3644              	 .loc 2 1918 0
 3645 003a 7B69     	 ldr r3,[r7,#20]
 3646 003c 1B6D     	 ldr r3,[r3,#80]
 3647 003e 1033     	 add r3,r3,#16
 3648 0040 1A1C     	 mov r2,r3
 3649 0042 7B69     	 ldr r3,[r7,#20]
 3650 0044 DA64     	 str r2,[r3,#76]
 3651              	.L258:
1919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if all blocks have been read? If yes go to cache update complete state else move to th
1922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( data_ptr->curr_bank_src_addr == end_addr )
 3652              	 .loc 2 1922 0
 3653 0046 7B69     	 ldr r3,[r7,#20]
 3654 0048 1A6D     	 ldr r2,[r3,#80]
 3655 004a 7B68     	 ldr r3,[r7,#4]
 3656 004c 9A42     	 cmp r2,r3
 3657 004e 05D1     	 bne .L259
1923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3658              	 .loc 2 1924 0
 3659 0050 7A69     	 ldr r2,[r7,#20]
 3660 0052 C023     	 mov r3,#192
 3661 0054 5B00     	 lsl r3,r3,#1
 3662 0056 0421     	 mov r1,#4
 3663 0058 D150     	 str r1,[r2,r3]
 3664 005a 28E0     	 b .L261
 3665              	.L259:
1925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3666              	 .loc 2 1928 0
 3667 005c 7B69     	 ldr r3,[r7,#20]
 3668 005e 1B6D     	 ldr r3,[r3,#80]
 3669 0060 103B     	 sub r3,r3,#16
 3670 0062 1A1C     	 mov r2,r3
 3671 0064 7B69     	 ldr r3,[r7,#20]
 3672 0066 1A65     	 str r2,[r3,#80]
 3673 0068 21E0     	 b .L261
 3674              	.L257:
1929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* No ECC Error */
1932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
1933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word_ptr = ((uint32_t*)(void*)data_ptr->read_write_buffer);
 3675              	 .loc 2 1934 0
 3676 006a 7B69     	 ldr r3,[r7,#20]
 3677 006c 5C33     	 add r3,r3,#92
 3678 006e FB60     	 str r3,[r7,#12]
1935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the first word of the block is having some data written on it */
1936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (*read_word_ptr != E_EEPROM_XMC1_ALL_ONES)
 3679              	 .loc 2 1936 0
 3680 0070 FB68     	 ldr r3,[r7,#12]
 3681 0072 1B68     	 ldr r3,[r3]
 3682 0074 0133     	 add r3,r3,#1
 3683 0076 0AD0     	 beq .L262
1937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Increment the data block count and go to the next block read state */
1939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
 3684              	 .loc 2 1939 0
 3685 0078 7B69     	 ldr r3,[r7,#20]
 3686 007a 9B6D     	 ldr r3,[r3,#88]
 3687 007c 5A1C     	 add r2,r3,#1
 3688 007e 7B69     	 ldr r3,[r7,#20]
 3689 0080 9A65     	 str r2,[r3,#88]
1940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->cache_state = E_EEPROM_XMC1_CACHE_NEXT_BLK;
 3690              	 .loc 2 1940 0
 3691 0082 7A69     	 ldr r2,[r7,#20]
 3692 0084 C023     	 mov r3,#192
 3693 0086 5B00     	 lsl r3,r3,#1
 3694 0088 0221     	 mov r1,#2
 3695 008a D150     	 str r1,[r2,r3]
 3696 008c 0FE0     	 b .L261
 3697              	.L262:
1941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
1943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
1944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check if all blocks have been read? If yes go to cache update complete state else move to 
1945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ( data_ptr->curr_bank_src_addr == end_addr )
 3698              	 .loc 2 1945 0
 3699 008e 7B69     	 ldr r3,[r7,#20]
 3700 0090 1A6D     	 ldr r2,[r3,#80]
 3701 0092 7B68     	 ldr r3,[r7,#4]
 3702 0094 9A42     	 cmp r2,r3
 3703 0096 04D1     	 bne .L263
1946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
1947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
 3704              	 .loc 2 1947 0
 3705 0098 7A69     	 ldr r2,[r7,#20]
 3706 009a C023     	 mov r3,#192
 3707 009c 5B00     	 lsl r3,r3,#1
 3708 009e 0421     	 mov r1,#4
 3709 00a0 D150     	 str r1,[r2,r3]
 3710              	.L263:
1948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
1949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3711              	 .loc 2 1949 0
 3712 00a2 7B69     	 ldr r3,[r7,#20]
 3713 00a4 1B6D     	 ldr r3,[r3,#80]
 3714 00a6 103B     	 sub r3,r3,#16
 3715 00a8 1A1C     	 mov r2,r3
 3716 00aa 7B69     	 ldr r3,[r7,#20]
 3717 00ac 1A65     	 str r2,[r3,#80]
 3718              	.L261:
1950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
1951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
1952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 3719              	 .loc 2 1952 0
 3720 00ae 3B69     	 ldr r3,[r7,#16]
1953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3721              	 .loc 2 1953 0
 3722 00b0 181C     	 mov r0,r3
 3723 00b2 BD46     	 mov sp,r7
 3724 00b4 06B0     	 add sp,sp,#24
 3725              	 
 3726 00b6 80BD     	 pop {r7,pc}
 3727              	.L266:
 3728              	 .align 2
 3729              	.L265:
 3730 00b8 00000000 	 .word E_EEPROM_XMC1_0
 3731              	 .cfi_endproc
 3732              	.LFE76:
 3734              	 .section .text.E_EEPROM_XMC1_lEvalBlockStatus,"ax",%progbits
 3735              	 .align 2
 3736              	 .code 16
 3737              	 .thumb_func
 3739              	E_EEPROM_XMC1_lEvalBlockStatus:
 3740              	.LFB77:
1954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
1955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
1956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
1957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
1959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
1960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function evaluates the block status and updates the cache (if required).
1961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    Entry Criteria:                          
1962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    1) No ECC error                        
1963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    2) Block number is non zero             
1964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    Possible results:                         
1965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    1) cache updated: consistent            
1966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    2) cache updated: inconsistent           
1967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    3) cache already updated (no actions done)   
1968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    4) cannot evaluate - requires more blocks to be read          
1969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
1970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEvalBlockStatus(void)
1971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3741              	 .loc 2 1971 0
 3742              	 .cfi_startproc
 3743 0000 80B5     	 push {r7,lr}
 3744              	.LCFI98:
 3745              	 .cfi_def_cfa_offset 8
 3746              	 .cfi_offset 7,-8
 3747              	 .cfi_offset 14,-4
 3748 0002 88B0     	 sub sp,sp,#32
 3749              	.LCFI99:
 3750              	 .cfi_def_cfa_offset 40
 3751 0004 00AF     	 add r7,sp,#0
 3752              	.LCFI100:
 3753              	 .cfi_def_cfa_register 7
1972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t size;
1973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
1974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status_byte;
1975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t  block_number;
1976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t physical_blocks;
1977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
1978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_CACHE_t *cache_ptr;
1979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_HEADER_t *Ptr;
1980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3754              	 .loc 2 1981 0
 3755 0006 4B4B     	 ldr r3,.L280
 3756 0008 5B68     	 ldr r3,[r3,#4]
 3757 000a FB61     	 str r3,[r7,#28]
1982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   Ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t *)(void *)data_ptr->read_write_buffer;
 3758              	 .loc 2 1982 0
 3759 000c FB69     	 ldr r3,[r7,#28]
 3760 000e 5C33     	 add r3,r3,#92
 3761 0010 BB61     	 str r3,[r7,#24]
1983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_number = Ptr->block_number;
 3762              	 .loc 2 1983 0
 3763 0012 1723     	 mov r3,#23
 3764 0014 FB18     	 add r3,r7,r3
 3765 0016 BA69     	 ldr r2,[r7,#24]
 3766 0018 1278     	 ldrb r2,[r2]
 3767 001a 1A70     	 strb r2,[r3]
1984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status_byte = Ptr->status;
 3768              	 .loc 2 1984 0
 3769 001c BB69     	 ldr r3,[r7,#24]
 3770 001e 5B78     	 ldrb r3,[r3,#1]
 3771 0020 3B61     	 str r3,[r7,#16]
1985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   cache_ptr = data_ptr->block_info;
 3772              	 .loc 2 1986 0
 3773 0022 FB69     	 ldr r3,[r7,#28]
 3774 0024 FB60     	 str r3,[r7,#12]
1987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Get the Index of the read block from the user configuration */
1989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 3775              	 .loc 2 1989 0
 3776 0026 1723     	 mov r3,#23
 3777 0028 FB18     	 add r3,r7,r3
 3778 002a 1B78     	 ldrb r3,[r3]
 3779 002c 181C     	 mov r0,r3
 3780 002e FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 3781 0032 031C     	 mov r3,r0
 3782 0034 BB60     	 str r3,[r7,#8]
1990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
1991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If the block is found */
1992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( (indx != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND) )
 3783              	 .loc 2 1992 0
 3784 0036 BB68     	 ldr r3,[r7,#8]
 3785 0038 FF2B     	 cmp r3,#255
 3786 003a 00D1     	 bne .LCB3426
 3787 003c 6FE0     	 b .L268
 3788              	.LCB3426:
1993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
1994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Point to the cache table entry for the block to be evaluated */
1995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     cache_ptr = cache_ptr + indx;
 3789              	 .loc 2 1995 0
 3790 003e BB68     	 ldr r3,[r7,#8]
 3791 0040 DB00     	 lsl r3,r3,#3
 3792 0042 FA68     	 ldr r2,[r7,#12]
 3793 0044 D318     	 add r3,r2,r3
 3794 0046 FB60     	 str r3,[r7,#12]
1996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
1997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Store Index of current block */
1998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->updated_cache_index = indx;
 3795              	 .loc 2 1998 0
 3796 0048 FA69     	 ldr r2,[r7,#28]
 3797 004a C223     	 mov r3,#194
 3798 004c 5B00     	 lsl r3,r3,#1
 3799 004e B968     	 ldr r1,[r7,#8]
 3800 0050 D150     	 str r1,[r2,r3]
1999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if cache table is updated for the given block : address = 0U => cache table not yet up
2001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (cache_ptr->address == 0U)
 3801              	 .loc 2 2001 0
 3802 0052 FB68     	 ldr r3,[r7,#12]
 3803 0054 1B68     	 ldr r3,[r3]
 3804 0056 002B     	 cmp r3,#0
 3805 0058 58D1     	 bne .L269
2002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* If the starting block of the block found */
2004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((status_byte & E_EEPROM_XMC1_START_BIT ) != 0U)
 3806              	 .loc 2 2004 0
 3807 005a 3B69     	 ldr r3,[r7,#16]
 3808 005c 8022     	 mov r2,#128
 3809 005e 1340     	 and r3,r2
 3810 0060 65D0     	 beq .L267
2005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Update the cache with block address */
2007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         cache_ptr->address = data_ptr->curr_bank_src_addr;
 3811              	 .loc 2 2007 0
 3812 0062 FB69     	 ldr r3,[r7,#28]
 3813 0064 1A6D     	 ldr r2,[r3,#80]
 3814 0066 FB68     	 ldr r3,[r7,#12]
 3815 0068 1A60     	 str r2,[r3]
2008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* if the Valid bit for the logical block is set */
2010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ((status_byte & (E_EEPROM_XMC1_VALID_BIT) ) != 0U)
 3816              	 .loc 2 2010 0
 3817 006a 3B69     	 ldr r3,[r7,#16]
 3818 006c 4022     	 mov r2,#64
 3819 006e 1340     	 and r3,r2
 3820 0070 14D0     	 beq .L271
2011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.valid = 1U;
 3821              	 .loc 2 2012 0
 3822 0072 FB68     	 ldr r3,[r7,#12]
 3823 0074 1A79     	 ldrb r2,[r3,#4]
 3824 0076 0121     	 mov r1,#1
 3825 0078 0A43     	 orr r2,r1
 3826 007a 1A71     	 strb r2,[r3,#4]
2013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           
2014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* if the CRC bit for the logical block is set */
2015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           if ((status_byte & (E_EEPROM_XMC1_CRC_BIT) ) != 0U)
 3827              	 .loc 2 2015 0
 3828 007c 3B69     	 ldr r3,[r7,#16]
 3829 007e 1022     	 mov r2,#16
 3830 0080 1340     	 and r3,r2
 3831 0082 05D0     	 beq .L272
2016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.crc = 1U;
 3832              	 .loc 2 2017 0
 3833 0084 FB68     	 ldr r3,[r7,#12]
 3834 0086 1A79     	 ldrb r2,[r3,#4]
 3835 0088 0821     	 mov r1,#8
 3836 008a 0A43     	 orr r2,r1
 3837 008c 1A71     	 strb r2,[r3,#4]
 3838 008e 0AE0     	 b .L274
 3839              	.L272:
2018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           else
2020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.crc = 0U;
 3840              	 .loc 2 2021 0
 3841 0090 FB68     	 ldr r3,[r7,#12]
 3842 0092 1A79     	 ldrb r2,[r3,#4]
 3843 0094 0821     	 mov r1,#8
 3844 0096 8A43     	 bic r2,r1
 3845 0098 1A71     	 strb r2,[r3,#4]
 3846 009a 04E0     	 b .L274
 3847              	.L271:
2022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.valid = 0U;
 3848              	 .loc 2 2026 0
 3849 009c FB68     	 ldr r3,[r7,#12]
 3850 009e 1A79     	 ldrb r2,[r3,#4]
 3851 00a0 0121     	 mov r1,#1
 3852 00a2 8A43     	 bic r2,r1
 3853 00a4 1A71     	 strb r2,[r3,#4]
 3854              	.L274:
2027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Check If number of Flash blocks used for this data block is same in size */
2030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         size = (uint32_t)(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx].size);
 3855              	 .loc 2 2030 0
 3856 00a6 234B     	 ldr r3,.L280
 3857 00a8 1A68     	 ldr r2,[r3]
 3858 00aa BB68     	 ldr r3,[r7,#8]
 3859 00ac DB00     	 lsl r3,r3,#3
 3860 00ae D318     	 add r3,r2,r3
 3861 00b0 5B68     	 ldr r3,[r3,#4]
 3862 00b2 7B60     	 str r3,[r7,#4]
2031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
 3863              	 .loc 2 2031 0
 3864 00b4 7B68     	 ldr r3,[r7,#4]
 3865 00b6 181C     	 mov r0,r3
 3866 00b8 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 3867 00bc 031C     	 mov r3,r0
 3868 00be 3B60     	 str r3,[r7]
2032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if ( data_ptr->written_block_counter == physical_blocks)
 3869              	 .loc 2 2033 0
 3870 00c0 FB69     	 ldr r3,[r7,#28]
 3871 00c2 9A6D     	 ldr r2,[r3,#88]
 3872 00c4 3B68     	 ldr r3,[r7]
 3873 00c6 9A42     	 cmp r2,r3
 3874 00c8 05D1     	 bne .L275
2034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           cache_ptr->status.consistent = 1U;  /* EVALUATION RESULT : BLOCK CONSISTENT*/
 3875              	 .loc 2 2035 0
 3876 00ca FB68     	 ldr r3,[r7,#12]
 3877 00cc 1A79     	 ldrb r2,[r3,#4]
 3878 00ce 0221     	 mov r1,#2
 3879 00d0 0A43     	 orr r2,r1
 3880 00d2 1A71     	 strb r2,[r3,#4]
 3881 00d4 11E0     	 b .L276
 3882              	.L275:
2036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           if (cache_ptr->status.valid == 1U)
 3883              	 .loc 2 2039 0
 3884 00d6 FB68     	 ldr r3,[r7,#12]
 3885 00d8 1B79     	 ldrb r3,[r3,#4]
 3886 00da 0122     	 mov r2,#1
 3887 00dc 1340     	 and r3,r2
 3888 00de DBB2     	 uxtb r3,r3
 3889 00e0 002B     	 cmp r3,#0
 3890 00e2 05D0     	 beq .L277
2040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.consistent = 0U;  /* EVALUATION RESULT : BLOCK INCONSISTENT */
 3891              	 .loc 2 2041 0
 3892 00e4 FB68     	 ldr r3,[r7,#12]
 3893 00e6 1A79     	 ldrb r2,[r3,#4]
 3894 00e8 0221     	 mov r1,#2
 3895 00ea 8A43     	 bic r2,r1
 3896 00ec 1A71     	 strb r2,[r3,#4]
 3897 00ee 04E0     	 b .L276
 3898              	.L277:
2042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           else
2044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           {
2045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****             cache_ptr->status.consistent = 1U; /* If the block is invalid, then mark : BLOCK INCONS
 3899              	 .loc 2 2045 0
 3900 00f0 FB68     	 ldr r3,[r7,#12]
 3901 00f2 1A79     	 ldrb r2,[r3,#4]
 3902 00f4 0221     	 mov r1,#2
 3903 00f6 0A43     	 orr r2,r1
 3904 00f8 1A71     	 strb r2,[r3,#4]
 3905              	.L276:
2046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           }
2047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Initialize the Index, block block count for the next read */
2049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3906              	 .loc 2 2049 0
 3907 00fa FA69     	 ldr r2,[r7,#28]
 3908 00fc C223     	 mov r3,#194
 3909 00fe 5B00     	 lsl r3,r3,#1
 3910 0100 FF21     	 mov r1,#255
 3911 0102 D150     	 str r1,[r2,r3]
2050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->written_block_counter = 0U;
 3912              	 .loc 2 2050 0
 3913 0104 FB69     	 ldr r3,[r7,#28]
 3914 0106 0022     	 mov r2,#0
 3915 0108 9A65     	 str r2,[r3,#88]
 3916 010a 10E0     	 b .L267
 3917              	.L269:
2051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*
2057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * EVALUATION RESULT : CACHE ALREADY UPDATED
2058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        * If cache table is already updated for the block, no need to evaluate the block
2059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        */
2060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3918              	 .loc 2 2060 0
 3919 010c FA69     	 ldr r2,[r7,#28]
 3920 010e C223     	 mov r3,#194
 3921 0110 5B00     	 lsl r3,r3,#1
 3922 0112 FF21     	 mov r1,#255
 3923 0114 D150     	 str r1,[r2,r3]
2061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->written_block_counter = 0U;
 3924              	 .loc 2 2061 0
 3925 0116 FB69     	 ldr r3,[r7,#28]
 3926 0118 0022     	 mov r2,#0
 3927 011a 9A65     	 str r2,[r3,#88]
 3928 011c 07E0     	 b .L267
 3929              	.L268:
2062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {    
2066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 3930              	 .loc 2 2066 0
 3931 011e FA69     	 ldr r2,[r7,#28]
 3932 0120 C223     	 mov r3,#194
 3933 0122 5B00     	 lsl r3,r3,#1
 3934 0124 FF21     	 mov r1,#255
 3935 0126 D150     	 str r1,[r2,r3]
2067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->written_block_counter = 0U;
 3936              	 .loc 2 2067 0
 3937 0128 FB69     	 ldr r3,[r7,#28]
 3938 012a 0022     	 mov r2,#0
 3939 012c 9A65     	 str r2,[r3,#88]
 3940              	.L267:
2068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 3941              	 .loc 2 2069 0
 3942 012e BD46     	 mov sp,r7
 3943 0130 08B0     	 add sp,sp,#32
 3944              	 
 3945 0132 80BD     	 pop {r7,pc}
 3946              	.L281:
 3947              	 .align 2
 3948              	.L280:
 3949 0134 00000000 	 .word E_EEPROM_XMC1_0
 3950              	 .cfi_endproc
 3951              	.LFE77:
 3953              	 .section .text.E_EEPROM_XMC1_lUpdateCacheBlockRead,"ax",%progbits
 3954              	 .align 2
 3955              	 .code 16
 3956              	 .thumb_func
 3958              	E_EEPROM_XMC1_lUpdateCacheBlockRead:
 3959              	.LFB78:
2070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t
2075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Utility function to read data block from flash for cache update function.
2077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void)
2079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 3960              	 .loc 2 2079 0
 3961              	 .cfi_startproc
 3962 0000 80B5     	 push {r7,lr}
 3963              	.LCFI101:
 3964              	 .cfi_def_cfa_offset 8
 3965              	 .cfi_offset 7,-8
 3966              	 .cfi_offset 14,-4
 3967 0002 82B0     	 sub sp,sp,#8
 3968              	.LCFI102:
 3969              	 .cfi_def_cfa_offset 16
 3970 0004 00AF     	 add r7,sp,#0
 3971              	.LCFI103:
 3972              	 .cfi_def_cfa_register 7
2080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 3973              	 .loc 2 2081 0
 3974 0006 0F4B     	 ldr r3,.L284
 3975 0008 5B68     	 ldr r3,[r3,#4]
 3976 000a 7B60     	 str r3,[r7,#4]
2082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Set the Write Source pointer to the next block */
2084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->curr_bank_src_addr = data_ptr->curr_bank_src_addr -  E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
 3977              	 .loc 2 2084 0
 3978 000c 7B68     	 ldr r3,[r7,#4]
 3979 000e 1B6D     	 ldr r3,[r3,#80]
 3980 0010 103B     	 sub r3,r3,#16
 3981 0012 1A1C     	 mov r2,r3
 3982 0014 7B68     	 ldr r3,[r7,#4]
 3983 0016 1A65     	 str r2,[r3,#80]
2085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 3984              	 .loc 2 2087 0
 3985 0018 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr,  (uint32_t*)(void*)data_ptr->read_wr
 3986              	 .loc 2 2089 0
 3987 001c 7B68     	 ldr r3,[r7,#4]
 3988 001e 1A6D     	 ldr r2,[r3,#80]
 3989 0020 7B68     	 ldr r3,[r7,#4]
 3990 0022 5C33     	 add r3,r3,#92
 3991 0024 101C     	 mov r0,r2
 3992 0026 191C     	 mov r1,r3
 3993 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Increment number of read block counter  */
2092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
 3994              	 .loc 2 2092 0
 3995 002c 7B68     	 ldr r3,[r7,#4]
 3996 002e 9B6D     	 ldr r3,[r3,#88]
 3997 0030 5A1C     	 add r2,r3,#1
 3998 0032 7B68     	 ldr r3,[r7,#4]
 3999 0034 9A65     	 str r2,[r3,#88]
2093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (E_EEPROM_XMC1_lGetFlashStatus());
 4000              	 .loc 2 2094 0
 4001 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4002 003a 031C     	 mov r3,r0
2095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4003              	 .loc 2 2095 0
 4004 003c 181C     	 mov r0,r3
 4005 003e BD46     	 mov sp,r7
 4006 0040 02B0     	 add sp,sp,#8
 4007              	 
 4008 0042 80BD     	 pop {r7,pc}
 4009              	.L285:
 4010              	 .align 2
 4011              	.L284:
 4012 0044 00000000 	 .word E_EEPROM_XMC1_0
 4013              	 .cfi_endproc
 4014              	.LFE78:
 4016              	 .section .text.E_EEPROM_XMC1_lGetUsrBlockIndex,"ax",%progbits
 4017              	 .align 2
 4018              	 .code 16
 4019              	 .thumb_func
 4021              	E_EEPROM_XMC1_lGetUsrBlockIndex:
 4022              	.LFB79:
2096:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2097:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2098:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number  - User data block number / ID
2099:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2100:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t : returns array index pointer of block configuration
2101:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2102:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This utility function will return the Index (location) of the block in the user
2103:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2104:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number)
2105:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4023              	 .loc 2 2105 0
 4024              	 .cfi_startproc
 4025 0000 80B5     	 push {r7,lr}
 4026              	.LCFI104:
 4027              	 .cfi_def_cfa_offset 8
 4028              	 .cfi_offset 7,-8
 4029              	 .cfi_offset 14,-4
 4030 0002 84B0     	 sub sp,sp,#16
 4031              	.LCFI105:
 4032              	 .cfi_def_cfa_offset 24
 4033 0004 00AF     	 add r7,sp,#0
 4034              	.LCFI106:
 4035              	 .cfi_def_cfa_register 7
 4036 0006 021C     	 mov r2,r0
 4037 0008 FB1D     	 add r3,r7,#7
 4038 000a 1A70     	 strb r2,[r3]
2106:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2107:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t  *block_ptr;
2108:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2109:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 4039              	 .loc 2 2109 0
 4040 000c 0023     	 mov r3,#0
 4041 000e FB60     	 str r3,[r7,#12]
2110:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
 4042              	 .loc 2 2110 0
 4043 0010 124B     	 ldr r3,.L292
 4044 0012 1A68     	 ldr r2,[r3]
 4045 0014 FB68     	 ldr r3,[r7,#12]
 4046 0016 DB00     	 lsl r3,r3,#3
 4047 0018 D318     	 add r3,r2,r3
 4048 001a BB60     	 str r3,[r7,#8]
2111:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2112:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check for max configured block count reached and block number is matched against the configure
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_numbe
 4049              	 .loc 2 2113 0
 4050 001c 05E0     	 b .L287
 4051              	.L289:
2114:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2115:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx++;
 4052              	 .loc 2 2115 0
 4053 001e FB68     	 ldr r3,[r7,#12]
 4054 0020 0133     	 add r3,r3,#1
 4055 0022 FB60     	 str r3,[r7,#12]
2116:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_ptr++;
 4056              	 .loc 2 2116 0
 4057 0024 BB68     	 ldr r3,[r7,#8]
 4058 0026 0833     	 add r3,r3,#8
 4059 0028 BB60     	 str r3,[r7,#8]
 4060              	.L287:
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4061              	 .loc 2 2113 0
 4062 002a 0C4B     	 ldr r3,.L292
 4063 002c 5B7A     	 ldrb r3,[r3,#9]
 4064 002e 1A1E     	 sub r2,r3,#0
 4065 0030 FB68     	 ldr r3,[r7,#12]
 4066 0032 9A42     	 cmp r2,r3
 4067 0034 05D9     	 bls .L288
2113:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4068              	 .loc 2 2113 0 is_stmt 0 discriminator 1
 4069 0036 BB68     	 ldr r3,[r7,#8]
 4070 0038 1B78     	 ldrb r3,[r3]
 4071 003a FA1D     	 add r2,r7,#7
 4072 003c 1278     	 ldrb r2,[r2]
 4073 003e 9A42     	 cmp r2,r3
 4074 0040 EDD1     	 bne .L289
 4075              	.L288:
2117:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2118:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2119:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( indx == E_EEPROM_XMC1_HANDLE_PTR->block_count )
 4076              	 .loc 2 2119 0 is_stmt 1
 4077 0042 064B     	 ldr r3,.L292
 4078 0044 5B7A     	 ldrb r3,[r3,#9]
 4079 0046 1A1E     	 sub r2,r3,#0
 4080 0048 FB68     	 ldr r3,[r7,#12]
 4081 004a 9A42     	 cmp r2,r3
 4082 004c 01D1     	 bne .L290
2120:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2121:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
 4083              	 .loc 2 2121 0
 4084 004e FF23     	 mov r3,#255
 4085 0050 FB60     	 str r3,[r7,#12]
 4086              	.L290:
2122:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2123:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (indx);
 4087              	 .loc 2 2123 0
 4088 0052 FB68     	 ldr r3,[r7,#12]
2124:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4089              	 .loc 2 2124 0
 4090 0054 181C     	 mov r0,r3
 4091 0056 BD46     	 mov sp,r7
 4092 0058 04B0     	 add sp,sp,#16
 4093              	 
 4094 005a 80BD     	 pop {r7,pc}
 4095              	.L293:
 4096              	 .align 2
 4097              	.L292:
 4098 005c 00000000 	 .word E_EEPROM_XMC1_0
 4099              	 .cfi_endproc
 4100              	.LFE79:
 4102              	 .section .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks,"ax",%progbits
 4103              	 .align 2
 4104              	 .code 16
 4105              	 .thumb_func
 4107              	E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:
 4108              	.LFB80:
2125:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2126:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2127:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : size - size of user data block
2128:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2129:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t - returns maximum physical flash blocks required to store the data.
2130:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2131:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Calculates and return the number of FLASH blocks required for a user data block
2132:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2133:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size)
2134:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4109              	 .loc 2 2134 0
 4110              	 .cfi_startproc
 4111 0000 80B5     	 push {r7,lr}
 4112              	.LCFI107:
 4113              	 .cfi_def_cfa_offset 8
 4114              	 .cfi_offset 7,-8
 4115              	 .cfi_offset 14,-4
 4116 0002 84B0     	 sub sp,sp,#16
 4117              	.LCFI108:
 4118              	 .cfi_def_cfa_offset 24
 4119 0004 00AF     	 add r7,sp,#0
 4120              	.LCFI109:
 4121              	 .cfi_def_cfa_register 7
 4122 0006 7860     	 str r0,[r7,#4]
2135:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t physical_blocks;
2136:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2137:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   physical_blocks = 1U;
 4123              	 .loc 2 2137 0
 4124 0008 0123     	 mov r3,#1
 4125 000a FB60     	 str r3,[r7,#12]
2138:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If size is greater than the  */
2139:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
 4126              	 .loc 2 2139 0
 4127 000c 7B68     	 ldr r3,[r7,#4]
 4128 000e 0C2B     	 cmp r3,#12
 4129 0010 0FD9     	 bls .L295
2140:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2141:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
 4130              	 .loc 2 2141 0
 4131 0012 7B68     	 ldr r3,[r7,#4]
 4132 0014 0C3B     	 sub r3,r3,#12
 4133 0016 7B60     	 str r3,[r7,#4]
2142:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     physical_blocks++;
 4134              	 .loc 2 2142 0
 4135 0018 FB68     	 ldr r3,[r7,#12]
 4136 001a 0133     	 add r3,r3,#1
 4137 001c FB60     	 str r3,[r7,#12]
2143:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
 4138              	 .loc 2 2144 0
 4139 001e 05E0     	 b .L296
 4140              	.L297:
2145:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2146:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       physical_blocks++;
 4141              	 .loc 2 2146 0
 4142 0020 FB68     	 ldr r3,[r7,#12]
 4143 0022 0133     	 add r3,r3,#1
 4144 0024 FB60     	 str r3,[r7,#12]
2147:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
 4145              	 .loc 2 2147 0
 4146 0026 7B68     	 ldr r3,[r7,#4]
 4147 0028 0E3B     	 sub r3,r3,#14
 4148 002a 7B60     	 str r3,[r7,#4]
 4149              	.L296:
2144:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4150              	 .loc 2 2144 0
 4151 002c 7B68     	 ldr r3,[r7,#4]
 4152 002e 0E2B     	 cmp r3,#14
 4153 0030 F6D8     	 bhi .L297
 4154              	.L295:
2148:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2149:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2150:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return(physical_blocks);
 4155              	 .loc 2 2150 0
 4156 0032 FB68     	 ldr r3,[r7,#12]
2151:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4157              	 .loc 2 2151 0
 4158 0034 181C     	 mov r0,r3
 4159 0036 BD46     	 mov sp,r7
 4160 0038 04B0     	 add sp,sp,#16
 4161              	 
 4162 003a 80BD     	 pop {r7,pc}
 4163              	 .cfi_endproc
 4164              	.LFE80:
 4166              	 .section .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks,"ax",%progbits
 4167              	 .align 2
 4168              	 .code 16
 4169              	 .thumb_func
 4171              	E_EEPROM_XMC1_lGetFreeDFLASHBlocks:
 4172              	.LFB81:
2152:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2153:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2154:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2155:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2156:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t : Number of physical blocks left in the bank for writing data.
2157:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2158:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This routine will calculate the number of empty DFLASH blocks remaining in the
2159:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2160:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void)
2161:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4173              	 .loc 2 2161 0
 4174              	 .cfi_startproc
 4175 0000 80B5     	 push {r7,lr}
 4176              	.LCFI110:
 4177              	 .cfi_def_cfa_offset 8
 4178              	 .cfi_offset 7,-8
 4179              	 .cfi_offset 14,-4
 4180 0002 84B0     	 sub sp,sp,#16
 4181              	.LCFI111:
 4182              	 .cfi_def_cfa_offset 24
 4183 0004 00AF     	 add r7,sp,#0
 4184              	.LCFI112:
 4185              	 .cfi_def_cfa_register 7
2162:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t base_addr;
2163:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t free_blocks;
2164:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2165:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2166:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4186              	 .loc 2 2166 0
 4187 0006 0D4B     	 ldr r3,.L303
 4188 0008 5B68     	 ldr r3,[r3,#4]
 4189 000a BB60     	 str r3,[r7,#8]
2167:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2168:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 4190              	 .loc 2 2168 0
 4191 000c BB68     	 ldr r3,[r7,#8]
 4192 000e 9B6B     	 ldr r3,[r3,#56]
 4193 0010 002B     	 cmp r3,#0
 4194 0012 02D1     	 bne .L300
2169:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2170:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     base_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4195              	 .loc 2 2170 0
 4196 0014 0A4B     	 ldr r3,.L303+4
 4197 0016 FB60     	 str r3,[r7,#12]
 4198 0018 01E0     	 b .L301
 4199              	.L300:
2171:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2172:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2173:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2174:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     base_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4200              	 .loc 2 2174 0
 4201 001a 0A4B     	 ldr r3,.L303+8
 4202 001c FB60     	 str r3,[r7,#12]
 4203              	.L301:
2175:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2176:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   free_blocks = (uint32_t)( ( (base_addr + E_EEPROM_XMC1_FLASH_BANK_SIZE) - (data_ptr->next_free_bl
 4204              	 .loc 2 2176 0
 4205 001e BB68     	 ldr r3,[r7,#8]
 4206 0020 DB6C     	 ldr r3,[r3,#76]
 4207 0022 FA68     	 ldr r2,[r7,#12]
 4208 0024 D31A     	 sub r3,r2,r3
 4209 0026 C022     	 mov r2,#192
 4210 0028 9200     	 lsl r2,r2,#2
 4211 002a 9446     	 mov ip,r2
 4212 002c 6344     	 add r3,r3,ip
 4213 002e 1B09     	 lsr r3,r3,#4
 4214 0030 7B60     	 str r3,[r7,#4]
2177:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                 /  E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
2178:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (free_blocks);
 4215              	 .loc 2 2178 0
 4216 0032 7B68     	 ldr r3,[r7,#4]
2179:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4217              	 .loc 2 2179 0
 4218 0034 181C     	 mov r0,r3
 4219 0036 BD46     	 mov sp,r7
 4220 0038 04B0     	 add sp,sp,#16
 4221              	 
 4222 003a 80BD     	 pop {r7,pc}
 4223              	.L304:
 4224              	 .align 2
 4225              	.L303:
 4226 003c 00000000 	 .word E_EEPROM_XMC1_0
 4227 0040 000A0110 	 .word 268503552
 4228 0044 000D0110 	 .word 268504320
 4229              	 .cfi_endproc
 4230              	.LFE81:
 4232              	 .section .text.E_EEPROM_XMC1_lUpdateCurrBankInfo,"ax",%progbits
 4233              	 .align 2
 4234              	 .code 16
 4235              	 .thumb_func
 4237              	E_EEPROM_XMC1_lUpdateCurrBankInfo:
 4238              	.LFB82:
2180:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2181:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2182:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2183:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2184:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2185:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2186:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Updates global addresses to keep track of writing and reading operations respe
2187:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2188:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void)
2189:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4239              	 .loc 2 2189 0
 4240              	 .cfi_startproc
 4241 0000 80B5     	 push {r7,lr}
 4242              	.LCFI113:
 4243              	 .cfi_def_cfa_offset 8
 4244              	 .cfi_offset 7,-8
 4245              	 .cfi_offset 14,-4
 4246 0002 82B0     	 sub sp,sp,#8
 4247              	.LCFI114:
 4248              	 .cfi_def_cfa_offset 16
 4249 0004 00AF     	 add r7,sp,#0
 4250              	.LCFI115:
 4251              	 .cfi_def_cfa_register 7
2190:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2191:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4252              	 .loc 2 2191 0
 4253 0006 144B     	 ldr r3,.L308
 4254 0008 5B68     	 ldr r3,[r3,#4]
 4255 000a 7B60     	 str r3,[r7,#4]
2192:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2193:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->current_bank == 0U)
 4256              	 .loc 2 2193 0
 4257 000c 7B68     	 ldr r3,[r7,#4]
 4258 000e 9B6B     	 ldr r3,[r3,#56]
 4259 0010 002B     	 cmp r3,#0
 4260 0012 0FD1     	 bne .L306
2194:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2195:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4261              	 .loc 2 2195 0
 4262 0014 7B68     	 ldr r3,[r7,#4]
 4263 0016 114A     	 ldr r2,.L308+4
 4264 0018 1A65     	 str r2,[r3,#80]
2196:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4265              	 .loc 2 2196 0
 4266 001a 7B68     	 ldr r3,[r7,#4]
 4267 001c 0F4A     	 ldr r2,.L308+4
 4268 001e 1A64     	 str r2,[r3,#64]
2197:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4269              	 .loc 2 2197 0
 4270 0020 7B68     	 ldr r3,[r7,#4]
 4271 0022 0F4A     	 ldr r2,.L308+8
 4272 0024 DA63     	 str r2,[r3,#60]
2198:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
 4273              	 .loc 2 2198 0
 4274 0026 7B68     	 ldr r3,[r7,#4]
 4275 0028 0E4A     	 ldr r2,.L308+12
 4276 002a 5A64     	 str r2,[r3,#68]
2199:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
 4277              	 .loc 2 2199 0
 4278 002c 7B68     	 ldr r3,[r7,#4]
 4279 002e 0E4A     	 ldr r2,.L308+16
 4280 0030 9A64     	 str r2,[r3,#72]
 4281 0032 0EE0     	 b .L305
 4282              	.L306:
2200:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2201:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2202:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2203:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4283              	 .loc 2 2203 0
 4284 0034 7B68     	 ldr r3,[r7,#4]
 4285 0036 0A4A     	 ldr r2,.L308+8
 4286 0038 1A65     	 str r2,[r3,#80]
2204:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
 4287              	 .loc 2 2204 0
 4288 003a 7B68     	 ldr r3,[r7,#4]
 4289 003c 084A     	 ldr r2,.L308+8
 4290 003e 1A64     	 str r2,[r3,#64]
2205:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
 4291              	 .loc 2 2205 0
 4292 0040 7B68     	 ldr r3,[r7,#4]
 4293 0042 064A     	 ldr r2,.L308+4
 4294 0044 DA63     	 str r2,[r3,#60]
2206:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
 4295              	 .loc 2 2206 0
 4296 0046 7B68     	 ldr r3,[r7,#4]
 4297 0048 074A     	 ldr r2,.L308+16
 4298 004a 5A64     	 str r2,[r3,#68]
2207:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
 4299              	 .loc 2 2207 0
 4300 004c 7B68     	 ldr r3,[r7,#4]
 4301 004e 054A     	 ldr r2,.L308+12
 4302 0050 9A64     	 str r2,[r3,#72]
 4303              	.L305:
2208:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2209:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4304              	 .loc 2 2209 0
 4305 0052 BD46     	 mov sp,r7
 4306 0054 02B0     	 add sp,sp,#8
 4307              	 
 4308 0056 80BD     	 pop {r7,pc}
 4309              	.L309:
 4310              	 .align 2
 4311              	.L308:
 4312 0058 00000000 	 .word E_EEPROM_XMC1_0
 4313 005c 000A0110 	 .word 268503552
 4314 0060 000D0110 	 .word 268504320
 4315 0064 FF0C0110 	 .word 268504319
 4316 0068 FF0F0110 	 .word 268505087
 4317              	 .cfi_endproc
 4318              	.LFE82:
 4320              	 .section .text.E_EEPROM_XMC1_lReadMarkerBlocks,"ax",%progbits
 4321              	 .align 2
 4322              	 .code 16
 4323              	 .thumb_func
 4325              	E_EEPROM_XMC1_lReadMarkerBlocks:
 4326              	.LFB83:
2210:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2211:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2212:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  :
2213:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2214:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t : marker_dirty_state
2215:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2216:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will read the Block marker contents
2217:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2218:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void)
2219:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4327              	 .loc 2 2219 0
 4328              	 .cfi_startproc
 4329 0000 80B5     	 push {r7,lr}
 4330              	.LCFI116:
 4331              	 .cfi_def_cfa_offset 8
 4332              	 .cfi_offset 7,-8
 4333              	 .cfi_offset 14,-4
 4334 0002 88B0     	 sub sp,sp,#32
 4335              	.LCFI117:
 4336              	 .cfi_def_cfa_offset 40
 4337 0004 00AF     	 add r7,sp,#0
 4338              	.LCFI118:
 4339              	 .cfi_def_cfa_register 7
2220:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2221:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t bank;
2222:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block;
2223:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t temp_bank_state;
2224:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t state_marker_cnt;
2225:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t temp_state_marker;
2226:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_dirty_state;
2227:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2228:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2229:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4340              	 .loc 2 2229 0
 4341 0006 204B     	 ldr r3,.L316
 4342 0008 5B68     	 ldr r3,[r3,#4]
 4343 000a 3B61     	 str r3,[r7,#16]
2230:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2231:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Initialize Local variables */
2232:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   temp_bank_state = 0U;
 4344              	 .loc 2 2232 0
 4345 000c 0023     	 mov r3,#0
 4346 000e FB61     	 str r3,[r7,#28]
2233:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_dirty_state = 0U;
 4347              	 .loc 2 2233 0
 4348 0010 0023     	 mov r3,#0
 4349 0012 7B61     	 str r3,[r7,#20]
2234:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   state_marker_cnt = 0U;
 4350              	 .loc 2 2234 0
 4351 0014 0023     	 mov r3,#0
 4352 0016 BB61     	 str r3,[r7,#24]
 4353              	.L314:
2235:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2236:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2237:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Prepare the variables for state block update */
2238:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     temp_bank_state = (uint32_t)((uint32_t)temp_bank_state << (uint32_t)1U);
 4354              	 .loc 2 2238 0
 4355 0018 FB69     	 ldr r3,[r7,#28]
 4356 001a 5B00     	 lsl r3,r3,#1
 4357 001c FB61     	 str r3,[r7,#28]
2239:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2240:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     bank  = (uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS;
 4358              	 .loc 2 2240 0
 4359 001e BB69     	 ldr r3,[r7,#24]
 4360 0020 9B08     	 lsr r3,r3,#2
 4361 0022 FB60     	 str r3,[r7,#12]
2241:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block = (uint32_t)state_marker_cnt - ((uint32_t)bank << E_EEPROM_XMC1_TWO_BIT_POS);
 4362              	 .loc 2 2241 0
 4363 0024 FB68     	 ldr r3,[r7,#12]
 4364 0026 9B00     	 lsl r3,r3,#2
 4365 0028 BA69     	 ldr r2,[r7,#24]
 4366 002a D31A     	 sub r3,r2,r3
 4367 002c BB60     	 str r3,[r7,#8]
2242:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2243:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Read the state block of bank*/
2244:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     temp_state_marker = E_EEPROM_XMC1_lReadVerifyMarker(bank , block);
 4368              	 .loc 2 2244 0
 4369 002e FA68     	 ldr r2,[r7,#12]
 4370 0030 BB68     	 ldr r3,[r7,#8]
 4371 0032 101C     	 mov r0,r2
 4372 0034 191C     	 mov r1,r3
 4373 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadVerifyMarker
 4374 003a 031C     	 mov r3,r0
 4375 003c 7B60     	 str r3,[r7,#4]
2245:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2246:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (temp_state_marker == E_EEPROM_XMC1_ALL_ONES)
 4376              	 .loc 2 2246 0
 4377 003e 7B68     	 ldr r3,[r7,#4]
 4378 0040 0133     	 add r3,r3,#1
 4379 0042 04D1     	 bne .L311
2247:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2248:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      temp_bank_state |= 1U;
 4380              	 .loc 2 2248 0
 4381 0044 FB69     	 ldr r3,[r7,#28]
 4382 0046 0122     	 mov r2,#1
 4383 0048 1343     	 orr r3,r2
 4384 004a FB61     	 str r3,[r7,#28]
 4385 004c 0CE0     	 b .L312
 4386              	.L311:
2249:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2250:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (temp_state_marker == E_EEPROM_XMC1_ALL_ZEROS)
 4387              	 .loc 2 2250 0
 4388 004e 7B68     	 ldr r3,[r7,#4]
 4389 0050 002B     	 cmp r3,#0
 4390 0052 09D0     	 beq .L312
2251:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2252:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      temp_bank_state |= 0U;
2253:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2254:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2255:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2256:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      indx = (uint32_t)((uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS);
 4391              	 .loc 2 2256 0
 4392 0054 BB69     	 ldr r3,[r7,#24]
 4393 0056 9B08     	 lsr r3,r3,#2
 4394 0058 3B60     	 str r3,[r7]
2257:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****      marker_dirty_state |= (uint32_t)((uint32_t)1U << (uint32_t)indx);
 4395              	 .loc 2 2257 0
 4396 005a 3B68     	 ldr r3,[r7]
 4397 005c 0122     	 mov r2,#1
 4398 005e 9A40     	 lsl r2,r2,r3
 4399 0060 131C     	 mov r3,r2
 4400 0062 7A69     	 ldr r2,[r7,#20]
 4401 0064 1343     	 orr r3,r2
 4402 0066 7B61     	 str r3,[r7,#20]
 4403              	.L312:
2258:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2259:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Update the counter "StateBlockCnt" */
2260:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     state_marker_cnt++;
 4404              	 .loc 2 2260 0
 4405 0068 BB69     	 ldr r3,[r7,#24]
 4406 006a 0133     	 add r3,r3,#1
 4407 006c BB61     	 str r3,[r7,#24]
2261:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (state_marker_cnt < E_EEPROM_XMC1_EIGHT_BYTES);
 4408              	 .loc 2 2261 0
 4409 006e BB69     	 ldr r3,[r7,#24]
 4410 0070 072B     	 cmp r3,#7
 4411 0072 D1D9     	 bls .L314
2262:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2263:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Update Global variables */
2264:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->init_gc_state = temp_bank_state;
 4412              	 .loc 2 2264 0
 4413 0074 3A69     	 ldr r2,[r7,#16]
 4414 0076 BC23     	 mov r3,#188
 4415 0078 5B00     	 lsl r3,r3,#1
 4416 007a F969     	 ldr r1,[r7,#28]
 4417 007c D150     	 str r1,[r2,r3]
2265:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2266:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (marker_dirty_state);
 4418              	 .loc 2 2266 0
 4419 007e 7B69     	 ldr r3,[r7,#20]
2267:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4420              	 .loc 2 2267 0
 4421 0080 181C     	 mov r0,r3
 4422 0082 BD46     	 mov sp,r7
 4423 0084 08B0     	 add sp,sp,#32
 4424              	 
 4425 0086 80BD     	 pop {r7,pc}
 4426              	.L317:
 4427              	 .align 2
 4428              	.L316:
 4429 0088 00000000 	 .word E_EEPROM_XMC1_0
 4430              	 .cfi_endproc
 4431              	.LFE83:
 4433              	 .section .text.E_EEPROM_XMC1_lReadVerifyMarker,"ax",%progbits
 4434              	 .align 2
 4435              	 .code 16
 4436              	 .thumb_func
 4438              	E_EEPROM_XMC1_lReadVerifyMarker:
 4439              	.LFB84:
2268:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2269:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2270:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : Bank  - Bank Number ( 0 / 1 )
2271:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             Block - Block position
2272:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2273:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t : E_EEPROM_XMC1_ALL_ONES
2274:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    E_EEPROM_XMC1_ALL_ZEROS
2275:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                    E_EEPROM_XMC1_MB_DIRTY
2276:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2277:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : This function will verify the marker contents read out from state page.
2278:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2279:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block)
2280:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4440              	 .loc 2 2280 0
 4441              	 .cfi_startproc
 4442 0000 80B5     	 push {r7,lr}
 4443              	.LCFI119:
 4444              	 .cfi_def_cfa_offset 8
 4445              	 .cfi_offset 7,-8
 4446              	 .cfi_offset 14,-4
 4447 0002 8AB0     	 sub sp,sp,#40
 4448              	.LCFI120:
 4449              	 .cfi_def_cfa_offset 48
 4450 0004 00AF     	 add r7,sp,#0
 4451              	.LCFI121:
 4452              	 .cfi_def_cfa_register 7
 4453 0006 7860     	 str r0,[r7,#4]
 4454 0008 3960     	 str r1,[r7]
2281:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2282:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t return_val;
2283:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t ones_counter;
2284:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t zeros_counter;
2285:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t marker_block_addr;
2286:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *marker_array_ptr;
2287:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2288:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2289:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4455              	 .loc 2 2289 0
 4456 000a 2B4B     	 ldr r3,.L328
 4457 000c 5B68     	 ldr r3,[r3,#4]
 4458 000e 7B61     	 str r3,[r7,#20]
2290:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2291:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   ones_counter = 0U;
 4459              	 .loc 2 2291 0
 4460 0010 0023     	 mov r3,#0
 4461 0012 FB61     	 str r3,[r7,#28]
2292:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   zeros_counter = 0U;
 4462              	 .loc 2 2292 0
 4463 0014 0023     	 mov r3,#0
 4464 0016 BB61     	 str r3,[r7,#24]
2293:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
 4465              	 .loc 2 2293 0
 4466 0018 7B69     	 ldr r3,[r7,#20]
 4467 001a 5C33     	 add r3,r3,#92
 4468 001c 3B61     	 str r3,[r7,#16]
2294:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2295:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Calculate the Marker Block address from bank and Block size*/
2296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
2297:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
 4469              	 .loc 2 2297 0
 4470 001e 7A68     	 ldr r2,[r7,#4]
 4471 0020 131C     	 mov r3,r2
 4472 0022 5B00     	 lsl r3,r3,#1
 4473 0024 9B18     	 add r3,r3,r2
 4474 0026 1B01     	 lsl r3,r3,#4
 4475 0028 1A1C     	 mov r2,r3
 4476 002a 3B68     	 ldr r3,[r7]
 4477 002c D318     	 add r3,r2,r3
 4478 002e 234A     	 ldr r2,.L328+4
 4479 0030 9446     	 mov ip,r2
 4480 0032 6344     	 add r3,r3,ip
2296:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
 4481              	 .loc 2 2296 0
 4482 0034 1B01     	 lsl r3,r3,#4
 4483 0036 FB60     	 str r3,[r7,#12]
2298:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                       ((uint32_t)block * (uint32_t)E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
2299:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2300:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2301:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 4484              	 .loc 2 2301 0
 4485 0038 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2302:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2303:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read one complete block of data (4 Words = 128 bit) from the targeted Marker Block */
2304:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lReadSingleBlock(marker_block_addr, (uint32_t*)(void*)marker_array_ptr);
 4486              	 .loc 2 2304 0
 4487 003c FA68     	 ldr r2,[r7,#12]
 4488 003e 3B69     	 ldr r3,[r7,#16]
 4489 0040 101C     	 mov r0,r2
 4490 0042 191C     	 mov r1,r3
 4491 0044 FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2305:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2306:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Check for any flash hardware errors*/
2307:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (E_EEPROM_XMC1_lGetFlashStatus())
 4492              	 .loc 2 2307 0
 4493 0048 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4494 004c 031E     	 sub r3,r0,#0
 4495 004e 02D0     	 beq .L319
2308:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2309:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Any Hardware errors will result in Dirty state*/
2310:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     return_val = E_EEPROM_XMC1_MB_DIRTY;
 4496              	 .loc 2 2310 0
 4497 0050 DD23     	 mov r3,#221
 4498 0052 3B62     	 str r3,[r7,#32]
 4499 0054 2BE0     	 b .L320
 4500              	.L319:
2311:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2312:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2313:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
 4501              	 .loc 2 2314 0
 4502 0056 0023     	 mov r3,#0
 4503 0058 7B62     	 str r3,[r7,#36]
 4504 005a 16E0     	 b .L321
 4505              	.L324:
2315:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2316:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check for the Marker field and verify Marker either 0 or 1*/
2317:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ZEROS)
 4506              	 .loc 2 2317 0
 4507 005c 7B6A     	 ldr r3,[r7,#36]
 4508 005e 9B00     	 lsl r3,r3,#2
 4509 0060 3A69     	 ldr r2,[r7,#16]
 4510 0062 D318     	 add r3,r2,r3
 4511 0064 1B68     	 ldr r3,[r3]
 4512 0066 002B     	 cmp r3,#0
 4513 0068 02D1     	 bne .L322
2318:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2319:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         zeros_counter++;
 4514              	 .loc 2 2319 0
 4515 006a BB69     	 ldr r3,[r7,#24]
 4516 006c 0133     	 add r3,r3,#1
 4517 006e BB61     	 str r3,[r7,#24]
 4518              	.L322:
2320:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2321:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2322:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
 4519              	 .loc 2 2322 0
 4520 0070 7B6A     	 ldr r3,[r7,#36]
 4521 0072 9B00     	 lsl r3,r3,#2
 4522 0074 3A69     	 ldr r2,[r7,#16]
 4523 0076 D318     	 add r3,r2,r3
 4524 0078 1B68     	 ldr r3,[r3]
 4525 007a 0133     	 add r3,r3,#1
 4526 007c 02D1     	 bne .L323
2323:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2324:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         ones_counter++;
 4527              	 .loc 2 2324 0
 4528 007e FB69     	 ldr r3,[r7,#28]
 4529 0080 0133     	 add r3,r3,#1
 4530 0082 FB61     	 str r3,[r7,#28]
 4531              	.L323:
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4532              	 .loc 2 2314 0 discriminator 2
 4533 0084 7B6A     	 ldr r3,[r7,#36]
 4534 0086 0133     	 add r3,r3,#1
 4535 0088 7B62     	 str r3,[r7,#36]
 4536              	.L321:
2314:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4537              	 .loc 2 2314 0 is_stmt 0 discriminator 1
 4538 008a 7B6A     	 ldr r3,[r7,#36]
 4539 008c 032B     	 cmp r3,#3
 4540 008e E5D9     	 bls .L324
2325:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2326:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2327:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (ones_counter == E_EEPROM_XMC1_FOUR_BYTES)
 4541              	 .loc 2 2327 0 is_stmt 1
 4542 0090 FB69     	 ldr r3,[r7,#28]
 4543 0092 042B     	 cmp r3,#4
 4544 0094 03D1     	 bne .L325
2328:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2329:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_ALL_ONES;
 4545              	 .loc 2 2329 0
 4546 0096 0123     	 mov r3,#1
 4547 0098 5B42     	 neg r3,r3
 4548 009a 3B62     	 str r3,[r7,#32]
 4549 009c 07E0     	 b .L320
 4550              	.L325:
2330:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2331:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else if (zeros_counter == E_EEPROM_XMC1_FOUR_BYTES)
 4551              	 .loc 2 2331 0
 4552 009e BB69     	 ldr r3,[r7,#24]
 4553 00a0 042B     	 cmp r3,#4
 4554 00a2 02D1     	 bne .L326
2332:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2333:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_ALL_ZEROS;
 4555              	 .loc 2 2333 0
 4556 00a4 0023     	 mov r3,#0
 4557 00a6 3B62     	 str r3,[r7,#32]
 4558 00a8 01E0     	 b .L320
 4559              	.L326:
2334:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2335:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2336:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2337:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       return_val = E_EEPROM_XMC1_MB_DIRTY;
 4560              	 .loc 2 2337 0
 4561 00aa DD23     	 mov r3,#221
 4562 00ac 3B62     	 str r3,[r7,#32]
 4563              	.L320:
2338:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2339:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2340:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (return_val);
 4564              	 .loc 2 2340 0
 4565 00ae 3B6A     	 ldr r3,[r7,#32]
2341:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4566              	 .loc 2 2341 0
 4567 00b0 181C     	 mov r0,r3
 4568 00b2 BD46     	 mov sp,r7
 4569 00b4 0AB0     	 add sp,sp,#40
 4570              	 
 4571 00b6 80BD     	 pop {r7,pc}
 4572              	.L329:
 4573              	 .align 2
 4574              	.L328:
 4575 00b8 00000000 	 .word E_EEPROM_XMC1_0
 4576 00bc A0100001 	 .word 16781472
 4577              	 .cfi_endproc
 4578              	.LFE84:
 4580              	 .section .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer,"ax",%progbits
 4581              	 .align 2
 4582              	 .code 16
 4583              	 .thumb_func
 4585              	E_EEPROM_XMC1_lSetMarkerBlockBuffer:
 4586              	.LFB85:
2342:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2343:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2344:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2345:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2346:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2347:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2348:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : This function will update the write buffer for a particular bank marker state
2349:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2350:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void)
2351:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4587              	 .loc 2 2351 0
 4588              	 .cfi_startproc
 4589 0000 80B5     	 push {r7,lr}
 4590              	.LCFI122:
 4591              	 .cfi_def_cfa_offset 8
 4592              	 .cfi_offset 7,-8
 4593              	 .cfi_offset 14,-4
 4594 0002 84B0     	 sub sp,sp,#16
 4595              	.LCFI123:
 4596              	 .cfi_def_cfa_offset 24
 4597 0004 00AF     	 add r7,sp,#0
 4598              	.LCFI124:
 4599              	 .cfi_def_cfa_register 7
2352:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *array_ptr;
2353:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2354:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2355:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4600              	 .loc 2 2355 0
 4601 0006 0C4B     	 ldr r3,.L333
 4602 0008 5B68     	 ldr r3,[r3,#4]
 4603 000a BB60     	 str r3,[r7,#8]
2356:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2357:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
 4604              	 .loc 2 2357 0
 4605 000c BB68     	 ldr r3,[r7,#8]
 4606 000e 5C33     	 add r3,r3,#92
 4607 0010 7B60     	 str r3,[r7,#4]
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4608              	 .loc 2 2358 0
 4609 0012 0023     	 mov r3,#0
 4610 0014 FB60     	 str r3,[r7,#12]
 4611 0016 08E0     	 b .L331
 4612              	.L332:
2359:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2360:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
 4613              	 .loc 2 2360 0 discriminator 3
 4614 0018 FB68     	 ldr r3,[r7,#12]
 4615 001a 9B00     	 lsl r3,r3,#2
 4616 001c 7A68     	 ldr r2,[r7,#4]
 4617 001e D318     	 add r3,r2,r3
 4618 0020 0022     	 mov r2,#0
 4619 0022 1A60     	 str r2,[r3]
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4620              	 .loc 2 2358 0 discriminator 3
 4621 0024 FB68     	 ldr r3,[r7,#12]
 4622 0026 0133     	 add r3,r3,#1
 4623 0028 FB60     	 str r3,[r7,#12]
 4624              	.L331:
2358:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
 4625              	 .loc 2 2358 0 is_stmt 0 discriminator 1
 4626 002a FB68     	 ldr r3,[r7,#12]
 4627 002c 032B     	 cmp r3,#3
 4628 002e F3D9     	 bls .L332
2361:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2362:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2363:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4629              	 .loc 2 2363 0 is_stmt 1
 4630 0030 BD46     	 mov sp,r7
 4631 0032 04B0     	 add sp,sp,#16
 4632              	 
 4633 0034 80BD     	 pop {r7,pc}
 4634              	.L334:
 4635 0036 C046     	 .align 2
 4636              	.L333:
 4637 0038 00000000 	 .word E_EEPROM_XMC1_0
 4638              	 .cfi_endproc
 4639              	.LFE85:
 4641              	 .section .text.E_EEPROM_XMC1_lSetMarkerPageBuffer,"ax",%progbits
 4642              	 .align 2
 4643              	 .code 16
 4644              	 .thumb_func
 4646              	E_EEPROM_XMC1_lSetMarkerPageBuffer:
 4647              	.LFB86:
2364:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2365:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2366:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : State - Marker State
2367:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2368:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2369:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2370:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Fill complete Marker PAGE as per the below defined format.
2371:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2372:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                                  WORD - 0      WORD - 1      WORD - 2     WORD - 3
2373:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2374:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK0 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2375:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK1 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2376:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK2 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2377:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK3 -  (ZEROS/ONES)  (ZEROS/ONES)   (ZEROS/ONES)   (ZEROS/ONES)
2378:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK4 -  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2379:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK5 -  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2380:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     ----------------------------------------------------------------------
2381:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     ----------------------------------------------------------------------
2382:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                     BLOCK16-  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
2383:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2384:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state)
2385:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4648              	 .loc 2 2385 0
 4649              	 .cfi_startproc
 4650 0000 80B5     	 push {r7,lr}
 4651              	.LCFI125:
 4652              	 .cfi_def_cfa_offset 8
 4653              	 .cfi_offset 7,-8
 4654              	 .cfi_offset 14,-4
 4655 0002 88B0     	 sub sp,sp,#32
 4656              	.LCFI126:
 4657              	 .cfi_def_cfa_offset 40
 4658 0004 00AF     	 add r7,sp,#0
 4659              	.LCFI127:
 4660              	 .cfi_def_cfa_register 7
 4661 0006 7860     	 str r0,[r7,#4]
2386:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2387:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t bit_mask;
2388:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t word_data;
2389:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t *array_ptr;
2390:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2391:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2392:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4662              	 .loc 2 2392 0
 4663 0008 1E4B     	 ldr r3,.L344
 4664 000a 5B68     	 ldr r3,[r3,#4]
 4665 000c FB60     	 str r3,[r7,#12]
2393:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2394:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   array_ptr = (uint32_t*)(void*)data_ptr->page_write_buffer;
 4666              	 .loc 2 2394 0
 4667 000e FB68     	 ldr r3,[r7,#12]
 4668 0010 7033     	 add r3,r3,#112
 4669 0012 3B61     	 str r3,[r7,#16]
2395:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /*
2396:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * Depending upon the state received check the bit positions where a state marker has to be updat
2397:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    * get the actual state. Fill the first four blocks of the page with the state marker information
2398:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****    */
2399:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2400:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Fill the first rest 4 blocks of the page with marker data  */
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
 4670              	 .loc 2 2401 0
 4671 0014 0023     	 mov r3,#0
 4672 0016 BB61     	 str r3,[r7,#24]
 4673 0018 1EE0     	 b .L336
 4674              	.L341:
2402:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2403:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if ( (state & (E_EEPROM_XMC1_MARKER_POSITION >> bit_mask )) == 0U )
 4675              	 .loc 2 2403 0
 4676 001a BB69     	 ldr r3,[r7,#24]
 4677 001c 8022     	 mov r2,#128
 4678 001e DA40     	 lsr r2,r2,r3
 4679 0020 131C     	 mov r3,r2
 4680 0022 7A68     	 ldr r2,[r7,#4]
 4681 0024 1340     	 and r3,r2
 4682 0026 02D1     	 bne .L337
2404:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2405:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        word_data = E_EEPROM_XMC1_ALL_ZEROS;
 4683              	 .loc 2 2405 0
 4684 0028 0023     	 mov r3,#0
 4685 002a 7B61     	 str r3,[r7,#20]
 4686 002c 02E0     	 b .L338
 4687              	.L337:
2406:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2407:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2408:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2409:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        word_data = E_EEPROM_XMC1_ALL_ONES;
 4688              	 .loc 2 2409 0
 4689 002e 0123     	 mov r3,#1
 4690 0030 5B42     	 neg r3,r3
 4691 0032 7B61     	 str r3,[r7,#20]
 4692              	.L338:
2410:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
 4693              	 .loc 2 2411 0
 4694 0034 0023     	 mov r3,#0
 4695 0036 FB61     	 str r3,[r7,#28]
 4696 0038 08E0     	 b .L339
 4697              	.L340:
2412:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2413:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        *array_ptr = word_data;
 4698              	 .loc 2 2413 0 discriminator 3
 4699 003a 3B69     	 ldr r3,[r7,#16]
 4700 003c 7A69     	 ldr r2,[r7,#20]
 4701 003e 1A60     	 str r2,[r3]
2414:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        array_ptr++;
 4702              	 .loc 2 2414 0 discriminator 3
 4703 0040 3B69     	 ldr r3,[r7,#16]
 4704 0042 0433     	 add r3,r3,#4
 4705 0044 3B61     	 str r3,[r7,#16]
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4706              	 .loc 2 2411 0 discriminator 3
 4707 0046 FB69     	 ldr r3,[r7,#28]
 4708 0048 0133     	 add r3,r3,#1
 4709 004a FB61     	 str r3,[r7,#28]
 4710              	.L339:
2411:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
 4711              	 .loc 2 2411 0 is_stmt 0 discriminator 1
 4712 004c FB69     	 ldr r3,[r7,#28]
 4713 004e 032B     	 cmp r3,#3
 4714 0050 F3D9     	 bls .L340
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4715              	 .loc 2 2401 0 is_stmt 1 discriminator 2
 4716 0052 BB69     	 ldr r3,[r7,#24]
 4717 0054 0133     	 add r3,r3,#1
 4718 0056 BB61     	 str r3,[r7,#24]
 4719              	.L336:
2401:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4720              	 .loc 2 2401 0 is_stmt 0 discriminator 1
 4721 0058 BB69     	 ldr r3,[r7,#24]
 4722 005a 032B     	 cmp r3,#3
 4723 005c DDD9     	 bls .L341
2415:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2416:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2417:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2418:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Fill the first rest 12 blocks of the page with all ones*/
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
 4724              	 .loc 2 2419 0 is_stmt 1
 4725 005e 0023     	 mov r3,#0
 4726 0060 FB61     	 str r3,[r7,#28]
 4727 0062 09E0     	 b .L342
 4728              	.L343:
2420:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2421:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     *array_ptr = E_EEPROM_XMC1_ALL_ONES;
 4729              	 .loc 2 2421 0 discriminator 3
 4730 0064 3B69     	 ldr r3,[r7,#16]
 4731 0066 0122     	 mov r2,#1
 4732 0068 5242     	 neg r2,r2
 4733 006a 1A60     	 str r2,[r3]
2422:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     array_ptr++;
 4734              	 .loc 2 2422 0 discriminator 3
 4735 006c 3B69     	 ldr r3,[r7,#16]
 4736 006e 0433     	 add r3,r3,#4
 4737 0070 3B61     	 str r3,[r7,#16]
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4738              	 .loc 2 2419 0 discriminator 3
 4739 0072 FB69     	 ldr r3,[r7,#28]
 4740 0074 0133     	 add r3,r3,#1
 4741 0076 FB61     	 str r3,[r7,#28]
 4742              	.L342:
2419:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 4743              	 .loc 2 2419 0 is_stmt 0 discriminator 1
 4744 0078 FB69     	 ldr r3,[r7,#28]
 4745 007a 2F2B     	 cmp r3,#47
 4746 007c F2D9     	 bls .L343
2423:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2424:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2425:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4747              	 .loc 2 2425 0 is_stmt 1
 4748 007e BD46     	 mov sp,r7
 4749 0080 08B0     	 add sp,sp,#32
 4750              	 
 4751 0082 80BD     	 pop {r7,pc}
 4752              	.L345:
 4753              	 .align 2
 4754              	.L344:
 4755 0084 00000000 	 .word E_EEPROM_XMC1_0
 4756              	 .cfi_endproc
 4757              	.LFE86:
 4759              	 .section .text.E_EEPROM_XMC1_lEraseBank,"ax",%progbits
 4760              	 .align 2
 4761              	 .code 16
 4762              	 .thumb_func
 4764              	E_EEPROM_XMC1_lEraseBank:
 4765              	.LFB87:
2426:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2427:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2428:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : page_address - Bank end address
2429:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2430:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2431:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2432:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Erases the particular bank
2433:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2434:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address)
2435:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4766              	 .loc 2 2435 0
 4767              	 .cfi_startproc
 4768 0000 80B5     	 push {r7,lr}
 4769              	.LCFI128:
 4770              	 .cfi_def_cfa_offset 8
 4771              	 .cfi_offset 7,-8
 4772              	 .cfi_offset 14,-4
 4773 0002 84B0     	 sub sp,sp,#16
 4774              	.LCFI129:
 4775              	 .cfi_def_cfa_offset 24
 4776 0004 00AF     	 add r7,sp,#0
 4777              	.LCFI130:
 4778              	 .cfi_def_cfa_register 7
 4779 0006 7860     	 str r0,[r7,#4]
2436:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2437:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2438:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2439:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   page_address = ((page_address) - E_EEPROM_XMC1_FLASH_PAGE_SIZE );
 4780              	 .loc 2 2439 0
 4781 0008 7B68     	 ldr r3,[r7,#4]
 4782 000a 013B     	 sub r3,r3,#1
 4783 000c FF3B     	 sub r3,r3,#255
 4784 000e 7B60     	 str r3,[r7,#4]
2440:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   page_address += 1U;
 4785              	 .loc 2 2440 0
 4786 0010 7B68     	 ldr r3,[r7,#4]
 4787 0012 0133     	 add r3,r3,#1
 4788 0014 7B60     	 str r3,[r7,#4]
2441:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 4789              	 .loc 2 2441 0
 4790 0016 0023     	 mov r3,#0
 4791 0018 FB60     	 str r3,[r7,#12]
 4792              	.L348:
2442:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2443:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2444:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2445:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Clear all error status flags before flash operation*/
2446:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 4793              	 .loc 2 2446 0 discriminator 2
 4794 001a FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2447:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2448:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lEraseSinglePage(page_address);
 4795              	 .loc 2 2448 0 discriminator 2
 4796 001e 7B68     	 ldr r3,[r7,#4]
 4797 0020 181C     	 mov r0,r3
 4798 0022 FFF7FEFF 	 bl E_EEPROM_XMC1_lEraseSinglePage
2449:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2450:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGetFlashStatus();
 4799              	 .loc 2 2450 0 discriminator 2
 4800 0026 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4801 002a 031C     	 mov r3,r0
 4802 002c BB60     	 str r3,[r7,#8]
2451:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2452:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     page_address = page_address - (E_EEPROM_XMC1_FLASH_PAGE_SIZE );
 4803              	 .loc 2 2452 0 discriminator 2
 4804 002e 7B68     	 ldr r3,[r7,#4]
 4805 0030 013B     	 sub r3,r3,#1
 4806 0032 FF3B     	 sub r3,r3,#255
 4807 0034 7B60     	 str r3,[r7,#4]
2453:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     indx++;
 4808              	 .loc 2 2453 0 discriminator 2
 4809 0036 FB68     	 ldr r3,[r7,#12]
 4810 0038 0133     	 add r3,r3,#1
 4811 003a FB60     	 str r3,[r7,#12]
2454:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ((indx <E_EEPROM_XMC1_BANK_PAGES) && (status == 0U));
 4812              	 .loc 2 2454 0 discriminator 2
 4813 003c FB68     	 ldr r3,[r7,#12]
 4814 003e 022B     	 cmp r3,#2
 4815 0040 02D8     	 bhi .L347
 4816              	 .loc 2 2454 0 is_stmt 0 discriminator 1
 4817 0042 BB68     	 ldr r3,[r7,#8]
 4818 0044 002B     	 cmp r3,#0
 4819 0046 E8D0     	 beq .L348
 4820              	.L347:
2455:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2456:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 4821              	 .loc 2 2456 0 is_stmt 1
 4822 0048 BB68     	 ldr r3,[r7,#8]
2457:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4823              	 .loc 2 2457 0
 4824 004a 181C     	 mov r0,r3
 4825 004c BD46     	 mov sp,r7
 4826 004e 04B0     	 add sp,sp,#16
 4827              	 
 4828 0050 80BD     	 pop {r7,pc}
 4829              	 .cfi_endproc
 4830              	.LFE87:
 4832 0052 C046     	 .section .text.E_EEPROM_XMC1_lGCWrite,"ax",%progbits
 4833              	 .align 2
 4834              	 .code 16
 4835              	 .thumb_func
 4837              	E_EEPROM_XMC1_lGCWrite:
 4838              	.LFB88:
2458:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2459:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2460:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_address  - flash address
2461:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2462:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2463:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2464:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Local function to write data into specified location during GC operation
2465:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2466:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address)
2467:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4839              	 .loc 2 2467 0
 4840              	 .cfi_startproc
 4841 0000 80B5     	 push {r7,lr}
 4842              	.LCFI131:
 4843              	 .cfi_def_cfa_offset 8
 4844              	 .cfi_offset 7,-8
 4845              	 .cfi_offset 14,-4
 4846 0002 84B0     	 sub sp,sp,#16
 4847              	.LCFI132:
 4848              	 .cfi_def_cfa_offset 24
 4849 0004 00AF     	 add r7,sp,#0
 4850              	.LCFI133:
 4851              	 .cfi_def_cfa_register 7
 4852 0006 7860     	 str r0,[r7,#4]
2468:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2469:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2470:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2471:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4853              	 .loc 2 2471 0
 4854 0008 0A4B     	 ldr r3,.L352
 4855 000a 5B68     	 ldr r3,[r3,#4]
 4856 000c FB60     	 str r3,[r7,#12]
2472:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2473:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2474:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 4857              	 .loc 2 2474 0
 4858 000e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2475:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2476:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write a single block into flash*/
2477:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lWriteSingleBlock(block_address, (uint32_t*)(void*)data_ptr->read_write_buffer);
 4859              	 .loc 2 2477 0
 4860 0012 FB68     	 ldr r3,[r7,#12]
 4861 0014 5C33     	 add r3,r3,#92
 4862 0016 7A68     	 ldr r2,[r7,#4]
 4863 0018 101C     	 mov r0,r2
 4864 001a 191C     	 mov r1,r3
 4865 001c FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSingleBlock
2478:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 4866              	 .loc 2 2478 0
 4867 0020 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 4868 0024 031C     	 mov r3,r0
 4869 0026 BB60     	 str r3,[r7,#8]
2479:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 4870              	 .loc 2 2479 0
 4871 0028 BB68     	 ldr r3,[r7,#8]
2480:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 4872              	 .loc 2 2480 0
 4873 002a 181C     	 mov r0,r3
 4874 002c BD46     	 mov sp,r7
 4875 002e 04B0     	 add sp,sp,#16
 4876              	 
 4877 0030 80BD     	 pop {r7,pc}
 4878              	.L353:
 4879 0032 C046     	 .align 2
 4880              	.L352:
 4881 0034 00000000 	 .word E_EEPROM_XMC1_0
 4882              	 .cfi_endproc
 4883              	.LFE88:
 4885              	 .section .text.E_EEPROM_XMC1_lLocalWrite,"ax",%progbits
 4886              	 .align 2
 4887              	 .code 16
 4888              	 .thumb_func
 4890              	E_EEPROM_XMC1_lLocalWrite:
 4891              	.LFB89:
2481:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2482:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2483:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2484:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2485:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2486:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   invalidate    - (0 = normal write / 1 = invalidate block)
2487:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2488:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2489:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Common local write function to do write block function or invalidate block.
2490:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2491:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lLocalWrite( uint8_t block_number,
2492:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                            uint8_t* data_buffer_ptr,
2493:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                            uint32_t invalidate)
2494:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 4892              	 .loc 2 2494 0
 4893              	 .cfi_startproc
 4894 0000 80B5     	 push {r7,lr}
 4895              	.LCFI134:
 4896              	 .cfi_def_cfa_offset 8
 4897              	 .cfi_offset 7,-8
 4898              	 .cfi_offset 14,-4
 4899 0002 8CB0     	 sub sp,sp,#48
 4900              	.LCFI135:
 4901              	 .cfi_def_cfa_offset 56
 4902 0004 00AF     	 add r7,sp,#0
 4903              	.LCFI136:
 4904              	 .cfi_def_cfa_register 7
 4905 0006 B960     	 str r1,[r7,#8]
 4906 0008 7A60     	 str r2,[r7,#4]
 4907 000a 0F23     	 mov r3,#15
 4908 000c FB18     	 add r3,r7,r3
 4909 000e 021C     	 add r2,r0,#0
 4910 0010 1A70     	 strb r2,[r3]
2495:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2496:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_blocks;
2497:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t perform_write;
2498:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
2499:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_blocks;
2500:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2501:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
2502:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2503:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 4911              	 .loc 2 2503 0
 4912 0012 3B4B     	 ldr r3,.L365
 4913 0014 5B68     	 ldr r3,[r3,#4]
 4914 0016 7B62     	 str r3,[r7,#36]
2504:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2505:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 4915              	 .loc 2 2505 0
 4916 0018 0023     	 mov r3,#0
 4917 001a FB62     	 str r3,[r7,#44]
2506:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   perform_write = 0U;
 4918              	 .loc 2 2506 0
 4919 001c 0023     	 mov r3,#0
 4920 001e BB62     	 str r3,[r7,#40]
2507:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 4921              	 .loc 2 2507 0
 4922 0020 0F23     	 mov r3,#15
 4923 0022 FB18     	 add r3,r7,r3
 4924 0024 1B78     	 ldrb r3,[r3]
 4925 0026 181C     	 mov r0,r3
 4926 0028 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 4927 002c 031C     	 mov r3,r0
 4928 002e 3B62     	 str r3,[r7,#32]
2508:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 4929              	 .loc 2 2508 0
 4930 0030 334B     	 ldr r3,.L365
 4931 0032 1A68     	 ldr r2,[r3]
 4932 0034 3B6A     	 ldr r3,[r7,#32]
 4933 0036 DB00     	 lsl r3,r3,#3
 4934 0038 D318     	 add r3,r2,r3
 4935 003a FB61     	 str r3,[r7,#28]
2509:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2510:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 4936              	 .loc 2 2510 0
 4937 003c FB69     	 ldr r3,[r7,#28]
 4938 003e 5B68     	 ldr r3,[r3,#4]
 4939 0040 181C     	 mov r0,r3
 4940 0042 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 4941 0046 031C     	 mov r3,r0
 4942 0048 BB61     	 str r3,[r7,#24]
2511:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 4943              	 .loc 2 2511 0
 4944 004a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 4945 004e 031C     	 mov r3,r0
 4946 0050 7B61     	 str r3,[r7,#20]
2512:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2513:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (remaining_blocks < flash_blocks)
 4947              	 .loc 2 2513 0
 4948 0052 7A69     	 ldr r2,[r7,#20]
 4949 0054 BB69     	 ldr r3,[r7,#24]
 4950 0056 9A42     	 cmp r2,r3
 4951 0058 28D2     	 bcs .L355
2514:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2515:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Doesn't do Garbage collection if, GUI option garbage collection is disabled*/
2516:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (E_EEPROM_XMC1_HANDLE_PTR->garbage_collection == 1U)
 4952              	 .loc 2 2516 0
 4953 005a 294B     	 ldr r3,.L365
 4954 005c 1B7B     	 ldrb r3,[r3,#12]
 4955 005e 012B     	 cmp r3,#1
 4956 0060 21D1     	 bne .L356
2517:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2518:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Request for Garbage Collection and continue */
2519:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
 4957              	 .loc 2 2519 0
 4958 0062 7A6A     	 ldr r2,[r7,#36]
 4959 0064 BA23     	 mov r3,#186
 4960 0066 5B00     	 lsl r3,r3,#1
 4961 0068 0421     	 mov r1,#4
 4962 006a D150     	 str r1,[r2,r3]
2520:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lGarbageCollection();
 4963              	 .loc 2 2520 0
 4964 006c FFF7FEFF 	 bl E_EEPROM_XMC1_lGarbageCollection
2521:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2522:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /*Check the size of the GC requested block to check if space is available in the new bank or 
2523:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
 4965              	 .loc 2 2523 0
 4966 0070 FB69     	 ldr r3,[r7,#28]
 4967 0072 5B68     	 ldr r3,[r3,#4]
 4968 0074 181C     	 mov r0,r3
 4969 0076 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
 4970 007a 031C     	 mov r3,r0
 4971 007c BB61     	 str r3,[r7,#24]
2524:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
 4972              	 .loc 2 2524 0
 4973 007e FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFreeDFLASHBlocks
 4974 0082 031C     	 mov r3,r0
 4975 0084 7B61     	 str r3,[r7,#20]
2525:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2526:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Check for GC overflows the complete space in the new bank, hence cant write the GC trigger
2527:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if ((remaining_blocks >= flash_blocks)&&(data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE))
 4976              	 .loc 2 2527 0
 4977 0086 7A69     	 ldr r2,[r7,#20]
 4978 0088 BB69     	 ldr r3,[r7,#24]
 4979 008a 9A42     	 cmp r2,r3
 4980 008c 08D3     	 bcc .L357
 4981              	 .loc 2 2527 0 is_stmt 0 discriminator 1
 4982 008e 7A6A     	 ldr r2,[r7,#36]
 4983 0090 BA23     	 mov r3,#186
 4984 0092 5B00     	 lsl r3,r3,#1
 4985 0094 D358     	 ldr r3,[r2,r3]
 4986 0096 0A2B     	 cmp r3,#10
 4987 0098 02D1     	 bne .L357
2528:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2529:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         perform_write = 1U;
 4988              	 .loc 2 2529 0 is_stmt 1
 4989 009a 0123     	 mov r3,#1
 4990 009c BB62     	 str r3,[r7,#40]
 4991 009e 07E0     	 b .L360
 4992              	.L357:
2530:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2531:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       else
2532:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2533:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
 4993              	 .loc 2 2533 0
 4994 00a0 0523     	 mov r3,#5
 4995 00a2 FB62     	 str r3,[r7,#44]
 4996 00a4 04E0     	 b .L360
 4997              	.L356:
2534:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2535:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2536:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2537:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2538:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_MEMORY_BANK_FULL;
 4998              	 .loc 2 2538 0
 4999 00a6 0623     	 mov r3,#6
 5000 00a8 FB62     	 str r3,[r7,#44]
 5001 00aa 01E0     	 b .L360
 5002              	.L355:
2539:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2540:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2541:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2542:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2543:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     perform_write = 1U;
 5003              	 .loc 2 2543 0
 5004 00ac 0123     	 mov r3,#1
 5005 00ae BB62     	 str r3,[r7,#40]
 5006              	.L360:
2544:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2545:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Write operation Starts */
2546:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (perform_write == 1U)
 5007              	 .loc 2 2546 0
 5008 00b0 BB6A     	 ldr r3,[r7,#40]
 5009 00b2 012B     	 cmp r3,#1
 5010 00b4 1FD1     	 bne .L361
2547:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2548:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->written_block_counter = 0U;
 5011              	 .loc 2 2548 0
 5012 00b6 7B6A     	 ldr r3,[r7,#36]
 5013 00b8 0022     	 mov r2,#0
 5014 00ba 9A65     	 str r2,[r3,#88]
2549:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (invalidate == 1U)
 5015              	 .loc 2 2549 0
 5016 00bc 7B68     	 ldr r3,[r7,#4]
 5017 00be 012B     	 cmp r3,#1
 5018 00c0 0AD1     	 bne .L362
2550:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2551:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lHandleInvalidReq(block_number, user_block_index);
 5019              	 .loc 2 2551 0
 5020 00c2 0F23     	 mov r3,#15
 5021 00c4 FB18     	 add r3,r7,r3
 5022 00c6 1A78     	 ldrb r2,[r3]
 5023 00c8 3B6A     	 ldr r3,[r7,#32]
 5024 00ca 101C     	 mov r0,r2
 5025 00cc 191C     	 mov r1,r3
 5026 00ce FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleInvalidReq
 5027 00d2 031C     	 mov r3,r0
 5028 00d4 FB62     	 str r3,[r7,#44]
 5029 00d6 09E0     	 b .L363
 5030              	.L362:
2552:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2553:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2554:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2555:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lHandleWriteReq(block_number, data_buffer_ptr);
 5031              	 .loc 2 2555 0
 5032 00d8 0F23     	 mov r3,#15
 5033 00da FB18     	 add r3,r7,r3
 5034 00dc 1A78     	 ldrb r2,[r3]
 5035 00de BB68     	 ldr r3,[r7,#8]
 5036 00e0 101C     	 mov r0,r2
 5037 00e2 191C     	 mov r1,r3
 5038 00e4 FFF7FEFF 	 bl E_EEPROM_XMC1_lHandleWriteReq
 5039 00e8 031C     	 mov r3,r0
 5040 00ea FB62     	 str r3,[r7,#44]
 5041              	.L363:
2556:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2557:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status != 0U)
 5042              	 .loc 2 2557 0
 5043 00ec FB6A     	 ldr r3,[r7,#44]
 5044 00ee 002B     	 cmp r3,#0
 5045 00f0 01D0     	 beq .L361
2558:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2559:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
 5046              	 .loc 2 2559 0
 5047 00f2 0123     	 mov r3,#1
 5048 00f4 FB62     	 str r3,[r7,#44]
 5049              	.L361:
2560:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2561:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2562:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5050              	 .loc 2 2562 0
 5051 00f6 FB6A     	 ldr r3,[r7,#44]
2563:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5052              	 .loc 2 2563 0
 5053 00f8 181C     	 mov r0,r3
 5054 00fa BD46     	 mov sp,r7
 5055 00fc 0CB0     	 add sp,sp,#48
 5056              	 
 5057 00fe 80BD     	 pop {r7,pc}
 5058              	.L366:
 5059              	 .align 2
 5060              	.L365:
 5061 0100 00000000 	 .word E_EEPROM_XMC1_0
 5062              	 .cfi_endproc
 5063              	.LFE89:
 5065              	 .section .text.E_EEPROM_XMC1_lHandleWriteReq,"ax",%progbits
 5066              	 .align 2
 5067              	 .code 16
 5068              	 .thumb_func
 5070              	E_EEPROM_XMC1_lHandleWriteReq:
 5071              	.LFB90:
2564:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2565:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2566:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2567:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2568:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2569:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2570:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2571:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Handle function to write one complete data block into flash.
2572:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2573:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr)
2574:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5072              	 .loc 2 2574 0
 5073              	 .cfi_startproc
 5074 0000 80B5     	 push {r7,lr}
 5075              	.LCFI137:
 5076              	 .cfi_def_cfa_offset 8
 5077              	 .cfi_offset 7,-8
 5078              	 .cfi_offset 14,-4
 5079 0002 88B0     	 sub sp,sp,#32
 5080              	.LCFI138:
 5081              	 .cfi_def_cfa_offset 40
 5082 0004 00AF     	 add r7,sp,#0
 5083              	.LCFI139:
 5084              	 .cfi_def_cfa_register 7
 5085 0006 021C     	 mov r2,r0
 5086 0008 3960     	 str r1,[r7]
 5087 000a FB1D     	 add r3,r7,#7
 5088 000c 1A70     	 strb r2,[r3]
2575:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_size;
2576:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t user_block_index;
2577:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2578:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2579:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_BLOCK_t *block_ptr;
2580:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2581:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5089              	 .loc 2 2581 0
 5090 000e 534B     	 ldr r3,.L381
 5091 0010 5B68     	 ldr r3,[r3,#4]
 5092 0012 BB61     	 str r3,[r7,#24]
2582:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2583:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2584:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
 5093              	 .loc 2 2584 0
 5094 0014 FB1D     	 add r3,r7,#7
 5095 0016 1B78     	 ldrb r3,[r3]
 5096 0018 181C     	 mov r0,r3
 5097 001a FFF7FEFF 	 bl E_EEPROM_XMC1_lGetUsrBlockIndex
 5098 001e 031C     	 mov r3,r0
 5099 0020 7B61     	 str r3,[r7,#20]
2585:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
 5100              	 .loc 2 2585 0
 5101 0022 4E4B     	 ldr r3,.L381
 5102 0024 1A68     	 ldr r2,[r3]
 5103 0026 7B69     	 ldr r3,[r7,#20]
 5104 0028 DB00     	 lsl r3,r3,#3
 5105 002a D318     	 add r3,r2,r3
 5106 002c 3B61     	 str r3,[r7,#16]
2586:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_size = block_ptr->size;
 5107              	 .loc 2 2586 0
 5108 002e 3B69     	 ldr r3,[r7,#16]
 5109 0030 5B68     	 ldr r3,[r3,#4]
 5110 0032 FB60     	 str r3,[r7,#12]
2587:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_bytes_count = 0U;
 5111              	 .loc 2 2587 0
 5112 0034 BA69     	 ldr r2,[r7,#24]
 5113 0036 B823     	 mov r3,#184
 5114 0038 5B00     	 lsl r3,r3,#1
 5115 003a 0021     	 mov r1,#0
 5116 003c D150     	 str r1,[r2,r3]
2588:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_state = E_EEPROM_XMC1_FIRST_BLOCK_WRITE;
 5117              	 .loc 2 2588 0
 5118 003e BA69     	 ldr r2,[r7,#24]
 5119 0040 C423     	 mov r3,#196
 5120 0042 5B00     	 lsl r3,r3,#1
 5121 0044 0121     	 mov r1,#1
 5122 0046 D150     	 str r1,[r2,r3]
2589:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 5123              	 .loc 2 2589 0
 5124 0048 0023     	 mov r3,#0
 5125 004a FB61     	 str r3,[r7,#28]
 5126              	.L377:
2590:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2591:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2592:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     switch (data_ptr->user_write_state)
 5127              	 .loc 2 2592 0
 5128 004c BA69     	 ldr r2,[r7,#24]
 5129 004e C423     	 mov r3,#196
 5130 0050 5B00     	 lsl r3,r3,#1
 5131 0052 D358     	 ldr r3,[r2,r3]
 5132 0054 022B     	 cmp r3,#2
 5133 0056 02D0     	 beq .L369
 5134 0058 032B     	 cmp r3,#3
 5135 005a 12D0     	 beq .L370
 5136 005c 4AE0     	 b .L380
 5137              	.L369:
2593:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2594:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_NEXT_BLOCK_WRITE:
2595:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lWriteDataBlock();
 5138              	 .loc 2 2595 0
 5139 005e FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5140 0062 031C     	 mov r3,r0
 5141 0064 FB61     	 str r3,[r7,#28]
2596:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == (uint32_t)0U)
 5142              	 .loc 2 2596 0
 5143 0066 FB69     	 ldr r3,[r7,#28]
 5144 0068 002B     	 cmp r3,#0
 5145 006a 09D1     	 bne .L371
2597:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2598:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         E_EEPROM_XMC1_lPopulateNextBlock(block_number,data_buffer_ptr,block_size);
 5146              	 .loc 2 2598 0
 5147 006c FB1D     	 add r3,r7,#7
 5148 006e 1978     	 ldrb r1,[r3]
 5149 0070 3A68     	 ldr r2,[r7]
 5150 0072 FB68     	 ldr r3,[r7,#12]
 5151 0074 081C     	 mov r0,r1
 5152 0076 111C     	 mov r1,r2
 5153 0078 1A1C     	 mov r2,r3
 5154 007a FFF7FEFF 	 bl E_EEPROM_XMC1_lPopulateNextBlock
2599:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2600:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5155              	 .loc 2 2600 0
 5156 007e 43E0     	 b .L372
 5157              	.L371:
 5158 0080 42E0     	 b .L372
 5159              	.L370:
2601:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2602:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       case E_EEPROM_XMC1_LAST_BLOCK_WRITE:
2603:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_lWriteDataBlock();
 5160              	 .loc 2 2603 0
 5161 0082 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5162 0086 031C     	 mov r3,r0
 5163 0088 FB61     	 str r3,[r7,#28]
2604:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       if (status == (uint32_t)0U)
 5164              	 .loc 2 2604 0
 5165 008a FB69     	 ldr r3,[r7,#28]
 5166 008c 002B     	 cmp r3,#0
 5167 008e 30D1     	 bne .L373
2605:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       {
2606:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         /* Mark the block as inconsistent */
2607:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
 5168              	 .loc 2 2607 0
 5169 0090 BB69     	 ldr r3,[r7,#24]
 5170 0092 D96C     	 ldr r1,[r3,#76]
 5171 0094 BB69     	 ldr r3,[r7,#24]
 5172 0096 7A69     	 ldr r2,[r7,#20]
 5173 0098 D200     	 lsl r2,r2,#3
 5174 009a D150     	 str r1,[r2,r3]
2608:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].status.valid = 1U;
 5175              	 .loc 2 2608 0
 5176 009c BA69     	 ldr r2,[r7,#24]
 5177 009e 7B69     	 ldr r3,[r7,#20]
 5178 00a0 DB00     	 lsl r3,r3,#3
 5179 00a2 D318     	 add r3,r2,r3
 5180 00a4 1A79     	 ldrb r2,[r3,#4]
 5181 00a6 0121     	 mov r1,#1
 5182 00a8 0A43     	 orr r2,r1
 5183 00aa 1A71     	 strb r2,[r3,#4]
2609:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->block_info[user_block_index].status.consistent = 1U;
 5184              	 .loc 2 2609 0
 5185 00ac BA69     	 ldr r2,[r7,#24]
 5186 00ae 7B69     	 ldr r3,[r7,#20]
 5187 00b0 DB00     	 lsl r3,r3,#3
 5188 00b2 D318     	 add r3,r2,r3
 5189 00b4 1A79     	 ldrb r2,[r3,#4]
 5190 00b6 0221     	 mov r1,#2
 5191 00b8 0A43     	 orr r2,r1
 5192 00ba 1A71     	 strb r2,[r3,#4]
2610:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         if (E_EEPROM_XMC1_HANDLE_PTR->data_block_crc ==1U)
 5193              	 .loc 2 2610 0
 5194 00bc 274B     	 ldr r3,.L381
 5195 00be DB7A     	 ldrb r3,[r3,#11]
 5196 00c0 012B     	 cmp r3,#1
 5197 00c2 08D1     	 bne .L374
2611:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2612:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* Updated Cache table Block Header status as CRC enabled block*/
2613:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_info[user_block_index].status.crc = 1U;
 5198              	 .loc 2 2613 0
 5199 00c4 BA69     	 ldr r2,[r7,#24]
 5200 00c6 7B69     	 ldr r3,[r7,#20]
 5201 00c8 DB00     	 lsl r3,r3,#3
 5202 00ca D318     	 add r3,r2,r3
 5203 00cc 1A79     	 ldrb r2,[r3,#4]
 5204 00ce 0821     	 mov r1,#8
 5205 00d0 0A43     	 orr r2,r1
 5206 00d2 1A71     	 strb r2,[r3,#4]
 5207 00d4 07E0     	 b .L375
 5208              	.L374:
2614:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2615:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         else
2616:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         {
2617:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           /* Updated Cache table Block Header status as CRC disabled block*/
2618:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****           data_ptr->block_info[user_block_index].status.crc = 0U;
 5209              	 .loc 2 2618 0
 5210 00d6 BA69     	 ldr r2,[r7,#24]
 5211 00d8 7B69     	 ldr r3,[r7,#20]
 5212 00da DB00     	 lsl r3,r3,#3
 5213 00dc D318     	 add r3,r2,r3
 5214 00de 1A79     	 ldrb r2,[r3,#4]
 5215 00e0 0821     	 mov r1,#8
 5216 00e2 8A43     	 bic r2,r1
 5217 00e4 1A71     	 strb r2,[r3,#4]
 5218              	.L375:
2619:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         }
2620:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         
2621:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****         data_ptr->user_write_state = E_EEPROM_XMC1_BLOCK_WRITE_IDLE;
 5219              	 .loc 2 2621 0
 5220 00e6 BA69     	 ldr r2,[r7,#24]
 5221 00e8 C423     	 mov r3,#196
 5222 00ea 5B00     	 lsl r3,r3,#1
 5223 00ec 0021     	 mov r1,#0
 5224 00ee D150     	 str r1,[r2,r3]
2622:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       }
2623:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5225              	 .loc 2 2623 0
 5226 00f0 0AE0     	 b .L372
 5227              	.L373:
 5228 00f2 09E0     	 b .L372
 5229              	.L380:
2624:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2625:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       default:
2626:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_
 5230              	 .loc 2 2626 0
 5231 00f4 FB1D     	 add r3,r7,#7
 5232 00f6 1978     	 ldrb r1,[r3]
 5233 00f8 3A68     	 ldr r2,[r7]
 5234 00fa FB68     	 ldr r3,[r7,#12]
 5235 00fc 081C     	 mov r0,r1
 5236 00fe 111C     	 mov r1,r2
 5237 0100 1A1C     	 mov r2,r3
 5238 0102 FFF7FEFF 	 bl E_EEPROM_XMC1_lPopulateFirstBlock
2627:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5239              	 .loc 2 2627 0
 5240 0106 C046     	 mov r8,r8
 5241              	.L372:
2628:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2629:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
 5242              	 .loc 2 2629 0
 5243 0108 FB69     	 ldr r3,[r7,#28]
 5244 010a 002B     	 cmp r3,#0
 5245 010c 05D1     	 bne .L376
 5246              	 .loc 2 2629 0 is_stmt 0 discriminator 1
 5247 010e BA69     	 ldr r2,[r7,#24]
 5248 0110 C423     	 mov r3,#196
 5249 0112 5B00     	 lsl r3,r3,#1
 5250 0114 D358     	 ldr r3,[r2,r3]
 5251 0116 002B     	 cmp r3,#0
 5252 0118 98D1     	 bne .L377
 5253              	.L376:
2630:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
 5254              	 .loc 2 2631 0 is_stmt 1
 5255 011a BB69     	 ldr r3,[r7,#24]
 5256 011c DA6C     	 ldr r2,[r3,#76]
2632:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                    (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 5257              	 .loc 2 2632 0
 5258 011e BB69     	 ldr r3,[r7,#24]
 5259 0120 9B6D     	 ldr r3,[r3,#88]
 5260 0122 1B01     	 lsl r3,r3,#4
2631:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                    (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZ
 5261              	 .loc 2 2631 0
 5262 0124 D218     	 add r2,r2,r3
 5263 0126 BB69     	 ldr r3,[r7,#24]
 5264 0128 DA64     	 str r2,[r3,#76]
2633:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status != 0U)
 5265              	 .loc 2 2633 0
 5266 012a FB69     	 ldr r3,[r7,#28]
 5267 012c 002B     	 cmp r3,#0
 5268 012e 0FD0     	 beq .L378
2634:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2635:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.valid = 1U;
 5269              	 .loc 2 2635 0
 5270 0130 BA69     	 ldr r2,[r7,#24]
 5271 0132 7B69     	 ldr r3,[r7,#20]
 5272 0134 DB00     	 lsl r3,r3,#3
 5273 0136 D318     	 add r3,r2,r3
 5274 0138 1A79     	 ldrb r2,[r3,#4]
 5275 013a 0121     	 mov r1,#1
 5276 013c 0A43     	 orr r2,r1
 5277 013e 1A71     	 strb r2,[r3,#4]
2636:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 0U;
 5278              	 .loc 2 2636 0
 5279 0140 BA69     	 ldr r2,[r7,#24]
 5280 0142 7B69     	 ldr r3,[r7,#20]
 5281 0144 DB00     	 lsl r3,r3,#3
 5282 0146 D318     	 add r3,r2,r3
 5283 0148 1A79     	 ldrb r2,[r3,#4]
 5284 014a 0221     	 mov r1,#2
 5285 014c 8A43     	 bic r2,r1
 5286 014e 1A71     	 strb r2,[r3,#4]
 5287              	.L378:
2637:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2638:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5288              	 .loc 2 2638 0
 5289 0150 FB69     	 ldr r3,[r7,#28]
2639:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5290              	 .loc 2 2639 0
 5291 0152 181C     	 mov r0,r3
 5292 0154 BD46     	 mov sp,r7
 5293 0156 08B0     	 add sp,sp,#32
 5294              	 
 5295 0158 80BD     	 pop {r7,pc}
 5296              	.L382:
 5297 015a C046     	 .align 2
 5298              	.L381:
 5299 015c 00000000 	 .word E_EEPROM_XMC1_0
 5300              	 .cfi_endproc
 5301              	.LFE90:
 5303              	 .section .text.E_EEPROM_XMC1_lHandleInvalidReq,"ax",%progbits
 5304              	 .align 2
 5305              	 .code 16
 5306              	 .thumb_func
 5308              	E_EEPROM_XMC1_lHandleInvalidReq:
 5309              	.LFB91:
2640:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2641:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number - User block number / ID
2642:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   user_block_index  - Index of the logical block
2643:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2644:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - Flash NVM_STATUS register value
2645:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2646:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Write one block with all data element as 0xFF to invalidate a block.
2647:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2648:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t  user_block_index)
2649:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5310              	 .loc 2 2649 0
 5311              	 .cfi_startproc
 5312 0000 80B5     	 push {r7,lr}
 5313              	.LCFI140:
 5314              	 .cfi_def_cfa_offset 8
 5315              	 .cfi_offset 7,-8
 5316              	 .cfi_offset 14,-4
 5317 0002 86B0     	 sub sp,sp,#24
 5318              	.LCFI141:
 5319              	 .cfi_def_cfa_offset 32
 5320 0004 00AF     	 add r7,sp,#0
 5321              	.LCFI142:
 5322              	 .cfi_def_cfa_register 7
 5323 0006 021C     	 mov r2,r0
 5324 0008 3960     	 str r1,[r7]
 5325 000a FB1D     	 add r3,r7,#7
 5326 000c 1A70     	 strb r2,[r3]
2650:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2651:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_byte_count;
2652:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* read_write_buffer_ptr;
2653:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2654:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2655:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5327              	 .loc 2 2655 0
 5328 000e 264B     	 ldr r3,.L389
 5329 0010 5B68     	 ldr r3,[r3,#4]
 5330 0012 3B61     	 str r3,[r7,#16]
2656:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5331              	 .loc 2 2656 0
 5332 0014 3B69     	 ldr r3,[r7,#16]
 5333 0016 5C33     	 add r3,r3,#92
 5334 0018 FB60     	 str r3,[r7,#12]
2657:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *read_write_buffer_ptr = block_number;
 5335              	 .loc 2 2657 0
 5336 001a FB68     	 ldr r3,[r7,#12]
 5337 001c FA1D     	 add r2,r7,#7
 5338 001e 1278     	 ldrb r2,[r2]
 5339 0020 1A70     	 strb r2,[r3]
2658:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
 5340              	 .loc 2 2658 0
 5341 0022 FB68     	 ldr r3,[r7,#12]
 5342 0024 0133     	 add r3,r3,#1
 5343 0026 8022     	 mov r2,#128
 5344 0028 1A70     	 strb r2,[r3]
2659:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2660:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;d
 5345              	 .loc 2 2661 0
 5346 002a 0223     	 mov r3,#2
 5347 002c 7B61     	 str r3,[r7,#20]
 5348 002e 07E0     	 b .L384
 5349              	.L385:
2662:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2663:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5350              	 .loc 2 2663 0 discriminator 3
 5351 0030 FA68     	 ldr r2,[r7,#12]
 5352 0032 7B69     	 ldr r3,[r7,#20]
 5353 0034 D318     	 add r3,r2,r3
 5354 0036 FF22     	 mov r2,#255
 5355 0038 1A70     	 strb r2,[r3]
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 5356              	 .loc 2 2661 0 discriminator 3
 5357 003a 7B69     	 ldr r3,[r7,#20]
 5358 003c 0133     	 add r3,r3,#1
 5359 003e 7B61     	 str r3,[r7,#20]
 5360              	.L384:
2661:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
 5361              	 .loc 2 2661 0 is_stmt 0 discriminator 1
 5362 0040 7B69     	 ldr r3,[r7,#20]
 5363 0042 0F2B     	 cmp r3,#15
 5364 0044 F4D9     	 bls .L385
2664:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2665:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2666:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lWriteDataBlock();
 5365              	 .loc 2 2666 0 is_stmt 1
 5366 0046 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteDataBlock
 5367 004a 031C     	 mov r3,r0
 5368 004c BB60     	 str r3,[r7,#8]
2667:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2668:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (status == 0U)
 5369              	 .loc 2 2668 0
 5370 004e BB68     	 ldr r3,[r7,#8]
 5371 0050 002B     	 cmp r3,#0
 5372 0052 0ED1     	 bne .L386
2669:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2670:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 1U;
 5373              	 .loc 2 2670 0
 5374 0054 3A69     	 ldr r2,[r7,#16]
 5375 0056 3B68     	 ldr r3,[r7]
 5376 0058 DB00     	 lsl r3,r3,#3
 5377 005a D318     	 add r3,r2,r3
 5378 005c 1A79     	 ldrb r2,[r3,#4]
 5379 005e 0221     	 mov r1,#2
 5380 0060 0A43     	 orr r2,r1
 5381 0062 1A71     	 strb r2,[r3,#4]
2671:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
 5382              	 .loc 2 2671 0
 5383 0064 3B69     	 ldr r3,[r7,#16]
 5384 0066 D96C     	 ldr r1,[r3,#76]
 5385 0068 3B69     	 ldr r3,[r7,#16]
 5386 006a 3A68     	 ldr r2,[r7]
 5387 006c D200     	 lsl r2,r2,#3
 5388 006e D150     	 str r1,[r2,r3]
 5389 0070 07E0     	 b .L387
 5390              	.L386:
2672:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2673:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2674:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2675:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->block_info[user_block_index].status.consistent = 0U;
 5391              	 .loc 2 2675 0
 5392 0072 3A69     	 ldr r2,[r7,#16]
 5393 0074 3B68     	 ldr r3,[r7]
 5394 0076 DB00     	 lsl r3,r3,#3
 5395 0078 D318     	 add r3,r2,r3
 5396 007a 1A79     	 ldrb r2,[r3,#4]
 5397 007c 0221     	 mov r1,#2
 5398 007e 8A43     	 bic r2,r1
 5399 0080 1A71     	 strb r2,[r3,#4]
 5400              	.L387:
2676:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2677:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2678:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->block_info[user_block_index].status.valid = 0U;
 5401              	 .loc 2 2678 0
 5402 0082 3A69     	 ldr r2,[r7,#16]
 5403 0084 3B68     	 ldr r3,[r7]
 5404 0086 DB00     	 lsl r3,r3,#3
 5405 0088 D318     	 add r3,r2,r3
 5406 008a 1A79     	 ldrb r2,[r3,#4]
 5407 008c 0121     	 mov r1,#1
 5408 008e 8A43     	 bic r2,r1
 5409 0090 1A71     	 strb r2,[r3,#4]
2679:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->next_free_block_addr = (E_EEPROM_XMC1_FLASH_BLOCK_SIZE + (uint32_t)(data_ptr->next_free
 5410              	 .loc 2 2679 0
 5411 0092 3B69     	 ldr r3,[r7,#16]
 5412 0094 DB6C     	 ldr r3,[r3,#76]
 5413 0096 1033     	 add r3,r3,#16
 5414 0098 1A1C     	 mov r2,r3
 5415 009a 3B69     	 ldr r3,[r7,#16]
 5416 009c DA64     	 str r2,[r3,#76]
2680:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2681:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5417              	 .loc 2 2681 0
 5418 009e BB68     	 ldr r3,[r7,#8]
2682:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5419              	 .loc 2 2682 0
 5420 00a0 181C     	 mov r0,r3
 5421 00a2 BD46     	 mov sp,r7
 5422 00a4 06B0     	 add sp,sp,#24
 5423              	 
 5424 00a6 80BD     	 pop {r7,pc}
 5425              	.L390:
 5426              	 .align 2
 5427              	.L389:
 5428 00a8 00000000 	 .word E_EEPROM_XMC1_0
 5429              	 .cfi_endproc
 5430              	.LFE91:
 5432              	 .section .text.E_EEPROM_XMC1_lPopulateFirstBlock,"ax",%progbits
 5433              	 .align 2
 5434              	 .code 16
 5435              	 .thumb_func
 5437              	E_EEPROM_XMC1_lPopulateFirstBlock:
 5438              	.LFB92:
2683:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2684:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2685:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2686:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Data buffer address
2687:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             block_size - Length of data to be read
2688:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2689:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
2690:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2691:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Populates the first block with data elements starting from the passed data buff
2692:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2693:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number,
2694:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint8_t* user_data_buffer_ptr,
2695:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint32_t block_size)
2696:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5439              	 .loc 2 2696 0
 5440              	 .cfi_startproc
 5441 0000 80B5     	 push {r7,lr}
 5442              	.LCFI143:
 5443              	 .cfi_def_cfa_offset 8
 5444              	 .cfi_offset 7,-8
 5445              	 .cfi_offset 14,-4
 5446 0002 8AB0     	 sub sp,sp,#40
 5447              	.LCFI144:
 5448              	 .cfi_def_cfa_offset 48
 5449 0004 00AF     	 add r7,sp,#0
 5450              	.LCFI145:
 5451              	 .cfi_def_cfa_register 7
 5452 0006 B960     	 str r1,[r7,#8]
 5453 0008 7A60     	 str r2,[r7,#4]
 5454 000a 0F23     	 mov r3,#15
 5455 000c FB18     	 add r3,r7,r3
 5456 000e 021C     	 add r2,r0,#0
 5457 0010 1A70     	 strb r2,[r3]
2697:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_bit;
2698:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_buffer;
2699:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t data_byte_count;
2700:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t* read_write_buffer_ptr;
2701:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2702:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2703:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5458              	 .loc 2 2703 0
 5459 0012 2A4B     	 ldr r3,.L396
 5460 0014 5B68     	 ldr r3,[r3,#4]
 5461 0016 3B62     	 str r3,[r7,#32]
2704:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5462              	 .loc 2 2704 0
 5463 0018 3B6A     	 ldr r3,[r7,#32]
 5464 001a 5C33     	 add r3,r3,#92
 5465 001c FB61     	 str r3,[r7,#28]
2705:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr->user_write_state = E_EEPROM_XMC1_NEXT_BLOCK_WRITE;
 5466              	 .loc 2 2705 0
 5467 001e 3A6A     	 ldr r2,[r7,#32]
 5468 0020 C423     	 mov r3,#196
 5469 0022 5B00     	 lsl r3,r3,#1
 5470 0024 0221     	 mov r1,#2
 5471 0026 D150     	 str r1,[r2,r3]
2706:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2707:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
2708:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the dat
2709:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,user_data_buffer_ptr,block_size);
2710:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
2711:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_bit = E_EEPROM_XMC1_CRC_BIT;
2712:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #else
2713:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
 5472              	 .loc 2 2713 0
 5473 0028 254B     	 ldr r3,.L396+4
 5474 002a BB61     	 str r3,[r7,#24]
2714:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_bit = 0U;
 5475              	 .loc 2 2714 0
 5476 002c 0023     	 mov r3,#0
 5477 002e 7B61     	 str r3,[r7,#20]
2715:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
2716:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2717:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for d
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
 5478              	 .loc 2 2718 0
 5479 0030 0F23     	 mov r3,#15
 5480 0032 FB18     	 add r3,r7,r3
 5481 0034 1A78     	 ldrb r2,[r3]
2719:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5482              	 .loc 2 2719 0
 5483 0036 7B69     	 ldr r3,[r7,#20]
 5484 0038 C021     	 mov r1,#192
 5485 003a 0B43     	 orr r3,r1
 5486 003c 1B02     	 lsl r3,r3,#8
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5487              	 .loc 2 2718 0
 5488 003e 1A43     	 orr r2,r3
2720:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
2721:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT
 5489              	 .loc 2 2721 0
 5490 0040 BB69     	 ldr r3,[r7,#24]
 5491 0042 1B04     	 lsl r3,r3,#16
2718:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                    (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_X
 5492              	 .loc 2 2718 0
 5493 0044 1A43     	 orr r2,r3
 5494 0046 FB69     	 ldr r3,[r7,#28]
 5495 0048 1A60     	 str r2,[r3]
2722:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_byte_count = E_EEPROM_XMC1_FOUR_BYTES;
 5496              	 .loc 2 2722 0
 5497 004a 0423     	 mov r3,#4
 5498 004c 7B62     	 str r3,[r7,#36]
 5499              	.L394:
2723:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Add data to the write buffer from the user specified pointer */
2724:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2725:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2726:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->user_write_bytes_count < block_size  )
 5500              	 .loc 2 2726 0
 5501 004e 3A6A     	 ldr r2,[r7,#32]
 5502 0050 B823     	 mov r3,#184
 5503 0052 5B00     	 lsl r3,r3,#1
 5504 0054 D258     	 ldr r2,[r2,r3]
 5505 0056 7B68     	 ldr r3,[r7,#4]
 5506 0058 9A42     	 cmp r2,r3
 5507 005a 14D2     	 bcs .L392
2727:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2728:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_by
 5508              	 .loc 2 2728 0
 5509 005c FA69     	 ldr r2,[r7,#28]
 5510 005e 7B6A     	 ldr r3,[r7,#36]
 5511 0060 D318     	 add r3,r2,r3
 5512 0062 396A     	 ldr r1,[r7,#32]
 5513 0064 B822     	 mov r2,#184
 5514 0066 5200     	 lsl r2,r2,#1
 5515 0068 8A58     	 ldr r2,[r1,r2]
 5516 006a B968     	 ldr r1,[r7,#8]
 5517 006c 8A18     	 add r2,r1,r2
 5518 006e 1278     	 ldrb r2,[r2]
 5519 0070 1A70     	 strb r2,[r3]
2729:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****        (data_ptr->user_write_bytes_count)++;
 5520              	 .loc 2 2729 0
 5521 0072 3A6A     	 ldr r2,[r7,#32]
 5522 0074 B823     	 mov r3,#184
 5523 0076 5B00     	 lsl r3,r3,#1
 5524 0078 D358     	 ldr r3,[r2,r3]
 5525 007a 591C     	 add r1,r3,#1
 5526 007c 3A6A     	 ldr r2,[r7,#32]
 5527 007e B823     	 mov r3,#184
 5528 0080 5B00     	 lsl r3,r3,#1
 5529 0082 D150     	 str r1,[r2,r3]
 5530 0084 04E0     	 b .L393
 5531              	.L392:
2730:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2731:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2732:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2733:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5532              	 .loc 2 2733 0
 5533 0086 FA69     	 ldr r2,[r7,#28]
 5534 0088 7B6A     	 ldr r3,[r7,#36]
 5535 008a D318     	 add r3,r2,r3
 5536 008c FF22     	 mov r2,#255
 5537 008e 1A70     	 strb r2,[r3]
 5538              	.L393:
2734:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2735:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_byte_count++;
 5539              	 .loc 2 2735 0
 5540 0090 7B6A     	 ldr r3,[r7,#36]
 5541 0092 0133     	 add r3,r3,#1
 5542 0094 7B62     	 str r3,[r7,#36]
2736:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2737:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE); /* Check for block size overflow*/
 5543              	 .loc 2 2737 0
 5544 0096 7B6A     	 ldr r3,[r7,#36]
 5545 0098 102B     	 cmp r3,#16
 5546 009a D8D1     	 bne .L394
2738:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2739:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->user_write_bytes_count >= block_size)
 5547              	 .loc 2 2739 0
 5548 009c 3A6A     	 ldr r2,[r7,#32]
 5549 009e B823     	 mov r3,#184
 5550 00a0 5B00     	 lsl r3,r3,#1
 5551 00a2 D258     	 ldr r2,[r2,r3]
 5552 00a4 7B68     	 ldr r3,[r7,#4]
 5553 00a6 9A42     	 cmp r2,r3
 5554 00a8 04D3     	 bcc .L391
2740:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2741:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5555              	 .loc 2 2741 0
 5556 00aa 3A6A     	 ldr r2,[r7,#32]
 5557 00ac C423     	 mov r3,#196
 5558 00ae 5B00     	 lsl r3,r3,#1
 5559 00b0 0321     	 mov r1,#3
 5560 00b2 D150     	 str r1,[r2,r3]
 5561              	.L391:
2742:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2743:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5562              	 .loc 2 2743 0
 5563 00b4 BD46     	 mov sp,r7
 5564 00b6 0AB0     	 add sp,sp,#40
 5565              	 
 5566 00b8 80BD     	 pop {r7,pc}
 5567              	.L397:
 5568 00ba C046     	 .align 2
 5569              	.L396:
 5570 00bc 00000000 	 .word E_EEPROM_XMC1_0
 5571 00c0 0000A5A5 	 .word -1515913216
 5572              	 .cfi_endproc
 5573              	.LFE92:
 5575              	 .section .text.E_EEPROM_XMC1_lPopulateNextBlock,"ax",%progbits
 5576              	 .align 2
 5577              	 .code 16
 5578              	 .thumb_func
 5580              	E_EEPROM_XMC1_lPopulateNextBlock:
 5581              	.LFB93:
2744:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2745:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2746:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2747:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             data_buffer_ptr - Data buffer address
2748:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *             block_size - Length of data to be read
2749:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2750:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : void
2751:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2752:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Populates the successive blocks with data elements starting from the passed dat
2753:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2754:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lPopulateNextBlock( uint8_t block_number ,
2755:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint8_t*  const user_data_buffer_ptr ,
2756:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                               uint32_t block_size)
2757:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5582              	 .loc 2 2757 0
 5583              	 .cfi_startproc
 5584 0000 80B5     	 push {r7,lr}
 5585              	.LCFI146:
 5586              	 .cfi_def_cfa_offset 8
 5587              	 .cfi_offset 7,-8
 5588              	 .cfi_offset 14,-4
 5589 0002 88B0     	 sub sp,sp,#32
 5590              	.LCFI147:
 5591              	 .cfi_def_cfa_offset 40
 5592 0004 00AF     	 add r7,sp,#0
 5593              	.LCFI148:
 5594              	 .cfi_def_cfa_register 7
 5595 0006 B960     	 str r1,[r7,#8]
 5596 0008 7A60     	 str r2,[r7,#4]
 5597 000a 0F23     	 mov r3,#15
 5598 000c FB18     	 add r3,r7,r3
 5599 000e 021C     	 add r2,r0,#0
 5600 0010 1A70     	 strb r2,[r3]
2758:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t  data_byte_count;
2759:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint8_t*  read_write_buffer_ptr;
2760:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2761:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5601              	 .loc 2 2761 0
 5602 0012 264B     	 ldr r3,.L403
 5603 0014 5B68     	 ldr r3,[r3,#4]
 5604 0016 BB61     	 str r3,[r7,#24]
2762:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2763:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   read_write_buffer_ptr = data_ptr->read_write_buffer;
 5605              	 .loc 2 2763 0
 5606 0018 BB69     	 ldr r3,[r7,#24]
 5607 001a 5C33     	 add r3,r3,#92
 5608 001c 7B61     	 str r3,[r7,#20]
2764:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr) = block_number;
 5609              	 .loc 2 2764 0
 5610 001e 7B69     	 ldr r3,[r7,#20]
 5611 0020 0F22     	 mov r2,#15
 5612 0022 BA18     	 add r2,r7,r2
 5613 0024 1278     	 ldrb r2,[r2]
 5614 0026 1A70     	 strb r2,[r3]
2765:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   *(read_write_buffer_ptr + 1U) = E_EEPROM_XMC1_VALID_BIT;
 5615              	 .loc 2 2765 0
 5616 0028 7B69     	 ldr r3,[r7,#20]
 5617 002a 0133     	 add r3,r3,#1
 5618 002c 4022     	 mov r2,#64
 5619 002e 1A70     	 strb r2,[r3]
2766:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_byte_count = E_EEPROM_XMC1_TWO_BYTES;
 5620              	 .loc 2 2766 0
 5621 0030 0223     	 mov r3,#2
 5622 0032 FB61     	 str r3,[r7,#28]
 5623              	.L401:
2767:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2768:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Add data to the write buffer from the user specified pointer */
2769:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2770:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2771:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (data_ptr->user_write_bytes_count < block_size )
 5624              	 .loc 2 2771 0
 5625 0034 BA69     	 ldr r2,[r7,#24]
 5626 0036 B823     	 mov r3,#184
 5627 0038 5B00     	 lsl r3,r3,#1
 5628 003a D258     	 ldr r2,[r2,r3]
 5629 003c 7B68     	 ldr r3,[r7,#4]
 5630 003e 9A42     	 cmp r2,r3
 5631 0040 14D2     	 bcs .L399
2772:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2773:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_by
 5632              	 .loc 2 2773 0
 5633 0042 7A69     	 ldr r2,[r7,#20]
 5634 0044 FB69     	 ldr r3,[r7,#28]
 5635 0046 D318     	 add r3,r2,r3
 5636 0048 B969     	 ldr r1,[r7,#24]
 5637 004a B822     	 mov r2,#184
 5638 004c 5200     	 lsl r2,r2,#1
 5639 004e 8A58     	 ldr r2,[r1,r2]
 5640 0050 B968     	 ldr r1,[r7,#8]
 5641 0052 8A18     	 add r2,r1,r2
 5642 0054 1278     	 ldrb r2,[r2]
 5643 0056 1A70     	 strb r2,[r3]
2774:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       (data_ptr->user_write_bytes_count)++;
 5644              	 .loc 2 2774 0
 5645 0058 BA69     	 ldr r2,[r7,#24]
 5646 005a B823     	 mov r3,#184
 5647 005c 5B00     	 lsl r3,r3,#1
 5648 005e D358     	 ldr r3,[r2,r3]
 5649 0060 591C     	 add r1,r3,#1
 5650 0062 BA69     	 ldr r2,[r7,#24]
 5651 0064 B823     	 mov r3,#184
 5652 0066 5B00     	 lsl r3,r3,#1
 5653 0068 D150     	 str r1,[r2,r3]
 5654 006a 09E0     	 b .L400
 5655              	.L399:
2775:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2776:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2777:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2778:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
 5656              	 .loc 2 2778 0
 5657 006c 7A69     	 ldr r2,[r7,#20]
 5658 006e FB69     	 ldr r3,[r7,#28]
 5659 0070 D318     	 add r3,r2,r3
 5660 0072 FF22     	 mov r2,#255
 5661 0074 1A70     	 strb r2,[r3]
2779:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5662              	 .loc 2 2779 0
 5663 0076 BA69     	 ldr r2,[r7,#24]
 5664 0078 C423     	 mov r3,#196
 5665 007a 5B00     	 lsl r3,r3,#1
 5666 007c 0321     	 mov r1,#3
 5667 007e D150     	 str r1,[r2,r3]
 5668              	.L400:
2780:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2781:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_byte_count++;
 5669              	 .loc 2 2781 0
 5670 0080 FB69     	 ldr r3,[r7,#28]
 5671 0082 0133     	 add r3,r3,#1
 5672 0084 FB61     	 str r3,[r7,#28]
2782:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2783:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
 5673              	 .loc 2 2783 0
 5674 0086 FB69     	 ldr r3,[r7,#28]
 5675 0088 102B     	 cmp r3,#16
 5676 008a D3D1     	 bne .L401
2784:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2785:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->user_write_bytes_count >= block_size)
 5677              	 .loc 2 2785 0
 5678 008c BA69     	 ldr r2,[r7,#24]
 5679 008e B823     	 mov r3,#184
 5680 0090 5B00     	 lsl r3,r3,#1
 5681 0092 D258     	 ldr r2,[r2,r3]
 5682 0094 7B68     	 ldr r3,[r7,#4]
 5683 0096 9A42     	 cmp r2,r3
 5684 0098 04D3     	 bcc .L398
2786:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2787:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
 5685              	 .loc 2 2787 0
 5686 009a BA69     	 ldr r2,[r7,#24]
 5687 009c C423     	 mov r3,#196
 5688 009e 5B00     	 lsl r3,r3,#1
 5689 00a0 0321     	 mov r1,#3
 5690 00a2 D150     	 str r1,[r2,r3]
 5691              	.L398:
2788:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2789:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5692              	 .loc 2 2789 0
 5693 00a4 BD46     	 mov sp,r7
 5694 00a6 08B0     	 add sp,sp,#32
 5695              	 
 5696 00a8 80BD     	 pop {r7,pc}
 5697              	.L404:
 5698 00aa C046     	 .align 2
 5699              	.L403:
 5700 00ac 00000000 	 .word E_EEPROM_XMC1_0
 5701              	 .cfi_endproc
 5702              	.LFE93:
 5704              	 .section .text.E_EEPROM_XMC1_lWriteDataBlock,"ax",%progbits
 5705              	 .align 2
 5706              	 .code 16
 5707              	 .thumb_func
 5709              	E_EEPROM_XMC1_lWriteDataBlock:
 5710              	.LFB94:
2790:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2791:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2792:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
2793:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2794:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value   : uint32_t - NVM_STATUS register value after read operation
2795:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2796:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description    : Writes single data block into flash
2797:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2798:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void)
2799:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5711              	 .loc 2 2799 0
 5712              	 .cfi_startproc
 5713 0000 80B5     	 push {r7,lr}
 5714              	.LCFI149:
 5715              	 .cfi_def_cfa_offset 8
 5716              	 .cfi_offset 7,-8
 5717              	 .cfi_offset 14,-4
 5718 0002 84B0     	 sub sp,sp,#16
 5719              	.LCFI150:
 5720              	 .cfi_def_cfa_offset 24
 5721 0004 00AF     	 add r7,sp,#0
 5722              	.LCFI151:
 5723              	 .cfi_def_cfa_register 7
2800:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2801:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t src_addr;
2802:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2803:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2804:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5724              	 .loc 2 2804 0
 5725 0006 104B     	 ldr r3,.L407
 5726 0008 5B68     	 ldr r3,[r3,#4]
 5727 000a FB60     	 str r3,[r7,#12]
2805:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   src_addr = (uint32_t)(data_ptr->next_free_block_addr +
 5728              	 .loc 2 2806 0
 5729 000c FB68     	 ldr r3,[r7,#12]
 5730 000e DA6C     	 ldr r2,[r3,#76]
2807:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****              (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
 5731              	 .loc 2 2807 0
 5732 0010 FB68     	 ldr r3,[r7,#12]
 5733 0012 9B6D     	 ldr r3,[r3,#88]
 5734 0014 1B01     	 lsl r3,r3,#4
2806:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****              (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
 5735              	 .loc 2 2806 0
 5736 0016 D318     	 add r3,r2,r3
 5737 0018 BB60     	 str r3,[r7,#8]
2808:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   (data_ptr->written_block_counter)++;
 5738              	 .loc 2 2808 0
 5739 001a FB68     	 ldr r3,[r7,#12]
 5740 001c 9B6D     	 ldr r3,[r3,#88]
 5741 001e 5A1C     	 add r2,r3,#1
 5742 0020 FB68     	 ldr r3,[r7,#12]
 5743 0022 9A65     	 str r2,[r3,#88]
2809:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2810:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
 5744              	 .loc 2 2810 0
 5745 0024 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2811:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_lWriteSingleBlock(src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
 5746              	 .loc 2 2811 0
 5747 0028 FB68     	 ldr r3,[r7,#12]
 5748 002a 5C33     	 add r3,r3,#92
 5749 002c BA68     	 ldr r2,[r7,#8]
 5750 002e 101C     	 mov r0,r2
 5751 0030 191C     	 mov r1,r3
 5752 0032 FFF7FEFF 	 bl E_EEPROM_XMC1_lWriteSingleBlock
2812:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_lGetFlashStatus();
 5753              	 .loc 2 2812 0
 5754 0036 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 5755 003a 031C     	 mov r3,r0
 5756 003c 7B60     	 str r3,[r7,#4]
2813:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2814:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5757              	 .loc 2 2814 0
 5758 003e 7B68     	 ldr r3,[r7,#4]
2815:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5759              	 .loc 2 2815 0
 5760 0040 181C     	 mov r0,r3
 5761 0042 BD46     	 mov sp,r7
 5762 0044 04B0     	 add sp,sp,#16
 5763              	 
 5764 0046 80BD     	 pop {r7,pc}
 5765              	.L408:
 5766              	 .align 2
 5767              	.L407:
 5768 0048 00000000 	 .word E_EEPROM_XMC1_0
 5769              	 .cfi_endproc
 5770              	.LFE94:
 5772              	 .section .text.E_EEPROM_XMC1_lReadBlockContents,"ax",%progbits
 5773              	 .align 2
 5774              	 .code 16
 5775              	 .thumb_func
 5777              	E_EEPROM_XMC1_lReadBlockContents:
 5778              	.LFB95:
2816:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2817:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2818:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2819:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : data_buffer_ptr - Data buffer address
2820:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   length - Length of data to be read
2821:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   offset - Offset from which the read shall start
2822:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2823:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t - NVM_STATUS register value after read operation
2824:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2825:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Read data bytes starting from specified address (data_buffer_ptr + offset).
2826:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   Read number of bytes as specified in the length parameter.
2827:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2828:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *const data_buffer_ptr, uint32_t length, u
2829:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5779              	 .loc 2 2829 0
 5780              	 .cfi_startproc
 5781 0000 80B5     	 push {r7,lr}
 5782              	.LCFI152:
 5783              	 .cfi_def_cfa_offset 8
 5784              	 .cfi_offset 7,-8
 5785              	 .cfi_offset 14,-4
 5786 0002 8CB0     	 sub sp,sp,#48
 5787              	.LCFI153:
 5788              	 .cfi_def_cfa_offset 56
 5789 0004 00AF     	 add r7,sp,#0
 5790              	.LCFI154:
 5791              	 .cfi_def_cfa_register 7
 5792 0006 F860     	 str r0,[r7,#12]
 5793 0008 B960     	 str r1,[r7,#8]
 5794 000a 7A60     	 str r2,[r7,#4]
2830:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t indx;
2831:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
2832:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_count;
2833:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t flash_address;
2834:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_start_address;
2835:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2836:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t remaining_bytes_in_curr_block;
2837:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2838:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   indx = 0U;
 5795              	 .loc 2 2838 0
 5796 000c 0023     	 mov r3,#0
 5797 000e FB62     	 str r3,[r7,#44]
2839:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = 0U;
 5798              	 .loc 2 2839 0
 5799 0010 0023     	 mov r3,#0
 5800 0012 3B62     	 str r3,[r7,#32]
2840:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_count = 0U;
 5801              	 .loc 2 2840 0
 5802 0014 0023     	 mov r3,#0
 5803 0016 BB62     	 str r3,[r7,#40]
2841:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2842:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
 5804              	 .loc 2 2842 0
 5805 0018 364B     	 ldr r3,.L421
 5806 001a 5B68     	 ldr r3,[r3,#4]
 5807 001c FB61     	 str r3,[r7,#28]
2843:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_start_address = data_ptr->read_start_address;
 5808              	 .loc 2 2843 0
 5809 001e FA69     	 ldr r2,[r7,#28]
 5810 0020 C623     	 mov r3,#198
 5811 0022 5B00     	 lsl r3,r3,#1
 5812 0024 D358     	 ldr r3,[r2,r3]
 5813 0026 BB61     	 str r3,[r7,#24]
2844:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2845:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first da
 5814              	 .loc 2 2845 0
 5815 0028 7B68     	 ldr r3,[r7,#4]
 5816 002a 0B2B     	 cmp r3,#11
 5817 002c 13D9     	 bls .L410
2846:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2847:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count++;                        /* If not then increment block counter*/
 5818              	 .loc 2 2847 0
 5819 002e BB6A     	 ldr r3,[r7,#40]
 5820 0030 0133     	 add r3,r3,#1
 5821 0032 BB62     	 str r3,[r7,#40]
2848:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12
 5822              	 .loc 2 2848 0
 5823 0034 7B68     	 ldr r3,[r7,#4]
 5824 0036 0C3B     	 sub r3,r3,#12
 5825 0038 7B60     	 str r3,[r7,#4]
2849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fi
 5826              	 .loc 2 2849 0
 5827 003a 05E0     	 b .L411
 5828              	.L412:
2850:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2851:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       block_count++;                        /* If not then increment block counter*/
 5829              	 .loc 2 2851 0
 5830 003c BB6A     	 ldr r3,[r7,#40]
 5831 003e 0133     	 add r3,r3,#1
 5832 0040 BB62     	 str r3,[r7,#40]
2852:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14
 5833              	 .loc 2 2852 0
 5834 0042 7B68     	 ldr r3,[r7,#4]
 5835 0044 0E3B     	 sub r3,r3,#14
 5836 0046 7B60     	 str r3,[r7,#4]
 5837              	.L411:
2849:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fi
 5838              	 .loc 2 2849 0
 5839 0048 7B68     	 ldr r3,[r7,#4]
 5840 004a 0D2B     	 cmp r3,#13
 5841 004c F6D8     	 bhi .L412
2853:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2854:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset += E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;
 5842              	 .loc 2 2854 0
 5843 004e 7B68     	 ldr r3,[r7,#4]
 5844 0050 0233     	 add r3,r3,#2
 5845 0052 7B60     	 str r3,[r7,#4]
 5846 0054 02E0     	 b .L413
 5847              	.L410:
2855:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2856:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2857:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2858:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset += E_EEPROM_XMC1_BLOCK1_DATA_OFFSET;
 5848              	 .loc 2 2858 0
 5849 0056 7B68     	 ldr r3,[r7,#4]
 5850 0058 0433     	 add r3,r3,#4
 5851 005a 7B60     	 str r3,[r7,#4]
 5852              	.L413:
2859:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2860:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Remaining bytes in the block where Read offset is pointing*/
2861:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   remaining_bytes_in_curr_block = E_EEPROM_XMC1_FLASH_BLOCK_SIZE - offset;
 5853              	 .loc 2 2861 0
 5854 005c 7B68     	 ldr r3,[r7,#4]
 5855 005e 1022     	 mov r2,#16
 5856 0060 D31A     	 sub r3,r2,r3
 5857 0062 7B62     	 str r3,[r7,#36]
 5858              	.L419:
2862:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2863:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   do
2864:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2865:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Calculate the Flash address of the block to be read*/
2866:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     flash_address = block_start_address + ((uint32_t)block_count * E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
 5859              	 .loc 2 2866 0
 5860 0064 BB6A     	 ldr r3,[r7,#40]
 5861 0066 1A01     	 lsl r2,r3,#4
 5862 0068 BB69     	 ldr r3,[r7,#24]
 5863 006a D318     	 add r3,r2,r3
 5864 006c 7B61     	 str r3,[r7,#20]
2867:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2868:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ClearStatus();
 5865              	 .loc 2 2868 0
 5866 006e FFF7FEFF 	 bl XMC_FLASH_ClearStatus
2869:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_lReadSingleBlock(flash_address,(uint32_t*)(void*)data_ptr->read_write_buffer);
 5867              	 .loc 2 2869 0
 5868 0072 FB69     	 ldr r3,[r7,#28]
 5869 0074 5C33     	 add r3,r3,#92
 5870 0076 7A69     	 ldr r2,[r7,#20]
 5871 0078 101C     	 mov r0,r2
 5872 007a 191C     	 mov r1,r3
 5873 007c FFF7FEFF 	 bl E_EEPROM_XMC1_lReadSingleBlock
2870:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_lGetFlashStatus();
 5874              	 .loc 2 2870 0
 5875 0080 FFF7FEFF 	 bl E_EEPROM_XMC1_lGetFlashStatus
 5876 0084 031C     	 mov r3,r0
 5877 0086 3B62     	 str r3,[r7,#32]
2871:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2872:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (status != 0U)
 5878              	 .loc 2 2872 0
 5879 0088 3B6A     	 ldr r3,[r7,#32]
 5880 008a 002B     	 cmp r3,#0
 5881 008c 00D0     	 beq .L414
2873:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2874:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       break;
 5882              	 .loc 2 2874 0
 5883 008e 2BE0     	 b .L415
 5884              	.L414:
2875:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2876:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Extract the data read from flash byte by byte and load into the user buffer*/
2877:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     do{
2878:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2879:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       *(data_buffer_ptr + indx) = *(data_ptr->read_write_buffer + offset);
 5885              	 .loc 2 2879 0 discriminator 2
 5886 0090 FA68     	 ldr r2,[r7,#12]
 5887 0092 FB6A     	 ldr r3,[r7,#44]
 5888 0094 D318     	 add r3,r2,r3
 5889 0096 F969     	 ldr r1,[r7,#28]
 5890 0098 5820     	 mov r0,#88
 5891 009a 7A68     	 ldr r2,[r7,#4]
 5892 009c 8A18     	 add r2,r1,r2
 5893 009e 1218     	 add r2,r2,r0
 5894 00a0 1279     	 ldrb r2,[r2,#4]
 5895 00a2 1A70     	 strb r2,[r3]
2880:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       indx++;
 5896              	 .loc 2 2880 0 discriminator 2
 5897 00a4 FB6A     	 ldr r3,[r7,#44]
 5898 00a6 0133     	 add r3,r3,#1
 5899 00a8 FB62     	 str r3,[r7,#44]
2881:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       offset++;
 5900              	 .loc 2 2881 0 discriminator 2
 5901 00aa 7B68     	 ldr r3,[r7,#4]
 5902 00ac 0133     	 add r3,r3,#1
 5903 00ae 7B60     	 str r3,[r7,#4]
2882:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       length--;
 5904              	 .loc 2 2882 0 discriminator 2
 5905 00b0 BB68     	 ldr r3,[r7,#8]
 5906 00b2 013B     	 sub r3,r3,#1
 5907 00b4 BB60     	 str r3,[r7,#8]
2883:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block--;
 5908              	 .loc 2 2883 0 discriminator 2
 5909 00b6 7B6A     	 ldr r3,[r7,#36]
 5910 00b8 013B     	 sub r3,r3,#1
 5911 00ba 7B62     	 str r3,[r7,#36]
2884:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       
2885:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* check any of the length parameters reaches 0 */
2886:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     } while ( (remaining_bytes_in_curr_block) && (length) );
 5912              	 .loc 2 2886 0 discriminator 2
 5913 00bc 7B6A     	 ldr r3,[r7,#36]
 5914 00be 002B     	 cmp r3,#0
 5915 00c0 02D0     	 beq .L416
 5916              	 .loc 2 2886 0 is_stmt 0 discriminator 1
 5917 00c2 BB68     	 ldr r3,[r7,#8]
 5918 00c4 002B     	 cmp r3,#0
 5919 00c6 E3D1     	 bne .L414
 5920              	.L416:
2887:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2888:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check if the length of bytes pending to be read is within the range of available bytes in th
2889:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (length <= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
 5921              	 .loc 2 2889 0 is_stmt 1
 5922 00c8 BB68     	 ldr r3,[r7,#8]
 5923 00ca 0E2B     	 cmp r3,#14
 5924 00cc 02D8     	 bhi .L417
2890:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2891:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Force remaining bytes in current block to length remaining */
2892:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block = length;
 5925              	 .loc 2 2892 0
 5926 00ce BB68     	 ldr r3,[r7,#8]
 5927 00d0 7B62     	 str r3,[r7,#36]
 5928 00d2 01E0     	 b .L418
 5929              	.L417:
2893:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2894:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     else
2895:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2896:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       /* Force remaining bytes to next block size(14)*/
2897:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       remaining_bytes_in_curr_block = E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
 5930              	 .loc 2 2897 0
 5931 00d4 0E23     	 mov r3,#14
 5932 00d6 7B62     	 str r3,[r7,#36]
 5933              	.L418:
2898:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2899:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2900:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     offset = E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;     /* Shift offset by 2 counts to avoid next block 
 5934              	 .loc 2 2900 0
 5935 00d8 0223     	 mov r3,#2
 5936 00da 7B60     	 str r3,[r7,#4]
2901:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     block_count++;                        /* Increment the block count to read next block */
 5937              	 .loc 2 2901 0
 5938 00dc BB6A     	 ldr r3,[r7,#40]
 5939 00de 0133     	 add r3,r3,#1
 5940 00e0 BB62     	 str r3,[r7,#40]
2902:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     
2903:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   } while (length != 0U);
 5941              	 .loc 2 2903 0
 5942 00e2 BB68     	 ldr r3,[r7,#8]
 5943 00e4 002B     	 cmp r3,#0
 5944 00e6 BDD1     	 bne .L419
 5945              	.L415:
2904:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2905:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 5946              	 .loc 2 2905 0
 5947 00e8 3B6A     	 ldr r3,[r7,#32]
2906:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5948              	 .loc 2 2906 0
 5949 00ea 181C     	 mov r0,r3
 5950 00ec BD46     	 mov sp,r7
 5951 00ee 0CB0     	 add sp,sp,#48
 5952              	 
 5953 00f0 80BD     	 pop {r7,pc}
 5954              	.L422:
 5955 00f2 C046     	 .align 2
 5956              	.L421:
 5957 00f4 00000000 	 .word E_EEPROM_XMC1_0
 5958              	 .cfi_endproc
 5959              	.LFE95:
 5961              	 .section .text.E_EEPROM_XMC1_lWriteSingleBlock,"ax",%progbits
 5962              	 .align 2
 5963              	 .code 16
 5964              	 .thumb_func
 5966              	E_EEPROM_XMC1_lWriteSingleBlock:
 5967              	.LFB96:
2907:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2908:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #ifdef E_EEPROM_XMC1_CRC_SW_ENABLED
2909:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2910:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : block_number   - User block number / ID
2911:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data_buffer_ptr - Data buffer address
2912:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   block_size    - size in bytes of logical block
2913:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2914:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS : CRC verification succeeded
2915:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   E_EEPROM_XMC1_OPERATION_STATUS_CRC_FAILED : CRC verification failed
2916:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2917:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Reads 16 bit CRC from FLASH block header and verify with the calculated CRC va
2918:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2919:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_lReadBlockCrcStatus( uint8_t block_number,
2920:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                            uint8_t *const data_buff
2921:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****                                                                            uint32_t block_size)
2922:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
2923:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_buffer;
2924:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t block_index;
2925:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t crc_read_from_flash;
2926:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_DATA_t *data_ptr;
2927:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   E_EEPROM_XMC1_OPERATION_STATUS_t status;
2928:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2929:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
2930:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
2931:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   status = E_EEPROM_XMC1_OPERATION_STATUS_SUCCESS;
2932:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
2933:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2934:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Clear all error status flags before flash operation*/
2935:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   XMC_FLASH_ClearStatus();
2936:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2937:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* Read the CRC 16 bit data from flash for the particular block */
2938:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   crc_read_from_flash = E_EEPROM_XMC1_lReadSingleWord((uint32_t)(data_ptr->block_info[block_index].
2939:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2940:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   /* If CRC is enabled for the block, calculate CRC else use the 16 bit dummy CRC */
2941:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (data_ptr->block_info[block_index].status.crc == 1U)
2942:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2943:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the dat
2944:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,data_buffer_ptr,block_size);
2945:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
2946:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check the validity of CRC for the particular block */
2947:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     if (crc_buffer != (crc_read_from_flash >> E_EEPROM_XMC1_CRC_SHIFT))
2948:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     {
2949:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****       status = E_EEPROM_XMC1_OPERATION_STATUS_CRC_FAILED;
2950:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     }
2951:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2952:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2953:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2954:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     /* Check the availability of CRC for the particular block */
2955:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_OPERATION_STATUS_NO_CRC_WRITTEN;
2956:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2957:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   
2958:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return ((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
2959:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
2960:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** #endif
2961:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2962:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2963:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
2964:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
2965:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2966:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2967:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2968:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash block(16 bytes) write operation
2969:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2970:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data)
2971:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 5968              	 .loc 2 2971 0
 5969              	 .cfi_startproc
 5970 0000 80B5     	 push {r7,lr}
 5971              	.LCFI155:
 5972              	 .cfi_def_cfa_offset 8
 5973              	 .cfi_offset 7,-8
 5974              	 .cfi_offset 14,-4
 5975 0002 82B0     	 sub sp,sp,#8
 5976              	.LCFI156:
 5977              	 .cfi_def_cfa_offset 16
 5978 0004 00AF     	 add r7,sp,#0
 5979              	.LCFI157:
 5980              	 .cfi_def_cfa_register 7
 5981 0006 7860     	 str r0,[r7,#4]
 5982 0008 3960     	 str r1,[r7]
2972:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
2973:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_writeblock == 1U)
2974:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2975:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(address,data);
2976:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2977:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
2978:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
2979:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2980:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_WriteBlocks( (uint32_t*)address, (uint32_t*)data , 1U , 1U);
 5983              	 .loc 2 2980 0
 5984 000a 7A68     	 ldr r2,[r7,#4]
 5985 000c 3B68     	 ldr r3,[r7]
 5986 000e 101C     	 mov r0,r2
 5987 0010 191C     	 mov r1,r3
 5988 0012 0122     	 mov r2,#1
 5989 0014 0123     	 mov r3,#1
 5990 0016 FFF7FEFF 	 bl XMC_FLASH_WriteBlocks
2981:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2982:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 5991              	 .loc 2 2982 0
 5992 001a BD46     	 mov sp,r7
 5993 001c 02B0     	 add sp,sp,#8
 5994              	 
 5995 001e 80BD     	 pop {r7,pc}
 5996              	 .cfi_endproc
 5997              	.LFE96:
 5999              	 .section .text.E_EEPROM_XMC1_lReadSingleBlock,"ax",%progbits
 6000              	 .align 2
 6001              	 .code 16
 6002              	 .thumb_func
 6004              	E_EEPROM_XMC1_lReadSingleBlock:
 6005              	.LFB97:
2983:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
2984:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
2985:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
2986:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
2987:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2988:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
2989:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
2990:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash block(16 bytes) read operation
2991:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
2992:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data)
2993:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6006              	 .loc 2 2993 0
 6007              	 .cfi_startproc
 6008 0000 80B5     	 push {r7,lr}
 6009              	.LCFI158:
 6010              	 .cfi_def_cfa_offset 8
 6011              	 .cfi_offset 7,-8
 6012              	 .cfi_offset 14,-4
 6013 0002 82B0     	 sub sp,sp,#8
 6014              	.LCFI159:
 6015              	 .cfi_def_cfa_offset 16
 6016 0004 00AF     	 add r7,sp,#0
 6017              	.LCFI160:
 6018              	 .cfi_def_cfa_register 7
 6019 0006 7860     	 str r0,[r7,#4]
 6020 0008 3960     	 str r1,[r7]
2994:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
2995:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_readblock == 1U)
2996:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
2997:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(address,data);
2998:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
2999:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3000:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3001:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3002:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ReadBlocks( (uint32_t*)address , (uint32_t*)data , 1U);
 6021              	 .loc 2 3002 0
 6022 000a 7A68     	 ldr r2,[r7,#4]
 6023 000c 3B68     	 ldr r3,[r7]
 6024 000e 101C     	 mov r0,r2
 6025 0010 191C     	 mov r1,r3
 6026 0012 0122     	 mov r2,#1
 6027 0014 FFF7FEFF 	 bl XMC_FLASH_ReadBlocks
3003:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3004:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6028              	 .loc 2 3004 0
 6029 0018 BD46     	 mov sp,r7
 6030 001a 02B0     	 add sp,sp,#8
 6031              	 
 6032 001c 80BD     	 pop {r7,pc}
 6033              	 .cfi_endproc
 6034              	.LFE97:
 6036 001e C046     	 .section .text.E_EEPROM_XMC1_lWriteSinglePage,"ax",%progbits
 6037              	 .align 2
 6038              	 .code 16
 6039              	 .thumb_func
 6041              	E_EEPROM_XMC1_lWriteSinglePage:
 6042              	.LFB98:
3005:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3006:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3007:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Function Name   : E_EEPROM_XMC1_lWriteSinglePage
3008:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3009:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3010:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *                   data    - Pointer to Data buffer address
3011:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3012:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
3013:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3014:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single flash page(256 bytes) write operation
3015:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3016:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data)
3017:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6043              	 .loc 2 3017 0
 6044              	 .cfi_startproc
 6045 0000 80B5     	 push {r7,lr}
 6046              	.LCFI161:
 6047              	 .cfi_def_cfa_offset 8
 6048              	 .cfi_offset 7,-8
 6049              	 .cfi_offset 14,-4
 6050 0002 82B0     	 sub sp,sp,#8
 6051              	.LCFI162:
 6052              	 .cfi_def_cfa_offset 16
 6053 0004 00AF     	 add r7,sp,#0
 6054              	.LCFI163:
 6055              	 .cfi_def_cfa_register 7
 6056 0006 7860     	 str r0,[r7,#4]
 6057 0008 3960     	 str r1,[r7]
3018:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3019:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_writepage == 1U)
3020:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3021:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(address,data);
3022:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3023:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3024:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3025:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3026:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ProgramPage( (uint32_t*)address , (uint32_t*)data);
 6058              	 .loc 2 3026 0
 6059 000a 7A68     	 ldr r2,[r7,#4]
 6060 000c 3B68     	 ldr r3,[r7]
 6061 000e 101C     	 mov r0,r2
 6062 0010 191C     	 mov r1,r3
 6063 0012 FFF7FEFF 	 bl XMC_FLASH_ProgramPage
3027:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3028:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6064              	 .loc 2 3028 0
 6065 0016 BD46     	 mov sp,r7
 6066 0018 02B0     	 add sp,sp,#8
 6067              	 
 6068 001a 80BD     	 pop {r7,pc}
 6069              	 .cfi_endproc
 6070              	.LFE98:
 6072              	 .section .text.E_EEPROM_XMC1_lEraseSinglePage,"ax",%progbits
 6073              	 .align 2
 6074              	 .code 16
 6075              	 .thumb_func
 6077              	E_EEPROM_XMC1_lEraseSinglePage:
 6078              	.LFB99:
3029:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3030:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3031:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3032:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3033:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : void
3034:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3035:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Erases single flash page(256 bytes)
3036:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3037:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address)
3038:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6079              	 .loc 2 3038 0
 6080              	 .cfi_startproc
 6081 0000 80B5     	 push {r7,lr}
 6082              	.LCFI164:
 6083              	 .cfi_def_cfa_offset 8
 6084              	 .cfi_offset 7,-8
 6085              	 .cfi_offset 14,-4
 6086 0002 82B0     	 sub sp,sp,#8
 6087              	.LCFI165:
 6088              	 .cfi_def_cfa_offset 16
 6089 0004 00AF     	 add r7,sp,#0
 6090              	.LCFI166:
 6091              	 .cfi_def_cfa_register 7
 6092 0006 7860     	 str r0,[r7,#4]
3039:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3040:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_erasepage == 1U)
3041:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3042:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(address);
3043:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3044:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3045:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3046:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3047:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     XMC_FLASH_ErasePages( (uint32_t*)address , 1U);
 6093              	 .loc 2 3047 0
 6094 0008 7B68     	 ldr r3,[r7,#4]
 6095 000a 181C     	 mov r0,r3
 6096 000c 0121     	 mov r1,#1
 6097 000e FFF7FEFF 	 bl XMC_FLASH_ErasePages
3048:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3049:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6098              	 .loc 2 3049 0
 6099 0012 BD46     	 mov sp,r7
 6100 0014 02B0     	 add sp,sp,#8
 6101              	 
 6102 0016 80BD     	 pop {r7,pc}
 6103              	 .cfi_endproc
 6104              	.LFE99:
 6106              	 .section .text.E_EEPROM_XMC1_lReadSingleWord,"ax",%progbits
 6107              	 .align 2
 6108              	 .code 16
 6109              	 .thumb_func
 6111              	E_EEPROM_XMC1_lReadSingleWord:
 6112              	.LFB100:
3050:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3051:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3052:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : address  - Flash address
3053:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3054:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t  - Word data read from flash address
3055:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3056:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Performs single word(4 bytes) read operation from flash
3057:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3058:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lReadSingleWord(uint32_t const address)
3059:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6113              	 .loc 2 3059 0
 6114              	 .cfi_startproc
 6115 0000 80B5     	 push {r7,lr}
 6116              	.LCFI167:
 6117              	 .cfi_def_cfa_offset 8
 6118              	 .cfi_offset 7,-8
 6119              	 .cfi_offset 14,-4
 6120 0002 84B0     	 sub sp,sp,#16
 6121              	.LCFI168:
 6122              	 .cfi_def_cfa_offset 24
 6123 0004 00AF     	 add r7,sp,#0
 6124              	.LCFI169:
 6125              	 .cfi_def_cfa_register 7
 6126 0006 7860     	 str r0,[r7,#4]
3060:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t read_word;
3061:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3062:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_readword == 1U)
3063:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3064:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word = E_EEPROM_XMC1_TEST_HOOK_ReadSingleWord(address);
3065:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3066:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3067:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3068:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3069:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     read_word = XMC_FLASH_ReadWord((uint32_t*)address);
 6127              	 .loc 2 3069 0
 6128 0008 7B68     	 ldr r3,[r7,#4]
 6129 000a 181C     	 mov r0,r3
 6130 000c FFF7FEFF 	 bl XMC_FLASH_ReadWord
 6131 0010 031C     	 mov r3,r0
 6132 0012 FB60     	 str r3,[r7,#12]
3070:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3071:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (read_word);
 6133              	 .loc 2 3071 0
 6134 0014 FB68     	 ldr r3,[r7,#12]
3072:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6135              	 .loc 2 3072 0
 6136 0016 181C     	 mov r0,r3
 6137 0018 BD46     	 mov sp,r7
 6138 001a 04B0     	 add sp,sp,#16
 6139              	 
 6140 001c 80BD     	 pop {r7,pc}
 6141              	 .cfi_endproc
 6142              	.LFE100:
 6144 001e C046     	 .section .text.E_EEPROM_XMC1_lGetFlashStatus,"ax",%progbits
 6145              	 .align 2
 6146              	 .code 16
 6147              	 .thumb_func
 6149              	E_EEPROM_XMC1_lGetFlashStatus:
 6150              	.LFB101:
3073:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** 
3074:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** /*
3075:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Parameters(IN)  : void
3076:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3077:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Return value    : uint32_t  - Flash NVM_STATUS register value
3078:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  *
3079:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  * Description     : Reads the flash status from hardware to check whether any error exist or not.
3080:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****  */
3081:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void)
3082:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** {
 6151              	 .loc 2 3082 0
 6152              	 .cfi_startproc
 6153 0000 80B5     	 push {r7,lr}
 6154              	.LCFI170:
 6155              	 .cfi_def_cfa_offset 8
 6156              	 .cfi_offset 7,-8
 6157              	 .cfi_offset 14,-4
 6158 0002 82B0     	 sub sp,sp,#8
 6159              	.LCFI171:
 6160              	 .cfi_def_cfa_offset 16
 6161 0004 00AF     	 add r7,sp,#0
 6162              	.LCFI172:
 6163              	 .cfi_def_cfa_register 7
3083:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   uint32_t status;
3084:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #ifdef E_EEPROM_XMC1_TEST_HOOK_ENABLE
3085:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   if (e_eeprom_xmc1_test_hook_getflashstatus == 1U)
3086:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3087:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus();
3088:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3089:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   else
3090:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   #endif
3091:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   {
3092:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****     status = XMC_FLASH_GetStatus();
 6164              	 .loc 2 3092 0
 6165 0006 FFF7FEFF 	 bl XMC_FLASH_GetStatus
 6166 000a 031C     	 mov r3,r0
 6167 000c 7B60     	 str r3,[r7,#4]
3093:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   }
3094:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c ****   return (status);
 6168              	 .loc 2 3094 0
 6169 000e 7B68     	 ldr r3,[r7,#4]
3095:../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.c **** }
 6170              	 .loc 2 3095 0
 6171 0010 181C     	 mov r0,r3
 6172 0012 BD46     	 mov sp,r7
 6173 0014 02B0     	 add sp,sp,#8
 6174              	 
 6175 0016 80BD     	 pop {r7,pc}
 6176              	 .cfi_endproc
 6177              	.LFE101:
 6179              	 .text
 6180              	.Letext0:
 6181              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6182              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6183              	 .file 5 "C:/DAVEv4-64Bit/work/Demo_1/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 6184              	 .file 6 "C:/DAVEv4-64Bit/work/Demo_1/Dave/Generated/DAVE_common.h"
 6185              	 .file 7 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1.h"
 6186              	 .file 8 "../Dave/Generated/E_EEPROM_XMC1/e_eeprom_xmc1_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 e_eeprom_xmc1.c
    {standard input}:18     .text.XMC_FLASH_ReadWord:00000000 $t
    {standard input}:22     .text.XMC_FLASH_ReadWord:00000000 XMC_FLASH_ReadWord
    {standard input}:52     .text.XMC_FLASH_SetHardReadLevel:00000000 $t
    {standard input}:56     .text.XMC_FLASH_SetHardReadLevel:00000000 XMC_FLASH_SetHardReadLevel
    {standard input}:104    .text.XMC_FLASH_SetHardReadLevel:0000003c $d
    {standard input}:109    .text.E_EEPROM_XMC1_GetAppVersion:00000000 $t
    {standard input}:114    .text.E_EEPROM_XMC1_GetAppVersion:00000000 E_EEPROM_XMC1_GetAppVersion
    {standard input}:180    .text.E_EEPROM_XMC1_GetAppVersion:00000058 $d
    {standard input}:186    .text.E_EEPROM_XMC1_Init:00000000 $t
    {standard input}:191    .text.E_EEPROM_XMC1_Init:00000000 E_EEPROM_XMC1_Init
    {standard input}:4325   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000000 E_EEPROM_XMC1_lReadMarkerBlocks
    {standard input}:1423   .text.E_EEPROM_XMC1_lInitGc:00000000 E_EEPROM_XMC1_lInitGc
    {standard input}:391    .text.E_EEPROM_XMC1_Write:00000000 $t
    {standard input}:396    .text.E_EEPROM_XMC1_Write:00000000 E_EEPROM_XMC1_Write
    {standard input}:4890   .text.E_EEPROM_XMC1_lLocalWrite:00000000 E_EEPROM_XMC1_lLocalWrite
    {standard input}:457    .text.E_EEPROM_XMC1_Write:00000050 $d
    {standard input}:462    .text.E_EEPROM_XMC1_InvalidateBlock:00000000 $t
    {standard input}:467    .text.E_EEPROM_XMC1_InvalidateBlock:00000000 E_EEPROM_XMC1_InvalidateBlock
    {standard input}:531    .text.E_EEPROM_XMC1_InvalidateBlock:00000054 $d
    {standard input}:536    .text.E_EEPROM_XMC1_Read:00000000 $t
    {standard input}:541    .text.E_EEPROM_XMC1_Read:00000000 E_EEPROM_XMC1_Read
    {standard input}:4021   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:00000000 E_EEPROM_XMC1_lGetUsrBlockIndex
    {standard input}:5777   .text.E_EEPROM_XMC1_lReadBlockContents:00000000 E_EEPROM_XMC1_lReadBlockContents
    {standard input}:684    .text.E_EEPROM_XMC1_Read:000000dc $d
    {standard input}:689    .text.E_EEPROM_XMC1_StartGarbageCollection:00000000 $t
    {standard input}:694    .text.E_EEPROM_XMC1_StartGarbageCollection:00000000 E_EEPROM_XMC1_StartGarbageCollection
    {standard input}:2501   .text.E_EEPROM_XMC1_lGarbageCollection:00000000 E_EEPROM_XMC1_lGarbageCollection
    {standard input}:762    .text.E_EEPROM_XMC1_StartGarbageCollection:00000054 $d
    {standard input}:767    .text.E_EEPROM_XMC1_GetStatus:00000000 $t
    {standard input}:772    .text.E_EEPROM_XMC1_GetStatus:00000000 E_EEPROM_XMC1_GetStatus
    {standard input}:834    .text.E_EEPROM_XMC1_GetStatus:00000048 $d
    {standard input}:839    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000000 $t
    {standard input}:844    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000000 E_EEPROM_XMC1_IsGarbageCollectionNeeded
    {standard input}:4107   .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:00000000 E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks
    {standard input}:4171   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:00000000 E_EEPROM_XMC1_lGetFreeDFLASHBlocks
    {standard input}:916    .text.E_EEPROM_XMC1_IsGarbageCollectionNeeded:00000064 $d
    {standard input}:921    .text.E_EEPROM_XMC1_GetPreviousData:00000000 $t
    {standard input}:926    .text.E_EEPROM_XMC1_GetPreviousData:00000000 E_EEPROM_XMC1_GetPreviousData
    {standard input}:1065   .text.E_EEPROM_XMC1_lGetPrevData:00000000 E_EEPROM_XMC1_lGetPrevData
    {standard input}:1056   .text.E_EEPROM_XMC1_GetPreviousData:000000c0 $d
    {standard input}:1061   .text.E_EEPROM_XMC1_lGetPrevData:00000000 $t
    {standard input}:1237   .text.E_EEPROM_XMC1_lSearchBlockCopy:00000000 E_EEPROM_XMC1_lSearchBlockCopy
    {standard input}:1226   .text.E_EEPROM_XMC1_lGetPrevData:000000e8 $d
    {standard input}:1233   .text.E_EEPROM_XMC1_lSearchBlockCopy:00000000 $t
    {standard input}:6111   .text.E_EEPROM_XMC1_lReadSingleWord:00000000 E_EEPROM_XMC1_lReadSingleWord
    {standard input}:6149   .text.E_EEPROM_XMC1_lGetFlashStatus:00000000 E_EEPROM_XMC1_lGetFlashStatus
    {standard input}:1414   .text.E_EEPROM_XMC1_lSearchBlockCopy:000000fc $d
    {standard input}:1419   .text.E_EEPROM_XMC1_lInitGc:00000000 $t
    {standard input}:1541   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000000 E_EEPROM_XMC1_lInitllegalStateMachine
    {standard input}:1599   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:00000000 E_EEPROM_XMC1_lInitDirtyStateMachine
    {standard input}:1730   .text.E_EEPROM_XMC1_lInitNormalStateMachine:00000000 E_EEPROM_XMC1_lInitNormalStateMachine
    {standard input}:1532   .text.E_EEPROM_XMC1_lInitGc:000000a0 $d
    {standard input}:1537   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000000 $t
    {standard input}:2140   .text.E_EEPROM_XMC1_lInitGcNormalStates:00000000 E_EEPROM_XMC1_lInitGcNormalStates
    {standard input}:1590   .text.E_EEPROM_XMC1_lInitllegalStateMachine:00000034 $d
    {standard input}:1595   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:00000000 $t
    {standard input}:2314   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000000 E_EEPROM_XMC1_lErasedDirtyStateRecovery
    {standard input}:2404   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:00000000 E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery
    {standard input}:1721   .text.E_EEPROM_XMC1_lInitDirtyStateMachine:000000a4 $d
    {standard input}:1726   .text.E_EEPROM_XMC1_lInitNormalStateMachine:00000000 $t
    {standard input}:1769   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000000 E_EEPROM_XMC1_lInitBank0NormalStateMachine
    {standard input}:1892   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000000 E_EEPROM_XMC1_lInitBank1NormalStateMachine
    {standard input}:2015   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000000 E_EEPROM_XMC1_lInitOtherNormalStateMachine
    {standard input}:1765   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000000 $t
    {standard input}:2221   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000000 E_EEPROM_XMC1_lInitGcDataCopyState
    {standard input}:1883   .text.E_EEPROM_XMC1_lInitBank0NormalStateMachine:00000094 $d
    {standard input}:1888   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000000 $t
    {standard input}:2006   .text.E_EEPROM_XMC1_lInitBank1NormalStateMachine:00000094 $d
    {standard input}:2011   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000000 $t
    {standard input}:2131   .text.E_EEPROM_XMC1_lInitOtherNormalStateMachine:00000098 $d
    {standard input}:2136   .text.E_EEPROM_XMC1_lInitGcNormalStates:00000000 $t
    {standard input}:4237   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000000 E_EEPROM_XMC1_lUpdateCurrBankInfo
    {standard input}:3238   .text.E_EEPROM_XMC1_lPrepareDFlash:00000000 E_EEPROM_XMC1_lPrepareDFlash
    {standard input}:3423   .text.E_EEPROM_XMC1_lUpdateCache:00000000 E_EEPROM_XMC1_lUpdateCache
    {standard input}:2212   .text.E_EEPROM_XMC1_lInitGcNormalStates:0000005c $d
    {standard input}:2217   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000000 $t
    {standard input}:4764   .text.E_EEPROM_XMC1_lEraseBank:00000000 E_EEPROM_XMC1_lEraseBank
    {standard input}:4585   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000000 E_EEPROM_XMC1_lSetMarkerBlockBuffer
    {standard input}:4837   .text.E_EEPROM_XMC1_lGCWrite:00000000 E_EEPROM_XMC1_lGCWrite
    {standard input}:2305   .text.E_EEPROM_XMC1_lInitGcDataCopyState:00000074 $d
    {standard input}:2310   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000000 $t
    {standard input}:2395   .text.E_EEPROM_XMC1_lErasedDirtyStateRecovery:00000070 $d
    {standard input}:2400   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:00000000 $t
    {standard input}:4646   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000000 E_EEPROM_XMC1_lSetMarkerPageBuffer
    {standard input}:6041   .text.E_EEPROM_XMC1_lWriteSinglePage:00000000 E_EEPROM_XMC1_lWriteSinglePage
    {standard input}:2492   .text.E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery:0000007c $d
    {standard input}:2497   .text.E_EEPROM_XMC1_lGarbageCollection:00000000 $t
    {standard input}:2534   .rodata.E_EEPROM_XMC1_lGarbageCollection:00000000 $d
    {standard input}:2748   .text.E_EEPROM_XMC1_lHandleGcStartCopy:00000000 E_EEPROM_XMC1_lHandleGcStartCopy
    {standard input}:2905   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:00000000 E_EEPROM_XMC1_lHandleGcCopyWrite
    {standard input}:6004   .text.E_EEPROM_XMC1_lReadSingleBlock:00000000 E_EEPROM_XMC1_lReadSingleBlock
    {standard input}:3068   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000000 E_EEPROM_XMC1_lHandleGcEndOfCopy
    {standard input}:3142   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000000 E_EEPROM_XMC1_lHandleGcOtherStates
    {standard input}:2642   .text.E_EEPROM_XMC1_lHandleGcRequested:00000000 E_EEPROM_XMC1_lHandleGcRequested
    {standard input}:2632   .text.E_EEPROM_XMC1_lGarbageCollection:00000098 $d
    {standard input}:2638   .text.E_EEPROM_XMC1_lHandleGcRequested:00000000 $t
    {standard input}:2739   .text.E_EEPROM_XMC1_lHandleGcRequested:00000084 $d
    {standard input}:2744   .text.E_EEPROM_XMC1_lHandleGcStartCopy:00000000 $t
    {standard input}:2896   .text.E_EEPROM_XMC1_lHandleGcStartCopy:000000d0 $d
    {standard input}:2901   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:00000000 $t
    {standard input}:3059   .text.E_EEPROM_XMC1_lHandleGcCopyWrite:000000e8 $d
    {standard input}:3064   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000000 $t
    {standard input}:3133   .text.E_EEPROM_XMC1_lHandleGcEndOfCopy:00000054 $d
    {standard input}:3138   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000000 $t
    {standard input}:3229   .text.E_EEPROM_XMC1_lHandleGcOtherStates:00000078 $d
    {standard input}:3234   .text.E_EEPROM_XMC1_lPrepareDFlash:00000000 $t
    {standard input}:3412   .text.E_EEPROM_XMC1_lPrepareDFlash:000000f4 $d
    {standard input}:3419   .text.E_EEPROM_XMC1_lUpdateCache:00000000 $t
    {standard input}:3600   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:00000000 E_EEPROM_XMC1_lCacheEmptyBlkEval
    {standard input}:3739   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000000 E_EEPROM_XMC1_lEvalBlockStatus
    {standard input}:3958   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000000 E_EEPROM_XMC1_lUpdateCacheBlockRead
    {standard input}:3589   .text.E_EEPROM_XMC1_lUpdateCache:000000ec $d
    {standard input}:3596   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:00000000 $t
    {standard input}:3730   .text.E_EEPROM_XMC1_lCacheEmptyBlkEval:000000b8 $d
    {standard input}:3735   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000000 $t
    {standard input}:3949   .text.E_EEPROM_XMC1_lEvalBlockStatus:00000134 $d
    {standard input}:3954   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000000 $t
    {standard input}:4012   .text.E_EEPROM_XMC1_lUpdateCacheBlockRead:00000044 $d
    {standard input}:4017   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:00000000 $t
    {standard input}:4098   .text.E_EEPROM_XMC1_lGetUsrBlockIndex:0000005c $d
    {standard input}:4103   .text.E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks:00000000 $t
    {standard input}:4167   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:00000000 $t
    {standard input}:4226   .text.E_EEPROM_XMC1_lGetFreeDFLASHBlocks:0000003c $d
    {standard input}:4233   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000000 $t
    {standard input}:4312   .text.E_EEPROM_XMC1_lUpdateCurrBankInfo:00000058 $d
    {standard input}:4321   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000000 $t
    {standard input}:4438   .text.E_EEPROM_XMC1_lReadVerifyMarker:00000000 E_EEPROM_XMC1_lReadVerifyMarker
    {standard input}:4429   .text.E_EEPROM_XMC1_lReadMarkerBlocks:00000088 $d
    {standard input}:4434   .text.E_EEPROM_XMC1_lReadVerifyMarker:00000000 $t
    {standard input}:4575   .text.E_EEPROM_XMC1_lReadVerifyMarker:000000b8 $d
    {standard input}:4581   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000000 $t
    {standard input}:4637   .text.E_EEPROM_XMC1_lSetMarkerBlockBuffer:00000038 $d
    {standard input}:4642   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000000 $t
    {standard input}:4755   .text.E_EEPROM_XMC1_lSetMarkerPageBuffer:00000084 $d
    {standard input}:4760   .text.E_EEPROM_XMC1_lEraseBank:00000000 $t
    {standard input}:6077   .text.E_EEPROM_XMC1_lEraseSinglePage:00000000 E_EEPROM_XMC1_lEraseSinglePage
    {standard input}:4833   .text.E_EEPROM_XMC1_lGCWrite:00000000 $t
    {standard input}:5966   .text.E_EEPROM_XMC1_lWriteSingleBlock:00000000 E_EEPROM_XMC1_lWriteSingleBlock
    {standard input}:4881   .text.E_EEPROM_XMC1_lGCWrite:00000034 $d
    {standard input}:4886   .text.E_EEPROM_XMC1_lLocalWrite:00000000 $t
    {standard input}:5308   .text.E_EEPROM_XMC1_lHandleInvalidReq:00000000 E_EEPROM_XMC1_lHandleInvalidReq
    {standard input}:5070   .text.E_EEPROM_XMC1_lHandleWriteReq:00000000 E_EEPROM_XMC1_lHandleWriteReq
    {standard input}:5061   .text.E_EEPROM_XMC1_lLocalWrite:00000100 $d
    {standard input}:5066   .text.E_EEPROM_XMC1_lHandleWriteReq:00000000 $t
    {standard input}:5709   .text.E_EEPROM_XMC1_lWriteDataBlock:00000000 E_EEPROM_XMC1_lWriteDataBlock
    {standard input}:5580   .text.E_EEPROM_XMC1_lPopulateNextBlock:00000000 E_EEPROM_XMC1_lPopulateNextBlock
    {standard input}:5437   .text.E_EEPROM_XMC1_lPopulateFirstBlock:00000000 E_EEPROM_XMC1_lPopulateFirstBlock
    {standard input}:5299   .text.E_EEPROM_XMC1_lHandleWriteReq:0000015c $d
    {standard input}:5304   .text.E_EEPROM_XMC1_lHandleInvalidReq:00000000 $t
    {standard input}:5428   .text.E_EEPROM_XMC1_lHandleInvalidReq:000000a8 $d
    {standard input}:5433   .text.E_EEPROM_XMC1_lPopulateFirstBlock:00000000 $t
    {standard input}:5570   .text.E_EEPROM_XMC1_lPopulateFirstBlock:000000bc $d
    {standard input}:5576   .text.E_EEPROM_XMC1_lPopulateNextBlock:00000000 $t
    {standard input}:5700   .text.E_EEPROM_XMC1_lPopulateNextBlock:000000ac $d
    {standard input}:5705   .text.E_EEPROM_XMC1_lWriteDataBlock:00000000 $t
    {standard input}:5768   .text.E_EEPROM_XMC1_lWriteDataBlock:00000048 $d
    {standard input}:5773   .text.E_EEPROM_XMC1_lReadBlockContents:00000000 $t
    {standard input}:5957   .text.E_EEPROM_XMC1_lReadBlockContents:000000f4 $d
    {standard input}:5962   .text.E_EEPROM_XMC1_lWriteSingleBlock:00000000 $t
    {standard input}:6000   .text.E_EEPROM_XMC1_lReadSingleBlock:00000000 $t
    {standard input}:6037   .text.E_EEPROM_XMC1_lWriteSinglePage:00000000 $t
    {standard input}:6073   .text.E_EEPROM_XMC1_lEraseSinglePage:00000000 $t
    {standard input}:6107   .text.E_EEPROM_XMC1_lReadSingleWord:00000000 $t
    {standard input}:6145   .text.E_EEPROM_XMC1_lGetFlashStatus:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
E_EEPROM_XMC1_0
XMC_FLASH_ClearStatus
XMC_FLASH_WriteBlocks
XMC_FLASH_ReadBlocks
XMC_FLASH_ProgramPage
XMC_FLASH_ErasePages
XMC_FLASH_GetStatus
