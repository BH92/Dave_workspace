
Demo_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a64  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000138  2000000c  10009a64  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  20000144  00000000  00000144  2**0
                  ALLOC
  3 .data         0000021c  20000548  10009b9c  00010548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004d4  20000764  10009db8  00010764  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  1000d650  00010764  2**2
                  ALLOC
  6 .debug_aranges 00001478  00000000  00000000  00010768  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00021153  00000000  00000000  00011be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d6d  00000000  00000000  00032d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008729  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004428  00000000  00000000  0003f1cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000bdb0  00000000  00000000  000435f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000712e  00000000  00000000  0004f3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011b8  00000000  00000000  000564d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000007c4  00000000  00000000  00057690  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	48 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10     H.. ............
10001010:	00 04 01 00 00 01 00 00                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10009a64 	.word	0x10009a64
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	20000144 	.word	0x20000144
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	100027c9 	.word	0x100027c9
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	10009b9c 	.word	0x10009b9c
	ldr	r2, =__data_start
10001074:	20000548 	.word	0x20000548
	ldr	r3, =__data_end
10001078:	20000764 	.word	0x20000764
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10009db8 	.word	0x10009db8
	ldr	r2, =__ram_code_start
10001080:	20000764 	.word	0x20000764
	ldr	r3, =__ram_code_end
10001084:	20000764 	.word	0x20000764
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	20000764 	.word	0x20000764
	ldr	r2, =__bss_end
1000108c:	20000c38 	.word	0x20000c38
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	100096f5 	.word	0x100096f5
    blx  r0
#endif

    ldr  r0, =main
10001094:	100077f5 	.word	0x100077f5

10001098 <BCCU0_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <BCCU0_0_IRQHandler>
	...

1000109c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000109c:	b580      	push	{r7, lr}
1000109e:	b082      	sub	sp, #8
100010a0:	af00      	add	r7, sp, #0
100010a2:	6078      	str	r0, [r7, #4]
100010a4:	1c0a      	adds	r2, r1, #0
100010a6:	1cfb      	adds	r3, r7, #3
100010a8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100010aa:	1cfb      	adds	r3, r7, #3
100010ac:	781b      	ldrb	r3, [r3, #0]
100010ae:	2201      	movs	r2, #1
100010b0:	409a      	lsls	r2, r3
100010b2:	687b      	ldr	r3, [r7, #4]
100010b4:	605a      	str	r2, [r3, #4]
}
100010b6:	46bd      	mov	sp, r7
100010b8:	b002      	add	sp, #8
100010ba:	bd80      	pop	{r7, pc}

100010bc <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100010bc:	b580      	push	{r7, lr}
100010be:	b082      	sub	sp, #8
100010c0:	af00      	add	r7, sp, #0
100010c2:	6078      	str	r0, [r7, #4]
100010c4:	1c0a      	adds	r2, r1, #0
100010c6:	1cfb      	adds	r3, r7, #3
100010c8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100010ca:	1cfb      	adds	r3, r7, #3
100010cc:	781b      	ldrb	r3, [r3, #0]
100010ce:	2280      	movs	r2, #128	; 0x80
100010d0:	0252      	lsls	r2, r2, #9
100010d2:	409a      	lsls	r2, r3
100010d4:	687b      	ldr	r3, [r7, #4]
100010d6:	605a      	str	r2, [r3, #4]
}
100010d8:	46bd      	mov	sp, r7
100010da:	b002      	add	sp, #8
100010dc:	bd80      	pop	{r7, pc}
100010de:	46c0      	nop			; (mov r8, r8)

100010e0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
100010e0:	b580      	push	{r7, lr}
100010e2:	b082      	sub	sp, #8
100010e4:	af00      	add	r7, sp, #0
100010e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
100010e8:	687b      	ldr	r3, [r7, #4]
100010ea:	681a      	ldr	r2, [r3, #0]
100010ec:	687b      	ldr	r3, [r7, #4]
100010ee:	7b1b      	ldrb	r3, [r3, #12]
100010f0:	1c10      	adds	r0, r2, #0
100010f2:	1c19      	adds	r1, r3, #0
100010f4:	f7ff ffd2 	bl	1000109c <XMC_GPIO_SetOutputHigh>
}
100010f8:	46bd      	mov	sp, r7
100010fa:	b002      	add	sp, #8
100010fc:	bd80      	pop	{r7, pc}
100010fe:	46c0      	nop			; (mov r8, r8)

10001100 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10001100:	b580      	push	{r7, lr}
10001102:	b082      	sub	sp, #8
10001104:	af00      	add	r7, sp, #0
10001106:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10001108:	687b      	ldr	r3, [r7, #4]
1000110a:	681a      	ldr	r2, [r3, #0]
1000110c:	687b      	ldr	r3, [r7, #4]
1000110e:	7b1b      	ldrb	r3, [r3, #12]
10001110:	1c10      	adds	r0, r2, #0
10001112:	1c19      	adds	r1, r3, #0
10001114:	f7ff ffd2 	bl	100010bc <XMC_GPIO_SetOutputLow>
}
10001118:	46bd      	mov	sp, r7
1000111a:	b002      	add	sp, #8
1000111c:	bd80      	pop	{r7, pc}
1000111e:	46c0      	nop			; (mov r8, r8)

10001120 <LED_Toggle_EverySec>:
      for(delay_count = 0;delay_count<0xfffff;delay_count++);
	  return (test);
  }

  void LED_Toggle_EverySec(void)
  {
10001120:	b580      	push	{r7, lr}
10001122:	af00      	add	r7, sp, #0
    // LED Toggle for every second
		//UART_Transmit(&UART_1, new_data,transmit_buf_size);
   // DIGITAL_IO_ToggleOutput(&VCC_LED_shtdwn);
    Offlight_zahler_write();
10001124:	f001 f9f0 	bl	10002508 <Offlight_zahler_write>
    firstuartBack ();
10001128:	f001 fb10 	bl	1000274c <firstuartBack>
    lightprog01 ();  //n+l
1000112c:	f000 f802 	bl	10001134 <lightprog01>
  ///  light_aus ();//n+l
	  /// analog_start ();
	//a  new_data_fill();
	//a	UART_Transmit(&UART_1, new_data,transmit_buf_size);
  }
10001130:	46bd      	mov	sp, r7
10001132:	bd80      	pop	{r7, pc}

10001134 <lightprog01>:
  //------------------------------------------
  void lightprog01 (void)//n+l
   {
10001134:	b580      	push	{r7, lr}
10001136:	af00      	add	r7, sp, #0

	  ++zahler_lightprog01;
10001138:	4bd1      	ldr	r3, [pc, #836]	; (10001480 <lightprog01+0x34c>)
1000113a:	881b      	ldrh	r3, [r3, #0]
1000113c:	3301      	adds	r3, #1
1000113e:	b29a      	uxth	r2, r3
10001140:	4bcf      	ldr	r3, [pc, #828]	; (10001480 <lightprog01+0x34c>)
10001142:	801a      	strh	r2, [r3, #0]
	  if ( zahler_lightprog01 == 241 )  //ende
10001144:	4bce      	ldr	r3, [pc, #824]	; (10001480 <lightprog01+0x34c>)
10001146:	881b      	ldrh	r3, [r3, #0]
10001148:	2bf1      	cmp	r3, #241	; 0xf1
1000114a:	d103      	bne.n	10001154 <lightprog01+0x20>
	 			 {
		  zahler_lightprog01 = 0;
1000114c:	4bcc      	ldr	r3, [pc, #816]	; (10001480 <lightprog01+0x34c>)
1000114e:	2200      	movs	r2, #0
10001150:	801a      	strh	r2, [r3, #0]
10001152:	e192      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if (  zahler_lightprog01 == 20)
10001154:	4bca      	ldr	r3, [pc, #808]	; (10001480 <lightprog01+0x34c>)
10001156:	881b      	ldrh	r3, [r3, #0]
10001158:	2b14      	cmp	r3, #20
1000115a:	d11c      	bne.n	10001196 <lightprog01+0x62>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 0;
1000115c:	4bc9      	ldr	r3, [pc, #804]	; (10001484 <lightprog01+0x350>)
1000115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001160:	2200      	movs	r2, #0
10001162:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0;
10001164:	4bc7      	ldr	r3, [pc, #796]	; (10001484 <lightprog01+0x350>)
10001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001168:	2200      	movs	r2, #0
1000116a:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0;
1000116c:	4bc5      	ldr	r3, [pc, #788]	; (10001484 <lightprog01+0x350>)
1000116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001170:	2200      	movs	r2, #0
10001172:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 0;
10001174:	4bc3      	ldr	r3, [pc, #780]	; (10001484 <lightprog01+0x350>)
10001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001178:	2200      	movs	r2, #0
1000117a:	80da      	strh	r2, [r3, #6]
	 				      PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
1000117c:	4bc1      	ldr	r3, [pc, #772]	; (10001484 <lightprog01+0x350>)
1000117e:	1c18      	adds	r0, r3, #0
10001180:	f003 fe56 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
	 				      PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
10001184:	4abf      	ldr	r2, [pc, #764]	; (10001484 <lightprog01+0x350>)
10001186:	23e5      	movs	r3, #229	; 0xe5
10001188:	009b      	lsls	r3, r3, #2
1000118a:	1c10      	adds	r0, r2, #0
1000118c:	2100      	movs	r1, #0
1000118e:	1c1a      	adds	r2, r3, #0
10001190:	f003 fe86 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
10001194:	e171      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if (  zahler_lightprog01 == 40 )
10001196:	4bba      	ldr	r3, [pc, #744]	; (10001480 <lightprog01+0x34c>)
10001198:	881b      	ldrh	r3, [r3, #0]
1000119a:	2b28      	cmp	r3, #40	; 0x28
1000119c:	d11e      	bne.n	100011dc <lightprog01+0xa8>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 0;
1000119e:	4bb9      	ldr	r3, [pc, #740]	; (10001484 <lightprog01+0x350>)
100011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100011a2:	2200      	movs	r2, #0
100011a4:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 4000;
100011a6:	4bb7      	ldr	r3, [pc, #732]	; (10001484 <lightprog01+0x350>)
100011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100011aa:	22fa      	movs	r2, #250	; 0xfa
100011ac:	0112      	lsls	r2, r2, #4
100011ae:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0;
100011b0:	4bb4      	ldr	r3, [pc, #720]	; (10001484 <lightprog01+0x350>)
100011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100011b4:	2200      	movs	r2, #0
100011b6:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 4000;
100011b8:	4bb2      	ldr	r3, [pc, #712]	; (10001484 <lightprog01+0x350>)
100011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100011bc:	22fa      	movs	r2, #250	; 0xfa
100011be:	0112      	lsls	r2, r2, #4
100011c0:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
100011c2:	4bb0      	ldr	r3, [pc, #704]	; (10001484 <lightprog01+0x350>)
100011c4:	1c18      	adds	r0, r3, #0
100011c6:	f003 fe33 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
			 			  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
100011ca:	4aae      	ldr	r2, [pc, #696]	; (10001484 <lightprog01+0x350>)
100011cc:	23e5      	movs	r3, #229	; 0xe5
100011ce:	009b      	lsls	r3, r3, #2
100011d0:	1c10      	adds	r0, r2, #0
100011d2:	2100      	movs	r1, #0
100011d4:	1c1a      	adds	r2, r3, #0
100011d6:	f003 fe63 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
100011da:	e14e      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 60 )
100011dc:	4ba8      	ldr	r3, [pc, #672]	; (10001480 <lightprog01+0x34c>)
100011de:	881b      	ldrh	r3, [r3, #0]
100011e0:	2b3c      	cmp	r3, #60	; 0x3c
100011e2:	d11e      	bne.n	10001222 <lightprog01+0xee>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4000;
100011e4:	4ba7      	ldr	r3, [pc, #668]	; (10001484 <lightprog01+0x350>)
100011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100011e8:	22fa      	movs	r2, #250	; 0xfa
100011ea:	0112      	lsls	r2, r2, #4
100011ec:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0;
100011ee:	4ba5      	ldr	r3, [pc, #660]	; (10001484 <lightprog01+0x350>)
100011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100011f2:	2200      	movs	r2, #0
100011f4:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 4000;
100011f6:	4ba3      	ldr	r3, [pc, #652]	; (10001484 <lightprog01+0x350>)
100011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100011fa:	22fa      	movs	r2, #250	; 0xfa
100011fc:	0112      	lsls	r2, r2, #4
100011fe:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 0;
10001200:	4ba0      	ldr	r3, [pc, #640]	; (10001484 <lightprog01+0x350>)
10001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001204:	2200      	movs	r2, #0
10001206:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
10001208:	4b9e      	ldr	r3, [pc, #632]	; (10001484 <lightprog01+0x350>)
1000120a:	1c18      	adds	r0, r3, #0
1000120c:	f003 fe10 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
			 			  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
10001210:	4a9c      	ldr	r2, [pc, #624]	; (10001484 <lightprog01+0x350>)
10001212:	23e5      	movs	r3, #229	; 0xe5
10001214:	009b      	lsls	r3, r3, #2
10001216:	1c10      	adds	r0, r2, #0
10001218:	2100      	movs	r1, #0
1000121a:	1c1a      	adds	r2, r3, #0
1000121c:	f003 fe40 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
10001220:	e12b      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if (  zahler_lightprog01 == 80 )
10001222:	4b97      	ldr	r3, [pc, #604]	; (10001480 <lightprog01+0x34c>)
10001224:	881b      	ldrh	r3, [r3, #0]
10001226:	2b50      	cmp	r3, #80	; 0x50
10001228:	d120      	bne.n	1000126c <lightprog01+0x138>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 4000;
1000122a:	4b96      	ldr	r3, [pc, #600]	; (10001484 <lightprog01+0x350>)
1000122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000122e:	22fa      	movs	r2, #250	; 0xfa
10001230:	0112      	lsls	r2, r2, #4
10001232:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 4000;
10001234:	4b93      	ldr	r3, [pc, #588]	; (10001484 <lightprog01+0x350>)
10001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001238:	22fa      	movs	r2, #250	; 0xfa
1000123a:	0112      	lsls	r2, r2, #4
1000123c:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 4000;
1000123e:	4b91      	ldr	r3, [pc, #580]	; (10001484 <lightprog01+0x350>)
10001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001242:	22fa      	movs	r2, #250	; 0xfa
10001244:	0112      	lsls	r2, r2, #4
10001246:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 4000;
10001248:	4b8e      	ldr	r3, [pc, #568]	; (10001484 <lightprog01+0x350>)
1000124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000124c:	22fa      	movs	r2, #250	; 0xfa
1000124e:	0112      	lsls	r2, r2, #4
10001250:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
10001252:	4b8c      	ldr	r3, [pc, #560]	; (10001484 <lightprog01+0x350>)
10001254:	1c18      	adds	r0, r3, #0
10001256:	f003 fdeb 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
			 			  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
1000125a:	4a8a      	ldr	r2, [pc, #552]	; (10001484 <lightprog01+0x350>)
1000125c:	23e5      	movs	r3, #229	; 0xe5
1000125e:	009b      	lsls	r3, r3, #2
10001260:	1c10      	adds	r0, r2, #0
10001262:	2100      	movs	r1, #0
10001264:	1c1a      	adds	r2, r3, #0
10001266:	f003 fe1b 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
1000126a:	e106      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 100 )
1000126c:	4b84      	ldr	r3, [pc, #528]	; (10001480 <lightprog01+0x34c>)
1000126e:	881b      	ldrh	r3, [r3, #0]
10001270:	2b64      	cmp	r3, #100	; 0x64
10001272:	d11c      	bne.n	100012ae <lightprog01+0x17a>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 0;
10001274:	4b83      	ldr	r3, [pc, #524]	; (10001484 <lightprog01+0x350>)
10001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001278:	2200      	movs	r2, #0
1000127a:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0;
1000127c:	4b81      	ldr	r3, [pc, #516]	; (10001484 <lightprog01+0x350>)
1000127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001280:	2200      	movs	r2, #0
10001282:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0;
10001284:	4b7f      	ldr	r3, [pc, #508]	; (10001484 <lightprog01+0x350>)
10001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001288:	2200      	movs	r2, #0
1000128a:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 0;
1000128c:	4b7d      	ldr	r3, [pc, #500]	; (10001484 <lightprog01+0x350>)
1000128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001290:	2200      	movs	r2, #0
10001292:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
10001294:	4b7b      	ldr	r3, [pc, #492]	; (10001484 <lightprog01+0x350>)
10001296:	1c18      	adds	r0, r3, #0
10001298:	f003 fdca 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
		 				  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
1000129c:	4a79      	ldr	r2, [pc, #484]	; (10001484 <lightprog01+0x350>)
1000129e:	23e5      	movs	r3, #229	; 0xe5
100012a0:	009b      	lsls	r3, r3, #2
100012a2:	1c10      	adds	r0, r2, #0
100012a4:	2100      	movs	r1, #0
100012a6:	1c1a      	adds	r2, r3, #0
100012a8:	f003 fdfa 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
100012ac:	e0e5      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if (  zahler_lightprog01 == 120 )
100012ae:	4b74      	ldr	r3, [pc, #464]	; (10001480 <lightprog01+0x34c>)
100012b0:	881b      	ldrh	r3, [r3, #0]
100012b2:	2b78      	cmp	r3, #120	; 0x78
100012b4:	d11c      	bne.n	100012f0 <lightprog01+0x1bc>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 100;
100012b6:	4b73      	ldr	r3, [pc, #460]	; (10001484 <lightprog01+0x350>)
100012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100012ba:	2264      	movs	r2, #100	; 0x64
100012bc:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 100;
100012be:	4b71      	ldr	r3, [pc, #452]	; (10001484 <lightprog01+0x350>)
100012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100012c2:	2264      	movs	r2, #100	; 0x64
100012c4:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 100;
100012c6:	4b6f      	ldr	r3, [pc, #444]	; (10001484 <lightprog01+0x350>)
100012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100012ca:	2264      	movs	r2, #100	; 0x64
100012cc:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 100;
100012ce:	4b6d      	ldr	r3, [pc, #436]	; (10001484 <lightprog01+0x350>)
100012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100012d2:	2264      	movs	r2, #100	; 0x64
100012d4:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
100012d6:	4b6b      	ldr	r3, [pc, #428]	; (10001484 <lightprog01+0x350>)
100012d8:	1c18      	adds	r0, r3, #0
100012da:	f003 fda9 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
			 			  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
100012de:	4a69      	ldr	r2, [pc, #420]	; (10001484 <lightprog01+0x350>)
100012e0:	23e5      	movs	r3, #229	; 0xe5
100012e2:	009b      	lsls	r3, r3, #2
100012e4:	1c10      	adds	r0, r2, #0
100012e6:	2100      	movs	r1, #0
100012e8:	1c1a      	adds	r2, r3, #0
100012ea:	f003 fdd9 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
100012ee:	e0c4      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 140 )
100012f0:	4b63      	ldr	r3, [pc, #396]	; (10001480 <lightprog01+0x34c>)
100012f2:	881b      	ldrh	r3, [r3, #0]
100012f4:	2b8c      	cmp	r3, #140	; 0x8c
100012f6:	d11c      	bne.n	10001332 <lightprog01+0x1fe>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 0;
100012f8:	4b62      	ldr	r3, [pc, #392]	; (10001484 <lightprog01+0x350>)
100012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100012fc:	2200      	movs	r2, #0
100012fe:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0;
10001300:	4b60      	ldr	r3, [pc, #384]	; (10001484 <lightprog01+0x350>)
10001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001304:	2200      	movs	r2, #0
10001306:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0;
10001308:	4b5e      	ldr	r3, [pc, #376]	; (10001484 <lightprog01+0x350>)
1000130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000130c:	2200      	movs	r2, #0
1000130e:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 0;
10001310:	4b5c      	ldr	r3, [pc, #368]	; (10001484 <lightprog01+0x350>)
10001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001314:	2200      	movs	r2, #0
10001316:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
10001318:	4b5a      	ldr	r3, [pc, #360]	; (10001484 <lightprog01+0x350>)
1000131a:	1c18      	adds	r0, r3, #0
1000131c:	f003 fd88 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
		 				  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
10001320:	4a58      	ldr	r2, [pc, #352]	; (10001484 <lightprog01+0x350>)
10001322:	23e5      	movs	r3, #229	; 0xe5
10001324:	009b      	lsls	r3, r3, #2
10001326:	1c10      	adds	r0, r2, #0
10001328:	2100      	movs	r1, #0
1000132a:	1c1a      	adds	r2, r3, #0
1000132c:	f003 fdb8 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
10001330:	e0a3      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 160 )
10001332:	4b53      	ldr	r3, [pc, #332]	; (10001480 <lightprog01+0x34c>)
10001334:	881b      	ldrh	r3, [r3, #0]
10001336:	2ba0      	cmp	r3, #160	; 0xa0
10001338:	d11c      	bne.n	10001374 <lightprog01+0x240>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 100;
1000133a:	4b52      	ldr	r3, [pc, #328]	; (10001484 <lightprog01+0x350>)
1000133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000133e:	2264      	movs	r2, #100	; 0x64
10001340:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0;
10001342:	4b50      	ldr	r3, [pc, #320]	; (10001484 <lightprog01+0x350>)
10001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001346:	2200      	movs	r2, #0
10001348:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 100;
1000134a:	4b4e      	ldr	r3, [pc, #312]	; (10001484 <lightprog01+0x350>)
1000134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000134e:	2264      	movs	r2, #100	; 0x64
10001350:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 0;
10001352:	4b4c      	ldr	r3, [pc, #304]	; (10001484 <lightprog01+0x350>)
10001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001356:	2200      	movs	r2, #0
10001358:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
1000135a:	4b4a      	ldr	r3, [pc, #296]	; (10001484 <lightprog01+0x350>)
1000135c:	1c18      	adds	r0, r3, #0
1000135e:	f003 fd67 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
		 				  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
10001362:	4a48      	ldr	r2, [pc, #288]	; (10001484 <lightprog01+0x350>)
10001364:	23e5      	movs	r3, #229	; 0xe5
10001366:	009b      	lsls	r3, r3, #2
10001368:	1c10      	adds	r0, r2, #0
1000136a:	2100      	movs	r1, #0
1000136c:	1c1a      	adds	r2, r3, #0
1000136e:	f003 fd97 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
10001372:	e082      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 180 )
10001374:	4b42      	ldr	r3, [pc, #264]	; (10001480 <lightprog01+0x34c>)
10001376:	881b      	ldrh	r3, [r3, #0]
10001378:	2bb4      	cmp	r3, #180	; 0xb4
1000137a:	d11c      	bne.n	100013b6 <lightprog01+0x282>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 0;
1000137c:	4b41      	ldr	r3, [pc, #260]	; (10001484 <lightprog01+0x350>)
1000137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001380:	2200      	movs	r2, #0
10001382:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0;
10001384:	4b3f      	ldr	r3, [pc, #252]	; (10001484 <lightprog01+0x350>)
10001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001388:	2200      	movs	r2, #0
1000138a:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0;
1000138c:	4b3d      	ldr	r3, [pc, #244]	; (10001484 <lightprog01+0x350>)
1000138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001390:	2200      	movs	r2, #0
10001392:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 0;
10001394:	4b3b      	ldr	r3, [pc, #236]	; (10001484 <lightprog01+0x350>)
10001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001398:	2200      	movs	r2, #0
1000139a:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
1000139c:	4b39      	ldr	r3, [pc, #228]	; (10001484 <lightprog01+0x350>)
1000139e:	1c18      	adds	r0, r3, #0
100013a0:	f003 fd46 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
		 				  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
100013a4:	4a37      	ldr	r2, [pc, #220]	; (10001484 <lightprog01+0x350>)
100013a6:	23e5      	movs	r3, #229	; 0xe5
100013a8:	009b      	lsls	r3, r3, #2
100013aa:	1c10      	adds	r0, r2, #0
100013ac:	2100      	movs	r1, #0
100013ae:	1c1a      	adds	r2, r3, #0
100013b0:	f003 fd76 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
100013b4:	e061      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 200 )
100013b6:	4b32      	ldr	r3, [pc, #200]	; (10001480 <lightprog01+0x34c>)
100013b8:	881b      	ldrh	r3, [r3, #0]
100013ba:	2bc8      	cmp	r3, #200	; 0xc8
100013bc:	d11c      	bne.n	100013f8 <lightprog01+0x2c4>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 0;
100013be:	4b31      	ldr	r3, [pc, #196]	; (10001484 <lightprog01+0x350>)
100013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100013c2:	2200      	movs	r2, #0
100013c4:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 100;
100013c6:	4b2f      	ldr	r3, [pc, #188]	; (10001484 <lightprog01+0x350>)
100013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100013ca:	2264      	movs	r2, #100	; 0x64
100013cc:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0;
100013ce:	4b2d      	ldr	r3, [pc, #180]	; (10001484 <lightprog01+0x350>)
100013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100013d2:	2200      	movs	r2, #0
100013d4:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 100;
100013d6:	4b2b      	ldr	r3, [pc, #172]	; (10001484 <lightprog01+0x350>)
100013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100013da:	2264      	movs	r2, #100	; 0x64
100013dc:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
100013de:	4b29      	ldr	r3, [pc, #164]	; (10001484 <lightprog01+0x350>)
100013e0:	1c18      	adds	r0, r3, #0
100013e2:	f003 fd25 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
		 				  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
100013e6:	4a27      	ldr	r2, [pc, #156]	; (10001484 <lightprog01+0x350>)
100013e8:	23e5      	movs	r3, #229	; 0xe5
100013ea:	009b      	lsls	r3, r3, #2
100013ec:	1c10      	adds	r0, r2, #0
100013ee:	2100      	movs	r1, #0
100013f0:	1c1a      	adds	r2, r3, #0
100013f2:	f003 fd55 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
100013f6:	e040      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 220 )
100013f8:	4b21      	ldr	r3, [pc, #132]	; (10001480 <lightprog01+0x34c>)
100013fa:	881b      	ldrh	r3, [r3, #0]
100013fc:	2bdc      	cmp	r3, #220	; 0xdc
100013fe:	d11c      	bne.n	1000143a <lightprog01+0x306>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 0;
10001400:	4b20      	ldr	r3, [pc, #128]	; (10001484 <lightprog01+0x350>)
10001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001404:	2200      	movs	r2, #0
10001406:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 0;
10001408:	4b1e      	ldr	r3, [pc, #120]	; (10001484 <lightprog01+0x350>)
1000140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000140c:	2200      	movs	r2, #0
1000140e:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 0;
10001410:	4b1c      	ldr	r3, [pc, #112]	; (10001484 <lightprog01+0x350>)
10001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001414:	2200      	movs	r2, #0
10001416:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 0;
10001418:	4b1a      	ldr	r3, [pc, #104]	; (10001484 <lightprog01+0x350>)
1000141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000141c:	2200      	movs	r2, #0
1000141e:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
10001420:	4b18      	ldr	r3, [pc, #96]	; (10001484 <lightprog01+0x350>)
10001422:	1c18      	adds	r0, r3, #0
10001424:	f003 fd04 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
		 				  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
10001428:	4a16      	ldr	r2, [pc, #88]	; (10001484 <lightprog01+0x350>)
1000142a:	23e5      	movs	r3, #229	; 0xe5
1000142c:	009b      	lsls	r3, r3, #2
1000142e:	1c10      	adds	r0, r2, #0
10001430:	2100      	movs	r1, #0
10001432:	1c1a      	adds	r2, r3, #0
10001434:	f003 fd34 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>
10001438:	e01f      	b.n	1000147a <lightprog01+0x346>
	 			 }
	 			 else if ( zahler_lightprog01 == 240 )
1000143a:	4b11      	ldr	r3, [pc, #68]	; (10001480 <lightprog01+0x34c>)
1000143c:	881b      	ldrh	r3, [r3, #0]
1000143e:	2bf0      	cmp	r3, #240	; 0xf0
10001440:	d11b      	bne.n	1000147a <lightprog01+0x346>
	 			 {
	 				   	  PDM_DIMMED_LED_LAMP_0.config->led_intensity[0] = 1500;
10001442:	4b10      	ldr	r3, [pc, #64]	; (10001484 <lightprog01+0x350>)
10001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001446:	4a10      	ldr	r2, [pc, #64]	; (10001488 <lightprog01+0x354>)
10001448:	801a      	strh	r2, [r3, #0]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[1] = 1500;
1000144a:	4b0e      	ldr	r3, [pc, #56]	; (10001484 <lightprog01+0x350>)
1000144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000144e:	4a0e      	ldr	r2, [pc, #56]	; (10001488 <lightprog01+0x354>)
10001450:	805a      	strh	r2, [r3, #2]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[2] = 1500;
10001452:	4b0c      	ldr	r3, [pc, #48]	; (10001484 <lightprog01+0x350>)
10001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001456:	4a0c      	ldr	r2, [pc, #48]	; (10001488 <lightprog01+0x354>)
10001458:	809a      	strh	r2, [r3, #4]
	 				      PDM_DIMMED_LED_LAMP_0.config->led_intensity[3] = 1500;
1000145a:	4b0a      	ldr	r3, [pc, #40]	; (10001484 <lightprog01+0x350>)
1000145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000145e:	4a0a      	ldr	r2, [pc, #40]	; (10001488 <lightprog01+0x354>)
10001460:	80da      	strh	r2, [r3, #6]
		 				  PDM_DIMMED_LED_LAMP_SetColor(&PDM_DIMMED_LED_LAMP_0);
10001462:	4b08      	ldr	r3, [pc, #32]	; (10001484 <lightprog01+0x350>)
10001464:	1c18      	adds	r0, r3, #0
10001466:	f003 fce3 	bl	10004e30 <PDM_DIMMED_LED_LAMP_SetColor>
		 				  PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(&PDM_DIMMED_LED_LAMP_0,0x0,0x394);
1000146a:	4a06      	ldr	r2, [pc, #24]	; (10001484 <lightprog01+0x350>)
1000146c:	23e5      	movs	r3, #229	; 0xe5
1000146e:	009b      	lsls	r3, r3, #2
10001470:	1c10      	adds	r0, r2, #0
10001472:	2100      	movs	r1, #0
10001474:	1c1a      	adds	r2, r3, #0
10001476:	f003 fd13 	bl	10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>

				 {

				 }

   }
1000147a:	46bd      	mov	sp, r7
1000147c:	bd80      	pop	{r7, pc}
1000147e:	46c0      	nop			; (mov r8, r8)
10001480:	2000076a 	.word	0x2000076a
10001484:	20000580 	.word	0x20000580
10001488:	000005dc 	.word	0x000005dc

1000148c <SCU_0_IRQHandler>:

  }


 void UserIRQHandler(void)
  {
1000148c:	b580      	push	{r7, lr}
1000148e:	af00      	add	r7, sp, #0
    //    resultA = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_ntc);
    //    resultB = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_U_in);
    //    resultC = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_I_ww);
     //   resultD = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_I_cw);
   	//  DIGITAL_IO_SetOutputLow(&DO_VCC_LED_shtdwn);
  }
10001490:	46bd      	mov	sp, r7
10001492:	bd80      	pop	{r7, pc}

10001494 <new_data_fill>:

 void new_data_fill(void) // ausgabe über rxd
 {
10001494:	b580      	push	{r7, lr}
10001496:	af00      	add	r7, sp, #0
	 transmit_buf_size=11;
10001498:	4b12      	ldr	r3, [pc, #72]	; (100014e4 <new_data_fill+0x50>)
1000149a:	220b      	movs	r2, #11
1000149c:	701a      	strb	r2, [r3, #0]
	 new_data[0]=1;
1000149e:	4b12      	ldr	r3, [pc, #72]	; (100014e8 <new_data_fill+0x54>)
100014a0:	2201      	movs	r2, #1
100014a2:	701a      	strb	r2, [r3, #0]
	 new_data[1]=2;
100014a4:	4b10      	ldr	r3, [pc, #64]	; (100014e8 <new_data_fill+0x54>)
100014a6:	2202      	movs	r2, #2
100014a8:	705a      	strb	r2, [r3, #1]
	 new_data[2]=3;
100014aa:	4b0f      	ldr	r3, [pc, #60]	; (100014e8 <new_data_fill+0x54>)
100014ac:	2203      	movs	r2, #3
100014ae:	709a      	strb	r2, [r3, #2]
	 new_data[3]=4;
100014b0:	4b0d      	ldr	r3, [pc, #52]	; (100014e8 <new_data_fill+0x54>)
100014b2:	2204      	movs	r2, #4
100014b4:	70da      	strb	r2, [r3, #3]
	 new_data[4]=5;
100014b6:	4b0c      	ldr	r3, [pc, #48]	; (100014e8 <new_data_fill+0x54>)
100014b8:	2205      	movs	r2, #5
100014ba:	711a      	strb	r2, [r3, #4]
	 new_data[5]=6;
100014bc:	4b0a      	ldr	r3, [pc, #40]	; (100014e8 <new_data_fill+0x54>)
100014be:	2206      	movs	r2, #6
100014c0:	715a      	strb	r2, [r3, #5]
 	 new_data[6]=7;
100014c2:	4b09      	ldr	r3, [pc, #36]	; (100014e8 <new_data_fill+0x54>)
100014c4:	2207      	movs	r2, #7
100014c6:	719a      	strb	r2, [r3, #6]
 	 new_data[7]=8;
100014c8:	4b07      	ldr	r3, [pc, #28]	; (100014e8 <new_data_fill+0x54>)
100014ca:	2208      	movs	r2, #8
100014cc:	71da      	strb	r2, [r3, #7]
 	 new_data[8]=9;
100014ce:	4b06      	ldr	r3, [pc, #24]	; (100014e8 <new_data_fill+0x54>)
100014d0:	2209      	movs	r2, #9
100014d2:	721a      	strb	r2, [r3, #8]
 	 new_data[9]='a';
100014d4:	4b04      	ldr	r3, [pc, #16]	; (100014e8 <new_data_fill+0x54>)
100014d6:	2261      	movs	r2, #97	; 0x61
100014d8:	725a      	strb	r2, [r3, #9]
	 new_data[10]='b';
100014da:	4b03      	ldr	r3, [pc, #12]	; (100014e8 <new_data_fill+0x54>)
100014dc:	2262      	movs	r2, #98	; 0x62
100014de:	729a      	strb	r2, [r3, #10]
 }
100014e0:	46bd      	mov	sp, r7
100014e2:	bd80      	pop	{r7, pc}
100014e4:	20000550 	.word	0x20000550
100014e8:	20000804 	.word	0x20000804

100014ec <new_data_BroadcastBack>:
	 new_data[10]=command_codeEnd;
 }

//------------------------------------------
 void new_data_BroadcastBack(void) // ausgabe über rxd
 {
100014ec:	b580      	push	{r7, lr}
100014ee:	af00      	add	r7, sp, #0

	 transmit_buf_size=11;
100014f0:	4b19      	ldr	r3, [pc, #100]	; (10001558 <new_data_BroadcastBack+0x6c>)
100014f2:	220b      	movs	r2, #11
100014f4:	701a      	strb	r2, [r3, #0]
	 new_data[0]=command_code01;
100014f6:	4b19      	ldr	r3, [pc, #100]	; (1000155c <new_data_BroadcastBack+0x70>)
100014f8:	224c      	movs	r2, #76	; 0x4c
100014fa:	701a      	strb	r2, [r3, #0]
	 new_data[1]=command_code02;
100014fc:	4b17      	ldr	r3, [pc, #92]	; (1000155c <new_data_BroadcastBack+0x70>)
100014fe:	2249      	movs	r2, #73	; 0x49
10001500:	705a      	strb	r2, [r3, #1]
	 new_data[2]=command_code03;
10001502:	4b16      	ldr	r3, [pc, #88]	; (1000155c <new_data_BroadcastBack+0x70>)
10001504:	224e      	movs	r2, #78	; 0x4e
10001506:	709a      	strb	r2, [r3, #2]
	 new_data[3]=node_id;
10001508:	4b15      	ldr	r3, [pc, #84]	; (10001560 <new_data_BroadcastBack+0x74>)
1000150a:	781a      	ldrb	r2, [r3, #0]
1000150c:	4b13      	ldr	r3, [pc, #76]	; (1000155c <new_data_BroadcastBack+0x70>)
1000150e:	70da      	strb	r2, [r3, #3]
	 new_data[4]=transmit_buf_size;
10001510:	4b11      	ldr	r3, [pc, #68]	; (10001558 <new_data_BroadcastBack+0x6c>)
10001512:	781a      	ldrb	r2, [r3, #0]
10001514:	4b11      	ldr	r3, [pc, #68]	; (1000155c <new_data_BroadcastBack+0x70>)
10001516:	711a      	strb	r2, [r3, #4]
	 new_data[5]=command_BroadcastBack;
10001518:	4b10      	ldr	r3, [pc, #64]	; (1000155c <new_data_BroadcastBack+0x70>)
1000151a:	226f      	movs	r2, #111	; 0x6f
1000151c:	715a      	strb	r2, [r3, #5]
 	 new_data[6]= 	Ser_NrH  / 0x100; //highbyte
1000151e:	4b11      	ldr	r3, [pc, #68]	; (10001564 <new_data_BroadcastBack+0x78>)
10001520:	881b      	ldrh	r3, [r3, #0]
10001522:	0a1b      	lsrs	r3, r3, #8
10001524:	b29b      	uxth	r3, r3
10001526:	b2da      	uxtb	r2, r3
10001528:	4b0c      	ldr	r3, [pc, #48]	; (1000155c <new_data_BroadcastBack+0x70>)
1000152a:	719a      	strb	r2, [r3, #6]
 	 new_data[7]= 	Ser_NrH  & 0xff; //highbyte
1000152c:	4b0d      	ldr	r3, [pc, #52]	; (10001564 <new_data_BroadcastBack+0x78>)
1000152e:	881b      	ldrh	r3, [r3, #0]
10001530:	b2da      	uxtb	r2, r3
10001532:	4b0a      	ldr	r3, [pc, #40]	; (1000155c <new_data_BroadcastBack+0x70>)
10001534:	71da      	strb	r2, [r3, #7]
 	 new_data[8]= 	Ser_NrL  / 0x100; //highbyte
10001536:	4b0c      	ldr	r3, [pc, #48]	; (10001568 <new_data_BroadcastBack+0x7c>)
10001538:	881b      	ldrh	r3, [r3, #0]
1000153a:	0a1b      	lsrs	r3, r3, #8
1000153c:	b29b      	uxth	r3, r3
1000153e:	b2da      	uxtb	r2, r3
10001540:	4b06      	ldr	r3, [pc, #24]	; (1000155c <new_data_BroadcastBack+0x70>)
10001542:	721a      	strb	r2, [r3, #8]
 	 new_data[9]= 	Ser_NrL  & 0xff; //lowbyte
10001544:	4b08      	ldr	r3, [pc, #32]	; (10001568 <new_data_BroadcastBack+0x7c>)
10001546:	881b      	ldrh	r3, [r3, #0]
10001548:	b2da      	uxtb	r2, r3
1000154a:	4b04      	ldr	r3, [pc, #16]	; (1000155c <new_data_BroadcastBack+0x70>)
1000154c:	725a      	strb	r2, [r3, #9]
	 new_data[10]=command_codeEnd;
1000154e:	4b03      	ldr	r3, [pc, #12]	; (1000155c <new_data_BroadcastBack+0x70>)
10001550:	22ff      	movs	r2, #255	; 0xff
10001552:	729a      	strb	r2, [r3, #10]
 }
10001554:	46bd      	mov	sp, r7
10001556:	bd80      	pop	{r7, pc}
10001558:	20000550 	.word	0x20000550
1000155c:	20000804 	.word	0x20000804
10001560:	20000836 	.word	0x20000836
10001564:	20000830 	.word	0x20000830
10001568:	200008a8 	.word	0x200008a8

1000156c <new_data_analog1Back>:
 //------------------------------------------
 void new_data_analog1Back(void) // ausgabe über rxd
 {
1000156c:	b580      	push	{r7, lr}
1000156e:	af00      	add	r7, sp, #0
	 transmit_buf_size=11;
10001570:	4b19      	ldr	r3, [pc, #100]	; (100015d8 <new_data_analog1Back+0x6c>)
10001572:	220b      	movs	r2, #11
10001574:	701a      	strb	r2, [r3, #0]
	 new_data[0]=command_code01;
10001576:	4b19      	ldr	r3, [pc, #100]	; (100015dc <new_data_analog1Back+0x70>)
10001578:	224c      	movs	r2, #76	; 0x4c
1000157a:	701a      	strb	r2, [r3, #0]
	 new_data[1]=command_code02;
1000157c:	4b17      	ldr	r3, [pc, #92]	; (100015dc <new_data_analog1Back+0x70>)
1000157e:	2249      	movs	r2, #73	; 0x49
10001580:	705a      	strb	r2, [r3, #1]
	 new_data[2]=command_code03;
10001582:	4b16      	ldr	r3, [pc, #88]	; (100015dc <new_data_analog1Back+0x70>)
10001584:	224e      	movs	r2, #78	; 0x4e
10001586:	709a      	strb	r2, [r3, #2]
	 new_data[3]=node_id;
10001588:	4b15      	ldr	r3, [pc, #84]	; (100015e0 <new_data_analog1Back+0x74>)
1000158a:	781a      	ldrb	r2, [r3, #0]
1000158c:	4b13      	ldr	r3, [pc, #76]	; (100015dc <new_data_analog1Back+0x70>)
1000158e:	70da      	strb	r2, [r3, #3]
	 new_data[4]=transmit_buf_size;
10001590:	4b11      	ldr	r3, [pc, #68]	; (100015d8 <new_data_analog1Back+0x6c>)
10001592:	781a      	ldrb	r2, [r3, #0]
10001594:	4b11      	ldr	r3, [pc, #68]	; (100015dc <new_data_analog1Back+0x70>)
10001596:	711a      	strb	r2, [r3, #4]
	 new_data[5]=command_ana1Back;
10001598:	4b10      	ldr	r3, [pc, #64]	; (100015dc <new_data_analog1Back+0x70>)
1000159a:	2261      	movs	r2, #97	; 0x61
1000159c:	715a      	strb	r2, [r3, #5]
 	 new_data[6]= 	resultA2  / 256; //highbyte
1000159e:	4b11      	ldr	r3, [pc, #68]	; (100015e4 <new_data_analog1Back+0x78>)
100015a0:	881b      	ldrh	r3, [r3, #0]
100015a2:	0a1b      	lsrs	r3, r3, #8
100015a4:	b29b      	uxth	r3, r3
100015a6:	b2da      	uxtb	r2, r3
100015a8:	4b0c      	ldr	r3, [pc, #48]	; (100015dc <new_data_analog1Back+0x70>)
100015aa:	719a      	strb	r2, [r3, #6]
 	 new_data[7]= 	resultA2  & 0xff; //lowbyte
100015ac:	4b0d      	ldr	r3, [pc, #52]	; (100015e4 <new_data_analog1Back+0x78>)
100015ae:	881b      	ldrh	r3, [r3, #0]
100015b0:	b2da      	uxtb	r2, r3
100015b2:	4b0a      	ldr	r3, [pc, #40]	; (100015dc <new_data_analog1Back+0x70>)
100015b4:	71da      	strb	r2, [r3, #7]
 	 new_data[8]= 	resultB2 / 256; //highbyte
100015b6:	4b0c      	ldr	r3, [pc, #48]	; (100015e8 <new_data_analog1Back+0x7c>)
100015b8:	881b      	ldrh	r3, [r3, #0]
100015ba:	0a1b      	lsrs	r3, r3, #8
100015bc:	b29b      	uxth	r3, r3
100015be:	b2da      	uxtb	r2, r3
100015c0:	4b06      	ldr	r3, [pc, #24]	; (100015dc <new_data_analog1Back+0x70>)
100015c2:	721a      	strb	r2, [r3, #8]
 	 new_data[9]= 	resultB2  & 0xff; //lowbyte
100015c4:	4b08      	ldr	r3, [pc, #32]	; (100015e8 <new_data_analog1Back+0x7c>)
100015c6:	881b      	ldrh	r3, [r3, #0]
100015c8:	b2da      	uxtb	r2, r3
100015ca:	4b04      	ldr	r3, [pc, #16]	; (100015dc <new_data_analog1Back+0x70>)
100015cc:	725a      	strb	r2, [r3, #9]
	 new_data[10]=command_codeEnd;
100015ce:	4b03      	ldr	r3, [pc, #12]	; (100015dc <new_data_analog1Back+0x70>)
100015d0:	22ff      	movs	r2, #255	; 0xff
100015d2:	729a      	strb	r2, [r3, #10]
 }
100015d4:	46bd      	mov	sp, r7
100015d6:	bd80      	pop	{r7, pc}
100015d8:	20000550 	.word	0x20000550
100015dc:	20000804 	.word	0x20000804
100015e0:	20000836 	.word	0x20000836
100015e4:	200008fe 	.word	0x200008fe
100015e8:	200007fe 	.word	0x200007fe

100015ec <new_data_analog2Back>:
 //------------------------------------------------------

 void new_data_analog2Back(void) // ausgabe über rxd
 {
100015ec:	b580      	push	{r7, lr}
100015ee:	af00      	add	r7, sp, #0
	 transmit_buf_size=11;
100015f0:	4b19      	ldr	r3, [pc, #100]	; (10001658 <new_data_analog2Back+0x6c>)
100015f2:	220b      	movs	r2, #11
100015f4:	701a      	strb	r2, [r3, #0]
	 new_data[0]=command_code01;
100015f6:	4b19      	ldr	r3, [pc, #100]	; (1000165c <new_data_analog2Back+0x70>)
100015f8:	224c      	movs	r2, #76	; 0x4c
100015fa:	701a      	strb	r2, [r3, #0]
	 new_data[1]=command_code02;
100015fc:	4b17      	ldr	r3, [pc, #92]	; (1000165c <new_data_analog2Back+0x70>)
100015fe:	2249      	movs	r2, #73	; 0x49
10001600:	705a      	strb	r2, [r3, #1]
	 new_data[2]=command_code03;
10001602:	4b16      	ldr	r3, [pc, #88]	; (1000165c <new_data_analog2Back+0x70>)
10001604:	224e      	movs	r2, #78	; 0x4e
10001606:	709a      	strb	r2, [r3, #2]
	 new_data[3]=node_id;
10001608:	4b15      	ldr	r3, [pc, #84]	; (10001660 <new_data_analog2Back+0x74>)
1000160a:	781a      	ldrb	r2, [r3, #0]
1000160c:	4b13      	ldr	r3, [pc, #76]	; (1000165c <new_data_analog2Back+0x70>)
1000160e:	70da      	strb	r2, [r3, #3]
	 new_data[4]=transmit_buf_size;
10001610:	4b11      	ldr	r3, [pc, #68]	; (10001658 <new_data_analog2Back+0x6c>)
10001612:	781a      	ldrb	r2, [r3, #0]
10001614:	4b11      	ldr	r3, [pc, #68]	; (1000165c <new_data_analog2Back+0x70>)
10001616:	711a      	strb	r2, [r3, #4]
	 new_data[5]=command_ana2Back;
10001618:	4b10      	ldr	r3, [pc, #64]	; (1000165c <new_data_analog2Back+0x70>)
1000161a:	2262      	movs	r2, #98	; 0x62
1000161c:	715a      	strb	r2, [r3, #5]
 	 new_data[6]= 	resultC2  / 256; //highbyteresultD2
1000161e:	4b11      	ldr	r3, [pc, #68]	; (10001664 <new_data_analog2Back+0x78>)
10001620:	881b      	ldrh	r3, [r3, #0]
10001622:	0a1b      	lsrs	r3, r3, #8
10001624:	b29b      	uxth	r3, r3
10001626:	b2da      	uxtb	r2, r3
10001628:	4b0c      	ldr	r3, [pc, #48]	; (1000165c <new_data_analog2Back+0x70>)
1000162a:	719a      	strb	r2, [r3, #6]
 	 new_data[7]= 	resultC2  & 0xff; //lowbyte
1000162c:	4b0d      	ldr	r3, [pc, #52]	; (10001664 <new_data_analog2Back+0x78>)
1000162e:	881b      	ldrh	r3, [r3, #0]
10001630:	b2da      	uxtb	r2, r3
10001632:	4b0a      	ldr	r3, [pc, #40]	; (1000165c <new_data_analog2Back+0x70>)
10001634:	71da      	strb	r2, [r3, #7]
 	 new_data[8]= 	resultD2 / 256; //highbyte
10001636:	4b0c      	ldr	r3, [pc, #48]	; (10001668 <new_data_analog2Back+0x7c>)
10001638:	881b      	ldrh	r3, [r3, #0]
1000163a:	0a1b      	lsrs	r3, r3, #8
1000163c:	b29b      	uxth	r3, r3
1000163e:	b2da      	uxtb	r2, r3
10001640:	4b06      	ldr	r3, [pc, #24]	; (1000165c <new_data_analog2Back+0x70>)
10001642:	721a      	strb	r2, [r3, #8]
 	 new_data[9]= 	resultD2  & 0xff; //lowbyte
10001644:	4b08      	ldr	r3, [pc, #32]	; (10001668 <new_data_analog2Back+0x7c>)
10001646:	881b      	ldrh	r3, [r3, #0]
10001648:	b2da      	uxtb	r2, r3
1000164a:	4b04      	ldr	r3, [pc, #16]	; (1000165c <new_data_analog2Back+0x70>)
1000164c:	725a      	strb	r2, [r3, #9]
	 new_data[10]=command_codeEnd;
1000164e:	4b03      	ldr	r3, [pc, #12]	; (1000165c <new_data_analog2Back+0x70>)
10001650:	22ff      	movs	r2, #255	; 0xff
10001652:	729a      	strb	r2, [r3, #10]
 }
10001654:	46bd      	mov	sp, r7
10001656:	bd80      	pop	{r7, pc}
10001658:	20000550 	.word	0x20000550
1000165c:	20000804 	.word	0x20000804
10001660:	20000836 	.word	0x20000836
10001664:	200007f6 	.word	0x200007f6
10001668:	20000820 	.word	0x20000820

1000166c <new_data_aktLichtBack>:
 //------------------------------------------------------

 void new_data_aktLichtBack(void) // ausgabe über rxd
 {
1000166c:	b580      	push	{r7, lr}
1000166e:	af00      	add	r7, sp, #0
	 transmit_buf_size=11;
10001670:	4b19      	ldr	r3, [pc, #100]	; (100016d8 <new_data_aktLichtBack+0x6c>)
10001672:	220b      	movs	r2, #11
10001674:	701a      	strb	r2, [r3, #0]
	 new_data[0]=command_code01;
10001676:	4b19      	ldr	r3, [pc, #100]	; (100016dc <new_data_aktLichtBack+0x70>)
10001678:	224c      	movs	r2, #76	; 0x4c
1000167a:	701a      	strb	r2, [r3, #0]
	 new_data[1]=command_code02;
1000167c:	4b17      	ldr	r3, [pc, #92]	; (100016dc <new_data_aktLichtBack+0x70>)
1000167e:	2249      	movs	r2, #73	; 0x49
10001680:	705a      	strb	r2, [r3, #1]
	 new_data[2]=command_code03;
10001682:	4b16      	ldr	r3, [pc, #88]	; (100016dc <new_data_aktLichtBack+0x70>)
10001684:	224e      	movs	r2, #78	; 0x4e
10001686:	709a      	strb	r2, [r3, #2]
	 new_data[3]=node_id;
10001688:	4b15      	ldr	r3, [pc, #84]	; (100016e0 <new_data_aktLichtBack+0x74>)
1000168a:	781a      	ldrb	r2, [r3, #0]
1000168c:	4b13      	ldr	r3, [pc, #76]	; (100016dc <new_data_aktLichtBack+0x70>)
1000168e:	70da      	strb	r2, [r3, #3]
	 new_data[4]=transmit_buf_size;
10001690:	4b11      	ldr	r3, [pc, #68]	; (100016d8 <new_data_aktLichtBack+0x6c>)
10001692:	781a      	ldrb	r2, [r3, #0]
10001694:	4b11      	ldr	r3, [pc, #68]	; (100016dc <new_data_aktLichtBack+0x70>)
10001696:	711a      	strb	r2, [r3, #4]
	 new_data[5]=command_aktLichtBack;
10001698:	4b10      	ldr	r3, [pc, #64]	; (100016dc <new_data_aktLichtBack+0x70>)
1000169a:	2266      	movs	r2, #102	; 0x66
1000169c:	715a      	strb	r2, [r3, #5]
 	 new_data[6]= 	dimAkt_Ww  / 256; //highbyte
1000169e:	4b11      	ldr	r3, [pc, #68]	; (100016e4 <new_data_aktLichtBack+0x78>)
100016a0:	881b      	ldrh	r3, [r3, #0]
100016a2:	0a1b      	lsrs	r3, r3, #8
100016a4:	b29b      	uxth	r3, r3
100016a6:	b2da      	uxtb	r2, r3
100016a8:	4b0c      	ldr	r3, [pc, #48]	; (100016dc <new_data_aktLichtBack+0x70>)
100016aa:	719a      	strb	r2, [r3, #6]
 	 new_data[7]= 	dimAkt_Ww  & 0xff; //lowbyte
100016ac:	4b0d      	ldr	r3, [pc, #52]	; (100016e4 <new_data_aktLichtBack+0x78>)
100016ae:	881b      	ldrh	r3, [r3, #0]
100016b0:	b2da      	uxtb	r2, r3
100016b2:	4b0a      	ldr	r3, [pc, #40]	; (100016dc <new_data_aktLichtBack+0x70>)
100016b4:	71da      	strb	r2, [r3, #7]
 	 new_data[8]= 	dimAkt_Cw / 256; //highbyte
100016b6:	4b0c      	ldr	r3, [pc, #48]	; (100016e8 <new_data_aktLichtBack+0x7c>)
100016b8:	881b      	ldrh	r3, [r3, #0]
100016ba:	0a1b      	lsrs	r3, r3, #8
100016bc:	b29b      	uxth	r3, r3
100016be:	b2da      	uxtb	r2, r3
100016c0:	4b06      	ldr	r3, [pc, #24]	; (100016dc <new_data_aktLichtBack+0x70>)
100016c2:	721a      	strb	r2, [r3, #8]
 	 new_data[9]= 	dimAkt_Cw  & 0xff; //lowbyte
100016c4:	4b08      	ldr	r3, [pc, #32]	; (100016e8 <new_data_aktLichtBack+0x7c>)
100016c6:	881b      	ldrh	r3, [r3, #0]
100016c8:	b2da      	uxtb	r2, r3
100016ca:	4b04      	ldr	r3, [pc, #16]	; (100016dc <new_data_aktLichtBack+0x70>)
100016cc:	725a      	strb	r2, [r3, #9]
	 new_data[10]=command_codeEnd;
100016ce:	4b03      	ldr	r3, [pc, #12]	; (100016dc <new_data_aktLichtBack+0x70>)
100016d0:	22ff      	movs	r2, #255	; 0xff
100016d2:	729a      	strb	r2, [r3, #10]
 }
100016d4:	46bd      	mov	sp, r7
100016d6:	bd80      	pop	{r7, pc}
100016d8:	20000550 	.word	0x20000550
100016dc:	20000804 	.word	0x20000804
100016e0:	20000836 	.word	0x20000836
100016e4:	200008ac 	.word	0x200008ac
100016e8:	200008c0 	.word	0x200008c0

100016ec <new_data_offLichtBack>:
 //------------------------------------------------------

 void new_data_offLichtBack(void) // ausgabe über rxd
 {
100016ec:	b580      	push	{r7, lr}
100016ee:	af00      	add	r7, sp, #0
	 transmit_buf_size=13;
100016f0:	4b1d      	ldr	r3, [pc, #116]	; (10001768 <new_data_offLichtBack+0x7c>)
100016f2:	220d      	movs	r2, #13
100016f4:	701a      	strb	r2, [r3, #0]
	 new_data[0]=command_code01;
100016f6:	4b1d      	ldr	r3, [pc, #116]	; (1000176c <new_data_offLichtBack+0x80>)
100016f8:	224c      	movs	r2, #76	; 0x4c
100016fa:	701a      	strb	r2, [r3, #0]
	 new_data[1]=command_code02;
100016fc:	4b1b      	ldr	r3, [pc, #108]	; (1000176c <new_data_offLichtBack+0x80>)
100016fe:	2249      	movs	r2, #73	; 0x49
10001700:	705a      	strb	r2, [r3, #1]
	 new_data[2]=command_code03;
10001702:	4b1a      	ldr	r3, [pc, #104]	; (1000176c <new_data_offLichtBack+0x80>)
10001704:	224e      	movs	r2, #78	; 0x4e
10001706:	709a      	strb	r2, [r3, #2]
	 new_data[3]=node_id;
10001708:	4b19      	ldr	r3, [pc, #100]	; (10001770 <new_data_offLichtBack+0x84>)
1000170a:	781a      	ldrb	r2, [r3, #0]
1000170c:	4b17      	ldr	r3, [pc, #92]	; (1000176c <new_data_offLichtBack+0x80>)
1000170e:	70da      	strb	r2, [r3, #3]
	 new_data[4]=transmit_buf_size;
10001710:	4b15      	ldr	r3, [pc, #84]	; (10001768 <new_data_offLichtBack+0x7c>)
10001712:	781a      	ldrb	r2, [r3, #0]
10001714:	4b15      	ldr	r3, [pc, #84]	; (1000176c <new_data_offLichtBack+0x80>)
10001716:	711a      	strb	r2, [r3, #4]
	 new_data[5]=command_offLichtBack;
10001718:	4b14      	ldr	r3, [pc, #80]	; (1000176c <new_data_offLichtBack+0x80>)
1000171a:	2267      	movs	r2, #103	; 0x67
1000171c:	715a      	strb	r2, [r3, #5]
 	 new_data[6]= 	dimOff_Ww  / 256; //highbyte
1000171e:	4b15      	ldr	r3, [pc, #84]	; (10001774 <new_data_offLichtBack+0x88>)
10001720:	881b      	ldrh	r3, [r3, #0]
10001722:	0a1b      	lsrs	r3, r3, #8
10001724:	b29b      	uxth	r3, r3
10001726:	b2da      	uxtb	r2, r3
10001728:	4b10      	ldr	r3, [pc, #64]	; (1000176c <new_data_offLichtBack+0x80>)
1000172a:	719a      	strb	r2, [r3, #6]
 	 new_data[7]= 	dimOff_Ww  & 0xff; //lowbyte
1000172c:	4b11      	ldr	r3, [pc, #68]	; (10001774 <new_data_offLichtBack+0x88>)
1000172e:	881b      	ldrh	r3, [r3, #0]
10001730:	b2da      	uxtb	r2, r3
10001732:	4b0e      	ldr	r3, [pc, #56]	; (1000176c <new_data_offLichtBack+0x80>)
10001734:	71da      	strb	r2, [r3, #7]
 	 new_data[8]= 	dimOff_Cw  / 256; //highbyte
10001736:	4b10      	ldr	r3, [pc, #64]	; (10001778 <new_data_offLichtBack+0x8c>)
10001738:	881b      	ldrh	r3, [r3, #0]
1000173a:	0a1b      	lsrs	r3, r3, #8
1000173c:	b29b      	uxth	r3, r3
1000173e:	b2da      	uxtb	r2, r3
10001740:	4b0a      	ldr	r3, [pc, #40]	; (1000176c <new_data_offLichtBack+0x80>)
10001742:	721a      	strb	r2, [r3, #8]
 	 new_data[9]= 	dimOff_Cw  & 0xff; //lowbyte
10001744:	4b0c      	ldr	r3, [pc, #48]	; (10001778 <new_data_offLichtBack+0x8c>)
10001746:	881b      	ldrh	r3, [r3, #0]
10001748:	b2da      	uxtb	r2, r3
1000174a:	4b08      	ldr	r3, [pc, #32]	; (1000176c <new_data_offLichtBack+0x80>)
1000174c:	725a      	strb	r2, [r3, #9]
 	 new_data[10]= 	RegOnOff ; //
1000174e:	4b0b      	ldr	r3, [pc, #44]	; (1000177c <new_data_offLichtBack+0x90>)
10001750:	781a      	ldrb	r2, [r3, #0]
10001752:	4b06      	ldr	r3, [pc, #24]	; (1000176c <new_data_offLichtBack+0x80>)
10001754:	729a      	strb	r2, [r3, #10]
 	 new_data[11]= 	RegOnOff2 ;
10001756:	4b0a      	ldr	r3, [pc, #40]	; (10001780 <new_data_offLichtBack+0x94>)
10001758:	781a      	ldrb	r2, [r3, #0]
1000175a:	4b04      	ldr	r3, [pc, #16]	; (1000176c <new_data_offLichtBack+0x80>)
1000175c:	72da      	strb	r2, [r3, #11]
	 new_data[12]=command_codeEnd;
1000175e:	4b03      	ldr	r3, [pc, #12]	; (1000176c <new_data_offLichtBack+0x80>)
10001760:	22ff      	movs	r2, #255	; 0xff
10001762:	731a      	strb	r2, [r3, #12]
 }
10001764:	46bd      	mov	sp, r7
10001766:	bd80      	pop	{r7, pc}
10001768:	20000550 	.word	0x20000550
1000176c:	20000804 	.word	0x20000804
10001770:	20000836 	.word	0x20000836
10001774:	20000900 	.word	0x20000900
10001778:	20000864 	.word	0x20000864
1000177c:	2000085a 	.word	0x2000085a
10001780:	20000818 	.word	0x20000818

10001784 <new_data_Bright_Color_Back>:
 //------------------------------------------------------

  void new_data_Bright_Color_Back(void) // ausgabe über rxd
  {
10001784:	b580      	push	{r7, lr}
10001786:	af00      	add	r7, sp, #0
 	 transmit_buf_size=11;
10001788:	4b19      	ldr	r3, [pc, #100]	; (100017f0 <new_data_Bright_Color_Back+0x6c>)
1000178a:	220b      	movs	r2, #11
1000178c:	701a      	strb	r2, [r3, #0]
 	 new_data[0]=command_code01;
1000178e:	4b19      	ldr	r3, [pc, #100]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
10001790:	224c      	movs	r2, #76	; 0x4c
10001792:	701a      	strb	r2, [r3, #0]
 	 new_data[1]=command_code02;
10001794:	4b17      	ldr	r3, [pc, #92]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
10001796:	2249      	movs	r2, #73	; 0x49
10001798:	705a      	strb	r2, [r3, #1]
 	 new_data[2]=command_code03;
1000179a:	4b16      	ldr	r3, [pc, #88]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
1000179c:	224e      	movs	r2, #78	; 0x4e
1000179e:	709a      	strb	r2, [r3, #2]
 	 new_data[3]=node_id;
100017a0:	4b15      	ldr	r3, [pc, #84]	; (100017f8 <new_data_Bright_Color_Back+0x74>)
100017a2:	781a      	ldrb	r2, [r3, #0]
100017a4:	4b13      	ldr	r3, [pc, #76]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017a6:	70da      	strb	r2, [r3, #3]
 	 new_data[4]=transmit_buf_size;
100017a8:	4b11      	ldr	r3, [pc, #68]	; (100017f0 <new_data_Bright_Color_Back+0x6c>)
100017aa:	781a      	ldrb	r2, [r3, #0]
100017ac:	4b11      	ldr	r3, [pc, #68]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017ae:	711a      	strb	r2, [r3, #4]
 	 new_data[5]=command_Bright_Color_Back;
100017b0:	4b10      	ldr	r3, [pc, #64]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017b2:	2268      	movs	r2, #104	; 0x68
100017b4:	715a      	strb	r2, [r3, #5]
  	 new_data[6]= 	Brightness_Gen  / 256; //highbyte
100017b6:	4b11      	ldr	r3, [pc, #68]	; (100017fc <new_data_Bright_Color_Back+0x78>)
100017b8:	881b      	ldrh	r3, [r3, #0]
100017ba:	0a1b      	lsrs	r3, r3, #8
100017bc:	b29b      	uxth	r3, r3
100017be:	b2da      	uxtb	r2, r3
100017c0:	4b0c      	ldr	r3, [pc, #48]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017c2:	719a      	strb	r2, [r3, #6]
  	 new_data[7]= 	Brightness_Gen  & 0xff; //lowbyte
100017c4:	4b0d      	ldr	r3, [pc, #52]	; (100017fc <new_data_Bright_Color_Back+0x78>)
100017c6:	881b      	ldrh	r3, [r3, #0]
100017c8:	b2da      	uxtb	r2, r3
100017ca:	4b0a      	ldr	r3, [pc, #40]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017cc:	71da      	strb	r2, [r3, #7]
  	 new_data[8]= 	ColorQuot_Gen / 256; //highbyte
100017ce:	4b0c      	ldr	r3, [pc, #48]	; (10001800 <new_data_Bright_Color_Back+0x7c>)
100017d0:	881b      	ldrh	r3, [r3, #0]
100017d2:	0a1b      	lsrs	r3, r3, #8
100017d4:	b29b      	uxth	r3, r3
100017d6:	b2da      	uxtb	r2, r3
100017d8:	4b06      	ldr	r3, [pc, #24]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017da:	721a      	strb	r2, [r3, #8]
  	 new_data[9]= 	ColorQuot_Gen  & 0xff; //lowbyte
100017dc:	4b08      	ldr	r3, [pc, #32]	; (10001800 <new_data_Bright_Color_Back+0x7c>)
100017de:	881b      	ldrh	r3, [r3, #0]
100017e0:	b2da      	uxtb	r2, r3
100017e2:	4b04      	ldr	r3, [pc, #16]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017e4:	725a      	strb	r2, [r3, #9]
 	 new_data[10]=command_codeEnd;
100017e6:	4b03      	ldr	r3, [pc, #12]	; (100017f4 <new_data_Bright_Color_Back+0x70>)
100017e8:	22ff      	movs	r2, #255	; 0xff
100017ea:	729a      	strb	r2, [r3, #10]
  }
100017ec:	46bd      	mov	sp, r7
100017ee:	bd80      	pop	{r7, pc}
100017f0:	20000550 	.word	0x20000550
100017f4:	20000804 	.word	0x20000804
100017f8:	20000836 	.word	0x20000836
100017fc:	2000054c 	.word	0x2000054c
10001800:	2000054e 	.word	0x2000054e

10001804 <new_data_Quot_Walk_Back>:
  //------------------------------------------------------

  void new_data_Quot_Walk_Back(void) // ausgabe über rxd
  {
10001804:	b580      	push	{r7, lr}
10001806:	af00      	add	r7, sp, #0
 	 transmit_buf_size=11;
10001808:	4b19      	ldr	r3, [pc, #100]	; (10001870 <new_data_Quot_Walk_Back+0x6c>)
1000180a:	220b      	movs	r2, #11
1000180c:	701a      	strb	r2, [r3, #0]
 	 new_data[0]=command_code01;
1000180e:	4b19      	ldr	r3, [pc, #100]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
10001810:	224c      	movs	r2, #76	; 0x4c
10001812:	701a      	strb	r2, [r3, #0]
 	 new_data[1]=command_code02;
10001814:	4b17      	ldr	r3, [pc, #92]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
10001816:	2249      	movs	r2, #73	; 0x49
10001818:	705a      	strb	r2, [r3, #1]
 	 new_data[2]=command_code03;
1000181a:	4b16      	ldr	r3, [pc, #88]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
1000181c:	224e      	movs	r2, #78	; 0x4e
1000181e:	709a      	strb	r2, [r3, #2]
 	 new_data[3]=node_id;
10001820:	4b15      	ldr	r3, [pc, #84]	; (10001878 <new_data_Quot_Walk_Back+0x74>)
10001822:	781a      	ldrb	r2, [r3, #0]
10001824:	4b13      	ldr	r3, [pc, #76]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
10001826:	70da      	strb	r2, [r3, #3]
 	 new_data[4]=transmit_buf_size;
10001828:	4b11      	ldr	r3, [pc, #68]	; (10001870 <new_data_Quot_Walk_Back+0x6c>)
1000182a:	781a      	ldrb	r2, [r3, #0]
1000182c:	4b11      	ldr	r3, [pc, #68]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
1000182e:	711a      	strb	r2, [r3, #4]
 	 new_data[5]=command_Quot_Walk_Back;
10001830:	4b10      	ldr	r3, [pc, #64]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
10001832:	2269      	movs	r2, #105	; 0x69
10001834:	715a      	strb	r2, [r3, #5]
  	 new_data[6]= 	linearwalk_gen  / 256; //highbyte
10001836:	4b11      	ldr	r3, [pc, #68]	; (1000187c <new_data_Quot_Walk_Back+0x78>)
10001838:	881b      	ldrh	r3, [r3, #0]
1000183a:	0a1b      	lsrs	r3, r3, #8
1000183c:	b29b      	uxth	r3, r3
1000183e:	b2da      	uxtb	r2, r3
10001840:	4b0c      	ldr	r3, [pc, #48]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
10001842:	719a      	strb	r2, [r3, #6]
  	 new_data[7]= 	linearwalk_gen  & 0xff; //lowbyte
10001844:	4b0d      	ldr	r3, [pc, #52]	; (1000187c <new_data_Quot_Walk_Back+0x78>)
10001846:	881b      	ldrh	r3, [r3, #0]
10001848:	b2da      	uxtb	r2, r3
1000184a:	4b0a      	ldr	r3, [pc, #40]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
1000184c:	71da      	strb	r2, [r3, #7]
  	 new_data[8]= 	Farbe_wwcw_Quot_gen / 256; //highbyte
1000184e:	4b0c      	ldr	r3, [pc, #48]	; (10001880 <new_data_Quot_Walk_Back+0x7c>)
10001850:	881b      	ldrh	r3, [r3, #0]
10001852:	0a1b      	lsrs	r3, r3, #8
10001854:	b29b      	uxth	r3, r3
10001856:	b2da      	uxtb	r2, r3
10001858:	4b06      	ldr	r3, [pc, #24]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
1000185a:	721a      	strb	r2, [r3, #8]
  	 new_data[9]= 	Farbe_wwcw_Quot_gen  & 0xff; //lowbyte
1000185c:	4b08      	ldr	r3, [pc, #32]	; (10001880 <new_data_Quot_Walk_Back+0x7c>)
1000185e:	881b      	ldrh	r3, [r3, #0]
10001860:	b2da      	uxtb	r2, r3
10001862:	4b04      	ldr	r3, [pc, #16]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
10001864:	725a      	strb	r2, [r3, #9]
 	 new_data[10]=command_codeEnd;
10001866:	4b03      	ldr	r3, [pc, #12]	; (10001874 <new_data_Quot_Walk_Back+0x70>)
10001868:	22ff      	movs	r2, #255	; 0xff
1000186a:	729a      	strb	r2, [r3, #10]
  }
1000186c:	46bd      	mov	sp, r7
1000186e:	bd80      	pop	{r7, pc}
10001870:	20000550 	.word	0x20000550
10001874:	20000804 	.word	0x20000804
10001878:	20000836 	.word	0x20000836
1000187c:	2000054a 	.word	0x2000054a
10001880:	200008a0 	.word	0x200008a0

10001884 <new_data_HalloBack>:
 //------------------------------------------

  void new_data_HalloBack(void) // ausgabe über rxd
  {
10001884:	b580      	push	{r7, lr}
10001886:	af00      	add	r7, sp, #0
 	 transmit_buf_size=11;
10001888:	4b13      	ldr	r3, [pc, #76]	; (100018d8 <new_data_HalloBack+0x54>)
1000188a:	220b      	movs	r2, #11
1000188c:	701a      	strb	r2, [r3, #0]
 	 new_data[0]=command_code01;
1000188e:	4b13      	ldr	r3, [pc, #76]	; (100018dc <new_data_HalloBack+0x58>)
10001890:	224c      	movs	r2, #76	; 0x4c
10001892:	701a      	strb	r2, [r3, #0]
 	 new_data[1]=command_code02;
10001894:	4b11      	ldr	r3, [pc, #68]	; (100018dc <new_data_HalloBack+0x58>)
10001896:	2249      	movs	r2, #73	; 0x49
10001898:	705a      	strb	r2, [r3, #1]
 	 new_data[2]=command_code03;
1000189a:	4b10      	ldr	r3, [pc, #64]	; (100018dc <new_data_HalloBack+0x58>)
1000189c:	224e      	movs	r2, #78	; 0x4e
1000189e:	709a      	strb	r2, [r3, #2]
 	 new_data[3]=node_id;
100018a0:	4b0f      	ldr	r3, [pc, #60]	; (100018e0 <new_data_HalloBack+0x5c>)
100018a2:	781a      	ldrb	r2, [r3, #0]
100018a4:	4b0d      	ldr	r3, [pc, #52]	; (100018dc <new_data_HalloBack+0x58>)
100018a6:	70da      	strb	r2, [r3, #3]
 	 new_data[4]=transmit_buf_size;
100018a8:	4b0b      	ldr	r3, [pc, #44]	; (100018d8 <new_data_HalloBack+0x54>)
100018aa:	781a      	ldrb	r2, [r3, #0]
100018ac:	4b0b      	ldr	r3, [pc, #44]	; (100018dc <new_data_HalloBack+0x58>)
100018ae:	711a      	strb	r2, [r3, #4]
 	 new_data[5]=command_HalloBack;
100018b0:	4b0a      	ldr	r3, [pc, #40]	; (100018dc <new_data_HalloBack+0x58>)
100018b2:	226a      	movs	r2, #106	; 0x6a
100018b4:	715a      	strb	r2, [r3, #5]
 	 new_data[6]='o';
100018b6:	4b09      	ldr	r3, [pc, #36]	; (100018dc <new_data_HalloBack+0x58>)
100018b8:	226f      	movs	r2, #111	; 0x6f
100018ba:	719a      	strb	r2, [r3, #6]
 	 new_data[7]='k';
100018bc:	4b07      	ldr	r3, [pc, #28]	; (100018dc <new_data_HalloBack+0x58>)
100018be:	226b      	movs	r2, #107	; 0x6b
100018c0:	71da      	strb	r2, [r3, #7]
 	 new_data[8]='o';
100018c2:	4b06      	ldr	r3, [pc, #24]	; (100018dc <new_data_HalloBack+0x58>)
100018c4:	226f      	movs	r2, #111	; 0x6f
100018c6:	721a      	strb	r2, [r3, #8]
 	 new_data[9]='k';
100018c8:	4b04      	ldr	r3, [pc, #16]	; (100018dc <new_data_HalloBack+0x58>)
100018ca:	226b      	movs	r2, #107	; 0x6b
100018cc:	725a      	strb	r2, [r3, #9]
 	 new_data[10]=command_codeEnd;
100018ce:	4b03      	ldr	r3, [pc, #12]	; (100018dc <new_data_HalloBack+0x58>)
100018d0:	22ff      	movs	r2, #255	; 0xff
100018d2:	729a      	strb	r2, [r3, #10]
  }
100018d4:	46bd      	mov	sp, r7
100018d6:	bd80      	pop	{r7, pc}
100018d8:	20000550 	.word	0x20000550
100018dc:	20000804 	.word	0x20000804
100018e0:	20000836 	.word	0x20000836

100018e4 <new_data_neuNodeIdBack>:
  //------------------------------------------------------
   void new_data_neuNodeIdBack(void) // ausgabe über rxd
   {
100018e4:	b580      	push	{r7, lr}
100018e6:	af00      	add	r7, sp, #0
  	 transmit_buf_size=12;
100018e8:	4b1b      	ldr	r3, [pc, #108]	; (10001958 <new_data_neuNodeIdBack+0x74>)
100018ea:	220c      	movs	r2, #12
100018ec:	701a      	strb	r2, [r3, #0]
  	 new_data[0]=command_code01;
100018ee:	4b1b      	ldr	r3, [pc, #108]	; (1000195c <new_data_neuNodeIdBack+0x78>)
100018f0:	224c      	movs	r2, #76	; 0x4c
100018f2:	701a      	strb	r2, [r3, #0]
  	 new_data[1]=command_code02;
100018f4:	4b19      	ldr	r3, [pc, #100]	; (1000195c <new_data_neuNodeIdBack+0x78>)
100018f6:	2249      	movs	r2, #73	; 0x49
100018f8:	705a      	strb	r2, [r3, #1]
  	 new_data[2]=command_code03;
100018fa:	4b18      	ldr	r3, [pc, #96]	; (1000195c <new_data_neuNodeIdBack+0x78>)
100018fc:	224e      	movs	r2, #78	; 0x4e
100018fe:	709a      	strb	r2, [r3, #2]
  	 new_data[3]=node_id;
10001900:	4b17      	ldr	r3, [pc, #92]	; (10001960 <new_data_neuNodeIdBack+0x7c>)
10001902:	781a      	ldrb	r2, [r3, #0]
10001904:	4b15      	ldr	r3, [pc, #84]	; (1000195c <new_data_neuNodeIdBack+0x78>)
10001906:	70da      	strb	r2, [r3, #3]
  	 new_data[4]=transmit_buf_size;
10001908:	4b13      	ldr	r3, [pc, #76]	; (10001958 <new_data_neuNodeIdBack+0x74>)
1000190a:	781a      	ldrb	r2, [r3, #0]
1000190c:	4b13      	ldr	r3, [pc, #76]	; (1000195c <new_data_neuNodeIdBack+0x78>)
1000190e:	711a      	strb	r2, [r3, #4]
  	 new_data[5]=command_neuNodeIdBack;
10001910:	4b12      	ldr	r3, [pc, #72]	; (1000195c <new_data_neuNodeIdBack+0x78>)
10001912:	226b      	movs	r2, #107	; 0x6b
10001914:	715a      	strb	r2, [r3, #5]
   	 new_data[6]= 	node_id_neu; //highbyte
10001916:	4b13      	ldr	r3, [pc, #76]	; (10001964 <new_data_neuNodeIdBack+0x80>)
10001918:	781a      	ldrb	r2, [r3, #0]
1000191a:	4b10      	ldr	r3, [pc, #64]	; (1000195c <new_data_neuNodeIdBack+0x78>)
1000191c:	719a      	strb	r2, [r3, #6]
   	 new_data[7]= 	Ser_NrH  / 0x100; //highbyte
1000191e:	4b12      	ldr	r3, [pc, #72]	; (10001968 <new_data_neuNodeIdBack+0x84>)
10001920:	881b      	ldrh	r3, [r3, #0]
10001922:	0a1b      	lsrs	r3, r3, #8
10001924:	b29b      	uxth	r3, r3
10001926:	b2da      	uxtb	r2, r3
10001928:	4b0c      	ldr	r3, [pc, #48]	; (1000195c <new_data_neuNodeIdBack+0x78>)
1000192a:	71da      	strb	r2, [r3, #7]
   	 new_data[8]= 	Ser_NrH  & 0xff; //lowbyte
1000192c:	4b0e      	ldr	r3, [pc, #56]	; (10001968 <new_data_neuNodeIdBack+0x84>)
1000192e:	881b      	ldrh	r3, [r3, #0]
10001930:	b2da      	uxtb	r2, r3
10001932:	4b0a      	ldr	r3, [pc, #40]	; (1000195c <new_data_neuNodeIdBack+0x78>)
10001934:	721a      	strb	r2, [r3, #8]
   	 new_data[9]= 	Ser_NrL  / 0x100; //highbyte
10001936:	4b0d      	ldr	r3, [pc, #52]	; (1000196c <new_data_neuNodeIdBack+0x88>)
10001938:	881b      	ldrh	r3, [r3, #0]
1000193a:	0a1b      	lsrs	r3, r3, #8
1000193c:	b29b      	uxth	r3, r3
1000193e:	b2da      	uxtb	r2, r3
10001940:	4b06      	ldr	r3, [pc, #24]	; (1000195c <new_data_neuNodeIdBack+0x78>)
10001942:	725a      	strb	r2, [r3, #9]
   	 new_data[10]= 	Ser_NrL  & 0xff; //lowbyte
10001944:	4b09      	ldr	r3, [pc, #36]	; (1000196c <new_data_neuNodeIdBack+0x88>)
10001946:	881b      	ldrh	r3, [r3, #0]
10001948:	b2da      	uxtb	r2, r3
1000194a:	4b04      	ldr	r3, [pc, #16]	; (1000195c <new_data_neuNodeIdBack+0x78>)
1000194c:	729a      	strb	r2, [r3, #10]
  	 new_data[11]=command_codeEnd;
1000194e:	4b03      	ldr	r3, [pc, #12]	; (1000195c <new_data_neuNodeIdBack+0x78>)
10001950:	22ff      	movs	r2, #255	; 0xff
10001952:	72da      	strb	r2, [r3, #11]
   }
10001954:	46bd      	mov	sp, r7
10001956:	bd80      	pop	{r7, pc}
10001958:	20000550 	.word	0x20000550
1000195c:	20000804 	.word	0x20000804
10001960:	20000836 	.word	0x20000836
10001964:	200007ca 	.word	0x200007ca
10001968:	20000830 	.word	0x20000830
1000196c:	200008a8 	.word	0x200008a8

10001970 <new_data_neuSerNrBack>:
   //------------------------------------------------------

   void new_data_neuSerNrBack(void) // ausgabe über rxd
   {
10001970:	b580      	push	{r7, lr}
10001972:	af00      	add	r7, sp, #0
  	 transmit_buf_size=15;
10001974:	4b25      	ldr	r3, [pc, #148]	; (10001a0c <new_data_neuSerNrBack+0x9c>)
10001976:	220f      	movs	r2, #15
10001978:	701a      	strb	r2, [r3, #0]
  	 new_data[0]=command_code01;
1000197a:	4b25      	ldr	r3, [pc, #148]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
1000197c:	224c      	movs	r2, #76	; 0x4c
1000197e:	701a      	strb	r2, [r3, #0]
  	 new_data[1]=command_code02;
10001980:	4b23      	ldr	r3, [pc, #140]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
10001982:	2249      	movs	r2, #73	; 0x49
10001984:	705a      	strb	r2, [r3, #1]
  	 new_data[2]=command_code03;
10001986:	4b22      	ldr	r3, [pc, #136]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
10001988:	224e      	movs	r2, #78	; 0x4e
1000198a:	709a      	strb	r2, [r3, #2]
  	 new_data[3]=node_id;
1000198c:	4b21      	ldr	r3, [pc, #132]	; (10001a14 <new_data_neuSerNrBack+0xa4>)
1000198e:	781a      	ldrb	r2, [r3, #0]
10001990:	4b1f      	ldr	r3, [pc, #124]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
10001992:	70da      	strb	r2, [r3, #3]
  	 new_data[4]=transmit_buf_size;
10001994:	4b1d      	ldr	r3, [pc, #116]	; (10001a0c <new_data_neuSerNrBack+0x9c>)
10001996:	781a      	ldrb	r2, [r3, #0]
10001998:	4b1d      	ldr	r3, [pc, #116]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
1000199a:	711a      	strb	r2, [r3, #4]
  	 new_data[5]=command_neuSerNrBack;
1000199c:	4b1c      	ldr	r3, [pc, #112]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
1000199e:	226c      	movs	r2, #108	; 0x6c
100019a0:	715a      	strb	r2, [r3, #5]
   	 new_data[6]= 	neu_Ser_NrH  / 0x100; //highbyte
100019a2:	4b1d      	ldr	r3, [pc, #116]	; (10001a18 <new_data_neuSerNrBack+0xa8>)
100019a4:	881b      	ldrh	r3, [r3, #0]
100019a6:	0a1b      	lsrs	r3, r3, #8
100019a8:	b29b      	uxth	r3, r3
100019aa:	b2da      	uxtb	r2, r3
100019ac:	4b18      	ldr	r3, [pc, #96]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
100019ae:	719a      	strb	r2, [r3, #6]
   	 new_data[7]= 	neu_Ser_NrH  & 0xff; //highbyte
100019b0:	4b19      	ldr	r3, [pc, #100]	; (10001a18 <new_data_neuSerNrBack+0xa8>)
100019b2:	881b      	ldrh	r3, [r3, #0]
100019b4:	b2da      	uxtb	r2, r3
100019b6:	4b16      	ldr	r3, [pc, #88]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
100019b8:	71da      	strb	r2, [r3, #7]
   	 new_data[8]= 	neu_Ser_NrL  / 0x100; //highbyte
100019ba:	4b18      	ldr	r3, [pc, #96]	; (10001a1c <new_data_neuSerNrBack+0xac>)
100019bc:	881b      	ldrh	r3, [r3, #0]
100019be:	0a1b      	lsrs	r3, r3, #8
100019c0:	b29b      	uxth	r3, r3
100019c2:	b2da      	uxtb	r2, r3
100019c4:	4b12      	ldr	r3, [pc, #72]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
100019c6:	721a      	strb	r2, [r3, #8]
   	 new_data[9]= 	neu_Ser_NrL  & 0xff; //lowbyte
100019c8:	4b14      	ldr	r3, [pc, #80]	; (10001a1c <new_data_neuSerNrBack+0xac>)
100019ca:	881b      	ldrh	r3, [r3, #0]
100019cc:	b2da      	uxtb	r2, r3
100019ce:	4b10      	ldr	r3, [pc, #64]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
100019d0:	725a      	strb	r2, [r3, #9]
   	 new_data[10]= 	Ser_NrH  / 0x100; //highbyte
100019d2:	4b13      	ldr	r3, [pc, #76]	; (10001a20 <new_data_neuSerNrBack+0xb0>)
100019d4:	881b      	ldrh	r3, [r3, #0]
100019d6:	0a1b      	lsrs	r3, r3, #8
100019d8:	b29b      	uxth	r3, r3
100019da:	b2da      	uxtb	r2, r3
100019dc:	4b0c      	ldr	r3, [pc, #48]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
100019de:	729a      	strb	r2, [r3, #10]
   	 new_data[11]= 	Ser_NrH  & 0xff; //highbyte
100019e0:	4b0f      	ldr	r3, [pc, #60]	; (10001a20 <new_data_neuSerNrBack+0xb0>)
100019e2:	881b      	ldrh	r3, [r3, #0]
100019e4:	b2da      	uxtb	r2, r3
100019e6:	4b0a      	ldr	r3, [pc, #40]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
100019e8:	72da      	strb	r2, [r3, #11]
   	 new_data[12]= 	Ser_NrL  / 0x100; //highbyte
100019ea:	4b0e      	ldr	r3, [pc, #56]	; (10001a24 <new_data_neuSerNrBack+0xb4>)
100019ec:	881b      	ldrh	r3, [r3, #0]
100019ee:	0a1b      	lsrs	r3, r3, #8
100019f0:	b29b      	uxth	r3, r3
100019f2:	b2da      	uxtb	r2, r3
100019f4:	4b06      	ldr	r3, [pc, #24]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
100019f6:	731a      	strb	r2, [r3, #12]
   	 new_data[13]= 	Ser_NrL  & 0xff; //lowbyte
100019f8:	4b0a      	ldr	r3, [pc, #40]	; (10001a24 <new_data_neuSerNrBack+0xb4>)
100019fa:	881b      	ldrh	r3, [r3, #0]
100019fc:	b2da      	uxtb	r2, r3
100019fe:	4b04      	ldr	r3, [pc, #16]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
10001a00:	735a      	strb	r2, [r3, #13]
  	 new_data[14]=command_codeEnd;
10001a02:	4b03      	ldr	r3, [pc, #12]	; (10001a10 <new_data_neuSerNrBack+0xa0>)
10001a04:	22ff      	movs	r2, #255	; 0xff
10001a06:	739a      	strb	r2, [r3, #14]
   }
10001a08:	46bd      	mov	sp, r7
10001a0a:	bd80      	pop	{r7, pc}
10001a0c:	20000550 	.word	0x20000550
10001a10:	20000804 	.word	0x20000804
10001a14:	20000836 	.word	0x20000836
10001a18:	20000816 	.word	0x20000816
10001a1c:	20000904 	.word	0x20000904
10001a20:	20000830 	.word	0x20000830
10001a24:	200008a8 	.word	0x200008a8

10001a28 <new_data_NodeIdBack>:
   //------------------------------------------------------

   void new_data_NodeIdBack(void) // ausgabe über rxd
   {
10001a28:	b580      	push	{r7, lr}
10001a2a:	af00      	add	r7, sp, #0
  	 transmit_buf_size=13;
10001a2c:	4b1d      	ldr	r3, [pc, #116]	; (10001aa4 <new_data_NodeIdBack+0x7c>)
10001a2e:	220d      	movs	r2, #13
10001a30:	701a      	strb	r2, [r3, #0]
  	 new_data[0]=command_code01;
10001a32:	4b1d      	ldr	r3, [pc, #116]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a34:	224c      	movs	r2, #76	; 0x4c
10001a36:	701a      	strb	r2, [r3, #0]
  	 new_data[1]=command_code02;
10001a38:	4b1b      	ldr	r3, [pc, #108]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a3a:	2249      	movs	r2, #73	; 0x49
10001a3c:	705a      	strb	r2, [r3, #1]
  	 new_data[2]=command_code03;
10001a3e:	4b1a      	ldr	r3, [pc, #104]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a40:	224e      	movs	r2, #78	; 0x4e
10001a42:	709a      	strb	r2, [r3, #2]
  	 new_data[3]=node_id;
10001a44:	4b19      	ldr	r3, [pc, #100]	; (10001aac <new_data_NodeIdBack+0x84>)
10001a46:	781a      	ldrb	r2, [r3, #0]
10001a48:	4b17      	ldr	r3, [pc, #92]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a4a:	70da      	strb	r2, [r3, #3]
  	 new_data[4]=transmit_buf_size;
10001a4c:	4b15      	ldr	r3, [pc, #84]	; (10001aa4 <new_data_NodeIdBack+0x7c>)
10001a4e:	781a      	ldrb	r2, [r3, #0]
10001a50:	4b15      	ldr	r3, [pc, #84]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a52:	711a      	strb	r2, [r3, #4]
  	 new_data[5]=command_NodeIdBack;
10001a54:	4b14      	ldr	r3, [pc, #80]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a56:	226d      	movs	r2, #109	; 0x6d
10001a58:	715a      	strb	r2, [r3, #5]
   	 new_data[6]= 	node_id_alt ; // alte node_id_eeprom
10001a5a:	4b15      	ldr	r3, [pc, #84]	; (10001ab0 <new_data_NodeIdBack+0x88>)
10001a5c:	781a      	ldrb	r2, [r3, #0]
10001a5e:	4b12      	ldr	r3, [pc, #72]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a60:	719a      	strb	r2, [r3, #6]
   	 new_data[7]= 	node_id; // node_id_eeprom
10001a62:	4b12      	ldr	r3, [pc, #72]	; (10001aac <new_data_NodeIdBack+0x84>)
10001a64:	781a      	ldrb	r2, [r3, #0]
10001a66:	4b10      	ldr	r3, [pc, #64]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a68:	71da      	strb	r2, [r3, #7]
   	 new_data[8]= 	Ser_NrH  / 0x100; //highbyte
10001a6a:	4b12      	ldr	r3, [pc, #72]	; (10001ab4 <new_data_NodeIdBack+0x8c>)
10001a6c:	881b      	ldrh	r3, [r3, #0]
10001a6e:	0a1b      	lsrs	r3, r3, #8
10001a70:	b29b      	uxth	r3, r3
10001a72:	b2da      	uxtb	r2, r3
10001a74:	4b0c      	ldr	r3, [pc, #48]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a76:	721a      	strb	r2, [r3, #8]
   	 new_data[9]= 	Ser_NrH  & 0xff; //highbyte
10001a78:	4b0e      	ldr	r3, [pc, #56]	; (10001ab4 <new_data_NodeIdBack+0x8c>)
10001a7a:	881b      	ldrh	r3, [r3, #0]
10001a7c:	b2da      	uxtb	r2, r3
10001a7e:	4b0a      	ldr	r3, [pc, #40]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a80:	725a      	strb	r2, [r3, #9]
   	 new_data[10]= 	Ser_NrL  / 0x100; //highbyte
10001a82:	4b0d      	ldr	r3, [pc, #52]	; (10001ab8 <new_data_NodeIdBack+0x90>)
10001a84:	881b      	ldrh	r3, [r3, #0]
10001a86:	0a1b      	lsrs	r3, r3, #8
10001a88:	b29b      	uxth	r3, r3
10001a8a:	b2da      	uxtb	r2, r3
10001a8c:	4b06      	ldr	r3, [pc, #24]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a8e:	729a      	strb	r2, [r3, #10]
   	 new_data[11]= 	Ser_NrL  & 0xff; //lowbyte
10001a90:	4b09      	ldr	r3, [pc, #36]	; (10001ab8 <new_data_NodeIdBack+0x90>)
10001a92:	881b      	ldrh	r3, [r3, #0]
10001a94:	b2da      	uxtb	r2, r3
10001a96:	4b04      	ldr	r3, [pc, #16]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a98:	72da      	strb	r2, [r3, #11]
  	 new_data[12]=command_codeEnd;
10001a9a:	4b03      	ldr	r3, [pc, #12]	; (10001aa8 <new_data_NodeIdBack+0x80>)
10001a9c:	22ff      	movs	r2, #255	; 0xff
10001a9e:	731a      	strb	r2, [r3, #12]
   }
10001aa0:	46bd      	mov	sp, r7
10001aa2:	bd80      	pop	{r7, pc}
10001aa4:	20000550 	.word	0x20000550
10001aa8:	20000804 	.word	0x20000804
10001aac:	20000836 	.word	0x20000836
10001ab0:	20000844 	.word	0x20000844
10001ab4:	20000830 	.word	0x20000830
10001ab8:	200008a8 	.word	0x200008a8

10001abc <new_data_SerNrBack>:

   //------------------------------------------------------

   void new_data_SerNrBack(void) // ausgabe über rxd
   {
10001abc:	b580      	push	{r7, lr}
10001abe:	af00      	add	r7, sp, #0
  	 transmit_buf_size=11;
10001ac0:	4b19      	ldr	r3, [pc, #100]	; (10001b28 <new_data_SerNrBack+0x6c>)
10001ac2:	220b      	movs	r2, #11
10001ac4:	701a      	strb	r2, [r3, #0]
  	 new_data[0]=command_code01;
10001ac6:	4b19      	ldr	r3, [pc, #100]	; (10001b2c <new_data_SerNrBack+0x70>)
10001ac8:	224c      	movs	r2, #76	; 0x4c
10001aca:	701a      	strb	r2, [r3, #0]
  	 new_data[1]=command_code02;
10001acc:	4b17      	ldr	r3, [pc, #92]	; (10001b2c <new_data_SerNrBack+0x70>)
10001ace:	2249      	movs	r2, #73	; 0x49
10001ad0:	705a      	strb	r2, [r3, #1]
  	 new_data[2]=command_code03;
10001ad2:	4b16      	ldr	r3, [pc, #88]	; (10001b2c <new_data_SerNrBack+0x70>)
10001ad4:	224e      	movs	r2, #78	; 0x4e
10001ad6:	709a      	strb	r2, [r3, #2]
  	 new_data[3]=node_id;
10001ad8:	4b15      	ldr	r3, [pc, #84]	; (10001b30 <new_data_SerNrBack+0x74>)
10001ada:	781a      	ldrb	r2, [r3, #0]
10001adc:	4b13      	ldr	r3, [pc, #76]	; (10001b2c <new_data_SerNrBack+0x70>)
10001ade:	70da      	strb	r2, [r3, #3]
  	 new_data[4]=transmit_buf_size;
10001ae0:	4b11      	ldr	r3, [pc, #68]	; (10001b28 <new_data_SerNrBack+0x6c>)
10001ae2:	781a      	ldrb	r2, [r3, #0]
10001ae4:	4b11      	ldr	r3, [pc, #68]	; (10001b2c <new_data_SerNrBack+0x70>)
10001ae6:	711a      	strb	r2, [r3, #4]
  	 new_data[5]=command_SerNrBack;
10001ae8:	4b10      	ldr	r3, [pc, #64]	; (10001b2c <new_data_SerNrBack+0x70>)
10001aea:	226e      	movs	r2, #110	; 0x6e
10001aec:	715a      	strb	r2, [r3, #5]
   	 new_data[6]= 	Ser_NrH  / 0x100; //highbyte
10001aee:	4b11      	ldr	r3, [pc, #68]	; (10001b34 <new_data_SerNrBack+0x78>)
10001af0:	881b      	ldrh	r3, [r3, #0]
10001af2:	0a1b      	lsrs	r3, r3, #8
10001af4:	b29b      	uxth	r3, r3
10001af6:	b2da      	uxtb	r2, r3
10001af8:	4b0c      	ldr	r3, [pc, #48]	; (10001b2c <new_data_SerNrBack+0x70>)
10001afa:	719a      	strb	r2, [r3, #6]
   	 new_data[7]= 	Ser_NrH  & 0xff; //lowbyte
10001afc:	4b0d      	ldr	r3, [pc, #52]	; (10001b34 <new_data_SerNrBack+0x78>)
10001afe:	881b      	ldrh	r3, [r3, #0]
10001b00:	b2da      	uxtb	r2, r3
10001b02:	4b0a      	ldr	r3, [pc, #40]	; (10001b2c <new_data_SerNrBack+0x70>)
10001b04:	71da      	strb	r2, [r3, #7]
   	 new_data[8]= 	Ser_NrL  / 0x100; //highbyte
10001b06:	4b0c      	ldr	r3, [pc, #48]	; (10001b38 <new_data_SerNrBack+0x7c>)
10001b08:	881b      	ldrh	r3, [r3, #0]
10001b0a:	0a1b      	lsrs	r3, r3, #8
10001b0c:	b29b      	uxth	r3, r3
10001b0e:	b2da      	uxtb	r2, r3
10001b10:	4b06      	ldr	r3, [pc, #24]	; (10001b2c <new_data_SerNrBack+0x70>)
10001b12:	721a      	strb	r2, [r3, #8]
   	 new_data[9]= 	Ser_NrL  & 0xff; //lowbyte
10001b14:	4b08      	ldr	r3, [pc, #32]	; (10001b38 <new_data_SerNrBack+0x7c>)
10001b16:	881b      	ldrh	r3, [r3, #0]
10001b18:	b2da      	uxtb	r2, r3
10001b1a:	4b04      	ldr	r3, [pc, #16]	; (10001b2c <new_data_SerNrBack+0x70>)
10001b1c:	725a      	strb	r2, [r3, #9]
  	 new_data[10]=command_codeEnd;
10001b1e:	4b03      	ldr	r3, [pc, #12]	; (10001b2c <new_data_SerNrBack+0x70>)
10001b20:	22ff      	movs	r2, #255	; 0xff
10001b22:	729a      	strb	r2, [r3, #10]
   }
10001b24:	46bd      	mov	sp, r7
10001b26:	bd80      	pop	{r7, pc}
10001b28:	20000550 	.word	0x20000550
10001b2c:	20000804 	.word	0x20000804
10001b30:	20000836 	.word	0x20000836
10001b34:	20000830 	.word	0x20000830
10001b38:	200008a8 	.word	0x200008a8

10001b3c <new_data_readbuff2Back>:
   //-------------------------------------
   void new_data_readbuff2Back(void) // ausgabe über rxd
   {
10001b3c:	b580      	push	{r7, lr}
10001b3e:	af00      	add	r7, sp, #0
  	 transmit_buf_size=24;
10001b40:	4b2f      	ldr	r3, [pc, #188]	; (10001c00 <new_data_readbuff2Back+0xc4>)
10001b42:	2218      	movs	r2, #24
10001b44:	701a      	strb	r2, [r3, #0]
  	 new_data[0]=command_code01;
10001b46:	4b2f      	ldr	r3, [pc, #188]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b48:	224c      	movs	r2, #76	; 0x4c
10001b4a:	701a      	strb	r2, [r3, #0]
  	 new_data[1]=command_code02;
10001b4c:	4b2d      	ldr	r3, [pc, #180]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b4e:	2249      	movs	r2, #73	; 0x49
10001b50:	705a      	strb	r2, [r3, #1]
  	 new_data[2]=command_code03;
10001b52:	4b2c      	ldr	r3, [pc, #176]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b54:	224e      	movs	r2, #78	; 0x4e
10001b56:	709a      	strb	r2, [r3, #2]
  	 new_data[3]=node_id;
10001b58:	4b2b      	ldr	r3, [pc, #172]	; (10001c08 <new_data_readbuff2Back+0xcc>)
10001b5a:	781a      	ldrb	r2, [r3, #0]
10001b5c:	4b29      	ldr	r3, [pc, #164]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b5e:	70da      	strb	r2, [r3, #3]
  	 new_data[4]=transmit_buf_size;
10001b60:	4b27      	ldr	r3, [pc, #156]	; (10001c00 <new_data_readbuff2Back+0xc4>)
10001b62:	781a      	ldrb	r2, [r3, #0]
10001b64:	4b27      	ldr	r3, [pc, #156]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b66:	711a      	strb	r2, [r3, #4]
  	 new_data[5]=command_readbuff2Back;
10001b68:	4b26      	ldr	r3, [pc, #152]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b6a:	2270      	movs	r2, #112	; 0x70
10001b6c:	715a      	strb	r2, [r3, #5]
  	 new_data[6]=0; // buffertyp
10001b6e:	4b25      	ldr	r3, [pc, #148]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b70:	2200      	movs	r2, #0
10001b72:	719a      	strb	r2, [r3, #6]
								 new_data[7]=ReadBuffer2[0];
10001b74:	4b25      	ldr	r3, [pc, #148]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001b76:	781a      	ldrb	r2, [r3, #0]
10001b78:	4b22      	ldr	r3, [pc, #136]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b7a:	71da      	strb	r2, [r3, #7]
								 new_data[8]=ReadBuffer2[1];
10001b7c:	4b23      	ldr	r3, [pc, #140]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001b7e:	785a      	ldrb	r2, [r3, #1]
10001b80:	4b20      	ldr	r3, [pc, #128]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b82:	721a      	strb	r2, [r3, #8]
								 new_data[9]=ReadBuffer2[2];
10001b84:	4b21      	ldr	r3, [pc, #132]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001b86:	789a      	ldrb	r2, [r3, #2]
10001b88:	4b1e      	ldr	r3, [pc, #120]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b8a:	725a      	strb	r2, [r3, #9]
								 new_data[10]=ReadBuffer2[3];
10001b8c:	4b1f      	ldr	r3, [pc, #124]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001b8e:	78da      	ldrb	r2, [r3, #3]
10001b90:	4b1c      	ldr	r3, [pc, #112]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b92:	729a      	strb	r2, [r3, #10]
								 new_data[11]=ReadBuffer2[4];
10001b94:	4b1d      	ldr	r3, [pc, #116]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001b96:	791a      	ldrb	r2, [r3, #4]
10001b98:	4b1a      	ldr	r3, [pc, #104]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001b9a:	72da      	strb	r2, [r3, #11]
								 new_data[12]=ReadBuffer2[5];
10001b9c:	4b1b      	ldr	r3, [pc, #108]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001b9e:	795a      	ldrb	r2, [r3, #5]
10001ba0:	4b18      	ldr	r3, [pc, #96]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001ba2:	731a      	strb	r2, [r3, #12]
								 new_data[13]=ReadBuffer2[6];
10001ba4:	4b19      	ldr	r3, [pc, #100]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001ba6:	799a      	ldrb	r2, [r3, #6]
10001ba8:	4b16      	ldr	r3, [pc, #88]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001baa:	735a      	strb	r2, [r3, #13]
								 new_data[14]=ReadBuffer2[7];
10001bac:	4b17      	ldr	r3, [pc, #92]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bae:	79da      	ldrb	r2, [r3, #7]
10001bb0:	4b14      	ldr	r3, [pc, #80]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bb2:	739a      	strb	r2, [r3, #14]
								 new_data[15]=ReadBuffer2[8];
10001bb4:	4b15      	ldr	r3, [pc, #84]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bb6:	7a1a      	ldrb	r2, [r3, #8]
10001bb8:	4b12      	ldr	r3, [pc, #72]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bba:	73da      	strb	r2, [r3, #15]
								 new_data[16]=ReadBuffer2[9];
10001bbc:	4b13      	ldr	r3, [pc, #76]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bbe:	7a5a      	ldrb	r2, [r3, #9]
10001bc0:	4b10      	ldr	r3, [pc, #64]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bc2:	741a      	strb	r2, [r3, #16]
								 new_data[17]=ReadBuffer2[10];
10001bc4:	4b11      	ldr	r3, [pc, #68]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bc6:	7a9a      	ldrb	r2, [r3, #10]
10001bc8:	4b0e      	ldr	r3, [pc, #56]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bca:	745a      	strb	r2, [r3, #17]
								 new_data[18]=ReadBuffer2[11];
10001bcc:	4b0f      	ldr	r3, [pc, #60]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bce:	7ada      	ldrb	r2, [r3, #11]
10001bd0:	4b0c      	ldr	r3, [pc, #48]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bd2:	749a      	strb	r2, [r3, #18]
								 new_data[19]=ReadBuffer2[12];
10001bd4:	4b0d      	ldr	r3, [pc, #52]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bd6:	7b1a      	ldrb	r2, [r3, #12]
10001bd8:	4b0a      	ldr	r3, [pc, #40]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bda:	74da      	strb	r2, [r3, #19]
								 new_data[20]=ReadBuffer2[13];
10001bdc:	4b0b      	ldr	r3, [pc, #44]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bde:	7b5a      	ldrb	r2, [r3, #13]
10001be0:	4b08      	ldr	r3, [pc, #32]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001be2:	751a      	strb	r2, [r3, #20]
								 new_data[21]=ReadBuffer2[14];
10001be4:	4b09      	ldr	r3, [pc, #36]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001be6:	7b9a      	ldrb	r2, [r3, #14]
10001be8:	4b06      	ldr	r3, [pc, #24]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bea:	755a      	strb	r2, [r3, #21]
								 new_data[22]=ReadBuffer2[15];
10001bec:	4b07      	ldr	r3, [pc, #28]	; (10001c0c <new_data_readbuff2Back+0xd0>)
10001bee:	7bda      	ldrb	r2, [r3, #15]
10001bf0:	4b04      	ldr	r3, [pc, #16]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bf2:	759a      	strb	r2, [r3, #22]

  	 new_data[23]=command_codeEnd;
10001bf4:	4b03      	ldr	r3, [pc, #12]	; (10001c04 <new_data_readbuff2Back+0xc8>)
10001bf6:	22ff      	movs	r2, #255	; 0xff
10001bf8:	75da      	strb	r2, [r3, #23]
   }
10001bfa:	46bd      	mov	sp, r7
10001bfc:	bd80      	pop	{r7, pc}
10001bfe:	46c0      	nop			; (mov r8, r8)
10001c00:	20000550 	.word	0x20000550
10001c04:	20000804 	.word	0x20000804
10001c08:	20000836 	.word	0x20000836
10001c0c:	20000848 	.word	0x20000848

10001c10 <clearEpromBuffer>:
 //------------------------------------------------------

// Eprom speichern###############################################################
 //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''*/
 void clearEpromBuffer(void)
 {
10001c10:	b580      	push	{r7, lr}
10001c12:	af00      	add	r7, sp, #0

	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<16;Index++)
10001c14:	4b1e      	ldr	r3, [pc, #120]	; (10001c90 <clearEpromBuffer+0x80>)
10001c16:	2200      	movs	r2, #0
10001c18:	701a      	strb	r2, [r3, #0]
10001c1a:	e00b      	b.n	10001c34 <clearEpromBuffer+0x24>
	{  ReadBuffer1[Index] = 0; }
10001c1c:	4b1c      	ldr	r3, [pc, #112]	; (10001c90 <clearEpromBuffer+0x80>)
10001c1e:	781b      	ldrb	r3, [r3, #0]
10001c20:	1c1a      	adds	r2, r3, #0
10001c22:	4b1c      	ldr	r3, [pc, #112]	; (10001c94 <clearEpromBuffer+0x84>)
10001c24:	2100      	movs	r1, #0
10001c26:	5499      	strb	r1, [r3, r2]
 //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''*/
 void clearEpromBuffer(void)
 {

	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<16;Index++)
10001c28:	4b19      	ldr	r3, [pc, #100]	; (10001c90 <clearEpromBuffer+0x80>)
10001c2a:	781b      	ldrb	r3, [r3, #0]
10001c2c:	3301      	adds	r3, #1
10001c2e:	b2da      	uxtb	r2, r3
10001c30:	4b17      	ldr	r3, [pc, #92]	; (10001c90 <clearEpromBuffer+0x80>)
10001c32:	701a      	strb	r2, [r3, #0]
10001c34:	4b16      	ldr	r3, [pc, #88]	; (10001c90 <clearEpromBuffer+0x80>)
10001c36:	781b      	ldrb	r3, [r3, #0]
10001c38:	2b0f      	cmp	r3, #15
10001c3a:	d9ef      	bls.n	10001c1c <clearEpromBuffer+0xc>
	{  ReadBuffer1[Index] = 0; }

	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<16;Index++)
10001c3c:	4b14      	ldr	r3, [pc, #80]	; (10001c90 <clearEpromBuffer+0x80>)
10001c3e:	2200      	movs	r2, #0
10001c40:	701a      	strb	r2, [r3, #0]
10001c42:	e00b      	b.n	10001c5c <clearEpromBuffer+0x4c>
	{  ReadBuffer2[Index] = 0; }
10001c44:	4b12      	ldr	r3, [pc, #72]	; (10001c90 <clearEpromBuffer+0x80>)
10001c46:	781b      	ldrb	r3, [r3, #0]
10001c48:	1c1a      	adds	r2, r3, #0
10001c4a:	4b13      	ldr	r3, [pc, #76]	; (10001c98 <clearEpromBuffer+0x88>)
10001c4c:	2100      	movs	r1, #0
10001c4e:	5499      	strb	r1, [r3, r2]
	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<16;Index++)
	{  ReadBuffer1[Index] = 0; }

	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<16;Index++)
10001c50:	4b0f      	ldr	r3, [pc, #60]	; (10001c90 <clearEpromBuffer+0x80>)
10001c52:	781b      	ldrb	r3, [r3, #0]
10001c54:	3301      	adds	r3, #1
10001c56:	b2da      	uxtb	r2, r3
10001c58:	4b0d      	ldr	r3, [pc, #52]	; (10001c90 <clearEpromBuffer+0x80>)
10001c5a:	701a      	strb	r2, [r3, #0]
10001c5c:	4b0c      	ldr	r3, [pc, #48]	; (10001c90 <clearEpromBuffer+0x80>)
10001c5e:	781b      	ldrb	r3, [r3, #0]
10001c60:	2b0f      	cmp	r3, #15
10001c62:	d9ef      	bls.n	10001c44 <clearEpromBuffer+0x34>
	{  ReadBuffer2[Index] = 0; }

	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<32;Index++)
10001c64:	4b0a      	ldr	r3, [pc, #40]	; (10001c90 <clearEpromBuffer+0x80>)
10001c66:	2200      	movs	r2, #0
10001c68:	701a      	strb	r2, [r3, #0]
10001c6a:	e00b      	b.n	10001c84 <clearEpromBuffer+0x74>
	{  ReadBuffer3[Index] = 0; }
10001c6c:	4b08      	ldr	r3, [pc, #32]	; (10001c90 <clearEpromBuffer+0x80>)
10001c6e:	781b      	ldrb	r3, [r3, #0]
10001c70:	1c1a      	adds	r2, r3, #0
10001c72:	4b0a      	ldr	r3, [pc, #40]	; (10001c9c <clearEpromBuffer+0x8c>)
10001c74:	2100      	movs	r1, #0
10001c76:	5499      	strb	r1, [r3, r2]
	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<16;Index++)
	{  ReadBuffer2[Index] = 0; }

	//Clear the Read buffer before accepting the read request
	for(Index = 0; Index<32;Index++)
10001c78:	4b05      	ldr	r3, [pc, #20]	; (10001c90 <clearEpromBuffer+0x80>)
10001c7a:	781b      	ldrb	r3, [r3, #0]
10001c7c:	3301      	adds	r3, #1
10001c7e:	b2da      	uxtb	r2, r3
10001c80:	4b03      	ldr	r3, [pc, #12]	; (10001c90 <clearEpromBuffer+0x80>)
10001c82:	701a      	strb	r2, [r3, #0]
10001c84:	4b02      	ldr	r3, [pc, #8]	; (10001c90 <clearEpromBuffer+0x80>)
10001c86:	781b      	ldrb	r3, [r3, #0]
10001c88:	2b1f      	cmp	r3, #31
10001c8a:	d9ef      	bls.n	10001c6c <clearEpromBuffer+0x5c>
	{  ReadBuffer3[Index] = 0; }
 }
10001c8c:	46bd      	mov	sp, r7
10001c8e:	bd80      	pop	{r7, pc}
10001c90:	200007ee 	.word	0x200007ee
10001c94:	20000890 	.word	0x20000890
10001c98:	20000848 	.word	0x20000848
10001c9c:	200007cc 	.word	0x200007cc

10001ca0 <readSerNrEEprom>:
   return (EEprom_status+0x10*oper_status);
 }
 //------------------------------------------------

 int readSerNrEEprom(void)
 {
10001ca0:	b580      	push	{r7, lr}
10001ca2:	af00      	add	r7, sp, #0
	 EEprom_status = E_EEPROM_XMC1_GetStatus();
10001ca4:	f003 fcb0 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001ca8:	1c03      	adds	r3, r0, #0
10001caa:	1c1a      	adds	r2, r3, #0
10001cac:	4b0d      	ldr	r3, [pc, #52]	; (10001ce4 <readSerNrEEprom+0x44>)
10001cae:	701a      	strb	r2, [r3, #0]
	 if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001cb0:	4b0c      	ldr	r3, [pc, #48]	; (10001ce4 <readSerNrEEprom+0x44>)
10001cb2:	781b      	ldrb	r3, [r3, #0]
10001cb4:	2b03      	cmp	r3, #3
10001cb6:	d10a      	bne.n	10001cce <readSerNrEEprom+0x2e>
	 {
       oper_status = E_EEPROM_XMC1_Read(serial_first_data,0U,ReadBuffer1,16U);
10001cb8:	4b0b      	ldr	r3, [pc, #44]	; (10001ce8 <readSerNrEEprom+0x48>)
10001cba:	2001      	movs	r0, #1
10001cbc:	2100      	movs	r1, #0
10001cbe:	1c1a      	adds	r2, r3, #0
10001cc0:	2310      	movs	r3, #16
10001cc2:	f003 fc31 	bl	10005528 <E_EEPROM_XMC1_Read>
10001cc6:	1c03      	adds	r3, r0, #0
10001cc8:	1c1a      	adds	r2, r3, #0
10001cca:	4b08      	ldr	r3, [pc, #32]	; (10001cec <readSerNrEEprom+0x4c>)
10001ccc:	701a      	strb	r2, [r3, #0]
     }
 return (EEprom_status+0x10*oper_status);
10001cce:	4b05      	ldr	r3, [pc, #20]	; (10001ce4 <readSerNrEEprom+0x44>)
10001cd0:	781b      	ldrb	r3, [r3, #0]
10001cd2:	1c1a      	adds	r2, r3, #0
10001cd4:	4b05      	ldr	r3, [pc, #20]	; (10001cec <readSerNrEEprom+0x4c>)
10001cd6:	781b      	ldrb	r3, [r3, #0]
10001cd8:	011b      	lsls	r3, r3, #4
10001cda:	18d3      	adds	r3, r2, r3
 }
10001cdc:	1c18      	adds	r0, r3, #0
10001cde:	46bd      	mov	sp, r7
10001ce0:	bd80      	pop	{r7, pc}
10001ce2:	46c0      	nop			; (mov r8, r8)
10001ce4:	20000863 	.word	0x20000863
10001ce8:	20000890 	.word	0x20000890
10001cec:	200008fc 	.word	0x200008fc

10001cf0 <readNodeIdEEprom>:
 //------------------------------------------------

 int readNodeIdEEprom(void)
 {
10001cf0:	b580      	push	{r7, lr}
10001cf2:	af00      	add	r7, sp, #0
	 EEprom_status = E_EEPROM_XMC1_GetStatus();
10001cf4:	f003 fc88 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001cf8:	1c03      	adds	r3, r0, #0
10001cfa:	1c1a      	adds	r2, r3, #0
10001cfc:	4b0d      	ldr	r3, [pc, #52]	; (10001d34 <readNodeIdEEprom+0x44>)
10001cfe:	701a      	strb	r2, [r3, #0]
	 if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001d00:	4b0c      	ldr	r3, [pc, #48]	; (10001d34 <readNodeIdEEprom+0x44>)
10001d02:	781b      	ldrb	r3, [r3, #0]
10001d04:	2b03      	cmp	r3, #3
10001d06:	d10a      	bne.n	10001d1e <readNodeIdEEprom+0x2e>
	 {
       oper_status = E_EEPROM_XMC1_Read(node_data,0U,ReadBuffer2,16U);
10001d08:	4b0b      	ldr	r3, [pc, #44]	; (10001d38 <readNodeIdEEprom+0x48>)
10001d0a:	2002      	movs	r0, #2
10001d0c:	2100      	movs	r1, #0
10001d0e:	1c1a      	adds	r2, r3, #0
10001d10:	2310      	movs	r3, #16
10001d12:	f003 fc09 	bl	10005528 <E_EEPROM_XMC1_Read>
10001d16:	1c03      	adds	r3, r0, #0
10001d18:	1c1a      	adds	r2, r3, #0
10001d1a:	4b08      	ldr	r3, [pc, #32]	; (10001d3c <readNodeIdEEprom+0x4c>)
10001d1c:	701a      	strb	r2, [r3, #0]
     }
 return (EEprom_status+0x10*oper_status);// idle =3 succses =0  ==0x03
10001d1e:	4b05      	ldr	r3, [pc, #20]	; (10001d34 <readNodeIdEEprom+0x44>)
10001d20:	781b      	ldrb	r3, [r3, #0]
10001d22:	1c1a      	adds	r2, r3, #0
10001d24:	4b05      	ldr	r3, [pc, #20]	; (10001d3c <readNodeIdEEprom+0x4c>)
10001d26:	781b      	ldrb	r3, [r3, #0]
10001d28:	011b      	lsls	r3, r3, #4
10001d2a:	18d3      	adds	r3, r2, r3
 }
10001d2c:	1c18      	adds	r0, r3, #0
10001d2e:	46bd      	mov	sp, r7
10001d30:	bd80      	pop	{r7, pc}
10001d32:	46c0      	nop			; (mov r8, r8)
10001d34:	20000863 	.word	0x20000863
10001d38:	20000848 	.word	0x20000848
10001d3c:	200008fc 	.word	0x200008fc

10001d40 <read_akt_light_EEprom>:

 //------------------------------------------------

 int read_akt_light_EEprom(void)
 {
10001d40:	b580      	push	{r7, lr}
10001d42:	af00      	add	r7, sp, #0
	 EEprom_status = E_EEPROM_XMC1_GetStatus();
10001d44:	f003 fc60 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001d48:	1c03      	adds	r3, r0, #0
10001d4a:	1c1a      	adds	r2, r3, #0
10001d4c:	4b0d      	ldr	r3, [pc, #52]	; (10001d84 <read_akt_light_EEprom+0x44>)
10001d4e:	701a      	strb	r2, [r3, #0]
	 if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001d50:	4b0c      	ldr	r3, [pc, #48]	; (10001d84 <read_akt_light_EEprom+0x44>)
10001d52:	781b      	ldrb	r3, [r3, #0]
10001d54:	2b03      	cmp	r3, #3
10001d56:	d10a      	bne.n	10001d6e <read_akt_light_EEprom+0x2e>
	 {
       oper_status = E_EEPROM_XMC1_Read(akt_light_data,0U,ReadBuffer2,16U);
10001d58:	4b0b      	ldr	r3, [pc, #44]	; (10001d88 <read_akt_light_EEprom+0x48>)
10001d5a:	2004      	movs	r0, #4
10001d5c:	2100      	movs	r1, #0
10001d5e:	1c1a      	adds	r2, r3, #0
10001d60:	2310      	movs	r3, #16
10001d62:	f003 fbe1 	bl	10005528 <E_EEPROM_XMC1_Read>
10001d66:	1c03      	adds	r3, r0, #0
10001d68:	1c1a      	adds	r2, r3, #0
10001d6a:	4b08      	ldr	r3, [pc, #32]	; (10001d8c <read_akt_light_EEprom+0x4c>)
10001d6c:	701a      	strb	r2, [r3, #0]
     }
 return (EEprom_status+0x10*oper_status);// idle =3 succses =0  ==0x03
10001d6e:	4b05      	ldr	r3, [pc, #20]	; (10001d84 <read_akt_light_EEprom+0x44>)
10001d70:	781b      	ldrb	r3, [r3, #0]
10001d72:	1c1a      	adds	r2, r3, #0
10001d74:	4b05      	ldr	r3, [pc, #20]	; (10001d8c <read_akt_light_EEprom+0x4c>)
10001d76:	781b      	ldrb	r3, [r3, #0]
10001d78:	011b      	lsls	r3, r3, #4
10001d7a:	18d3      	adds	r3, r2, r3
 }
10001d7c:	1c18      	adds	r0, r3, #0
10001d7e:	46bd      	mov	sp, r7
10001d80:	bd80      	pop	{r7, pc}
10001d82:	46c0      	nop			; (mov r8, r8)
10001d84:	20000863 	.word	0x20000863
10001d88:	20000848 	.word	0x20000848
10001d8c:	200008fc 	.word	0x200008fc

10001d90 <read_off_light_EEprom>:
 //------------------------------------------------

 int read_off_light_EEprom(void)
 {
10001d90:	b580      	push	{r7, lr}
10001d92:	af00      	add	r7, sp, #0
	 EEprom_status = E_EEPROM_XMC1_GetStatus();
10001d94:	f003 fc38 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001d98:	1c03      	adds	r3, r0, #0
10001d9a:	1c1a      	adds	r2, r3, #0
10001d9c:	4b0d      	ldr	r3, [pc, #52]	; (10001dd4 <read_off_light_EEprom+0x44>)
10001d9e:	701a      	strb	r2, [r3, #0]
	 if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001da0:	4b0c      	ldr	r3, [pc, #48]	; (10001dd4 <read_off_light_EEprom+0x44>)
10001da2:	781b      	ldrb	r3, [r3, #0]
10001da4:	2b03      	cmp	r3, #3
10001da6:	d10a      	bne.n	10001dbe <read_off_light_EEprom+0x2e>
	 {
       oper_status = E_EEPROM_XMC1_Read(off_light_data,0U,ReadBuffer2,16U);
10001da8:	4b0b      	ldr	r3, [pc, #44]	; (10001dd8 <read_off_light_EEprom+0x48>)
10001daa:	2005      	movs	r0, #5
10001dac:	2100      	movs	r1, #0
10001dae:	1c1a      	adds	r2, r3, #0
10001db0:	2310      	movs	r3, #16
10001db2:	f003 fbb9 	bl	10005528 <E_EEPROM_XMC1_Read>
10001db6:	1c03      	adds	r3, r0, #0
10001db8:	1c1a      	adds	r2, r3, #0
10001dba:	4b08      	ldr	r3, [pc, #32]	; (10001ddc <read_off_light_EEprom+0x4c>)
10001dbc:	701a      	strb	r2, [r3, #0]
     }
 return (EEprom_status+0x10*oper_status);// idle =3 succses =0  ==0x03
10001dbe:	4b05      	ldr	r3, [pc, #20]	; (10001dd4 <read_off_light_EEprom+0x44>)
10001dc0:	781b      	ldrb	r3, [r3, #0]
10001dc2:	1c1a      	adds	r2, r3, #0
10001dc4:	4b05      	ldr	r3, [pc, #20]	; (10001ddc <read_off_light_EEprom+0x4c>)
10001dc6:	781b      	ldrb	r3, [r3, #0]
10001dc8:	011b      	lsls	r3, r3, #4
10001dca:	18d3      	adds	r3, r2, r3
 }
10001dcc:	1c18      	adds	r0, r3, #0
10001dce:	46bd      	mov	sp, r7
10001dd0:	bd80      	pop	{r7, pc}
10001dd2:	46c0      	nop			; (mov r8, r8)
10001dd4:	20000863 	.word	0x20000863
10001dd8:	20000848 	.word	0x20000848
10001ddc:	200008fc 	.word	0x200008fc

10001de0 <writeSernr_B1_EEprom>:

 //------------------------------------------------
 int writeSernr_B1_EEprom(void)
 {
10001de0:	b580      	push	{r7, lr}
10001de2:	b082      	sub	sp, #8
10001de4:	af00      	add	r7, sp, #0
	 int a = 0b10000000;
10001de6:	2380      	movs	r3, #128	; 0x80
10001de8:	607b      	str	r3, [r7, #4]
	if (resultB > min_EEP_Voltage_Uin)
10001dea:	4b14      	ldr	r3, [pc, #80]	; (10001e3c <writeSernr_B1_EEprom+0x5c>)
10001dec:	881a      	ldrh	r2, [r3, #0]
10001dee:	23ba      	movs	r3, #186	; 0xba
10001df0:	011b      	lsls	r3, r3, #4
10001df2:	429a      	cmp	r2, r3
10001df4:	d914      	bls.n	10001e20 <writeSernr_B1_EEprom+0x40>
  {
	  EEprom_status = E_EEPROM_XMC1_GetStatus();
10001df6:	f003 fc07 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001dfa:	1c03      	adds	r3, r0, #0
10001dfc:	1c1a      	adds	r2, r3, #0
10001dfe:	4b10      	ldr	r3, [pc, #64]	; (10001e40 <writeSernr_B1_EEprom+0x60>)
10001e00:	701a      	strb	r2, [r3, #0]
	 if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001e02:	4b0f      	ldr	r3, [pc, #60]	; (10001e40 <writeSernr_B1_EEprom+0x60>)
10001e04:	781b      	ldrb	r3, [r3, #0]
10001e06:	2b03      	cmp	r3, #3
10001e08:	d108      	bne.n	10001e1c <writeSernr_B1_EEprom+0x3c>
    {
    oper_status = E_EEPROM_XMC1_Write(serial_first_data,ReadBuffer1);
10001e0a:	4b0e      	ldr	r3, [pc, #56]	; (10001e44 <writeSernr_B1_EEprom+0x64>)
10001e0c:	2001      	movs	r0, #1
10001e0e:	1c19      	adds	r1, r3, #0
10001e10:	f003 fb60 	bl	100054d4 <E_EEPROM_XMC1_Write>
10001e14:	1c03      	adds	r3, r0, #0
10001e16:	1c1a      	adds	r2, r3, #0
10001e18:	4b0b      	ldr	r3, [pc, #44]	; (10001e48 <writeSernr_B1_EEprom+0x68>)
10001e1a:	701a      	strb	r2, [r3, #0]
    }
	 a = 0;
10001e1c:	2300      	movs	r3, #0
10001e1e:	607b      	str	r3, [r7, #4]
  }
    return (EEprom_status + 0x10 * oper_status + a);
10001e20:	4b07      	ldr	r3, [pc, #28]	; (10001e40 <writeSernr_B1_EEprom+0x60>)
10001e22:	781b      	ldrb	r3, [r3, #0]
10001e24:	1c1a      	adds	r2, r3, #0
10001e26:	4b08      	ldr	r3, [pc, #32]	; (10001e48 <writeSernr_B1_EEprom+0x68>)
10001e28:	781b      	ldrb	r3, [r3, #0]
10001e2a:	011b      	lsls	r3, r3, #4
10001e2c:	18d2      	adds	r2, r2, r3
10001e2e:	687b      	ldr	r3, [r7, #4]
10001e30:	18d3      	adds	r3, r2, r3
 }
10001e32:	1c18      	adds	r0, r3, #0
10001e34:	46bd      	mov	sp, r7
10001e36:	b002      	add	sp, #8
10001e38:	bd80      	pop	{r7, pc}
10001e3a:	46c0      	nop			; (mov r8, r8)
10001e3c:	20000548 	.word	0x20000548
10001e40:	20000863 	.word	0x20000863
10001e44:	20000890 	.word	0x20000890
10001e48:	200008fc 	.word	0x200008fc

10001e4c <writeNodeid_B2_EEprom>:
 //------------------------------------------------
 int writeNodeid_B2_EEprom(void)
 {
10001e4c:	b580      	push	{r7, lr}
10001e4e:	b082      	sub	sp, #8
10001e50:	af00      	add	r7, sp, #0
  int a = 0b10000000; // erfolgreiche spannung=0
10001e52:	2380      	movs	r3, #128	; 0x80
10001e54:	607b      	str	r3, [r7, #4]
	if (resultB > min_EEP_Voltage_Uin)
10001e56:	4b14      	ldr	r3, [pc, #80]	; (10001ea8 <writeNodeid_B2_EEprom+0x5c>)
10001e58:	881a      	ldrh	r2, [r3, #0]
10001e5a:	23ba      	movs	r3, #186	; 0xba
10001e5c:	011b      	lsls	r3, r3, #4
10001e5e:	429a      	cmp	r2, r3
10001e60:	d914      	bls.n	10001e8c <writeNodeid_B2_EEprom+0x40>
    {
	 EEprom_status = E_EEPROM_XMC1_GetStatus();
10001e62:	f003 fbd1 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001e66:	1c03      	adds	r3, r0, #0
10001e68:	1c1a      	adds	r2, r3, #0
10001e6a:	4b10      	ldr	r3, [pc, #64]	; (10001eac <writeNodeid_B2_EEprom+0x60>)
10001e6c:	701a      	strb	r2, [r3, #0]
	  if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001e6e:	4b0f      	ldr	r3, [pc, #60]	; (10001eac <writeNodeid_B2_EEprom+0x60>)
10001e70:	781b      	ldrb	r3, [r3, #0]
10001e72:	2b03      	cmp	r3, #3
10001e74:	d108      	bne.n	10001e88 <writeNodeid_B2_EEprom+0x3c>
      {
      oper_status = E_EEPROM_XMC1_Write(node_data,ReadBuffer2);
10001e76:	4b0e      	ldr	r3, [pc, #56]	; (10001eb0 <writeNodeid_B2_EEprom+0x64>)
10001e78:	2002      	movs	r0, #2
10001e7a:	1c19      	adds	r1, r3, #0
10001e7c:	f003 fb2a 	bl	100054d4 <E_EEPROM_XMC1_Write>
10001e80:	1c03      	adds	r3, r0, #0
10001e82:	1c1a      	adds	r2, r3, #0
10001e84:	4b0b      	ldr	r3, [pc, #44]	; (10001eb4 <writeNodeid_B2_EEprom+0x68>)
10001e86:	701a      	strb	r2, [r3, #0]
      }
	 a = 0;
10001e88:	2300      	movs	r3, #0
10001e8a:	607b      	str	r3, [r7, #4]
    }
    return (EEprom_status + 0x10 * oper_status + a);
10001e8c:	4b07      	ldr	r3, [pc, #28]	; (10001eac <writeNodeid_B2_EEprom+0x60>)
10001e8e:	781b      	ldrb	r3, [r3, #0]
10001e90:	1c1a      	adds	r2, r3, #0
10001e92:	4b08      	ldr	r3, [pc, #32]	; (10001eb4 <writeNodeid_B2_EEprom+0x68>)
10001e94:	781b      	ldrb	r3, [r3, #0]
10001e96:	011b      	lsls	r3, r3, #4
10001e98:	18d2      	adds	r2, r2, r3
10001e9a:	687b      	ldr	r3, [r7, #4]
10001e9c:	18d3      	adds	r3, r2, r3
 }
10001e9e:	1c18      	adds	r0, r3, #0
10001ea0:	46bd      	mov	sp, r7
10001ea2:	b002      	add	sp, #8
10001ea4:	bd80      	pop	{r7, pc}
10001ea6:	46c0      	nop			; (mov r8, r8)
10001ea8:	20000548 	.word	0x20000548
10001eac:	20000863 	.word	0x20000863
10001eb0:	20000848 	.word	0x20000848
10001eb4:	200008fc 	.word	0x200008fc

10001eb8 <writeLamp_data_B3_EEprom>:
 //----------------------------

 int writeLamp_data_B3_EEprom(void) // writeLamp_data_B3_EEprom
 {
10001eb8:	b580      	push	{r7, lr}
10001eba:	b082      	sub	sp, #8
10001ebc:	af00      	add	r7, sp, #0
	 int a = 0b10000000;
10001ebe:	2380      	movs	r3, #128	; 0x80
10001ec0:	607b      	str	r3, [r7, #4]
	if (resultB > min_EEP_Voltage_Uin)
10001ec2:	4b14      	ldr	r3, [pc, #80]	; (10001f14 <writeLamp_data_B3_EEprom+0x5c>)
10001ec4:	881a      	ldrh	r2, [r3, #0]
10001ec6:	23ba      	movs	r3, #186	; 0xba
10001ec8:	011b      	lsls	r3, r3, #4
10001eca:	429a      	cmp	r2, r3
10001ecc:	d914      	bls.n	10001ef8 <writeLamp_data_B3_EEprom+0x40>
  {
	  EEprom_status = E_EEPROM_XMC1_GetStatus();
10001ece:	f003 fb9b 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001ed2:	1c03      	adds	r3, r0, #0
10001ed4:	1c1a      	adds	r2, r3, #0
10001ed6:	4b10      	ldr	r3, [pc, #64]	; (10001f18 <writeLamp_data_B3_EEprom+0x60>)
10001ed8:	701a      	strb	r2, [r3, #0]
	 if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001eda:	4b0f      	ldr	r3, [pc, #60]	; (10001f18 <writeLamp_data_B3_EEprom+0x60>)
10001edc:	781b      	ldrb	r3, [r3, #0]
10001ede:	2b03      	cmp	r3, #3
10001ee0:	d108      	bne.n	10001ef4 <writeLamp_data_B3_EEprom+0x3c>
    {
    oper_status = E_EEPROM_XMC1_Write(lamp_data,ReadBuffer3);
10001ee2:	4b0e      	ldr	r3, [pc, #56]	; (10001f1c <writeLamp_data_B3_EEprom+0x64>)
10001ee4:	2003      	movs	r0, #3
10001ee6:	1c19      	adds	r1, r3, #0
10001ee8:	f003 faf4 	bl	100054d4 <E_EEPROM_XMC1_Write>
10001eec:	1c03      	adds	r3, r0, #0
10001eee:	1c1a      	adds	r2, r3, #0
10001ef0:	4b0b      	ldr	r3, [pc, #44]	; (10001f20 <writeLamp_data_B3_EEprom+0x68>)
10001ef2:	701a      	strb	r2, [r3, #0]
    }
	 a = 0;
10001ef4:	2300      	movs	r3, #0
10001ef6:	607b      	str	r3, [r7, #4]
  }
    return (EEprom_status + 0x10 * oper_status + a);
10001ef8:	4b07      	ldr	r3, [pc, #28]	; (10001f18 <writeLamp_data_B3_EEprom+0x60>)
10001efa:	781b      	ldrb	r3, [r3, #0]
10001efc:	1c1a      	adds	r2, r3, #0
10001efe:	4b08      	ldr	r3, [pc, #32]	; (10001f20 <writeLamp_data_B3_EEprom+0x68>)
10001f00:	781b      	ldrb	r3, [r3, #0]
10001f02:	011b      	lsls	r3, r3, #4
10001f04:	18d2      	adds	r2, r2, r3
10001f06:	687b      	ldr	r3, [r7, #4]
10001f08:	18d3      	adds	r3, r2, r3
 }
10001f0a:	1c18      	adds	r0, r3, #0
10001f0c:	46bd      	mov	sp, r7
10001f0e:	b002      	add	sp, #8
10001f10:	bd80      	pop	{r7, pc}
10001f12:	46c0      	nop			; (mov r8, r8)
10001f14:	20000548 	.word	0x20000548
10001f18:	20000863 	.word	0x20000863
10001f1c:	200007cc 	.word	0x200007cc
10001f20:	200008fc 	.word	0x200008fc

10001f24 <writeakt_light_data_B4_EEprom>:

 //------------------------------------------------
 int writeakt_light_data_B4_EEprom(void)
 {
10001f24:	b580      	push	{r7, lr}
10001f26:	b082      	sub	sp, #8
10001f28:	af00      	add	r7, sp, #0
  int a = 0b10000000; // erfolgreiche spannung=0
10001f2a:	2380      	movs	r3, #128	; 0x80
10001f2c:	607b      	str	r3, [r7, #4]
	if (resultB > min_EEP_Voltage_Uin)
10001f2e:	4b14      	ldr	r3, [pc, #80]	; (10001f80 <writeakt_light_data_B4_EEprom+0x5c>)
10001f30:	881a      	ldrh	r2, [r3, #0]
10001f32:	23ba      	movs	r3, #186	; 0xba
10001f34:	011b      	lsls	r3, r3, #4
10001f36:	429a      	cmp	r2, r3
10001f38:	d914      	bls.n	10001f64 <writeakt_light_data_B4_EEprom+0x40>
    {
	 EEprom_status = E_EEPROM_XMC1_GetStatus();
10001f3a:	f003 fb65 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001f3e:	1c03      	adds	r3, r0, #0
10001f40:	1c1a      	adds	r2, r3, #0
10001f42:	4b10      	ldr	r3, [pc, #64]	; (10001f84 <writeakt_light_data_B4_EEprom+0x60>)
10001f44:	701a      	strb	r2, [r3, #0]
	  if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001f46:	4b0f      	ldr	r3, [pc, #60]	; (10001f84 <writeakt_light_data_B4_EEprom+0x60>)
10001f48:	781b      	ldrb	r3, [r3, #0]
10001f4a:	2b03      	cmp	r3, #3
10001f4c:	d108      	bne.n	10001f60 <writeakt_light_data_B4_EEprom+0x3c>
      {
      oper_status = E_EEPROM_XMC1_Write(akt_light_data,ReadBuffer2);
10001f4e:	4b0e      	ldr	r3, [pc, #56]	; (10001f88 <writeakt_light_data_B4_EEprom+0x64>)
10001f50:	2004      	movs	r0, #4
10001f52:	1c19      	adds	r1, r3, #0
10001f54:	f003 fabe 	bl	100054d4 <E_EEPROM_XMC1_Write>
10001f58:	1c03      	adds	r3, r0, #0
10001f5a:	1c1a      	adds	r2, r3, #0
10001f5c:	4b0b      	ldr	r3, [pc, #44]	; (10001f8c <writeakt_light_data_B4_EEprom+0x68>)
10001f5e:	701a      	strb	r2, [r3, #0]
      }
	 a = 0;
10001f60:	2300      	movs	r3, #0
10001f62:	607b      	str	r3, [r7, #4]
    }
    return (EEprom_status + 0x10 * oper_status + a);
10001f64:	4b07      	ldr	r3, [pc, #28]	; (10001f84 <writeakt_light_data_B4_EEprom+0x60>)
10001f66:	781b      	ldrb	r3, [r3, #0]
10001f68:	1c1a      	adds	r2, r3, #0
10001f6a:	4b08      	ldr	r3, [pc, #32]	; (10001f8c <writeakt_light_data_B4_EEprom+0x68>)
10001f6c:	781b      	ldrb	r3, [r3, #0]
10001f6e:	011b      	lsls	r3, r3, #4
10001f70:	18d2      	adds	r2, r2, r3
10001f72:	687b      	ldr	r3, [r7, #4]
10001f74:	18d3      	adds	r3, r2, r3
 }
10001f76:	1c18      	adds	r0, r3, #0
10001f78:	46bd      	mov	sp, r7
10001f7a:	b002      	add	sp, #8
10001f7c:	bd80      	pop	{r7, pc}
10001f7e:	46c0      	nop			; (mov r8, r8)
10001f80:	20000548 	.word	0x20000548
10001f84:	20000863 	.word	0x20000863
10001f88:	20000848 	.word	0x20000848
10001f8c:	200008fc 	.word	0x200008fc

10001f90 <writeOff_light_B5_EEprom>:
 //----------------------------

 int writeOff_light_B5_EEprom(void)
 {
10001f90:	b580      	push	{r7, lr}
10001f92:	b082      	sub	sp, #8
10001f94:	af00      	add	r7, sp, #0
	 int a = 0b10000000;
10001f96:	2380      	movs	r3, #128	; 0x80
10001f98:	607b      	str	r3, [r7, #4]
	if (resultB > min_EEP_Voltage_Uin)
10001f9a:	4b14      	ldr	r3, [pc, #80]	; (10001fec <writeOff_light_B5_EEprom+0x5c>)
10001f9c:	881a      	ldrh	r2, [r3, #0]
10001f9e:	23ba      	movs	r3, #186	; 0xba
10001fa0:	011b      	lsls	r3, r3, #4
10001fa2:	429a      	cmp	r2, r3
10001fa4:	d914      	bls.n	10001fd0 <writeOff_light_B5_EEprom+0x40>
  {
	  EEprom_status = E_EEPROM_XMC1_GetStatus();
10001fa6:	f003 fb2f 	bl	10005608 <E_EEPROM_XMC1_GetStatus>
10001faa:	1c03      	adds	r3, r0, #0
10001fac:	1c1a      	adds	r2, r3, #0
10001fae:	4b10      	ldr	r3, [pc, #64]	; (10001ff0 <writeOff_light_B5_EEprom+0x60>)
10001fb0:	701a      	strb	r2, [r3, #0]
	 if(EEprom_status == E_EEPROM_XMC1_STATUS_IDLE)
10001fb2:	4b0f      	ldr	r3, [pc, #60]	; (10001ff0 <writeOff_light_B5_EEprom+0x60>)
10001fb4:	781b      	ldrb	r3, [r3, #0]
10001fb6:	2b03      	cmp	r3, #3
10001fb8:	d108      	bne.n	10001fcc <writeOff_light_B5_EEprom+0x3c>
    {
    oper_status = E_EEPROM_XMC1_Write(off_light_data,ReadBuffer2);
10001fba:	4b0e      	ldr	r3, [pc, #56]	; (10001ff4 <writeOff_light_B5_EEprom+0x64>)
10001fbc:	2005      	movs	r0, #5
10001fbe:	1c19      	adds	r1, r3, #0
10001fc0:	f003 fa88 	bl	100054d4 <E_EEPROM_XMC1_Write>
10001fc4:	1c03      	adds	r3, r0, #0
10001fc6:	1c1a      	adds	r2, r3, #0
10001fc8:	4b0b      	ldr	r3, [pc, #44]	; (10001ff8 <writeOff_light_B5_EEprom+0x68>)
10001fca:	701a      	strb	r2, [r3, #0]




    }
	 a = 0;
10001fcc:	2300      	movs	r3, #0
10001fce:	607b      	str	r3, [r7, #4]
  }
    return (EEprom_status + 0x10 * oper_status + a);
10001fd0:	4b07      	ldr	r3, [pc, #28]	; (10001ff0 <writeOff_light_B5_EEprom+0x60>)
10001fd2:	781b      	ldrb	r3, [r3, #0]
10001fd4:	1c1a      	adds	r2, r3, #0
10001fd6:	4b08      	ldr	r3, [pc, #32]	; (10001ff8 <writeOff_light_B5_EEprom+0x68>)
10001fd8:	781b      	ldrb	r3, [r3, #0]
10001fda:	011b      	lsls	r3, r3, #4
10001fdc:	18d2      	adds	r2, r2, r3
10001fde:	687b      	ldr	r3, [r7, #4]
10001fe0:	18d3      	adds	r3, r2, r3
 }
10001fe2:	1c18      	adds	r0, r3, #0
10001fe4:	46bd      	mov	sp, r7
10001fe6:	b002      	add	sp, #8
10001fe8:	bd80      	pop	{r7, pc}
10001fea:	46c0      	nop			; (mov r8, r8)
10001fec:	20000548 	.word	0x20000548
10001ff0:	20000863 	.word	0x20000863
10001ff4:	20000848 	.word	0x20000848
10001ff8:	200008fc 	.word	0x200008fc

10001ffc <sysiniValueB1>:
///#############################################
 //initialisierung


 void sysiniValueB1(void)
 {
10001ffc:	b580      	push	{r7, lr}
10001ffe:	af00      	add	r7, sp, #0
//	   Ser_NrH = 0x4142 ;
//	   Ser_NrL = 0x4344 ;

	   Ser_NrH = 0x7b7a;
10002000:	4b12      	ldr	r3, [pc, #72]	; (1000204c <sysiniValueB1+0x50>)
10002002:	4a13      	ldr	r2, [pc, #76]	; (10002050 <sysiniValueB1+0x54>)
10002004:	801a      	strh	r2, [r3, #0]
       Ser_NrL = 0x5859 ;
10002006:	4b13      	ldr	r3, [pc, #76]	; (10002054 <sysiniValueB1+0x58>)
10002008:	4a13      	ldr	r2, [pc, #76]	; (10002058 <sysiniValueB1+0x5c>)
1000200a:	801a      	strh	r2, [r3, #0]
       Hard_Vers = 1000 ;
1000200c:	4b13      	ldr	r3, [pc, #76]	; (1000205c <sysiniValueB1+0x60>)
1000200e:	22fa      	movs	r2, #250	; 0xfa
10002010:	0092      	lsls	r2, r2, #2
10002012:	801a      	strh	r2, [r3, #0]
	   Soft_Vers = 1000 ;
10002014:	4b12      	ldr	r3, [pc, #72]	; (10002060 <sysiniValueB1+0x64>)
10002016:	22fa      	movs	r2, #250	; 0xfa
10002018:	0092      	lsls	r2, r2, #2
1000201a:	801a      	strh	r2, [r3, #0]
	   GEH_Vers = 1000 ;
1000201c:	4b11      	ldr	r3, [pc, #68]	; (10002064 <sysiniValueB1+0x68>)
1000201e:	22fa      	movs	r2, #250	; 0xfa
10002020:	0092      	lsls	r2, r2, #2
10002022:	801a      	strh	r2, [r3, #0]
	   Mon_Vers = 1000 ;
10002024:	4b10      	ldr	r3, [pc, #64]	; (10002068 <sysiniValueB1+0x6c>)
10002026:	22fa      	movs	r2, #250	; 0xfa
10002028:	0092      	lsls	r2, r2, #2
1000202a:	801a      	strh	r2, [r3, #0]
	   LED_WW_Vers = 1000 ;
1000202c:	4b0f      	ldr	r3, [pc, #60]	; (1000206c <sysiniValueB1+0x70>)
1000202e:	22fa      	movs	r2, #250	; 0xfa
10002030:	0092      	lsls	r2, r2, #2
10002032:	801a      	strh	r2, [r3, #0]
	   LED_CW_Vers = 1000 ;
10002034:	4b0e      	ldr	r3, [pc, #56]	; (10002070 <sysiniValueB1+0x74>)
10002036:	22fa      	movs	r2, #250	; 0xfa
10002038:	0092      	lsls	r2, r2, #2
1000203a:	801a      	strh	r2, [r3, #0]

       neu_Ser_NrH = 0 ;
1000203c:	4b0d      	ldr	r3, [pc, #52]	; (10002074 <sysiniValueB1+0x78>)
1000203e:	2200      	movs	r2, #0
10002040:	801a      	strh	r2, [r3, #0]
       neu_Ser_NrL = 0 ;
10002042:	4b0d      	ldr	r3, [pc, #52]	; (10002078 <sysiniValueB1+0x7c>)
10002044:	2200      	movs	r2, #0
10002046:	801a      	strh	r2, [r3, #0]

 }
10002048:	46bd      	mov	sp, r7
1000204a:	bd80      	pop	{r7, pc}
1000204c:	20000830 	.word	0x20000830
10002050:	00007b7a 	.word	0x00007b7a
10002054:	200008a8 	.word	0x200008a8
10002058:	00005859 	.word	0x00005859
1000205c:	200007f0 	.word	0x200007f0
10002060:	200008b4 	.word	0x200008b4
10002064:	2000083c 	.word	0x2000083c
10002068:	200007fc 	.word	0x200007fc
1000206c:	200007f2 	.word	0x200007f2
10002070:	2000082e 	.word	0x2000082e
10002074:	20000816 	.word	0x20000816
10002078:	20000904 	.word	0x20000904

1000207c <sysiniValueB2>:


 void sysiniValueB2(void)
 {
1000207c:	b580      	push	{r7, lr}
1000207e:	af00      	add	r7, sp, #0
           node_id = 1;
10002080:	4b11      	ldr	r3, [pc, #68]	; (100020c8 <sysiniValueB2+0x4c>)
10002082:	2201      	movs	r2, #1
10002084:	701a      	strb	r2, [r3, #0]
           node_id_alt = 1;
10002086:	4b11      	ldr	r3, [pc, #68]	; (100020cc <sysiniValueB2+0x50>)
10002088:	2201      	movs	r2, #1
1000208a:	701a      	strb	r2, [r3, #0]
    	   node_id_16bit = 0x1234;
1000208c:	4b10      	ldr	r3, [pc, #64]	; (100020d0 <sysiniValueB2+0x54>)
1000208e:	4a11      	ldr	r2, [pc, #68]	; (100020d4 <sysiniValueB2+0x58>)
10002090:	801a      	strh	r2, [r3, #0]
    	   val_Pow_Nom=2000;
10002092:	4b11      	ldr	r3, [pc, #68]	; (100020d8 <sysiniValueB2+0x5c>)
10002094:	22fa      	movs	r2, #250	; 0xfa
10002096:	00d2      	lsls	r2, r2, #3
10002098:	801a      	strh	r2, [r3, #0]
		   val_Pow_max=2000;
1000209a:	4b10      	ldr	r3, [pc, #64]	; (100020dc <sysiniValueB2+0x60>)
1000209c:	22fa      	movs	r2, #250	; 0xfa
1000209e:	00d2      	lsls	r2, r2, #3
100020a0:	801a      	strh	r2, [r3, #0]
		   val_Spannung_min=3600;
100020a2:	4b0f      	ldr	r3, [pc, #60]	; (100020e0 <sysiniValueB2+0x64>)
100020a4:	22e1      	movs	r2, #225	; 0xe1
100020a6:	0112      	lsls	r2, r2, #4
100020a8:	801a      	strh	r2, [r3, #0]
		   val_Spannung_max=4200;
100020aa:	4b0e      	ldr	r3, [pc, #56]	; (100020e4 <sysiniValueB2+0x68>)
100020ac:	4a0e      	ldr	r2, [pc, #56]	; (100020e8 <sysiniValueB2+0x6c>)
100020ae:	801a      	strh	r2, [r3, #0]
		   led_grupp=10;
100020b0:	4b0e      	ldr	r3, [pc, #56]	; (100020ec <sysiniValueB2+0x70>)
100020b2:	220a      	movs	r2, #10
100020b4:	801a      	strh	r2, [r3, #0]
		   led_Strom=0065;
100020b6:	4b0e      	ldr	r3, [pc, #56]	; (100020f0 <sysiniValueB2+0x74>)
100020b8:	2235      	movs	r2, #53	; 0x35
100020ba:	801a      	strh	r2, [r3, #0]

    	   node_id_neu = 1;
100020bc:	4b0d      	ldr	r3, [pc, #52]	; (100020f4 <sysiniValueB2+0x78>)
100020be:	2201      	movs	r2, #1
100020c0:	701a      	strb	r2, [r3, #0]
 }
100020c2:	46bd      	mov	sp, r7
100020c4:	bd80      	pop	{r7, pc}
100020c6:	46c0      	nop			; (mov r8, r8)
100020c8:	20000836 	.word	0x20000836
100020cc:	20000844 	.word	0x20000844
100020d0:	20000860 	.word	0x20000860
100020d4:	00001234 	.word	0x00001234
100020d8:	2000085c 	.word	0x2000085c
100020dc:	200008f6 	.word	0x200008f6
100020e0:	2000083a 	.word	0x2000083a
100020e4:	200008be 	.word	0x200008be
100020e8:	00001068 	.word	0x00001068
100020ec:	20000834 	.word	0x20000834
100020f0:	20000858 	.word	0x20000858
100020f4:	200007ca 	.word	0x200007ca

100020f8 <sysiniValueB4>:

 void sysiniValueB4(void)
 {
100020f8:	b580      	push	{r7, lr}
100020fa:	af00      	add	r7, sp, #0
	 Dimm_Gamma=10;
100020fc:	4b26      	ldr	r3, [pc, #152]	; (10002198 <sysiniValueB4+0xa0>)
100020fe:	220a      	movs	r2, #10
10002100:	701a      	strb	r2, [r3, #0]
	 Dimm_Stufen=10;
10002102:	4b26      	ldr	r3, [pc, #152]	; (1000219c <sysiniValueB4+0xa4>)
10002104:	220a      	movs	r2, #10
10002106:	701a      	strb	r2, [r3, #0]
	 Dimm_StufenGR=10;
10002108:	4b25      	ldr	r3, [pc, #148]	; (100021a0 <sysiniValueB4+0xa8>)
1000210a:	220a      	movs	r2, #10
1000210c:	701a      	strb	r2, [r3, #0]
	 Dimm_Valu=10;
1000210e:	4b25      	ldr	r3, [pc, #148]	; (100021a4 <sysiniValueB4+0xac>)
10002110:	220a      	movs	r2, #10
10002112:	701a      	strb	r2, [r3, #0]
	 Smooth_Value=10;
10002114:	4b24      	ldr	r3, [pc, #144]	; (100021a8 <sysiniValueB4+0xb0>)
10002116:	220a      	movs	r2, #10
10002118:	801a      	strh	r2, [r3, #0]
	 linearwalk_gen= 0xb0;
1000211a:	4b24      	ldr	r3, [pc, #144]	; (100021ac <sysiniValueB4+0xb4>)
1000211c:	22b0      	movs	r2, #176	; 0xb0
1000211e:	801a      	strh	r2, [r3, #0]
	 Farbe_wwcw_Quot_gen=0xffff;
10002120:	4b23      	ldr	r3, [pc, #140]	; (100021b0 <sysiniValueB4+0xb8>)
10002122:	2201      	movs	r2, #1
10002124:	4252      	negs	r2, r2
10002126:	801a      	strh	r2, [r3, #0]
	 Reserve_1=0;
10002128:	4b22      	ldr	r3, [pc, #136]	; (100021b4 <sysiniValueB4+0xbc>)
1000212a:	2200      	movs	r2, #0
1000212c:	801a      	strh	r2, [r3, #0]
	 Dimm_Max_WW=1000;
1000212e:	4b22      	ldr	r3, [pc, #136]	; (100021b8 <sysiniValueB4+0xc0>)
10002130:	22fa      	movs	r2, #250	; 0xfa
10002132:	0092      	lsls	r2, r2, #2
10002134:	801a      	strh	r2, [r3, #0]
	 Dimm_Max_CW=1000;
10002136:	4b21      	ldr	r3, [pc, #132]	; (100021bc <sysiniValueB4+0xc4>)
10002138:	22fa      	movs	r2, #250	; 0xfa
1000213a:	0092      	lsls	r2, r2, #2
1000213c:	801a      	strh	r2, [r3, #0]

	linearwalk_ww1 = linearwalk_gen;
1000213e:	4b1b      	ldr	r3, [pc, #108]	; (100021ac <sysiniValueB4+0xb4>)
10002140:	881a      	ldrh	r2, [r3, #0]
10002142:	4b1f      	ldr	r3, [pc, #124]	; (100021c0 <sysiniValueB4+0xc8>)
10002144:	801a      	strh	r2, [r3, #0]
	linearwalk_ww2 = linearwalk_gen;
10002146:	4b19      	ldr	r3, [pc, #100]	; (100021ac <sysiniValueB4+0xb4>)
10002148:	881a      	ldrh	r2, [r3, #0]
1000214a:	4b1e      	ldr	r3, [pc, #120]	; (100021c4 <sysiniValueB4+0xcc>)
1000214c:	801a      	strh	r2, [r3, #0]
	linearwalk_cw1 = linearwalk_gen;
1000214e:	4b17      	ldr	r3, [pc, #92]	; (100021ac <sysiniValueB4+0xb4>)
10002150:	881a      	ldrh	r2, [r3, #0]
10002152:	4b1d      	ldr	r3, [pc, #116]	; (100021c8 <sysiniValueB4+0xd0>)
10002154:	801a      	strh	r2, [r3, #0]
	linearwalk_cw2 = linearwalk_gen;
10002156:	4b15      	ldr	r3, [pc, #84]	; (100021ac <sysiniValueB4+0xb4>)
10002158:	881a      	ldrh	r2, [r3, #0]
1000215a:	4b1c      	ldr	r3, [pc, #112]	; (100021cc <sysiniValueB4+0xd4>)
1000215c:	801a      	strh	r2, [r3, #0]

	Farbe_ww1_Quot = Farbe_wwcw_Quot_gen>>8;
1000215e:	4b14      	ldr	r3, [pc, #80]	; (100021b0 <sysiniValueB4+0xb8>)
10002160:	881b      	ldrh	r3, [r3, #0]
10002162:	0a1b      	lsrs	r3, r3, #8
10002164:	b29a      	uxth	r2, r3
10002166:	4b1a      	ldr	r3, [pc, #104]	; (100021d0 <sysiniValueB4+0xd8>)
10002168:	801a      	strh	r2, [r3, #0]
	Farbe_cw1_Quot = Farbe_wwcw_Quot_gen>>8;
1000216a:	4b11      	ldr	r3, [pc, #68]	; (100021b0 <sysiniValueB4+0xb8>)
1000216c:	881b      	ldrh	r3, [r3, #0]
1000216e:	0a1b      	lsrs	r3, r3, #8
10002170:	b29a      	uxth	r2, r3
10002172:	4b18      	ldr	r3, [pc, #96]	; (100021d4 <sysiniValueB4+0xdc>)
10002174:	801a      	strh	r2, [r3, #0]
	Farbe_ww2_Quot = Farbe_wwcw_Quot_gen & 0x00ff;
10002176:	4b0e      	ldr	r3, [pc, #56]	; (100021b0 <sysiniValueB4+0xb8>)
10002178:	881b      	ldrh	r3, [r3, #0]
1000217a:	22ff      	movs	r2, #255	; 0xff
1000217c:	4013      	ands	r3, r2
1000217e:	b29a      	uxth	r2, r3
10002180:	4b15      	ldr	r3, [pc, #84]	; (100021d8 <sysiniValueB4+0xe0>)
10002182:	801a      	strh	r2, [r3, #0]
	Farbe_cw2_Quot = Farbe_wwcw_Quot_gen & 0x00ff;
10002184:	4b0a      	ldr	r3, [pc, #40]	; (100021b0 <sysiniValueB4+0xb8>)
10002186:	881b      	ldrh	r3, [r3, #0]
10002188:	22ff      	movs	r2, #255	; 0xff
1000218a:	4013      	ands	r3, r2
1000218c:	b29a      	uxth	r2, r3
1000218e:	4b13      	ldr	r3, [pc, #76]	; (100021dc <sysiniValueB4+0xe4>)
10002190:	801a      	strh	r2, [r3, #0]
 }
10002192:	46bd      	mov	sp, r7
10002194:	bd80      	pop	{r7, pc}
10002196:	46c0      	nop			; (mov r8, r8)
10002198:	20000862 	.word	0x20000862
1000219c:	20000840 	.word	0x20000840
100021a0:	2000088a 	.word	0x2000088a
100021a4:	20000814 	.word	0x20000814
100021a8:	200008aa 	.word	0x200008aa
100021ac:	2000054a 	.word	0x2000054a
100021b0:	200008a0 	.word	0x200008a0
100021b4:	200008b8 	.word	0x200008b8
100021b8:	20000838 	.word	0x20000838
100021bc:	2000088c 	.word	0x2000088c
100021c0:	200007ec 	.word	0x200007ec
100021c4:	20000842 	.word	0x20000842
100021c8:	20000908 	.word	0x20000908
100021cc:	2000083e 	.word	0x2000083e
100021d0:	20000832 	.word	0x20000832
100021d4:	200008f4 	.word	0x200008f4
100021d8:	2000081c 	.word	0x2000081c
100021dc:	200008a6 	.word	0x200008a6

100021e0 <sysiniValueB5>:

 void sysiniValueB5(void)
 {
100021e0:	b580      	push	{r7, lr}
100021e2:	af00      	add	r7, sp, #0
	 RegOnOff = RegOnOff_OFFvalue;
100021e4:	4b0e      	ldr	r3, [pc, #56]	; (10002220 <sysiniValueB5+0x40>)
100021e6:	2205      	movs	r2, #5
100021e8:	701a      	strb	r2, [r3, #0]
	 RegOnOff2 = 0;
100021ea:	4b0e      	ldr	r3, [pc, #56]	; (10002224 <sysiniValueB5+0x44>)
100021ec:	2200      	movs	r2, #0
100021ee:	701a      	strb	r2, [r3, #0]
	 Reserve_2 = 0;
100021f0:	4b0d      	ldr	r3, [pc, #52]	; (10002228 <sysiniValueB5+0x48>)
100021f2:	2200      	movs	r2, #0
100021f4:	801a      	strh	r2, [r3, #0]
	 dimOff_Ww = 4095;
100021f6:	4b0d      	ldr	r3, [pc, #52]	; (1000222c <sysiniValueB5+0x4c>)
100021f8:	4a0d      	ldr	r2, [pc, #52]	; (10002230 <sysiniValueB5+0x50>)
100021fa:	801a      	strh	r2, [r3, #0]
	 dimOff_Cw = 4095;
100021fc:	4b0d      	ldr	r3, [pc, #52]	; (10002234 <sysiniValueB5+0x54>)
100021fe:	4a0c      	ldr	r2, [pc, #48]	; (10002230 <sysiniValueB5+0x50>)
10002200:	801a      	strh	r2, [r3, #0]
	 dimNorm1_Ww = 0x01ff;
10002202:	4b0d      	ldr	r3, [pc, #52]	; (10002238 <sysiniValueB5+0x58>)
10002204:	4a0d      	ldr	r2, [pc, #52]	; (1000223c <sysiniValueB5+0x5c>)
10002206:	801a      	strh	r2, [r3, #0]
	 dimNorm1_Cw = 0x01ff;
10002208:	4b0d      	ldr	r3, [pc, #52]	; (10002240 <sysiniValueB5+0x60>)
1000220a:	4a0c      	ldr	r2, [pc, #48]	; (1000223c <sysiniValueB5+0x5c>)
1000220c:	801a      	strh	r2, [r3, #0]
	 dimNorm2_Ww = 0x02ff;
1000220e:	4b0d      	ldr	r3, [pc, #52]	; (10002244 <sysiniValueB5+0x64>)
10002210:	4a0d      	ldr	r2, [pc, #52]	; (10002248 <sysiniValueB5+0x68>)
10002212:	801a      	strh	r2, [r3, #0]
	 dimNorm2_Cw = 0x02ff;
10002214:	4b0d      	ldr	r3, [pc, #52]	; (1000224c <sysiniValueB5+0x6c>)
10002216:	4a0c      	ldr	r2, [pc, #48]	; (10002248 <sysiniValueB5+0x68>)
10002218:	801a      	strh	r2, [r3, #0]
 }
1000221a:	46bd      	mov	sp, r7
1000221c:	bd80      	pop	{r7, pc}
1000221e:	46c0      	nop			; (mov r8, r8)
10002220:	2000085a 	.word	0x2000085a
10002224:	20000818 	.word	0x20000818
10002228:	200007f4 	.word	0x200007f4
1000222c:	20000900 	.word	0x20000900
10002230:	00000fff 	.word	0x00000fff
10002234:	20000864 	.word	0x20000864
10002238:	200008a4 	.word	0x200008a4
1000223c:	000001ff 	.word	0x000001ff
10002240:	200008b2 	.word	0x200008b2
10002244:	200007c8 	.word	0x200007c8
10002248:	000002ff 	.word	0x000002ff
1000224c:	20000970 	.word	0x20000970

10002250 <bcuInit>:

 //-----------------------------------------------
 // BCCU Vorgaben

 void bcuInit(void)
 {
10002250:	b580      	push	{r7, lr}
10002252:	af00      	add	r7, sp, #0
		switch  (RegOnOff)
10002254:	4b19      	ldr	r3, [pc, #100]	; (100022bc <bcuInit+0x6c>)
10002256:	781b      	ldrb	r3, [r3, #0]
10002258:	2b05      	cmp	r3, #5
1000225a:	d82c      	bhi.n	100022b6 <bcuInit+0x66>
1000225c:	009a      	lsls	r2, r3, #2
1000225e:	4b18      	ldr	r3, [pc, #96]	; (100022c0 <bcuInit+0x70>)
10002260:	18d3      	adds	r3, r2, r3
10002262:	681b      	ldr	r3, [r3, #0]
10002264:	469f      	mov	pc, r3
		{
		case RegOnOff_0Proz : 		dimAkt_Ww = 0;
10002266:	4b17      	ldr	r3, [pc, #92]	; (100022c4 <bcuInit+0x74>)
10002268:	2200      	movs	r2, #0
1000226a:	801a      	strh	r2, [r3, #0]
				 	 	 	 	 	dimAkt_Cw = 0;
1000226c:	4b16      	ldr	r3, [pc, #88]	; (100022c8 <bcuInit+0x78>)
1000226e:	2200      	movs	r2, #0
10002270:	801a      	strh	r2, [r3, #0]
									break;
10002272:	e021      	b.n	100022b8 <bcuInit+0x68>
		case RegOnOff_100Proz : 	dimAkt_Ww = 0x7fff;
10002274:	4b13      	ldr	r3, [pc, #76]	; (100022c4 <bcuInit+0x74>)
10002276:	4a15      	ldr	r2, [pc, #84]	; (100022cc <bcuInit+0x7c>)
10002278:	801a      	strh	r2, [r3, #0]
				 	 	 	 	 	dimAkt_Cw = 0x7fff;
1000227a:	4b13      	ldr	r3, [pc, #76]	; (100022c8 <bcuInit+0x78>)
1000227c:	4a13      	ldr	r2, [pc, #76]	; (100022cc <bcuInit+0x7c>)
1000227e:	801a      	strh	r2, [r3, #0]
									break;
10002280:	e01a      	b.n	100022b8 <bcuInit+0x68>
		case RegOnOff_N1value : 	dimAkt_Ww = dimNorm1_Ww;
10002282:	4b13      	ldr	r3, [pc, #76]	; (100022d0 <bcuInit+0x80>)
10002284:	881a      	ldrh	r2, [r3, #0]
10002286:	4b0f      	ldr	r3, [pc, #60]	; (100022c4 <bcuInit+0x74>)
10002288:	801a      	strh	r2, [r3, #0]
				 	 	 	 	 	dimAkt_Cw = dimNorm1_Cw;
1000228a:	4b12      	ldr	r3, [pc, #72]	; (100022d4 <bcuInit+0x84>)
1000228c:	881a      	ldrh	r2, [r3, #0]
1000228e:	4b0e      	ldr	r3, [pc, #56]	; (100022c8 <bcuInit+0x78>)
10002290:	801a      	strh	r2, [r3, #0]
		case RegOnOff_N2value : 	dimAkt_Ww = dimNorm2_Ww;
10002292:	4b11      	ldr	r3, [pc, #68]	; (100022d8 <bcuInit+0x88>)
10002294:	881a      	ldrh	r2, [r3, #0]
10002296:	4b0b      	ldr	r3, [pc, #44]	; (100022c4 <bcuInit+0x74>)
10002298:	801a      	strh	r2, [r3, #0]
				 	 	 	 	 	dimAkt_Cw = dimNorm2_Cw;
1000229a:	4b10      	ldr	r3, [pc, #64]	; (100022dc <bcuInit+0x8c>)
1000229c:	881a      	ldrh	r2, [r3, #0]
1000229e:	4b0a      	ldr	r3, [pc, #40]	; (100022c8 <bcuInit+0x78>)
100022a0:	801a      	strh	r2, [r3, #0]
									break;
100022a2:	e009      	b.n	100022b8 <bcuInit+0x68>
		case RegOnOff_OFFvalue : 	dimAkt_Ww = dimOff_Ww;
100022a4:	4b0e      	ldr	r3, [pc, #56]	; (100022e0 <bcuInit+0x90>)
100022a6:	881a      	ldrh	r2, [r3, #0]
100022a8:	4b06      	ldr	r3, [pc, #24]	; (100022c4 <bcuInit+0x74>)
100022aa:	801a      	strh	r2, [r3, #0]
				 	 	 	 	 	dimAkt_Cw = dimOff_Cw;
100022ac:	4b0d      	ldr	r3, [pc, #52]	; (100022e4 <bcuInit+0x94>)
100022ae:	881a      	ldrh	r2, [r3, #0]
100022b0:	4b05      	ldr	r3, [pc, #20]	; (100022c8 <bcuInit+0x78>)
100022b2:	801a      	strh	r2, [r3, #0]
									break;
100022b4:	e000      	b.n	100022b8 <bcuInit+0x68>
		default:
									break;
100022b6:	46c0      	nop			; (mov r8, r8)
		}

 }
100022b8:	46bd      	mov	sp, r7
100022ba:	bd80      	pop	{r7, pc}
100022bc:	2000085a 	.word	0x2000085a
100022c0:	10009740 	.word	0x10009740
100022c4:	200008ac 	.word	0x200008ac
100022c8:	200008c0 	.word	0x200008c0
100022cc:	00007fff 	.word	0x00007fff
100022d0:	200008a4 	.word	0x200008a4
100022d4:	200008b2 	.word	0x200008b2
100022d8:	200007c8 	.word	0x200007c8
100022dc:	20000970 	.word	0x20000970
100022e0:	20000900 	.word	0x20000900
100022e4:	20000864 	.word	0x20000864

100022e8 <bcuUebergabe>:
 //----------------------------------

 void bcuUebergabe(void)
 {
100022e8:	b580      	push	{r7, lr}
100022ea:	af00      	add	r7, sp, #0
//	 PDM_BCCU_AbortLinearWalk(&PDM_BCCU_0);
	//  PDM_BCCU_AbortLinearWalk(&PDM_BCCU_1);
	//  PDM_BCCU_AbortLinearWalk(&PDM_BCCU_2);
	//  PDM_BCCU_AbortLinearWalk(&PDM_BCCU_3);

 PDM_BCCU_SetIntensity(&PDM_BCCU_0,Farbe_ww2);
100022ec:	4b20      	ldr	r3, [pc, #128]	; (10002370 <bcuUebergabe+0x88>)
100022ee:	881b      	ldrh	r3, [r3, #0]
100022f0:	1c1a      	adds	r2, r3, #0
100022f2:	4b20      	ldr	r3, [pc, #128]	; (10002374 <bcuUebergabe+0x8c>)
100022f4:	1c18      	adds	r0, r3, #0
100022f6:	1c11      	adds	r1, r2, #0
100022f8:	f002 feaa 	bl	10005050 <PDM_BCCU_SetIntensity>
 PDM_BCCU_SetIntensity(&PDM_BCCU_1,Farbe_cw2);
100022fc:	4b1e      	ldr	r3, [pc, #120]	; (10002378 <bcuUebergabe+0x90>)
100022fe:	881b      	ldrh	r3, [r3, #0]
10002300:	1c1a      	adds	r2, r3, #0
10002302:	4b1e      	ldr	r3, [pc, #120]	; (1000237c <bcuUebergabe+0x94>)
10002304:	1c18      	adds	r0, r3, #0
10002306:	1c11      	adds	r1, r2, #0
10002308:	f002 fea2 	bl	10005050 <PDM_BCCU_SetIntensity>
 PDM_BCCU_SetIntensity(&PDM_BCCU_2,Farbe_ww1);
1000230c:	4b1c      	ldr	r3, [pc, #112]	; (10002380 <bcuUebergabe+0x98>)
1000230e:	881b      	ldrh	r3, [r3, #0]
10002310:	1c1a      	adds	r2, r3, #0
10002312:	4b1c      	ldr	r3, [pc, #112]	; (10002384 <bcuUebergabe+0x9c>)
10002314:	1c18      	adds	r0, r3, #0
10002316:	1c11      	adds	r1, r2, #0
10002318:	f002 fe9a 	bl	10005050 <PDM_BCCU_SetIntensity>
 PDM_BCCU_SetIntensity(&PDM_BCCU_3,Farbe_cw1);
1000231c:	4b1a      	ldr	r3, [pc, #104]	; (10002388 <bcuUebergabe+0xa0>)
1000231e:	881b      	ldrh	r3, [r3, #0]
10002320:	1c1a      	adds	r2, r3, #0
10002322:	4b1a      	ldr	r3, [pc, #104]	; (1000238c <bcuUebergabe+0xa4>)
10002324:	1c18      	adds	r0, r3, #0
10002326:	1c11      	adds	r1, r2, #0
10002328:	f002 fe92 	bl	10005050 <PDM_BCCU_SetIntensity>

 PDM_BCCU_SetLinearWalk(&PDM_BCCU_0,linearwalk_ww2); // Go to target intensity slowly
1000232c:	4b18      	ldr	r3, [pc, #96]	; (10002390 <bcuUebergabe+0xa8>)
1000232e:	881b      	ldrh	r3, [r3, #0]
10002330:	1c1a      	adds	r2, r3, #0
10002332:	4b10      	ldr	r3, [pc, #64]	; (10002374 <bcuUebergabe+0x8c>)
10002334:	1c18      	adds	r0, r3, #0
10002336:	1c11      	adds	r1, r2, #0
10002338:	f002 fe9a 	bl	10005070 <PDM_BCCU_SetLinearWalk>
 PDM_BCCU_SetLinearWalk(&PDM_BCCU_1,linearwalk_cw2); // Go to target intensity slowly
1000233c:	4b15      	ldr	r3, [pc, #84]	; (10002394 <bcuUebergabe+0xac>)
1000233e:	881b      	ldrh	r3, [r3, #0]
10002340:	1c1a      	adds	r2, r3, #0
10002342:	4b0e      	ldr	r3, [pc, #56]	; (1000237c <bcuUebergabe+0x94>)
10002344:	1c18      	adds	r0, r3, #0
10002346:	1c11      	adds	r1, r2, #0
10002348:	f002 fe92 	bl	10005070 <PDM_BCCU_SetLinearWalk>
 PDM_BCCU_SetLinearWalk(&PDM_BCCU_2,linearwalk_ww1); // Go to target intensity slowly
1000234c:	4b12      	ldr	r3, [pc, #72]	; (10002398 <bcuUebergabe+0xb0>)
1000234e:	881b      	ldrh	r3, [r3, #0]
10002350:	1c1a      	adds	r2, r3, #0
10002352:	4b0c      	ldr	r3, [pc, #48]	; (10002384 <bcuUebergabe+0x9c>)
10002354:	1c18      	adds	r0, r3, #0
10002356:	1c11      	adds	r1, r2, #0
10002358:	f002 fe8a 	bl	10005070 <PDM_BCCU_SetLinearWalk>
 PDM_BCCU_SetLinearWalk(&PDM_BCCU_3,linearwalk_cw1); // Go to target intensity slowly
1000235c:	4b0f      	ldr	r3, [pc, #60]	; (1000239c <bcuUebergabe+0xb4>)
1000235e:	881b      	ldrh	r3, [r3, #0]
10002360:	1c1a      	adds	r2, r3, #0
10002362:	4b0a      	ldr	r3, [pc, #40]	; (1000238c <bcuUebergabe+0xa4>)
10002364:	1c18      	adds	r0, r3, #0
10002366:	1c11      	adds	r1, r2, #0
10002368:	f002 fe82 	bl	10005070 <PDM_BCCU_SetLinearWalk>
 //PDM_BCCU_StartLinearWalk(&PDM_BCCU_0);
 //PDM_BCCU_StartLinearWalk(&PDM_BCCU_2);

 //PDM_BCCU_StartLinearWalk(&PDM_BCCU_1);
// PDM_BCCU_StartLinearWalk(&PDM_BCCU_3);
 }
1000236c:	46bd      	mov	sp, r7
1000236e:	bd80      	pop	{r7, pc}
10002370:	200007f8 	.word	0x200007f8
10002374:	200005d0 	.word	0x200005d0
10002378:	20000902 	.word	0x20000902
1000237c:	20000614 	.word	0x20000614
10002380:	200007fa 	.word	0x200007fa
10002384:	20000658 	.word	0x20000658
10002388:	20000800 	.word	0x20000800
1000238c:	2000069c 	.word	0x2000069c
10002390:	20000842 	.word	0x20000842
10002394:	2000083e 	.word	0x2000083e
10002398:	200007ec 	.word	0x200007ec
1000239c:	20000908 	.word	0x20000908

100023a0 <bcuAktBerechnung>:
 //----------------------------------


 //----------------------------------
 void bcuAktBerechnung(void)
  {
100023a0:	b580      	push	{r7, lr}
100023a2:	b082      	sub	sp, #8
100023a4:	af00      	add	r7, sp, #0
	 uint32_t 	VarA;

     Farbe_ww1_Quot = Farbe_wwcw_Quot_gen>>8;
100023a6:	4b28      	ldr	r3, [pc, #160]	; (10002448 <bcuAktBerechnung+0xa8>)
100023a8:	881b      	ldrh	r3, [r3, #0]
100023aa:	0a1b      	lsrs	r3, r3, #8
100023ac:	b29a      	uxth	r2, r3
100023ae:	4b27      	ldr	r3, [pc, #156]	; (1000244c <bcuAktBerechnung+0xac>)
100023b0:	801a      	strh	r2, [r3, #0]
     Farbe_cw1_Quot = Farbe_wwcw_Quot_gen>>8;
100023b2:	4b25      	ldr	r3, [pc, #148]	; (10002448 <bcuAktBerechnung+0xa8>)
100023b4:	881b      	ldrh	r3, [r3, #0]
100023b6:	0a1b      	lsrs	r3, r3, #8
100023b8:	b29a      	uxth	r2, r3
100023ba:	4b25      	ldr	r3, [pc, #148]	; (10002450 <bcuAktBerechnung+0xb0>)
100023bc:	801a      	strh	r2, [r3, #0]
     Farbe_ww2_Quot = Farbe_wwcw_Quot_gen & 0xff;
100023be:	4b22      	ldr	r3, [pc, #136]	; (10002448 <bcuAktBerechnung+0xa8>)
100023c0:	881b      	ldrh	r3, [r3, #0]
100023c2:	22ff      	movs	r2, #255	; 0xff
100023c4:	4013      	ands	r3, r2
100023c6:	b29a      	uxth	r2, r3
100023c8:	4b22      	ldr	r3, [pc, #136]	; (10002454 <bcuAktBerechnung+0xb4>)
100023ca:	801a      	strh	r2, [r3, #0]
     Farbe_cw2_Quot = Farbe_wwcw_Quot_gen & 0xff;
100023cc:	4b1e      	ldr	r3, [pc, #120]	; (10002448 <bcuAktBerechnung+0xa8>)
100023ce:	881b      	ldrh	r3, [r3, #0]
100023d0:	22ff      	movs	r2, #255	; 0xff
100023d2:	4013      	ands	r3, r2
100023d4:	b29a      	uxth	r2, r3
100023d6:	4b20      	ldr	r3, [pc, #128]	; (10002458 <bcuAktBerechnung+0xb8>)
100023d8:	801a      	strh	r2, [r3, #0]

	 VarA = dimAkt_Ww * Farbe_ww1_Quot;
100023da:	4b20      	ldr	r3, [pc, #128]	; (1000245c <bcuAktBerechnung+0xbc>)
100023dc:	881b      	ldrh	r3, [r3, #0]
100023de:	1c1a      	adds	r2, r3, #0
100023e0:	4b1a      	ldr	r3, [pc, #104]	; (1000244c <bcuAktBerechnung+0xac>)
100023e2:	881b      	ldrh	r3, [r3, #0]
100023e4:	4353      	muls	r3, r2
100023e6:	607b      	str	r3, [r7, #4]
	 Farbe_ww1 = (VarA / 0x100) >>4;
100023e8:	687b      	ldr	r3, [r7, #4]
100023ea:	0a1b      	lsrs	r3, r3, #8
100023ec:	091b      	lsrs	r3, r3, #4
100023ee:	b29a      	uxth	r2, r3
100023f0:	4b1b      	ldr	r3, [pc, #108]	; (10002460 <bcuAktBerechnung+0xc0>)
100023f2:	801a      	strh	r2, [r3, #0]
	 VarA = dimAkt_Ww * Farbe_ww2_Quot;
100023f4:	4b19      	ldr	r3, [pc, #100]	; (1000245c <bcuAktBerechnung+0xbc>)
100023f6:	881b      	ldrh	r3, [r3, #0]
100023f8:	1c1a      	adds	r2, r3, #0
100023fa:	4b16      	ldr	r3, [pc, #88]	; (10002454 <bcuAktBerechnung+0xb4>)
100023fc:	881b      	ldrh	r3, [r3, #0]
100023fe:	4353      	muls	r3, r2
10002400:	607b      	str	r3, [r7, #4]
	 Farbe_ww2 = (VarA / 0x100) >>4;
10002402:	687b      	ldr	r3, [r7, #4]
10002404:	0a1b      	lsrs	r3, r3, #8
10002406:	091b      	lsrs	r3, r3, #4
10002408:	b29a      	uxth	r2, r3
1000240a:	4b16      	ldr	r3, [pc, #88]	; (10002464 <bcuAktBerechnung+0xc4>)
1000240c:	801a      	strh	r2, [r3, #0]

	 VarA = dimAkt_Cw * Farbe_cw1_Quot;
1000240e:	4b16      	ldr	r3, [pc, #88]	; (10002468 <bcuAktBerechnung+0xc8>)
10002410:	881b      	ldrh	r3, [r3, #0]
10002412:	1c1a      	adds	r2, r3, #0
10002414:	4b0e      	ldr	r3, [pc, #56]	; (10002450 <bcuAktBerechnung+0xb0>)
10002416:	881b      	ldrh	r3, [r3, #0]
10002418:	4353      	muls	r3, r2
1000241a:	607b      	str	r3, [r7, #4]
	 Farbe_cw1 = (VarA / 0x100) >>4;
1000241c:	687b      	ldr	r3, [r7, #4]
1000241e:	0a1b      	lsrs	r3, r3, #8
10002420:	091b      	lsrs	r3, r3, #4
10002422:	b29a      	uxth	r2, r3
10002424:	4b11      	ldr	r3, [pc, #68]	; (1000246c <bcuAktBerechnung+0xcc>)
10002426:	801a      	strh	r2, [r3, #0]
	 VarA = dimAkt_Cw * Farbe_cw2_Quot;
10002428:	4b0f      	ldr	r3, [pc, #60]	; (10002468 <bcuAktBerechnung+0xc8>)
1000242a:	881b      	ldrh	r3, [r3, #0]
1000242c:	1c1a      	adds	r2, r3, #0
1000242e:	4b0a      	ldr	r3, [pc, #40]	; (10002458 <bcuAktBerechnung+0xb8>)
10002430:	881b      	ldrh	r3, [r3, #0]
10002432:	4353      	muls	r3, r2
10002434:	607b      	str	r3, [r7, #4]
	 Farbe_cw2 = (VarA / 0x100) >>4;
10002436:	687b      	ldr	r3, [r7, #4]
10002438:	0a1b      	lsrs	r3, r3, #8
1000243a:	091b      	lsrs	r3, r3, #4
1000243c:	b29a      	uxth	r2, r3
1000243e:	4b0c      	ldr	r3, [pc, #48]	; (10002470 <bcuAktBerechnung+0xd0>)
10002440:	801a      	strh	r2, [r3, #0]
  }
10002442:	46bd      	mov	sp, r7
10002444:	b002      	add	sp, #8
10002446:	bd80      	pop	{r7, pc}
10002448:	200008a0 	.word	0x200008a0
1000244c:	20000832 	.word	0x20000832
10002450:	200008f4 	.word	0x200008f4
10002454:	2000081c 	.word	0x2000081c
10002458:	200008a6 	.word	0x200008a6
1000245c:	200008ac 	.word	0x200008ac
10002460:	200007fa 	.word	0x200007fa
10002464:	200007f8 	.word	0x200007f8
10002468:	200008c0 	.word	0x200008c0
1000246c:	20000800 	.word	0x20000800
10002470:	20000902 	.word	0x20000902

10002474 <bcuColorBerechnung>:
	 Farbe_cw2 = (VarA / 0x100) >>4;
  }
 //----------------------------------

 void bcuColorBerechnung(void)
  {
10002474:	b580      	push	{r7, lr}
10002476:	b082      	sub	sp, #8
10002478:	af00      	add	r7, sp, #0
	 uint32_t 	VarA;

	 dimAkt_Ww = 0xffff;
1000247a:	4b1e      	ldr	r3, [pc, #120]	; (100024f4 <bcuColorBerechnung+0x80>)
1000247c:	2201      	movs	r2, #1
1000247e:	4252      	negs	r2, r2
10002480:	801a      	strh	r2, [r3, #0]
	 VarA = dimAkt_Ww * Brightness_Gen;
10002482:	4b1c      	ldr	r3, [pc, #112]	; (100024f4 <bcuColorBerechnung+0x80>)
10002484:	881b      	ldrh	r3, [r3, #0]
10002486:	1c1a      	adds	r2, r3, #0
10002488:	4b1b      	ldr	r3, [pc, #108]	; (100024f8 <bcuColorBerechnung+0x84>)
1000248a:	881b      	ldrh	r3, [r3, #0]
1000248c:	4353      	muls	r3, r2
1000248e:	607b      	str	r3, [r7, #4]
	 VarA = VarA>>16;
10002490:	687b      	ldr	r3, [r7, #4]
10002492:	0c1b      	lsrs	r3, r3, #16
10002494:	607b      	str	r3, [r7, #4]
	 VarA = VarA * (0xffff - ColorQuot_Gen);
10002496:	4b19      	ldr	r3, [pc, #100]	; (100024fc <bcuColorBerechnung+0x88>)
10002498:	881b      	ldrh	r3, [r3, #0]
1000249a:	1c1a      	adds	r2, r3, #0
1000249c:	4b18      	ldr	r3, [pc, #96]	; (10002500 <bcuColorBerechnung+0x8c>)
1000249e:	1a9b      	subs	r3, r3, r2
100024a0:	1c1a      	adds	r2, r3, #0
100024a2:	687b      	ldr	r3, [r7, #4]
100024a4:	4353      	muls	r3, r2
100024a6:	607b      	str	r3, [r7, #4]
	 VarA = VarA>>16;
100024a8:	687b      	ldr	r3, [r7, #4]
100024aa:	0c1b      	lsrs	r3, r3, #16
100024ac:	607b      	str	r3, [r7, #4]
	 dimAkt_Ww = VarA;
100024ae:	687b      	ldr	r3, [r7, #4]
100024b0:	b29a      	uxth	r2, r3
100024b2:	4b10      	ldr	r3, [pc, #64]	; (100024f4 <bcuColorBerechnung+0x80>)
100024b4:	801a      	strh	r2, [r3, #0]

	 dimAkt_Cw = 0xffff;
100024b6:	4b13      	ldr	r3, [pc, #76]	; (10002504 <bcuColorBerechnung+0x90>)
100024b8:	2201      	movs	r2, #1
100024ba:	4252      	negs	r2, r2
100024bc:	801a      	strh	r2, [r3, #0]
	 VarA = dimAkt_Cw * Brightness_Gen;
100024be:	4b11      	ldr	r3, [pc, #68]	; (10002504 <bcuColorBerechnung+0x90>)
100024c0:	881b      	ldrh	r3, [r3, #0]
100024c2:	1c1a      	adds	r2, r3, #0
100024c4:	4b0c      	ldr	r3, [pc, #48]	; (100024f8 <bcuColorBerechnung+0x84>)
100024c6:	881b      	ldrh	r3, [r3, #0]
100024c8:	4353      	muls	r3, r2
100024ca:	607b      	str	r3, [r7, #4]
	 VarA = VarA>>16;
100024cc:	687b      	ldr	r3, [r7, #4]
100024ce:	0c1b      	lsrs	r3, r3, #16
100024d0:	607b      	str	r3, [r7, #4]
	 VarA = VarA * ColorQuot_Gen;
100024d2:	4b0a      	ldr	r3, [pc, #40]	; (100024fc <bcuColorBerechnung+0x88>)
100024d4:	881b      	ldrh	r3, [r3, #0]
100024d6:	1c1a      	adds	r2, r3, #0
100024d8:	687b      	ldr	r3, [r7, #4]
100024da:	4353      	muls	r3, r2
100024dc:	607b      	str	r3, [r7, #4]
	 VarA = VarA>>16;
100024de:	687b      	ldr	r3, [r7, #4]
100024e0:	0c1b      	lsrs	r3, r3, #16
100024e2:	607b      	str	r3, [r7, #4]
	 dimAkt_Cw = VarA;
100024e4:	687b      	ldr	r3, [r7, #4]
100024e6:	b29a      	uxth	r2, r3
100024e8:	4b06      	ldr	r3, [pc, #24]	; (10002504 <bcuColorBerechnung+0x90>)
100024ea:	801a      	strh	r2, [r3, #0]
  }
100024ec:	46bd      	mov	sp, r7
100024ee:	b002      	add	sp, #8
100024f0:	bd80      	pop	{r7, pc}
100024f2:	46c0      	nop			; (mov r8, r8)
100024f4:	200008ac 	.word	0x200008ac
100024f8:	2000054c 	.word	0x2000054c
100024fc:	2000054e 	.word	0x2000054e
10002500:	0000ffff 	.word	0x0000ffff
10002504:	200008c0 	.word	0x200008c0

10002508 <Offlight_zahler_write>:
 //----------------------------------



 void Offlight_zahler_write(void)
 {
10002508:	b580      	push	{r7, lr}
1000250a:	b082      	sub	sp, #8
1000250c:	af00      	add	r7, sp, #0
     uint8_t a;
	 if(RegOnOff == RegOnOff_OFFvalue)
1000250e:	4b3b      	ldr	r3, [pc, #236]	; (100025fc <Offlight_zahler_write+0xf4>)
10002510:	781b      	ldrb	r3, [r3, #0]
10002512:	2b05      	cmp	r3, #5
10002514:	d000      	beq.n	10002518 <Offlight_zahler_write+0x10>
10002516:	e06e      	b.n	100025f6 <Offlight_zahler_write+0xee>
	 {
	 zahler_offlight=zahler_offlight+1;
10002518:	4b39      	ldr	r3, [pc, #228]	; (10002600 <Offlight_zahler_write+0xf8>)
1000251a:	881b      	ldrh	r3, [r3, #0]
1000251c:	3301      	adds	r3, #1
1000251e:	b29a      	uxth	r2, r3
10002520:	4b37      	ldr	r3, [pc, #220]	; (10002600 <Offlight_zahler_write+0xf8>)
10002522:	801a      	strh	r2, [r3, #0]

	  if(zahler_offlight >= con_zahler_offlight)
10002524:	4b36      	ldr	r3, [pc, #216]	; (10002600 <Offlight_zahler_write+0xf8>)
10002526:	881b      	ldrh	r3, [r3, #0]
10002528:	2b3b      	cmp	r3, #59	; 0x3b
1000252a:	d964      	bls.n	100025f6 <Offlight_zahler_write+0xee>
	  {
		     zahler_offlight=0;
1000252c:	4b34      	ldr	r3, [pc, #208]	; (10002600 <Offlight_zahler_write+0xf8>)
1000252e:	2200      	movs	r2, #0
10002530:	801a      	strh	r2, [r3, #0]
			a = read_off_light_EEprom();
10002532:	f7ff fc2d 	bl	10001d90 <read_off_light_EEprom>
10002536:	1c02      	adds	r2, r0, #0
10002538:	1dfb      	adds	r3, r7, #7
1000253a:	701a      	strb	r2, [r3, #0]
			if (a == 0x03)
1000253c:	1dfb      	adds	r3, r7, #7
1000253e:	781b      	ldrb	r3, [r3, #0]
10002540:	2b03      	cmp	r3, #3
10002542:	d152      	bne.n	100025ea <Offlight_zahler_write+0xe2>
			{
			dimOff_Ww = dimAkt_Ww;
10002544:	4b2f      	ldr	r3, [pc, #188]	; (10002604 <Offlight_zahler_write+0xfc>)
10002546:	881a      	ldrh	r2, [r3, #0]
10002548:	4b2f      	ldr	r3, [pc, #188]	; (10002608 <Offlight_zahler_write+0x100>)
1000254a:	801a      	strh	r2, [r3, #0]
			dimOff_Cw = dimAkt_Cw;
1000254c:	4b2f      	ldr	r3, [pc, #188]	; (1000260c <Offlight_zahler_write+0x104>)
1000254e:	881a      	ldrh	r2, [r3, #0]
10002550:	4b2f      	ldr	r3, [pc, #188]	; (10002610 <Offlight_zahler_write+0x108>)
10002552:	801a      	strh	r2, [r3, #0]

			 if ((ReadBuffer2[4] == (dimOff_Ww / 0x100)) && ( ReadBuffer2[5] == (dimOff_Ww & 0xff) ) && (ReadBuffer2[6] == (dimOff_Cw / 0x100)) && (ReadBuffer2[7] == (dimOff_Cw & 0xff)) )
10002554:	4b2f      	ldr	r3, [pc, #188]	; (10002614 <Offlight_zahler_write+0x10c>)
10002556:	791b      	ldrb	r3, [r3, #4]
10002558:	b29a      	uxth	r2, r3
1000255a:	4b2b      	ldr	r3, [pc, #172]	; (10002608 <Offlight_zahler_write+0x100>)
1000255c:	881b      	ldrh	r3, [r3, #0]
1000255e:	0a1b      	lsrs	r3, r3, #8
10002560:	b29b      	uxth	r3, r3
10002562:	429a      	cmp	r2, r3
10002564:	d120      	bne.n	100025a8 <Offlight_zahler_write+0xa0>
10002566:	4b2b      	ldr	r3, [pc, #172]	; (10002614 <Offlight_zahler_write+0x10c>)
10002568:	795b      	ldrb	r3, [r3, #5]
1000256a:	1c1a      	adds	r2, r3, #0
1000256c:	4b26      	ldr	r3, [pc, #152]	; (10002608 <Offlight_zahler_write+0x100>)
1000256e:	881b      	ldrh	r3, [r3, #0]
10002570:	1c19      	adds	r1, r3, #0
10002572:	23ff      	movs	r3, #255	; 0xff
10002574:	400b      	ands	r3, r1
10002576:	429a      	cmp	r2, r3
10002578:	d116      	bne.n	100025a8 <Offlight_zahler_write+0xa0>
1000257a:	4b26      	ldr	r3, [pc, #152]	; (10002614 <Offlight_zahler_write+0x10c>)
1000257c:	799b      	ldrb	r3, [r3, #6]
1000257e:	b29a      	uxth	r2, r3
10002580:	4b23      	ldr	r3, [pc, #140]	; (10002610 <Offlight_zahler_write+0x108>)
10002582:	881b      	ldrh	r3, [r3, #0]
10002584:	0a1b      	lsrs	r3, r3, #8
10002586:	b29b      	uxth	r3, r3
10002588:	429a      	cmp	r2, r3
1000258a:	d10d      	bne.n	100025a8 <Offlight_zahler_write+0xa0>
1000258c:	4b21      	ldr	r3, [pc, #132]	; (10002614 <Offlight_zahler_write+0x10c>)
1000258e:	79db      	ldrb	r3, [r3, #7]
10002590:	1c1a      	adds	r2, r3, #0
10002592:	4b1f      	ldr	r3, [pc, #124]	; (10002610 <Offlight_zahler_write+0x108>)
10002594:	881b      	ldrh	r3, [r3, #0]
10002596:	1c19      	adds	r1, r3, #0
10002598:	23ff      	movs	r3, #255	; 0xff
1000259a:	400b      	ands	r3, r1
1000259c:	429a      	cmp	r2, r3
1000259e:	d103      	bne.n	100025a8 <Offlight_zahler_write+0xa0>
			 {
		     zahler_offlight=0;
100025a0:	4b17      	ldr	r3, [pc, #92]	; (10002600 <Offlight_zahler_write+0xf8>)
100025a2:	2200      	movs	r2, #0
100025a4:	801a      	strh	r2, [r3, #0]
100025a6:	e023      	b.n	100025f0 <Offlight_zahler_write+0xe8>
			 }
			 else{
		     ReadBuffer2[4] = dimOff_Ww / 0x100;
100025a8:	4b17      	ldr	r3, [pc, #92]	; (10002608 <Offlight_zahler_write+0x100>)
100025aa:	881b      	ldrh	r3, [r3, #0]
100025ac:	0a1b      	lsrs	r3, r3, #8
100025ae:	b29b      	uxth	r3, r3
100025b0:	b2da      	uxtb	r2, r3
100025b2:	4b18      	ldr	r3, [pc, #96]	; (10002614 <Offlight_zahler_write+0x10c>)
100025b4:	711a      	strb	r2, [r3, #4]
		     ReadBuffer2[5] = dimOff_Ww & 0xff;
100025b6:	4b14      	ldr	r3, [pc, #80]	; (10002608 <Offlight_zahler_write+0x100>)
100025b8:	881b      	ldrh	r3, [r3, #0]
100025ba:	b2da      	uxtb	r2, r3
100025bc:	4b15      	ldr	r3, [pc, #84]	; (10002614 <Offlight_zahler_write+0x10c>)
100025be:	715a      	strb	r2, [r3, #5]
		     ReadBuffer2[6] = dimOff_Cw / 0x100;
100025c0:	4b13      	ldr	r3, [pc, #76]	; (10002610 <Offlight_zahler_write+0x108>)
100025c2:	881b      	ldrh	r3, [r3, #0]
100025c4:	0a1b      	lsrs	r3, r3, #8
100025c6:	b29b      	uxth	r3, r3
100025c8:	b2da      	uxtb	r2, r3
100025ca:	4b12      	ldr	r3, [pc, #72]	; (10002614 <Offlight_zahler_write+0x10c>)
100025cc:	719a      	strb	r2, [r3, #6]
		     ReadBuffer2[7] = dimOff_Cw & 0xff;
100025ce:	4b10      	ldr	r3, [pc, #64]	; (10002610 <Offlight_zahler_write+0x108>)
100025d0:	881b      	ldrh	r3, [r3, #0]
100025d2:	b2da      	uxtb	r2, r3
100025d4:	4b0f      	ldr	r3, [pc, #60]	; (10002614 <Offlight_zahler_write+0x10c>)
100025d6:	71da      	strb	r2, [r3, #7]
		     a = writeOff_light_B5_EEprom();
100025d8:	f7ff fcda 	bl	10001f90 <writeOff_light_B5_EEprom>
100025dc:	1c02      	adds	r2, r0, #0
100025de:	1dfb      	adds	r3, r7, #7
100025e0:	701a      	strb	r2, [r3, #0]
		     zahler_offlight=0;
100025e2:	4b07      	ldr	r3, [pc, #28]	; (10002600 <Offlight_zahler_write+0xf8>)
100025e4:	2200      	movs	r2, #0
100025e6:	801a      	strh	r2, [r3, #0]
100025e8:	e002      	b.n	100025f0 <Offlight_zahler_write+0xe8>
		    		//    DIGITAL_IO_ToggleOutput(&VCC_LED_shtdwn);
			 }
			}
			else {
			zahler_offlight = con_zahler_offlight/2;
100025ea:	4b05      	ldr	r3, [pc, #20]	; (10002600 <Offlight_zahler_write+0xf8>)
100025ec:	221e      	movs	r2, #30
100025ee:	801a      	strh	r2, [r3, #0]
			}

	   zahler_offlight=0;
100025f0:	4b03      	ldr	r3, [pc, #12]	; (10002600 <Offlight_zahler_write+0xf8>)
100025f2:	2200      	movs	r2, #0
100025f4:	801a      	strh	r2, [r3, #0]
	  }//zahler_offlight
	 }//regonoff
 }
100025f6:	46bd      	mov	sp, r7
100025f8:	b002      	add	sp, #8
100025fa:	bd80      	pop	{r7, pc}
100025fc:	2000085a 	.word	0x2000085a
10002600:	20000768 	.word	0x20000768
10002604:	200008ac 	.word	0x200008ac
10002608:	20000900 	.word	0x20000900
1000260c:	200008c0 	.word	0x200008c0
10002610:	20000864 	.word	0x20000864
10002614:	20000848 	.word	0x20000848

10002618 <plus39V_stop>:

 //----------------------------------------------------

 void plus39V_stop (void) // spannung ok
  {
10002618:	b580      	push	{r7, lr}
1000261a:	af00      	add	r7, sp, #0
	// 	DIGITAL_IO_SetOutputHigh(&xmc_sel_gain);


  }
1000261c:	46bd      	mov	sp, r7
1000261e:	bd80      	pop	{r7, pc}

10002620 <plus39V_start>:

 void plus39V_start (void) // spannung ok
  {
10002620:	b580      	push	{r7, lr}
10002622:	af00      	add	r7, sp, #0
	// 	DIGITAL_IO_SetOutputHigh(&xmc_sel_gain);

  }
10002624:	46bd      	mov	sp, r7
10002626:	bd80      	pop	{r7, pc}

10002628 <Time1msec>:

 //----------------------------------

  void Time1msec (void) //
  {
10002628:	b580      	push	{r7, lr}
1000262a:	af00      	add	r7, sp, #0
      ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
1000262c:	4b02      	ldr	r3, [pc, #8]	; (10002638 <Time1msec+0x10>)
1000262e:	1c18      	adds	r0, r3, #0
10002630:	f004 feea 	bl	10007408 <ADC_MEASUREMENT_ADV_SoftwareTrigger>

  }
10002634:	46bd      	mov	sp, r7
10002636:	bd80      	pop	{r7, pc}
10002638:	100099c4 	.word	0x100099c4

1000263c <Time20msec>:
  //----------------------------------

   void Time20msec (void) //
   {
1000263c:	b580      	push	{r7, lr}
1000263e:	af00      	add	r7, sp, #0

   //    DIGITAL_IO_ToggleOutput(&VCC_LED_shtdwn);
       resultA2 = (3*resultA2 + resultAalt)/4;
10002640:	4b36      	ldr	r3, [pc, #216]	; (1000271c <Time20msec+0xe0>)
10002642:	881b      	ldrh	r3, [r3, #0]
10002644:	1c1a      	adds	r2, r3, #0
10002646:	1c13      	adds	r3, r2, #0
10002648:	005b      	lsls	r3, r3, #1
1000264a:	189b      	adds	r3, r3, r2
1000264c:	4a34      	ldr	r2, [pc, #208]	; (10002720 <Time20msec+0xe4>)
1000264e:	8812      	ldrh	r2, [r2, #0]
10002650:	189b      	adds	r3, r3, r2
10002652:	2b00      	cmp	r3, #0
10002654:	da00      	bge.n	10002658 <Time20msec+0x1c>
10002656:	3303      	adds	r3, #3
10002658:	109b      	asrs	r3, r3, #2
1000265a:	b29a      	uxth	r2, r3
1000265c:	4b2f      	ldr	r3, [pc, #188]	; (1000271c <Time20msec+0xe0>)
1000265e:	801a      	strh	r2, [r3, #0]
       resultB2 = (3*resultB2 + resultBalt)/4;
10002660:	4b30      	ldr	r3, [pc, #192]	; (10002724 <Time20msec+0xe8>)
10002662:	881b      	ldrh	r3, [r3, #0]
10002664:	1c1a      	adds	r2, r3, #0
10002666:	1c13      	adds	r3, r2, #0
10002668:	005b      	lsls	r3, r3, #1
1000266a:	189b      	adds	r3, r3, r2
1000266c:	4a2e      	ldr	r2, [pc, #184]	; (10002728 <Time20msec+0xec>)
1000266e:	8812      	ldrh	r2, [r2, #0]
10002670:	189b      	adds	r3, r3, r2
10002672:	2b00      	cmp	r3, #0
10002674:	da00      	bge.n	10002678 <Time20msec+0x3c>
10002676:	3303      	adds	r3, #3
10002678:	109b      	asrs	r3, r3, #2
1000267a:	b29a      	uxth	r2, r3
1000267c:	4b29      	ldr	r3, [pc, #164]	; (10002724 <Time20msec+0xe8>)
1000267e:	801a      	strh	r2, [r3, #0]
       resultC2 = (3*resultC2 + resultCalt)/4;
10002680:	4b2a      	ldr	r3, [pc, #168]	; (1000272c <Time20msec+0xf0>)
10002682:	881b      	ldrh	r3, [r3, #0]
10002684:	1c1a      	adds	r2, r3, #0
10002686:	1c13      	adds	r3, r2, #0
10002688:	005b      	lsls	r3, r3, #1
1000268a:	189b      	adds	r3, r3, r2
1000268c:	4a28      	ldr	r2, [pc, #160]	; (10002730 <Time20msec+0xf4>)
1000268e:	8812      	ldrh	r2, [r2, #0]
10002690:	189b      	adds	r3, r3, r2
10002692:	2b00      	cmp	r3, #0
10002694:	da00      	bge.n	10002698 <Time20msec+0x5c>
10002696:	3303      	adds	r3, #3
10002698:	109b      	asrs	r3, r3, #2
1000269a:	b29a      	uxth	r2, r3
1000269c:	4b23      	ldr	r3, [pc, #140]	; (1000272c <Time20msec+0xf0>)
1000269e:	801a      	strh	r2, [r3, #0]
       resultD2 = (3*resultD2 + resultDalt)/4;
100026a0:	4b24      	ldr	r3, [pc, #144]	; (10002734 <Time20msec+0xf8>)
100026a2:	881b      	ldrh	r3, [r3, #0]
100026a4:	1c1a      	adds	r2, r3, #0
100026a6:	1c13      	adds	r3, r2, #0
100026a8:	005b      	lsls	r3, r3, #1
100026aa:	189b      	adds	r3, r3, r2
100026ac:	4a22      	ldr	r2, [pc, #136]	; (10002738 <Time20msec+0xfc>)
100026ae:	8812      	ldrh	r2, [r2, #0]
100026b0:	189b      	adds	r3, r3, r2
100026b2:	2b00      	cmp	r3, #0
100026b4:	da00      	bge.n	100026b8 <Time20msec+0x7c>
100026b6:	3303      	adds	r3, #3
100026b8:	109b      	asrs	r3, r3, #2
100026ba:	b29a      	uxth	r2, r3
100026bc:	4b1d      	ldr	r3, [pc, #116]	; (10002734 <Time20msec+0xf8>)
100026be:	801a      	strh	r2, [r3, #0]
       adc_ready20m=adc_ready20m + 1;
100026c0:	4b1e      	ldr	r3, [pc, #120]	; (1000273c <Time20msec+0x100>)
100026c2:	881b      	ldrh	r3, [r3, #0]
100026c4:	3301      	adds	r3, #1
100026c6:	b29a      	uxth	r2, r3
100026c8:	4b1c      	ldr	r3, [pc, #112]	; (1000273c <Time20msec+0x100>)
100026ca:	801a      	strh	r2, [r3, #0]

      if (adc_ready20m > 5)
100026cc:	4b1b      	ldr	r3, [pc, #108]	; (1000273c <Time20msec+0x100>)
100026ce:	881b      	ldrh	r3, [r3, #0]
100026d0:	2b05      	cmp	r3, #5
100026d2:	d921      	bls.n	10002718 <Time20msec+0xdc>
      {
     	//    DIGITAL_IO_ToggleOutput(&LED);
     	 adc_ready20m=0;
100026d4:	4b19      	ldr	r3, [pc, #100]	; (1000273c <Time20msec+0x100>)
100026d6:	2200      	movs	r2, #0
100026d8:	801a      	strh	r2, [r3, #0]
     	    if (resultA2 < min_EEP_Voltage_Uin)
100026da:	4b10      	ldr	r3, [pc, #64]	; (1000271c <Time20msec+0xe0>)
100026dc:	881b      	ldrh	r3, [r3, #0]
100026de:	4a18      	ldr	r2, [pc, #96]	; (10002740 <Time20msec+0x104>)
100026e0:	4293      	cmp	r3, r2
100026e2:	d809      	bhi.n	100026f8 <Time20msec+0xbc>
     	     {
     	     plus39V_stop();
100026e4:	f7ff ff98 	bl	10002618 <plus39V_stop>
					B_nextLedOff=0;   // schaltet on led beim spannnungsvergleich aus
100026e8:	4b16      	ldr	r3, [pc, #88]	; (10002744 <Time20msec+0x108>)
100026ea:	2200      	movs	r2, #0
100026ec:	701a      	strb	r2, [r3, #0]
 	 		 	DIGITAL_IO_SetOutputLow(&VCC_LED_shtdwn);
100026ee:	4b16      	ldr	r3, [pc, #88]	; (10002748 <Time20msec+0x10c>)
100026f0:	1c18      	adds	r0, r3, #0
100026f2:	f7fe fd05 	bl	10001100 <DIGITAL_IO_SetOutputLow>
100026f6:	e00f      	b.n	10002718 <Time20msec+0xdc>
     	     }
     	    else if (resultA2 > minHyst_EEP_Voltage_Uin)
100026f8:	4b08      	ldr	r3, [pc, #32]	; (1000271c <Time20msec+0xe0>)
100026fa:	881a      	ldrh	r2, [r3, #0]
100026fc:	23bf      	movs	r3, #191	; 0xbf
100026fe:	011b      	lsls	r3, r3, #4
10002700:	429a      	cmp	r2, r3
10002702:	d909      	bls.n	10002718 <Time20msec+0xdc>
 			 {
     	     plus39V_start();
10002704:	f7ff ff8c 	bl	10002620 <plus39V_start>
				if(	B_nextLedOff==0)
10002708:	4b0e      	ldr	r3, [pc, #56]	; (10002744 <Time20msec+0x108>)
1000270a:	781b      	ldrb	r3, [r3, #0]
1000270c:	2b00      	cmp	r3, #0
1000270e:	d103      	bne.n	10002718 <Time20msec+0xdc>
 	 		 	{DIGITAL_IO_SetOutputHigh(&VCC_LED_shtdwn);}
10002710:	4b0d      	ldr	r3, [pc, #52]	; (10002748 <Time20msec+0x10c>)
10002712:	1c18      	adds	r0, r3, #0
10002714:	f7fe fce4 	bl	100010e0 <DIGITAL_IO_SetOutputHigh>
 			 }
      }


   }
10002718:	46bd      	mov	sp, r7
1000271a:	bd80      	pop	{r7, pc}
1000271c:	200008fe 	.word	0x200008fe
10002720:	200007c4 	.word	0x200007c4
10002724:	200007fe 	.word	0x200007fe
10002728:	200008a2 	.word	0x200008a2
1000272c:	200007f6 	.word	0x200007f6
10002730:	20000906 	.word	0x20000906
10002734:	20000820 	.word	0x20000820
10002738:	20000766 	.word	0x20000766
1000273c:	20000764 	.word	0x20000764
10002740:	00000b9f 	.word	0x00000b9f
10002744:	2000076d 	.word	0x2000076d
10002748:	100098ec 	.word	0x100098ec

1000274c <firstuartBack>:
  //------------------------------

   void firstuartBack (void) //
   {	if ( B_first_uart == 0 )
1000274c:	b598      	push	{r3, r4, r7, lr}
1000274e:	af00      	add	r7, sp, #0
10002750:	4b17      	ldr	r3, [pc, #92]	; (100027b0 <firstuartBack+0x64>)
10002752:	781b      	ldrb	r3, [r3, #0]
10002754:	2b00      	cmp	r3, #0
10002756:	d129      	bne.n	100027ac <firstuartBack+0x60>
   	   {
	   new_data_HalloBack();
10002758:	f7ff f894 	bl	10001884 <new_data_HalloBack>
	   new_data[5]= command_firstuartBack ;
1000275c:	4b15      	ldr	r3, [pc, #84]	; (100027b4 <firstuartBack+0x68>)
1000275e:	2230      	movs	r2, #48	; 0x30
10002760:	715a      	strb	r2, [r3, #5]
   	   new_data[6]= Ser_NrH  / 0x100 ;
10002762:	4b15      	ldr	r3, [pc, #84]	; (100027b8 <firstuartBack+0x6c>)
10002764:	881b      	ldrh	r3, [r3, #0]
10002766:	0a1b      	lsrs	r3, r3, #8
10002768:	b29b      	uxth	r3, r3
1000276a:	b2da      	uxtb	r2, r3
1000276c:	4b11      	ldr	r3, [pc, #68]	; (100027b4 <firstuartBack+0x68>)
1000276e:	719a      	strb	r2, [r3, #6]
   	   new_data[7]= Ser_NrH  & 0xff ;
10002770:	4b11      	ldr	r3, [pc, #68]	; (100027b8 <firstuartBack+0x6c>)
10002772:	881b      	ldrh	r3, [r3, #0]
10002774:	b2da      	uxtb	r2, r3
10002776:	4b0f      	ldr	r3, [pc, #60]	; (100027b4 <firstuartBack+0x68>)
10002778:	71da      	strb	r2, [r3, #7]
   	   new_data[8]= Ser_NrL  / 0x100 ;
1000277a:	4b10      	ldr	r3, [pc, #64]	; (100027bc <firstuartBack+0x70>)
1000277c:	881b      	ldrh	r3, [r3, #0]
1000277e:	0a1b      	lsrs	r3, r3, #8
10002780:	b29b      	uxth	r3, r3
10002782:	b2da      	uxtb	r2, r3
10002784:	4b0b      	ldr	r3, [pc, #44]	; (100027b4 <firstuartBack+0x68>)
10002786:	721a      	strb	r2, [r3, #8]
   	   new_data[9]= Ser_NrL  & 0xff ;
10002788:	4b0c      	ldr	r3, [pc, #48]	; (100027bc <firstuartBack+0x70>)
1000278a:	881b      	ldrh	r3, [r3, #0]
1000278c:	b2da      	uxtb	r2, r3
1000278e:	4b09      	ldr	r3, [pc, #36]	; (100027b4 <firstuartBack+0x68>)
10002790:	725a      	strb	r2, [r3, #9]
   	   UART_Transmit(&UART_1, new_data,transmit_buf_size);
10002792:	4b0b      	ldr	r3, [pc, #44]	; (100027c0 <firstuartBack+0x74>)
10002794:	781b      	ldrb	r3, [r3, #0]
10002796:	1c1c      	adds	r4, r3, #0
10002798:	4a0a      	ldr	r2, [pc, #40]	; (100027c4 <firstuartBack+0x78>)
1000279a:	4b06      	ldr	r3, [pc, #24]	; (100027b4 <firstuartBack+0x68>)
1000279c:	1c10      	adds	r0, r2, #0
1000279e:	1c19      	adds	r1, r3, #0
100027a0:	1c22      	adds	r2, r4, #0
100027a2:	f001 fb3f 	bl	10003e24 <UART_Transmit>
   	   B_first_uart=1;
100027a6:	4b02      	ldr	r3, [pc, #8]	; (100027b0 <firstuartBack+0x64>)
100027a8:	2201      	movs	r2, #1
100027aa:	701a      	strb	r2, [r3, #0]
   	   }
   }
100027ac:	46bd      	mov	sp, r7
100027ae:	bd98      	pop	{r3, r4, r7, pc}
100027b0:	2000076c 	.word	0x2000076c
100027b4:	20000804 	.word	0x20000804
100027b8:	20000830 	.word	0x20000830
100027bc:	200008a8 	.word	0x200008a8
100027c0:	20000550 	.word	0x20000550
100027c4:	20000560 	.word	0x20000560

100027c8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
100027c8:	b580      	push	{r7, lr}
100027ca:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100027cc:	f004 fb7e 	bl	10006ecc <SystemCoreSetup>
  SystemCoreClockSetup();
100027d0:	f004 fbc2 	bl	10006f58 <SystemCoreClockSetup>
}
100027d4:	46bd      	mov	sp, r7
100027d6:	bd80      	pop	{r7, pc}

100027d8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100027d8:	b580      	push	{r7, lr}
100027da:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100027dc:	4b12      	ldr	r3, [pc, #72]	; (10002828 <SystemCoreClockUpdate+0x50>)
100027de:	681a      	ldr	r2, [r3, #0]
100027e0:	23ff      	movs	r3, #255	; 0xff
100027e2:	021b      	lsls	r3, r3, #8
100027e4:	4013      	ands	r3, r2
100027e6:	0a1a      	lsrs	r2, r3, #8
100027e8:	4b10      	ldr	r3, [pc, #64]	; (1000282c <SystemCoreClockUpdate+0x54>)
100027ea:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100027ec:	4b0e      	ldr	r3, [pc, #56]	; (10002828 <SystemCoreClockUpdate+0x50>)
100027ee:	681b      	ldr	r3, [r3, #0]
100027f0:	22ff      	movs	r2, #255	; 0xff
100027f2:	401a      	ands	r2, r3
100027f4:	4b0e      	ldr	r3, [pc, #56]	; (10002830 <SystemCoreClockUpdate+0x58>)
100027f6:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
100027f8:	4b0c      	ldr	r3, [pc, #48]	; (1000282c <SystemCoreClockUpdate+0x54>)
100027fa:	681b      	ldr	r3, [r3, #0]
100027fc:	2b00      	cmp	r3, #0
100027fe:	d00e      	beq.n	1000281e <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
10002800:	4b0a      	ldr	r3, [pc, #40]	; (1000282c <SystemCoreClockUpdate+0x54>)
10002802:	681b      	ldr	r3, [r3, #0]
10002804:	021a      	lsls	r2, r3, #8
10002806:	4b0a      	ldr	r3, [pc, #40]	; (10002830 <SystemCoreClockUpdate+0x58>)
10002808:	681b      	ldr	r3, [r3, #0]
1000280a:	18d3      	adds	r3, r2, r3
1000280c:	4809      	ldr	r0, [pc, #36]	; (10002834 <SystemCoreClockUpdate+0x5c>)
1000280e:	1c19      	adds	r1, r3, #0
10002810:	f000 fc5e 	bl	100030d0 <__aeabi_uidiv>
10002814:	1c03      	adds	r3, r0, #0
10002816:	005a      	lsls	r2, r3, #1
10002818:	4b07      	ldr	r3, [pc, #28]	; (10002838 <SystemCoreClockUpdate+0x60>)
1000281a:	601a      	str	r2, [r3, #0]
1000281c:	e002      	b.n	10002824 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
1000281e:	4b06      	ldr	r3, [pc, #24]	; (10002838 <SystemCoreClockUpdate+0x60>)
10002820:	4a06      	ldr	r2, [pc, #24]	; (1000283c <SystemCoreClockUpdate+0x64>)
10002822:	601a      	str	r2, [r3, #0]
  }
}
10002824:	46bd      	mov	sp, r7
10002826:	bd80      	pop	{r7, pc}
10002828:	40010300 	.word	0x40010300
1000282c:	20000770 	.word	0x20000770
10002830:	20000774 	.word	0x20000774
10002834:	f4240000 	.word	0xf4240000
10002838:	20003ffc 	.word	0x20003ffc
1000283c:	01e84800 	.word	0x01e84800

10002840 <XMC_FLASH_IsBusy>:
 * \par<b>Related APIs:</b><BR>
 * XMC_FLASH_GetStatus()\n\n\n
 *
 */
__STATIC_INLINE bool XMC_FLASH_IsBusy(void)
{
10002840:	b580      	push	{r7, lr}
10002842:	af00      	add	r7, sp, #0
  return (bool)(XMC_FLASH_GetStatus() & XMC_FLASH_STATUS_BUSY);
10002844:	f000 f81a 	bl	1000287c <XMC_FLASH_GetStatus>
10002848:	1c02      	adds	r2, r0, #0
1000284a:	2301      	movs	r3, #1
1000284c:	4013      	ands	r3, r2
1000284e:	1e5a      	subs	r2, r3, #1
10002850:	4193      	sbcs	r3, r2
10002852:	b2db      	uxtb	r3, r3
}
10002854:	1c18      	adds	r0, r3, #0
10002856:	46bd      	mov	sp, r7
10002858:	bd80      	pop	{r7, pc}
1000285a:	46c0      	nop			; (mov r8, r8)

1000285c <XMC_FLASH_ClearStatus>:

/*
 * This API shall clear the ECC and VERIFICATION error status.
 */
void XMC_FLASH_ClearStatus(void)
{
1000285c:	b580      	push	{r7, lr}
1000285e:	af00      	add	r7, sp, #0
  NVM->NVMPROG |= (uint16_t)((uint16_t)NVM_NVMPROG_RSTVERR_Msk | (uint16_t)NVM_NVMPROG_RSTECC_Msk);
10002860:	4905      	ldr	r1, [pc, #20]	; (10002878 <XMC_FLASH_ClearStatus+0x1c>)
10002862:	4b05      	ldr	r3, [pc, #20]	; (10002878 <XMC_FLASH_ClearStatus+0x1c>)
10002864:	889b      	ldrh	r3, [r3, #4]
10002866:	b29b      	uxth	r3, r3
10002868:	22c0      	movs	r2, #192	; 0xc0
1000286a:	0192      	lsls	r2, r2, #6
1000286c:	4313      	orrs	r3, r2
1000286e:	b29b      	uxth	r3, r3
10002870:	808b      	strh	r3, [r1, #4]
}
10002872:	46bd      	mov	sp, r7
10002874:	bd80      	pop	{r7, pc}
10002876:	46c0      	nop			; (mov r8, r8)
10002878:	40050000 	.word	0x40050000

1000287c <XMC_FLASH_GetStatus>:

/*
 * This API shall return the status of NVM.
 */
uint32_t XMC_FLASH_GetStatus(void)
{
1000287c:	b580      	push	{r7, lr}
1000287e:	af00      	add	r7, sp, #0
  return NVM->NVMSTATUS;
10002880:	4b02      	ldr	r3, [pc, #8]	; (1000288c <XMC_FLASH_GetStatus+0x10>)
10002882:	881b      	ldrh	r3, [r3, #0]
10002884:	b29b      	uxth	r3, r3
}
10002886:	1c18      	adds	r0, r3, #0
10002888:	46bd      	mov	sp, r7
1000288a:	bd80      	pop	{r7, pc}
1000288c:	40050000 	.word	0x40050000

10002890 <XMC_FLASH_ProgramVerifyPage>:
{
  (void)XMC1000_NvmErasePage(address);
}

void XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data)
{
10002890:	b580      	push	{r7, lr}
10002892:	b082      	sub	sp, #8
10002894:	af00      	add	r7, sp, #0
10002896:	6078      	str	r0, [r7, #4]
10002898:	6039      	str	r1, [r7, #0]
  (void)XMC1000_NvmProgVerify(data, address);
1000289a:	2382      	movs	r3, #130	; 0x82
1000289c:	005b      	lsls	r3, r3, #1
1000289e:	681b      	ldr	r3, [r3, #0]
100028a0:	6839      	ldr	r1, [r7, #0]
100028a2:	687a      	ldr	r2, [r7, #4]
100028a4:	1c08      	adds	r0, r1, #0
100028a6:	1c11      	adds	r1, r2, #0
100028a8:	4798      	blx	r3
}
100028aa:	46bd      	mov	sp, r7
100028ac:	b002      	add	sp, #8
100028ae:	bd80      	pop	{r7, pc}

100028b0 <XMC_FLASH_WriteBlocks>:

/* Write blocks of data into flash*/
void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verify)
{
100028b0:	b580      	push	{r7, lr}
100028b2:	b086      	sub	sp, #24
100028b4:	af00      	add	r7, sp, #0
100028b6:	60f8      	str	r0, [r7, #12]
100028b8:	60b9      	str	r1, [r7, #8]
100028ba:	607a      	str	r2, [r7, #4]
100028bc:	1c1a      	adds	r2, r3, #0
100028be:	1cfb      	adds	r3, r7, #3
100028c0:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_FLASH_WriteBlocks: Starting address not aligned to Block",
                                                                   ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  /* Configure the continuous Write option command and reset the NVM error / verification status*/
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
100028c2:	4a29      	ldr	r2, [pc, #164]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
100028c4:	4b28      	ldr	r3, [pc, #160]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
100028c6:	889b      	ldrh	r3, [r3, #4]
100028c8:	b29b      	uxth	r3, r3
100028ca:	21ff      	movs	r1, #255	; 0xff
100028cc:	438b      	bics	r3, r1
100028ce:	b29b      	uxth	r3, r3
100028d0:	8093      	strh	r3, [r2, #4]
  NVM->NVMPROG |= (uint16_t)(NVM_NVMPROG_RSTVERR_Msk | NVM_NVMPROG_RSTECC_Msk);
100028d2:	4925      	ldr	r1, [pc, #148]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
100028d4:	4b24      	ldr	r3, [pc, #144]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
100028d6:	889b      	ldrh	r3, [r3, #4]
100028d8:	b29b      	uxth	r3, r3
100028da:	22c0      	movs	r2, #192	; 0xc0
100028dc:	0192      	lsls	r2, r2, #6
100028de:	4313      	orrs	r3, r2
100028e0:	b29b      	uxth	r3, r3
100028e2:	808b      	strh	r3, [r1, #4]

  if (verify == true)
100028e4:	1cfb      	adds	r3, r7, #3
100028e6:	781b      	ldrb	r3, [r3, #0]
100028e8:	2b00      	cmp	r3, #0
100028ea:	d008      	beq.n	100028fe <XMC_FLASH_WriteBlocks+0x4e>
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE_VERIFY;
100028ec:	4a1e      	ldr	r2, [pc, #120]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
100028ee:	4b1e      	ldr	r3, [pc, #120]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
100028f0:	889b      	ldrh	r3, [r3, #4]
100028f2:	b29b      	uxth	r3, r3
100028f4:	2161      	movs	r1, #97	; 0x61
100028f6:	430b      	orrs	r3, r1
100028f8:	b29b      	uxth	r3, r3
100028fa:	8093      	strh	r3, [r2, #4]
100028fc:	e007      	b.n	1000290e <XMC_FLASH_WriteBlocks+0x5e>
  }
  else
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
100028fe:	4a1a      	ldr	r2, [pc, #104]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
10002900:	4b19      	ldr	r3, [pc, #100]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
10002902:	889b      	ldrh	r3, [r3, #4]
10002904:	b29b      	uxth	r3, r3
10002906:	21a1      	movs	r1, #161	; 0xa1
10002908:	430b      	orrs	r3, r1
1000290a:	b29b      	uxth	r3, r3
1000290c:	8093      	strh	r3, [r2, #4]
  }

  for (block = 0U; block < num_blocks; ++block)
1000290e:	2300      	movs	r3, #0
10002910:	613b      	str	r3, [r7, #16]
10002912:	e01a      	b.n	1000294a <XMC_FLASH_WriteBlocks+0x9a>
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
10002914:	2300      	movs	r3, #0
10002916:	617b      	str	r3, [r7, #20]
10002918:	e00c      	b.n	10002934 <XMC_FLASH_WriteBlocks+0x84>
    {
      *address = *data;
1000291a:	68bb      	ldr	r3, [r7, #8]
1000291c:	681a      	ldr	r2, [r3, #0]
1000291e:	68fb      	ldr	r3, [r7, #12]
10002920:	601a      	str	r2, [r3, #0]
      data++;
10002922:	68bb      	ldr	r3, [r7, #8]
10002924:	3304      	adds	r3, #4
10002926:	60bb      	str	r3, [r7, #8]
      address++;
10002928:	68fb      	ldr	r3, [r7, #12]
1000292a:	3304      	adds	r3, #4
1000292c:	60fb      	str	r3, [r7, #12]
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
  }

  for (block = 0U; block < num_blocks; ++block)
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
1000292e:	697b      	ldr	r3, [r7, #20]
10002930:	3301      	adds	r3, #1
10002932:	617b      	str	r3, [r7, #20]
10002934:	697b      	ldr	r3, [r7, #20]
10002936:	2b03      	cmp	r3, #3
10002938:	d9ef      	bls.n	1000291a <XMC_FLASH_WriteBlocks+0x6a>
      *address = *data;
      data++;
      address++;
    }
      
    while (XMC_FLASH_IsBusy() == true)
1000293a:	46c0      	nop			; (mov r8, r8)
1000293c:	f7ff ff80 	bl	10002840 <XMC_FLASH_IsBusy>
10002940:	1e03      	subs	r3, r0, #0
10002942:	d1fb      	bne.n	1000293c <XMC_FLASH_WriteBlocks+0x8c>
  else
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
  }

  for (block = 0U; block < num_blocks; ++block)
10002944:	693b      	ldr	r3, [r7, #16]
10002946:	3301      	adds	r3, #1
10002948:	613b      	str	r3, [r7, #16]
1000294a:	693a      	ldr	r2, [r7, #16]
1000294c:	687b      	ldr	r3, [r7, #4]
1000294e:	429a      	cmp	r2, r3
10002950:	d3e0      	bcc.n	10002914 <XMC_FLASH_WriteBlocks+0x64>
    {
    }
  }

  /* Stop continuous write operation */
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
10002952:	4a05      	ldr	r2, [pc, #20]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
10002954:	4b04      	ldr	r3, [pc, #16]	; (10002968 <XMC_FLASH_WriteBlocks+0xb8>)
10002956:	889b      	ldrh	r3, [r3, #4]
10002958:	b29b      	uxth	r3, r3
1000295a:	21ff      	movs	r1, #255	; 0xff
1000295c:	438b      	bics	r3, r1
1000295e:	b29b      	uxth	r3, r3
10002960:	8093      	strh	r3, [r2, #4]
}
10002962:	46bd      	mov	sp, r7
10002964:	b006      	add	sp, #24
10002966:	bd80      	pop	{r7, pc}
10002968:	40050000 	.word	0x40050000

1000296c <XMC_FLASH_ErasePages>:

/* Erase flash pages */
void XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages)
{
1000296c:	b580      	push	{r7, lr}
1000296e:	b084      	sub	sp, #16
10002970:	af00      	add	r7, sp, #0
10002972:	6078      	str	r0, [r7, #4]
10002974:	6039      	str	r1, [r7, #0]
  uint32_t page;

  XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
                                                                    ((uint32_t)address & FLASH_PAGE_ADDR_MASK) == 0U)

  for (page = 0U; page < num_pages; ++page)
10002976:	2300      	movs	r3, #0
10002978:	60fb      	str	r3, [r7, #12]
1000297a:	e011      	b.n	100029a0 <XMC_FLASH_ErasePages+0x34>
  {
    (void)XMC1000_NvmErasePage(address);
1000297c:	2380      	movs	r3, #128	; 0x80
1000297e:	005b      	lsls	r3, r3, #1
10002980:	681b      	ldr	r3, [r3, #0]
10002982:	687a      	ldr	r2, [r7, #4]
10002984:	1c10      	adds	r0, r2, #0
10002986:	4798      	blx	r3

    while (XMC_FLASH_IsBusy() == true)
10002988:	46c0      	nop			; (mov r8, r8)
1000298a:	f7ff ff59 	bl	10002840 <XMC_FLASH_IsBusy>
1000298e:	1e03      	subs	r3, r0, #0
10002990:	d1fb      	bne.n	1000298a <XMC_FLASH_ErasePages+0x1e>
    {
    }

    /* Increment the page address for the next erase */
    address += XMC_FLASH_WORDS_PER_PAGE;
10002992:	687b      	ldr	r3, [r7, #4]
10002994:	3301      	adds	r3, #1
10002996:	33ff      	adds	r3, #255	; 0xff
10002998:	607b      	str	r3, [r7, #4]
  uint32_t page;

  XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
                                                                    ((uint32_t)address & FLASH_PAGE_ADDR_MASK) == 0U)

  for (page = 0U; page < num_pages; ++page)
1000299a:	68fb      	ldr	r3, [r7, #12]
1000299c:	3301      	adds	r3, #1
1000299e:	60fb      	str	r3, [r7, #12]
100029a0:	68fa      	ldr	r2, [r7, #12]
100029a2:	683b      	ldr	r3, [r7, #0]
100029a4:	429a      	cmp	r2, r3
100029a6:	d3e9      	bcc.n	1000297c <XMC_FLASH_ErasePages+0x10>
    /* Increment the page address for the next erase */
    address += XMC_FLASH_WORDS_PER_PAGE;

  }

}
100029a8:	46bd      	mov	sp, r7
100029aa:	b004      	add	sp, #16
100029ac:	bd80      	pop	{r7, pc}
100029ae:	46c0      	nop			; (mov r8, r8)

100029b0 <XMC_FLASH_ReadBlocks>:
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
}

/* Read data blocks from flash */
void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks)
{
100029b0:	b580      	push	{r7, lr}
100029b2:	b086      	sub	sp, #24
100029b4:	af00      	add	r7, sp, #0
100029b6:	60f8      	str	r0, [r7, #12]
100029b8:	60b9      	str	r1, [r7, #8]
100029ba:	607a      	str	r2, [r7, #4]
  uint32_t block;

  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
                                                                  ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
100029bc:	2300      	movs	r3, #0
100029be:	613b      	str	r3, [r7, #16]
100029c0:	e015      	b.n	100029ee <XMC_FLASH_ReadBlocks+0x3e>
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
100029c2:	2300      	movs	r3, #0
100029c4:	617b      	str	r3, [r7, #20]
100029c6:	e00c      	b.n	100029e2 <XMC_FLASH_ReadBlocks+0x32>
    {
      *data = *address;
100029c8:	68fb      	ldr	r3, [r7, #12]
100029ca:	681a      	ldr	r2, [r3, #0]
100029cc:	68bb      	ldr	r3, [r7, #8]
100029ce:	601a      	str	r2, [r3, #0]
      data++;
100029d0:	68bb      	ldr	r3, [r7, #8]
100029d2:	3304      	adds	r3, #4
100029d4:	60bb      	str	r3, [r7, #8]
      address++;
100029d6:	68fb      	ldr	r3, [r7, #12]
100029d8:	3304      	adds	r3, #4
100029da:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
                                                                  ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
100029dc:	697b      	ldr	r3, [r7, #20]
100029de:	3301      	adds	r3, #1
100029e0:	617b      	str	r3, [r7, #20]
100029e2:	697b      	ldr	r3, [r7, #20]
100029e4:	2b03      	cmp	r3, #3
100029e6:	d9ef      	bls.n	100029c8 <XMC_FLASH_ReadBlocks+0x18>
  uint32_t block;

  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
                                                                  ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
100029e8:	693b      	ldr	r3, [r7, #16]
100029ea:	3301      	adds	r3, #1
100029ec:	613b      	str	r3, [r7, #16]
100029ee:	693a      	ldr	r2, [r7, #16]
100029f0:	687b      	ldr	r3, [r7, #4]
100029f2:	429a      	cmp	r2, r3
100029f4:	d3e5      	bcc.n	100029c2 <XMC_FLASH_ReadBlocks+0x12>
      *data = *address;
      data++;
      address++;
    }
  }
}
100029f6:	46bd      	mov	sp, r7
100029f8:	b006      	add	sp, #24
100029fa:	bd80      	pop	{r7, pc}

100029fc <XMC_FLASH_ProgramPage>:
  XMC_FLASH_ErasePages(address, XMC_FLASH_PAGES_PER_SECTOR);
}

/* Program single page */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
100029fc:	b580      	push	{r7, lr}
100029fe:	b082      	sub	sp, #8
10002a00:	af00      	add	r7, sp, #0
10002a02:	6078      	str	r0, [r7, #4]
10002a04:	6039      	str	r1, [r7, #0]
  XMC_FLASH_ProgramVerifyPage(address, data);
10002a06:	687a      	ldr	r2, [r7, #4]
10002a08:	683b      	ldr	r3, [r7, #0]
10002a0a:	1c10      	adds	r0, r2, #0
10002a0c:	1c19      	adds	r1, r3, #0
10002a0e:	f7ff ff3f 	bl	10002890 <XMC_FLASH_ProgramVerifyPage>
}
10002a12:	46bd      	mov	sp, r7
10002a14:	b002      	add	sp, #8
10002a16:	bd80      	pop	{r7, pc}

10002a18 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10002a18:	b590      	push	{r4, r7, lr}
10002a1a:	b085      	sub	sp, #20
10002a1c:	af00      	add	r7, sp, #0
10002a1e:	60f8      	str	r0, [r7, #12]
10002a20:	607a      	str	r2, [r7, #4]
10002a22:	230b      	movs	r3, #11
10002a24:	18fb      	adds	r3, r7, r3
10002a26:	1c0a      	adds	r2, r1, #0
10002a28:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10002a2a:	230b      	movs	r3, #11
10002a2c:	18fb      	adds	r3, r7, r3
10002a2e:	781b      	ldrb	r3, [r3, #0]
10002a30:	089b      	lsrs	r3, r3, #2
10002a32:	b2db      	uxtb	r3, r3
10002a34:	1c18      	adds	r0, r3, #0
10002a36:	230b      	movs	r3, #11
10002a38:	18fb      	adds	r3, r7, r3
10002a3a:	781b      	ldrb	r3, [r3, #0]
10002a3c:	089b      	lsrs	r3, r3, #2
10002a3e:	b2db      	uxtb	r3, r3
10002a40:	1c1a      	adds	r2, r3, #0
10002a42:	68fb      	ldr	r3, [r7, #12]
10002a44:	3204      	adds	r2, #4
10002a46:	0092      	lsls	r2, r2, #2
10002a48:	58d3      	ldr	r3, [r2, r3]
10002a4a:	220b      	movs	r2, #11
10002a4c:	18ba      	adds	r2, r7, r2
10002a4e:	7812      	ldrb	r2, [r2, #0]
10002a50:	2103      	movs	r1, #3
10002a52:	400a      	ands	r2, r1
10002a54:	00d2      	lsls	r2, r2, #3
10002a56:	1c11      	adds	r1, r2, #0
10002a58:	22f8      	movs	r2, #248	; 0xf8
10002a5a:	408a      	lsls	r2, r1
10002a5c:	43d2      	mvns	r2, r2
10002a5e:	401a      	ands	r2, r3
10002a60:	1c11      	adds	r1, r2, #0
10002a62:	68fb      	ldr	r3, [r7, #12]
10002a64:	1d02      	adds	r2, r0, #4
10002a66:	0092      	lsls	r2, r2, #2
10002a68:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10002a6a:	68fb      	ldr	r3, [r7, #12]
10002a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002a6e:	220b      	movs	r2, #11
10002a70:	18ba      	adds	r2, r7, r2
10002a72:	7812      	ldrb	r2, [r2, #0]
10002a74:	0052      	lsls	r2, r2, #1
10002a76:	1c11      	adds	r1, r2, #0
10002a78:	2203      	movs	r2, #3
10002a7a:	408a      	lsls	r2, r1
10002a7c:	43d2      	mvns	r2, r2
10002a7e:	401a      	ands	r2, r3
10002a80:	68fb      	ldr	r3, [r7, #12]
10002a82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10002a84:	230b      	movs	r3, #11
10002a86:	18fb      	adds	r3, r7, r3
10002a88:	781b      	ldrb	r3, [r3, #0]
10002a8a:	08db      	lsrs	r3, r3, #3
10002a8c:	b2db      	uxtb	r3, r3
10002a8e:	1c18      	adds	r0, r3, #0
10002a90:	230b      	movs	r3, #11
10002a92:	18fb      	adds	r3, r7, r3
10002a94:	781b      	ldrb	r3, [r3, #0]
10002a96:	08db      	lsrs	r3, r3, #3
10002a98:	b2db      	uxtb	r3, r3
10002a9a:	1c1a      	adds	r2, r3, #0
10002a9c:	68fb      	ldr	r3, [r7, #12]
10002a9e:	3210      	adds	r2, #16
10002aa0:	0092      	lsls	r2, r2, #2
10002aa2:	58d3      	ldr	r3, [r2, r3]
10002aa4:	220b      	movs	r2, #11
10002aa6:	18ba      	adds	r2, r7, r2
10002aa8:	7812      	ldrb	r2, [r2, #0]
10002aaa:	2107      	movs	r1, #7
10002aac:	400a      	ands	r2, r1
10002aae:	0092      	lsls	r2, r2, #2
10002ab0:	1c11      	adds	r1, r2, #0
10002ab2:	2204      	movs	r2, #4
10002ab4:	408a      	lsls	r2, r1
10002ab6:	43d2      	mvns	r2, r2
10002ab8:	401a      	ands	r2, r3
10002aba:	1c11      	adds	r1, r2, #0
10002abc:	68fb      	ldr	r3, [r7, #12]
10002abe:	1c02      	adds	r2, r0, #0
10002ac0:	3210      	adds	r2, #16
10002ac2:	0092      	lsls	r2, r2, #2
10002ac4:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10002ac6:	230b      	movs	r3, #11
10002ac8:	18fb      	adds	r3, r7, r3
10002aca:	781b      	ldrb	r3, [r3, #0]
10002acc:	08db      	lsrs	r3, r3, #3
10002ace:	b2db      	uxtb	r3, r3
10002ad0:	1c18      	adds	r0, r3, #0
10002ad2:	230b      	movs	r3, #11
10002ad4:	18fb      	adds	r3, r7, r3
10002ad6:	781b      	ldrb	r3, [r3, #0]
10002ad8:	08db      	lsrs	r3, r3, #3
10002ada:	b2db      	uxtb	r3, r3
10002adc:	1c1a      	adds	r2, r3, #0
10002ade:	68fb      	ldr	r3, [r7, #12]
10002ae0:	3210      	adds	r2, #16
10002ae2:	0092      	lsls	r2, r2, #2
10002ae4:	58d2      	ldr	r2, [r2, r3]
10002ae6:	687b      	ldr	r3, [r7, #4]
10002ae8:	785b      	ldrb	r3, [r3, #1]
10002aea:	1c1c      	adds	r4, r3, #0
10002aec:	230b      	movs	r3, #11
10002aee:	18fb      	adds	r3, r7, r3
10002af0:	781b      	ldrb	r3, [r3, #0]
10002af2:	2107      	movs	r1, #7
10002af4:	400b      	ands	r3, r1
10002af6:	009b      	lsls	r3, r3, #2
10002af8:	409c      	lsls	r4, r3
10002afa:	1c23      	adds	r3, r4, #0
10002afc:	431a      	orrs	r2, r3
10002afe:	1c11      	adds	r1, r2, #0
10002b00:	68fb      	ldr	r3, [r7, #12]
10002b02:	1c02      	adds	r2, r0, #0
10002b04:	3210      	adds	r2, #16
10002b06:	0092      	lsls	r2, r2, #2
10002b08:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10002b0a:	68fb      	ldr	r3, [r7, #12]
10002b0c:	4a1d      	ldr	r2, [pc, #116]	; (10002b84 <XMC_GPIO_Init+0x16c>)
10002b0e:	4293      	cmp	r3, r2
10002b10:	d10b      	bne.n	10002b2a <XMC_GPIO_Init+0x112>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10002b12:	68fb      	ldr	r3, [r7, #12]
10002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10002b16:	220b      	movs	r2, #11
10002b18:	18ba      	adds	r2, r7, r2
10002b1a:	7812      	ldrb	r2, [r2, #0]
10002b1c:	2101      	movs	r1, #1
10002b1e:	4091      	lsls	r1, r2
10002b20:	1c0a      	adds	r2, r1, #0
10002b22:	43d2      	mvns	r2, r2
10002b24:	401a      	ands	r2, r3
10002b26:	68fb      	ldr	r3, [r7, #12]
10002b28:	661a      	str	r2, [r3, #96]	; 0x60
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
10002b2a:	687b      	ldr	r3, [r7, #4]
10002b2c:	685a      	ldr	r2, [r3, #4]
10002b2e:	230b      	movs	r3, #11
10002b30:	18fb      	adds	r3, r7, r3
10002b32:	781b      	ldrb	r3, [r3, #0]
10002b34:	409a      	lsls	r2, r3
10002b36:	68fb      	ldr	r3, [r7, #12]
10002b38:	605a      	str	r2, [r3, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10002b3a:	230b      	movs	r3, #11
10002b3c:	18fb      	adds	r3, r7, r3
10002b3e:	781b      	ldrb	r3, [r3, #0]
10002b40:	089b      	lsrs	r3, r3, #2
10002b42:	b2db      	uxtb	r3, r3
10002b44:	1c18      	adds	r0, r3, #0
10002b46:	230b      	movs	r3, #11
10002b48:	18fb      	adds	r3, r7, r3
10002b4a:	781b      	ldrb	r3, [r3, #0]
10002b4c:	089b      	lsrs	r3, r3, #2
10002b4e:	b2db      	uxtb	r3, r3
10002b50:	1c1a      	adds	r2, r3, #0
10002b52:	68fb      	ldr	r3, [r7, #12]
10002b54:	3204      	adds	r2, #4
10002b56:	0092      	lsls	r2, r2, #2
10002b58:	58d2      	ldr	r2, [r2, r3]
10002b5a:	687b      	ldr	r3, [r7, #4]
10002b5c:	781b      	ldrb	r3, [r3, #0]
10002b5e:	1c1c      	adds	r4, r3, #0
10002b60:	230b      	movs	r3, #11
10002b62:	18fb      	adds	r3, r7, r3
10002b64:	781b      	ldrb	r3, [r3, #0]
10002b66:	2103      	movs	r1, #3
10002b68:	400b      	ands	r3, r1
10002b6a:	00db      	lsls	r3, r3, #3
10002b6c:	409c      	lsls	r4, r3
10002b6e:	1c23      	adds	r3, r4, #0
10002b70:	431a      	orrs	r2, r3
10002b72:	1c11      	adds	r1, r2, #0
10002b74:	68fb      	ldr	r3, [r7, #12]
10002b76:	1d02      	adds	r2, r0, #4
10002b78:	0092      	lsls	r2, r2, #2
10002b7a:	50d1      	str	r1, [r2, r3]
}
10002b7c:	46bd      	mov	sp, r7
10002b7e:	b005      	add	sp, #20
10002b80:	bd90      	pop	{r4, r7, pc}
10002b82:	46c0      	nop			; (mov r8, r8)
10002b84:	40040200 	.word	0x40040200

10002b88 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10002b88:	b580      	push	{r7, lr}
10002b8a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10002b8c:	4b02      	ldr	r3, [pc, #8]	; (10002b98 <XMC_SCU_LockProtectedBits+0x10>)
10002b8e:	22c3      	movs	r2, #195	; 0xc3
10002b90:	625a      	str	r2, [r3, #36]	; 0x24
}
10002b92:	46bd      	mov	sp, r7
10002b94:	bd80      	pop	{r7, pc}
10002b96:	46c0      	nop			; (mov r8, r8)
10002b98:	40010000 	.word	0x40010000

10002b9c <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10002b9c:	b580      	push	{r7, lr}
10002b9e:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10002ba0:	4b05      	ldr	r3, [pc, #20]	; (10002bb8 <XMC_SCU_UnlockProtectedBits+0x1c>)
10002ba2:	22c0      	movs	r2, #192	; 0xc0
10002ba4:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10002ba6:	46c0      	nop			; (mov r8, r8)
10002ba8:	4b03      	ldr	r3, [pc, #12]	; (10002bb8 <XMC_SCU_UnlockProtectedBits+0x1c>)
10002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002bac:	2204      	movs	r2, #4
10002bae:	4013      	ands	r3, r2
10002bb0:	d1fa      	bne.n	10002ba8 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
10002bb2:	46bd      	mov	sp, r7
10002bb4:	bd80      	pop	{r7, pc}
10002bb6:	46c0      	nop			; (mov r8, r8)
10002bb8:	40010000 	.word	0x40010000

10002bbc <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10002bbc:	b580      	push	{r7, lr}
10002bbe:	b082      	sub	sp, #8
10002bc0:	af00      	add	r7, sp, #0
10002bc2:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10002bc4:	f7ff ffea 	bl	10002b9c <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10002bc8:	4a0c      	ldr	r2, [pc, #48]	; (10002bfc <XMC_SCU_CLOCK_Init+0x40>)
10002bca:	4b0c      	ldr	r3, [pc, #48]	; (10002bfc <XMC_SCU_CLOCK_Init+0x40>)
10002bcc:	681b      	ldr	r3, [r3, #0]
10002bce:	490c      	ldr	r1, [pc, #48]	; (10002c00 <XMC_SCU_CLOCK_Init+0x44>)
10002bd0:	4019      	ands	r1, r3
                   config->rtc_src |
10002bd2:	687b      	ldr	r3, [r7, #4]
10002bd4:	689b      	ldr	r3, [r3, #8]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10002bd6:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10002bd8:	687b      	ldr	r3, [r7, #4]
10002bda:	685b      	ldr	r3, [r3, #4]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10002bdc:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10002bde:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
10002be0:	f7ff ffd2 	bl	10002b88 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
10002be4:	687b      	ldr	r3, [r7, #4]
10002be6:	785b      	ldrb	r3, [r3, #1]
10002be8:	1c1a      	adds	r2, r3, #0
10002bea:	687b      	ldr	r3, [r7, #4]
10002bec:	781b      	ldrb	r3, [r3, #0]
10002bee:	1c10      	adds	r0, r2, #0
10002bf0:	1c19      	adds	r1, r3, #0
10002bf2:	f000 f839 	bl	10002c68 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10002bf6:	46bd      	mov	sp, r7
10002bf8:	b002      	add	sp, #8
10002bfa:	bd80      	pop	{r7, pc}
10002bfc:	40010300 	.word	0x40010300
10002c00:	fff0ffff 	.word	0xfff0ffff

10002c04 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10002c04:	b580      	push	{r7, lr}
10002c06:	b082      	sub	sp, #8
10002c08:	af00      	add	r7, sp, #0
10002c0a:	1c02      	adds	r2, r0, #0
10002c0c:	1dbb      	adds	r3, r7, #6
10002c0e:	801a      	strh	r2, [r3, #0]
  XMC_SCU_UnlockProtectedBits();
10002c10:	f7ff ffc4 	bl	10002b9c <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10002c14:	4b09      	ldr	r3, [pc, #36]	; (10002c3c <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10002c16:	4a09      	ldr	r2, [pc, #36]	; (10002c3c <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10002c18:	6911      	ldr	r1, [r2, #16]
10002c1a:	1dba      	adds	r2, r7, #6
10002c1c:	8812      	ldrh	r2, [r2, #0]
10002c1e:	430a      	orrs	r2, r1
10002c20:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10002c22:	46c0      	nop			; (mov r8, r8)
10002c24:	4b05      	ldr	r3, [pc, #20]	; (10002c3c <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10002c26:	681a      	ldr	r2, [r3, #0]
10002c28:	2380      	movs	r3, #128	; 0x80
10002c2a:	05db      	lsls	r3, r3, #23
10002c2c:	4013      	ands	r3, r2
10002c2e:	d1f9      	bne.n	10002c24 <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
10002c30:	f7ff ffaa 	bl	10002b88 <XMC_SCU_LockProtectedBits>
}
10002c34:	46bd      	mov	sp, r7
10002c36:	b002      	add	sp, #8
10002c38:	bd80      	pop	{r7, pc}
10002c3a:	46c0      	nop			; (mov r8, r8)
10002c3c:	40010300 	.word	0x40010300

10002c40 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10002c40:	b580      	push	{r7, lr}
10002c42:	b082      	sub	sp, #8
10002c44:	af00      	add	r7, sp, #0
10002c46:	1c02      	adds	r2, r0, #0
10002c48:	1dbb      	adds	r3, r7, #6
10002c4a:	801a      	strh	r2, [r3, #0]
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
10002c4c:	4b05      	ldr	r3, [pc, #20]	; (10002c64 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x24>)
10002c4e:	689b      	ldr	r3, [r3, #8]
10002c50:	1dba      	adds	r2, r7, #6
10002c52:	8812      	ldrh	r2, [r2, #0]
10002c54:	4013      	ands	r3, r2
10002c56:	1e5a      	subs	r2, r3, #1
10002c58:	4193      	sbcs	r3, r2
10002c5a:	b2db      	uxtb	r3, r3
}
10002c5c:	1c18      	adds	r0, r3, #0
10002c5e:	46bd      	mov	sp, r7
10002c60:	b002      	add	sp, #8
10002c62:	bd80      	pop	{r7, pc}
10002c64:	40010300 	.word	0x40010300

10002c68 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10002c68:	b580      	push	{r7, lr}
10002c6a:	b084      	sub	sp, #16
10002c6c:	af00      	add	r7, sp, #0
10002c6e:	6078      	str	r0, [r7, #4]
10002c70:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10002c72:	f7ff ff93 	bl	10002b9c <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10002c76:	4b21      	ldr	r3, [pc, #132]	; (10002cfc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10002c78:	681a      	ldr	r2, [r3, #0]
10002c7a:	23ff      	movs	r3, #255	; 0xff
10002c7c:	021b      	lsls	r3, r3, #8
10002c7e:	4013      	ands	r3, r2
10002c80:	0a1b      	lsrs	r3, r3, #8
10002c82:	60fb      	str	r3, [r7, #12]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002c84:	4b1d      	ldr	r3, [pc, #116]	; (10002cfc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10002c86:	4a1d      	ldr	r2, [pc, #116]	; (10002cfc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10002c88:	6812      	ldr	r2, [r2, #0]
10002c8a:	491d      	ldr	r1, [pc, #116]	; (10002d00 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)
10002c8c:	4011      	ands	r1, r2
10002c8e:	683a      	ldr	r2, [r7, #0]
10002c90:	430a      	orrs	r2, r1
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
10002c92:	491c      	ldr	r1, [pc, #112]	; (10002d04 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
10002c94:	430a      	orrs	r2, r1

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002c96:	601a      	str	r2, [r3, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10002c98:	46c0      	nop			; (mov r8, r8)
10002c9a:	4b18      	ldr	r3, [pc, #96]	; (10002cfc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10002c9c:	681a      	ldr	r2, [r3, #0]
10002c9e:	2380      	movs	r3, #128	; 0x80
10002ca0:	05db      	lsls	r3, r3, #23
10002ca2:	4013      	ands	r3, r2
10002ca4:	d1f9      	bne.n	10002c9a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x32>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
10002ca6:	68fa      	ldr	r2, [r7, #12]
10002ca8:	687b      	ldr	r3, [r7, #4]
10002caa:	429a      	cmp	r2, r3
10002cac:	d806      	bhi.n	10002cbc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x54>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10002cae:	68fa      	ldr	r2, [r7, #12]
10002cb0:	687b      	ldr	r3, [r7, #4]
10002cb2:	1c10      	adds	r0, r2, #0
10002cb4:	1c19      	adds	r1, r3, #0
10002cb6:	f000 f853 	bl	10002d60 <XMC_SCU_CLOCK_lFrequencyDownScaling>
10002cba:	e005      	b.n	10002cc8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10002cbc:	68fa      	ldr	r2, [r7, #12]
10002cbe:	687b      	ldr	r3, [r7, #4]
10002cc0:	1c10      	adds	r0, r2, #0
10002cc2:	1c19      	adds	r1, r3, #0
10002cc4:	f000 f822 	bl	10002d0c <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002cc8:	4b0c      	ldr	r3, [pc, #48]	; (10002cfc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10002cca:	4a0c      	ldr	r2, [pc, #48]	; (10002cfc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10002ccc:	6812      	ldr	r2, [r2, #0]
10002cce:	490e      	ldr	r1, [pc, #56]	; (10002d08 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
10002cd0:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10002cd2:	687a      	ldr	r2, [r7, #4]
10002cd4:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002cd6:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10002cd8:	490a      	ldr	r1, [pc, #40]	; (10002d04 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
10002cda:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002cdc:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10002cde:	46c0      	nop			; (mov r8, r8)
10002ce0:	4b06      	ldr	r3, [pc, #24]	; (10002cfc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10002ce2:	681a      	ldr	r2, [r3, #0]
10002ce4:	2380      	movs	r3, #128	; 0x80
10002ce6:	05db      	lsls	r3, r3, #23
10002ce8:	4013      	ands	r3, r2
10002cea:	d1f9      	bne.n	10002ce0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10002cec:	f7ff ff4c 	bl	10002b88 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10002cf0:	f7ff fd72 	bl	100027d8 <SystemCoreClockUpdate>

}
10002cf4:	46bd      	mov	sp, r7
10002cf6:	b004      	add	sp, #16
10002cf8:	bd80      	pop	{r7, pc}
10002cfa:	46c0      	nop			; (mov r8, r8)
10002cfc:	40010300 	.word	0x40010300
10002d00:	c00fff00 	.word	0xc00fff00
10002d04:	3ff00000 	.word	0x3ff00000
10002d08:	c00f00ff 	.word	0xc00f00ff

10002d0c <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10002d0c:	b580      	push	{r7, lr}
10002d0e:	b082      	sub	sp, #8
10002d10:	af00      	add	r7, sp, #0
10002d12:	6078      	str	r0, [r7, #4]
10002d14:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
10002d16:	e014      	b.n	10002d42 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
10002d18:	687b      	ldr	r3, [r7, #4]
10002d1a:	089b      	lsrs	r3, r3, #2
10002d1c:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002d1e:	4b0d      	ldr	r3, [pc, #52]	; (10002d54 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10002d20:	4a0c      	ldr	r2, [pc, #48]	; (10002d54 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10002d22:	6812      	ldr	r2, [r2, #0]
10002d24:	490c      	ldr	r1, [pc, #48]	; (10002d58 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
10002d26:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10002d28:	687a      	ldr	r2, [r7, #4]
10002d2a:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002d2c:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10002d2e:	490b      	ldr	r1, [pc, #44]	; (10002d5c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10002d30:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002d32:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10002d34:	46c0      	nop			; (mov r8, r8)
10002d36:	4b07      	ldr	r3, [pc, #28]	; (10002d54 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10002d38:	681a      	ldr	r2, [r3, #0]
10002d3a:	2380      	movs	r3, #128	; 0x80
10002d3c:	05db      	lsls	r3, r3, #23
10002d3e:	4013      	ands	r3, r2
10002d40:	d1f9      	bne.n	10002d36 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10002d42:	683b      	ldr	r3, [r7, #0]
10002d44:	009a      	lsls	r2, r3, #2
10002d46:	687b      	ldr	r3, [r7, #4]
10002d48:	429a      	cmp	r2, r3
10002d4a:	d3e5      	bcc.n	10002d18 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
10002d4c:	46bd      	mov	sp, r7
10002d4e:	b002      	add	sp, #8
10002d50:	bd80      	pop	{r7, pc}
10002d52:	46c0      	nop			; (mov r8, r8)
10002d54:	40010300 	.word	0x40010300
10002d58:	c00f00ff 	.word	0xc00f00ff
10002d5c:	3ff00000 	.word	0x3ff00000

10002d60 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10002d60:	b580      	push	{r7, lr}
10002d62:	b082      	sub	sp, #8
10002d64:	af00      	add	r7, sp, #0
10002d66:	6078      	str	r0, [r7, #4]
10002d68:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
10002d6a:	e019      	b.n	10002da0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if(0U == curr_idiv)
10002d6c:	687b      	ldr	r3, [r7, #4]
10002d6e:	2b00      	cmp	r3, #0
10002d70:	d101      	bne.n	10002d76 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
10002d72:	2301      	movs	r3, #1
10002d74:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
10002d76:	687b      	ldr	r3, [r7, #4]
10002d78:	009b      	lsls	r3, r3, #2
10002d7a:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002d7c:	4b0c      	ldr	r3, [pc, #48]	; (10002db0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10002d7e:	4a0c      	ldr	r2, [pc, #48]	; (10002db0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10002d80:	6812      	ldr	r2, [r2, #0]
10002d82:	490c      	ldr	r1, [pc, #48]	; (10002db4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10002d84:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10002d86:	687a      	ldr	r2, [r7, #4]
10002d88:	0212      	lsls	r2, r2, #8
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002d8a:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10002d8c:	490a      	ldr	r1, [pc, #40]	; (10002db8 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10002d8e:	430a      	orrs	r2, r1
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10002d90:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10002d92:	46c0      	nop			; (mov r8, r8)
10002d94:	4b06      	ldr	r3, [pc, #24]	; (10002db0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10002d96:	681a      	ldr	r2, [r3, #0]
10002d98:	2380      	movs	r3, #128	; 0x80
10002d9a:	05db      	lsls	r3, r3, #23
10002d9c:	4013      	ands	r3, r2
10002d9e:	d1f9      	bne.n	10002d94 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10002da0:	687b      	ldr	r3, [r7, #4]
10002da2:	009a      	lsls	r2, r3, #2
10002da4:	683b      	ldr	r3, [r7, #0]
10002da6:	429a      	cmp	r2, r3
10002da8:	d3e0      	bcc.n	10002d6c <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
10002daa:	46bd      	mov	sp, r7
10002dac:	b002      	add	sp, #8
10002dae:	bd80      	pop	{r7, pc}
10002db0:	40010300 	.word	0x40010300
10002db4:	c00f00ff 	.word	0xc00f00ff
10002db8:	3ff00000 	.word	0x3ff00000

10002dbc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10002dbc:	b580      	push	{r7, lr}
10002dbe:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10002dc0:	4b02      	ldr	r3, [pc, #8]	; (10002dcc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10002dc2:	681b      	ldr	r3, [r3, #0]
}
10002dc4:	1c18      	adds	r0, r3, #0
10002dc6:	46bd      	mov	sp, r7
10002dc8:	bd80      	pop	{r7, pc}
10002dca:	46c0      	nop			; (mov r8, r8)
10002dcc:	20003ffc 	.word	0x20003ffc

10002dd0 <XMC_BCCU_GlobalInit>:

/*
 * API to initialise the global resources of a BCCU module
 */
void XMC_BCCU_GlobalInit(XMC_BCCU_t *const bccu, const XMC_BCCU_GLOBAL_CONFIG_t *const config)
{
10002dd0:	b580      	push	{r7, lr}
10002dd2:	b082      	sub	sp, #8
10002dd4:	af00      	add	r7, sp, #0
10002dd6:	6078      	str	r0, [r7, #4]
10002dd8:	6039      	str	r1, [r7, #0]
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_BCCU0);
10002dda:	2010      	movs	r0, #16
10002ddc:	f7ff ff12 	bl	10002c04 <XMC_SCU_CLOCK_UngatePeripheralClock>

  bccu->GLOBCON = config->globcon;
10002de0:	683b      	ldr	r3, [r7, #0]
10002de2:	681a      	ldr	r2, [r3, #0]
10002de4:	687b      	ldr	r3, [r7, #4]
10002de6:	601a      	str	r2, [r3, #0]
  
  bccu->GLOBCLK = config->globclk;
10002de8:	683b      	ldr	r3, [r7, #0]
10002dea:	685a      	ldr	r2, [r3, #4]
10002dec:	687b      	ldr	r3, [r7, #4]
10002dee:	605a      	str	r2, [r3, #4]
  bccu->GLOBDIM = config->global_dimlevel;  
10002df0:	683b      	ldr	r3, [r7, #0]
10002df2:	689a      	ldr	r2, [r3, #8]
10002df4:	687b      	ldr	r3, [r7, #4]
10002df6:	629a      	str	r2, [r3, #40]	; 0x28

}
10002df8:	46bd      	mov	sp, r7
10002dfa:	b002      	add	sp, #8
10002dfc:	bd80      	pop	{r7, pc}
10002dfe:	46c0      	nop			; (mov r8, r8)

10002e00 <XMC_BCCU_SelectTrapInput>:

/*
 * API to configure the trap input selection of a BCCU module
 */
void XMC_BCCU_SelectTrapInput (XMC_BCCU_t *const bccu, XMC_BCCU_CH_TRAP_IN_t input)
{
10002e00:	b580      	push	{r7, lr}
10002e02:	b082      	sub	sp, #8
10002e04:	af00      	add	r7, sp, #0
10002e06:	6078      	str	r0, [r7, #4]
10002e08:	1c0a      	adds	r2, r1, #0
10002e0a:	1cfb      	adds	r3, r7, #3
10002e0c:	701a      	strb	r2, [r3, #0]
  bccu->GLOBCON &= ~(uint32_t)(BCCU_GLOBCON_TRAPIS_Msk);
10002e0e:	687b      	ldr	r3, [r7, #4]
10002e10:	681b      	ldr	r3, [r3, #0]
10002e12:	4a07      	ldr	r2, [pc, #28]	; (10002e30 <XMC_BCCU_SelectTrapInput+0x30>)
10002e14:	401a      	ands	r2, r3
10002e16:	687b      	ldr	r3, [r7, #4]
10002e18:	601a      	str	r2, [r3, #0]
  bccu->GLOBCON |= ((uint32_t)input << BCCU_GLOBCON_TRAPIS_Pos);
10002e1a:	687b      	ldr	r3, [r7, #4]
10002e1c:	681a      	ldr	r2, [r3, #0]
10002e1e:	1cfb      	adds	r3, r7, #3
10002e20:	781b      	ldrb	r3, [r3, #0]
10002e22:	019b      	lsls	r3, r3, #6
10002e24:	431a      	orrs	r2, r3
10002e26:	687b      	ldr	r3, [r7, #4]
10002e28:	601a      	str	r2, [r3, #0]
}
10002e2a:	46bd      	mov	sp, r7
10002e2c:	b002      	add	sp, #8
10002e2e:	bd80      	pop	{r7, pc}
10002e30:	fffffc3f 	.word	0xfffffc3f

10002e34 <XMC_BCCU_SetTrapEdge>:

/*
 * API to configure the trap edge selection of a BCCU module
 */
void XMC_BCCU_SetTrapEdge (XMC_BCCU_t *const bccu, XMC_BCCU_CH_TRAP_EDGE_t edge)
{
10002e34:	b580      	push	{r7, lr}
10002e36:	b082      	sub	sp, #8
10002e38:	af00      	add	r7, sp, #0
10002e3a:	6078      	str	r0, [r7, #4]
10002e3c:	1c0a      	adds	r2, r1, #0
10002e3e:	1cfb      	adds	r3, r7, #3
10002e40:	701a      	strb	r2, [r3, #0]
  bccu->GLOBCON &= ~(uint32_t)(BCCU_GLOBCON_TRAPED_Msk);
10002e42:	687b      	ldr	r3, [r7, #4]
10002e44:	681b      	ldr	r3, [r3, #0]
10002e46:	4a07      	ldr	r2, [pc, #28]	; (10002e64 <XMC_BCCU_SetTrapEdge+0x30>)
10002e48:	401a      	ands	r2, r3
10002e4a:	687b      	ldr	r3, [r7, #4]
10002e4c:	601a      	str	r2, [r3, #0]
  bccu->GLOBCON |= ((uint32_t)edge << BCCU_GLOBCON_TRAPED_Pos);
10002e4e:	687b      	ldr	r3, [r7, #4]
10002e50:	681a      	ldr	r2, [r3, #0]
10002e52:	1cfb      	adds	r3, r7, #3
10002e54:	781b      	ldrb	r3, [r3, #0]
10002e56:	029b      	lsls	r3, r3, #10
10002e58:	431a      	orrs	r2, r3
10002e5a:	687b      	ldr	r3, [r7, #4]
10002e5c:	601a      	str	r2, [r3, #0]
}
10002e5e:	46bd      	mov	sp, r7
10002e60:	b002      	add	sp, #8
10002e62:	bd80      	pop	{r7, pc}
10002e64:	fffffbff 	.word	0xfffffbff

10002e68 <XMC_BCCU_SetDimClockPrescaler>:

/*
 * API to configure the dimmer clock prescaler factor of a BCCU module
 */
void XMC_BCCU_SetDimClockPrescaler (XMC_BCCU_t *const bccu, uint32_t div)
{
10002e68:	b580      	push	{r7, lr}
10002e6a:	b082      	sub	sp, #8
10002e6c:	af00      	add	r7, sp, #0
10002e6e:	6078      	str	r0, [r7, #4]
10002e70:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_BCCU_SetDimClockPrescaler: Invalid divider value", (div <= BCCU_GLOBCLK_DCLK_PS_Msk));

  bccu->GLOBCLK &= ~(uint32_t)(BCCU_GLOBCLK_DCLK_PS_Msk);
10002e72:	687b      	ldr	r3, [r7, #4]
10002e74:	685b      	ldr	r3, [r3, #4]
10002e76:	4a07      	ldr	r2, [pc, #28]	; (10002e94 <XMC_BCCU_SetDimClockPrescaler+0x2c>)
10002e78:	401a      	ands	r2, r3
10002e7a:	687b      	ldr	r3, [r7, #4]
10002e7c:	605a      	str	r2, [r3, #4]
  bccu->GLOBCLK |= (uint32_t)(div << BCCU_GLOBCLK_DCLK_PS_Pos);
10002e7e:	687b      	ldr	r3, [r7, #4]
10002e80:	685a      	ldr	r2, [r3, #4]
10002e82:	683b      	ldr	r3, [r7, #0]
10002e84:	041b      	lsls	r3, r3, #16
10002e86:	431a      	orrs	r2, r3
10002e88:	687b      	ldr	r3, [r7, #4]
10002e8a:	605a      	str	r2, [r3, #4]
  
}
10002e8c:	46bd      	mov	sp, r7
10002e8e:	b002      	add	sp, #8
10002e90:	bd80      	pop	{r7, pc}
10002e92:	46c0      	nop			; (mov r8, r8)
10002e94:	f000ffff 	.word	0xf000ffff

10002e98 <XMC_BCCU_ConcurrentStartLinearWalk>:

/*
 * API to start the linear walk of the channels to change towards target intensity at the same time
 */
void XMC_BCCU_ConcurrentStartLinearWalk (XMC_BCCU_t *const bccu, uint32_t mask)
{
10002e98:	b580      	push	{r7, lr}
10002e9a:	b082      	sub	sp, #8
10002e9c:	af00      	add	r7, sp, #0
10002e9e:	6078      	str	r0, [r7, #4]
10002ea0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_BCCU_ConcurrentStartLinearWalk: Invalid channel mask", (mask <= XMC_BCCU_CHANNEL_MASK));

  bccu->CHSTRCON |= (uint32_t)(mask);
10002ea2:	687b      	ldr	r3, [r7, #4]
10002ea4:	699a      	ldr	r2, [r3, #24]
10002ea6:	683b      	ldr	r3, [r7, #0]
10002ea8:	431a      	orrs	r2, r3
10002eaa:	687b      	ldr	r3, [r7, #4]
10002eac:	619a      	str	r2, [r3, #24]
}
10002eae:	46bd      	mov	sp, r7
10002eb0:	b002      	add	sp, #8
10002eb2:	bd80      	pop	{r7, pc}

10002eb4 <XMC_BCCU_EnableChannel>:

/*
 * API to enable a specific channel
 */
void XMC_BCCU_EnableChannel (XMC_BCCU_t *const bccu, uint32_t chan_no)
{
10002eb4:	b580      	push	{r7, lr}
10002eb6:	b082      	sub	sp, #8
10002eb8:	af00      	add	r7, sp, #0
10002eba:	6078      	str	r0, [r7, #4]
10002ebc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_BCCU_EnableChannel: Invalid channel number", (chan_no <= (XMC_BCCU_NO_OF_CHANNELS-1)));

  bccu->CHEN |= (uint32_t)(BCCU_CHEN_ECH0_Msk << chan_no);
10002ebe:	687b      	ldr	r3, [r7, #4]
10002ec0:	68da      	ldr	r2, [r3, #12]
10002ec2:	683b      	ldr	r3, [r7, #0]
10002ec4:	2101      	movs	r1, #1
10002ec6:	4099      	lsls	r1, r3
10002ec8:	1c0b      	adds	r3, r1, #0
10002eca:	431a      	orrs	r2, r3
10002ecc:	687b      	ldr	r3, [r7, #4]
10002ece:	60da      	str	r2, [r3, #12]
}
10002ed0:	46bd      	mov	sp, r7
10002ed2:	b002      	add	sp, #8
10002ed4:	bd80      	pop	{r7, pc}
10002ed6:	46c0      	nop			; (mov r8, r8)

10002ed8 <XMC_BCCU_SetOutputPassiveLevel>:

/*
 * API to set the specific channel's passive level
 */
void XMC_BCCU_SetOutputPassiveLevel(XMC_BCCU_t *const bccu, uint32_t chan_no, XMC_BCCU_CH_ACTIVE_LEVEL_t level)
{
10002ed8:	b580      	push	{r7, lr}
10002eda:	b084      	sub	sp, #16
10002edc:	af00      	add	r7, sp, #0
10002ede:	60f8      	str	r0, [r7, #12]
10002ee0:	60b9      	str	r1, [r7, #8]
10002ee2:	1dfb      	adds	r3, r7, #7
10002ee4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_BCCU_SetOutputPassiveLevel: Invalid channel number", (chan_no <= (XMC_BCCU_NO_OF_CHANNELS-1)));

  bccu->CHOCON |= ((uint32_t)level << chan_no);
10002ee6:	68fb      	ldr	r3, [r7, #12]
10002ee8:	691a      	ldr	r2, [r3, #16]
10002eea:	1dfb      	adds	r3, r7, #7
10002eec:	7819      	ldrb	r1, [r3, #0]
10002eee:	68bb      	ldr	r3, [r7, #8]
10002ef0:	4099      	lsls	r1, r3
10002ef2:	1c0b      	adds	r3, r1, #0
10002ef4:	431a      	orrs	r2, r3
10002ef6:	68fb      	ldr	r3, [r7, #12]
10002ef8:	611a      	str	r2, [r3, #16]
}
10002efa:	46bd      	mov	sp, r7
10002efc:	b004      	add	sp, #16
10002efe:	bd80      	pop	{r7, pc}

10002f00 <XMC_BCCU_EnableTrap>:

/*
 * API to enable the specific channel trap
 */
void XMC_BCCU_EnableTrap (XMC_BCCU_t *const bccu, uint32_t chan_no)
{
10002f00:	b580      	push	{r7, lr}
10002f02:	b082      	sub	sp, #8
10002f04:	af00      	add	r7, sp, #0
10002f06:	6078      	str	r0, [r7, #4]
10002f08:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_BCCU_EnableTrap: Invalid channel number", (chan_no <= (XMC_BCCU_NO_OF_CHANNELS-1)));

  bccu->CHOCON |= (uint32_t)(BCCU_CHOCON_CH0TPE_Msk << chan_no);
10002f0a:	687b      	ldr	r3, [r7, #4]
10002f0c:	691a      	ldr	r2, [r3, #16]
10002f0e:	683b      	ldr	r3, [r7, #0]
10002f10:	2180      	movs	r1, #128	; 0x80
10002f12:	0249      	lsls	r1, r1, #9
10002f14:	4099      	lsls	r1, r3
10002f16:	1c0b      	adds	r3, r1, #0
10002f18:	431a      	orrs	r2, r3
10002f1a:	687b      	ldr	r3, [r7, #4]
10002f1c:	611a      	str	r2, [r3, #16]
}
10002f1e:	46bd      	mov	sp, r7
10002f20:	b002      	add	sp, #8
10002f22:	bd80      	pop	{r7, pc}

10002f24 <XMC_BCCU_EnableChannelTrigger>:

/*
 * API to configure specific channel trigger enable and trigger line.
 */
void XMC_BCCU_EnableChannelTrigger (XMC_BCCU_t *const bccu, uint32_t chan_no, XMC_BCCU_CH_TRIGOUT_t trig_line)
{
10002f24:	b580      	push	{r7, lr}
10002f26:	b086      	sub	sp, #24
10002f28:	af00      	add	r7, sp, #0
10002f2a:	60f8      	str	r0, [r7, #12]
10002f2c:	60b9      	str	r1, [r7, #8]
10002f2e:	1dfb      	adds	r3, r7, #7
10002f30:	701a      	strb	r2, [r3, #0]
  uint32_t reg;
  XMC_ASSERT("XMC_BCCU_EnableChannelTrigger: Invalid channel number", (chan_no <= (XMC_BCCU_NO_OF_CHANNELS-1)));

  bccu->CHTRIG &= ~(uint32_t)(BCCU_CHTRIG_TOS0_Msk << chan_no);
10002f32:	68fb      	ldr	r3, [r7, #12]
10002f34:	695b      	ldr	r3, [r3, #20]
10002f36:	68ba      	ldr	r2, [r7, #8]
10002f38:	2180      	movs	r1, #128	; 0x80
10002f3a:	0249      	lsls	r1, r1, #9
10002f3c:	4091      	lsls	r1, r2
10002f3e:	1c0a      	adds	r2, r1, #0
10002f40:	43d2      	mvns	r2, r2
10002f42:	401a      	ands	r2, r3
10002f44:	68fb      	ldr	r3, [r7, #12]
10002f46:	615a      	str	r2, [r3, #20]
  reg = (uint32_t)(BCCU_CHTRIG_ET0_Msk << chan_no);
10002f48:	68bb      	ldr	r3, [r7, #8]
10002f4a:	2201      	movs	r2, #1
10002f4c:	409a      	lsls	r2, r3
10002f4e:	1c13      	adds	r3, r2, #0
10002f50:	617b      	str	r3, [r7, #20]
  reg |= ((uint32_t)trig_line << (BCCU_CHTRIG_TOS0_Pos + chan_no));
10002f52:	1dfb      	adds	r3, r7, #7
10002f54:	781b      	ldrb	r3, [r3, #0]
10002f56:	68ba      	ldr	r2, [r7, #8]
10002f58:	3210      	adds	r2, #16
10002f5a:	4093      	lsls	r3, r2
10002f5c:	697a      	ldr	r2, [r7, #20]
10002f5e:	4313      	orrs	r3, r2
10002f60:	617b      	str	r3, [r7, #20]
  bccu->CHTRIG |= reg;
10002f62:	68fb      	ldr	r3, [r7, #12]
10002f64:	695a      	ldr	r2, [r3, #20]
10002f66:	697b      	ldr	r3, [r7, #20]
10002f68:	431a      	orrs	r2, r3
10002f6a:	68fb      	ldr	r3, [r7, #12]
10002f6c:	615a      	str	r2, [r3, #20]
}
10002f6e:	46bd      	mov	sp, r7
10002f70:	b006      	add	sp, #24
10002f72:	bd80      	pop	{r7, pc}

10002f74 <XMC_BCCU_CH_Init>:

/*
 * API to initialise the channel of a BCCU module
 */
void XMC_BCCU_CH_Init (XMC_BCCU_CH_t *const channel, const XMC_BCCU_CH_CONFIG_t *const config)
{
10002f74:	b580      	push	{r7, lr}
10002f76:	b082      	sub	sp, #8
10002f78:	af00      	add	r7, sp, #0
10002f7a:	6078      	str	r0, [r7, #4]
10002f7c:	6039      	str	r1, [r7, #0]
  channel->CHCONFIG = config->chconfig;
10002f7e:	683b      	ldr	r3, [r7, #0]
10002f80:	681a      	ldr	r2, [r3, #0]
10002f82:	687b      	ldr	r3, [r7, #4]
10002f84:	609a      	str	r2, [r3, #8]
 
  channel->PKCMP = config->pkcmp;
10002f86:	683b      	ldr	r3, [r7, #0]
10002f88:	685a      	ldr	r2, [r3, #4]
10002f8a:	687b      	ldr	r3, [r7, #4]
10002f8c:	60da      	str	r2, [r3, #12]
 
  channel->PKCNTR = config->pkcntr;
10002f8e:	683b      	ldr	r3, [r7, #0]
10002f90:	689a      	ldr	r2, [r3, #8]
10002f92:	687b      	ldr	r3, [r7, #4]
10002f94:	611a      	str	r2, [r3, #16]
}
10002f96:	46bd      	mov	sp, r7
10002f98:	b002      	add	sp, #8
10002f9a:	bd80      	pop	{r7, pc}

10002f9c <XMC_BCCU_CH_ConfigTrigger>:

/*
 * API to configure channel trigger edge and force trigger edge
 */
void XMC_BCCU_CH_ConfigTrigger (XMC_BCCU_CH_t *const channel, XMC_BCCU_CH_TRIG_EDGE_t edge, uint32_t force_trig_en)
{
10002f9c:	b580      	push	{r7, lr}
10002f9e:	b086      	sub	sp, #24
10002fa0:	af00      	add	r7, sp, #0
10002fa2:	60f8      	str	r0, [r7, #12]
10002fa4:	607a      	str	r2, [r7, #4]
10002fa6:	230b      	movs	r3, #11
10002fa8:	18fb      	adds	r3, r7, r3
10002faa:	1c0a      	adds	r2, r1, #0
10002fac:	701a      	strb	r2, [r3, #0]
  uint32_t reg; 
  channel->CHCONFIG &= ~(uint32_t)(BCCU_CH_CHCONFIG_TRED_Msk | BCCU_CH_CHCONFIG_ENFT_Msk);
10002fae:	68fb      	ldr	r3, [r7, #12]
10002fb0:	689b      	ldr	r3, [r3, #8]
10002fb2:	4a0b      	ldr	r2, [pc, #44]	; (10002fe0 <XMC_BCCU_CH_ConfigTrigger+0x44>)
10002fb4:	401a      	ands	r2, r3
10002fb6:	68fb      	ldr	r3, [r7, #12]
10002fb8:	609a      	str	r2, [r3, #8]
  
  reg = ((uint32_t)edge << BCCU_CH_CHCONFIG_TRED_Pos);
10002fba:	230b      	movs	r3, #11
10002fbc:	18fb      	adds	r3, r7, r3
10002fbe:	781b      	ldrb	r3, [r3, #0]
10002fc0:	029b      	lsls	r3, r3, #10
10002fc2:	617b      	str	r3, [r7, #20]
  reg |= (uint32_t)(force_trig_en << BCCU_CH_CHCONFIG_ENFT_Pos);
10002fc4:	687b      	ldr	r3, [r7, #4]
10002fc6:	02db      	lsls	r3, r3, #11
10002fc8:	697a      	ldr	r2, [r7, #20]
10002fca:	4313      	orrs	r3, r2
10002fcc:	617b      	str	r3, [r7, #20]
  channel->CHCONFIG |= reg;
10002fce:	68fb      	ldr	r3, [r7, #12]
10002fd0:	689a      	ldr	r2, [r3, #8]
10002fd2:	697b      	ldr	r3, [r7, #20]
10002fd4:	431a      	orrs	r2, r3
10002fd6:	68fb      	ldr	r3, [r7, #12]
10002fd8:	609a      	str	r2, [r3, #8]
}
10002fda:	46bd      	mov	sp, r7
10002fdc:	b006      	add	sp, #24
10002fde:	bd80      	pop	{r7, pc}
10002fe0:	fffff3ff 	.word	0xfffff3ff

10002fe4 <XMC_BCCU_CH_SetLinearWalkPrescaler>:

/*
 * API to configure the linear walker clock prescaler factor of a BCCU channel
 */
void XMC_BCCU_CH_SetLinearWalkPrescaler (XMC_BCCU_CH_t *const channel, uint32_t clk_div)
{
10002fe4:	b580      	push	{r7, lr}
10002fe6:	b082      	sub	sp, #8
10002fe8:	af00      	add	r7, sp, #0
10002fea:	6078      	str	r0, [r7, #4]
10002fec:	6039      	str	r1, [r7, #0]
  channel->CHCONFIG &= ~(uint32_t)(BCCU_CH_CHCONFIG_LINPRES_Msk);
10002fee:	687b      	ldr	r3, [r7, #4]
10002ff0:	689b      	ldr	r3, [r3, #8]
10002ff2:	4a07      	ldr	r2, [pc, #28]	; (10003010 <XMC_BCCU_CH_SetLinearWalkPrescaler+0x2c>)
10002ff4:	401a      	ands	r2, r3
10002ff6:	687b      	ldr	r3, [r7, #4]
10002ff8:	609a      	str	r2, [r3, #8]
  channel->CHCONFIG |= (uint32_t)(clk_div << BCCU_CH_CHCONFIG_LINPRES_Pos);
10002ffa:	687b      	ldr	r3, [r7, #4]
10002ffc:	689a      	ldr	r2, [r3, #8]
10002ffe:	683b      	ldr	r3, [r7, #0]
10003000:	041b      	lsls	r3, r3, #16
10003002:	431a      	orrs	r2, r3
10003004:	687b      	ldr	r3, [r7, #4]
10003006:	609a      	str	r2, [r3, #8]
}
10003008:	46bd      	mov	sp, r7
1000300a:	b002      	add	sp, #8
1000300c:	bd80      	pop	{r7, pc}
1000300e:	46c0      	nop			; (mov r8, r8)
10003010:	fc00ffff 	.word	0xfc00ffff

10003014 <XMC_BCCU_CH_SetTargetIntensity>:

/*
 * API to set channel target intensity
 */
void XMC_BCCU_CH_SetTargetIntensity (XMC_BCCU_CH_t *const channel, uint32_t ch_int)
{
10003014:	b580      	push	{r7, lr}
10003016:	b082      	sub	sp, #8
10003018:	af00      	add	r7, sp, #0
1000301a:	6078      	str	r0, [r7, #4]
1000301c:	6039      	str	r1, [r7, #0]
  channel->INTS = ch_int;
1000301e:	687b      	ldr	r3, [r7, #4]
10003020:	683a      	ldr	r2, [r7, #0]
10003022:	601a      	str	r2, [r3, #0]
}
10003024:	46bd      	mov	sp, r7
10003026:	b002      	add	sp, #8
10003028:	bd80      	pop	{r7, pc}
1000302a:	46c0      	nop			; (mov r8, r8)

1000302c <XMC_BCCU_DIM_Init>:

/*
 * API to initialise a specific dimming engine of a BCCU module
 */
void XMC_BCCU_DIM_Init (XMC_BCCU_DIM_t *const dim_engine, const XMC_BCCU_DIM_CONFIG_t *const config)
{
1000302c:	b580      	push	{r7, lr}
1000302e:	b082      	sub	sp, #8
10003030:	af00      	add	r7, sp, #0
10003032:	6078      	str	r0, [r7, #4]
10003034:	6039      	str	r1, [r7, #0]
  dim_engine->DTT = config->dtt;
10003036:	683b      	ldr	r3, [r7, #0]
10003038:	681a      	ldr	r2, [r3, #0]
1000303a:	687b      	ldr	r3, [r7, #4]
1000303c:	609a      	str	r2, [r3, #8]
}
1000303e:	46bd      	mov	sp, r7
10003040:	b002      	add	sp, #8
10003042:	bd80      	pop	{r7, pc}

10003044 <XMC_BCCU_DIM_SetTargetDimmingLevel>:

/*
 * API to set dimming engine target dim level
 */
void XMC_BCCU_DIM_SetTargetDimmingLevel (XMC_BCCU_DIM_t *const dim_engine, uint32_t level)
{
10003044:	b580      	push	{r7, lr}
10003046:	b082      	sub	sp, #8
10003048:	af00      	add	r7, sp, #0
1000304a:	6078      	str	r0, [r7, #4]
1000304c:	6039      	str	r1, [r7, #0]
  dim_engine->DLS = level;
1000304e:	687b      	ldr	r3, [r7, #4]
10003050:	683a      	ldr	r2, [r7, #0]
10003052:	601a      	str	r2, [r3, #0]
}
10003054:	46bd      	mov	sp, r7
10003056:	b002      	add	sp, #8
10003058:	bd80      	pop	{r7, pc}
1000305a:	46c0      	nop			; (mov r8, r8)

1000305c <XMC_BCCU_DIM_SetDimDivider>:

/*
 * API to configure the dimming clock prescaler factor of a dimming engine
 */
void XMC_BCCU_DIM_SetDimDivider (XMC_BCCU_DIM_t *const dim_engine, uint32_t div)
{
1000305c:	b580      	push	{r7, lr}
1000305e:	b082      	sub	sp, #8
10003060:	af00      	add	r7, sp, #0
10003062:	6078      	str	r0, [r7, #4]
10003064:	6039      	str	r1, [r7, #0]
  dim_engine->DTT &= ~(uint32_t)(BCCU_DE_DTT_DIMDIV_Msk);
10003066:	687b      	ldr	r3, [r7, #4]
10003068:	689b      	ldr	r3, [r3, #8]
1000306a:	0a9b      	lsrs	r3, r3, #10
1000306c:	029a      	lsls	r2, r3, #10
1000306e:	687b      	ldr	r3, [r7, #4]
10003070:	609a      	str	r2, [r3, #8]
  dim_engine->DTT |= div;
10003072:	687b      	ldr	r3, [r7, #4]
10003074:	689a      	ldr	r2, [r3, #8]
10003076:	683b      	ldr	r3, [r7, #0]
10003078:	431a      	orrs	r2, r3
1000307a:	687b      	ldr	r3, [r7, #4]
1000307c:	609a      	str	r2, [r3, #8]
}
1000307e:	46bd      	mov	sp, r7
10003080:	b002      	add	sp, #8
10003082:	bd80      	pop	{r7, pc}

10003084 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10003084:	b580      	push	{r7, lr}
10003086:	b082      	sub	sp, #8
10003088:	af00      	add	r7, sp, #0
1000308a:	6078      	str	r0, [r7, #4]
1000308c:	1c08      	adds	r0, r1, #0
1000308e:	1c11      	adds	r1, r2, #0
10003090:	1cfb      	adds	r3, r7, #3
10003092:	1c02      	adds	r2, r0, #0
10003094:	701a      	strb	r2, [r3, #0]
10003096:	1cbb      	adds	r3, r7, #2
10003098:	1c0a      	adds	r2, r1, #0
1000309a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000309c:	687b      	ldr	r3, [r7, #4]
1000309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100030a0:	1cfa      	adds	r2, r7, #3
100030a2:	7812      	ldrb	r2, [r2, #0]
100030a4:	0052      	lsls	r2, r2, #1
100030a6:	1c11      	adds	r1, r2, #0
100030a8:	2203      	movs	r2, #3
100030aa:	408a      	lsls	r2, r1
100030ac:	43d2      	mvns	r2, r2
100030ae:	401a      	ands	r2, r3
100030b0:	687b      	ldr	r3, [r7, #4]
100030b2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100030b4:	687b      	ldr	r3, [r7, #4]
100030b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100030b8:	1cbb      	adds	r3, r7, #2
100030ba:	781b      	ldrb	r3, [r3, #0]
100030bc:	1cf9      	adds	r1, r7, #3
100030be:	7809      	ldrb	r1, [r1, #0]
100030c0:	0049      	lsls	r1, r1, #1
100030c2:	408b      	lsls	r3, r1
100030c4:	431a      	orrs	r2, r3
100030c6:	687b      	ldr	r3, [r7, #4]
100030c8:	675a      	str	r2, [r3, #116]	; 0x74
}
100030ca:	46bd      	mov	sp, r7
100030cc:	b002      	add	sp, #8
100030ce:	bd80      	pop	{r7, pc}

100030d0 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
100030d0:	b580      	push	{r7, lr}
100030d2:	b082      	sub	sp, #8
100030d4:	af00      	add	r7, sp, #0
100030d6:	6078      	str	r0, [r7, #4]
100030d8:	6039      	str	r1, [r7, #0]
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100030da:	4b07      	ldr	r3, [pc, #28]	; (100030f8 <__aeabi_uidiv+0x28>)
100030dc:	2204      	movs	r2, #4
100030de:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100030e0:	4b05      	ldr	r3, [pc, #20]	; (100030f8 <__aeabi_uidiv+0x28>)
100030e2:	687a      	ldr	r2, [r7, #4]
100030e4:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
100030e6:	4b04      	ldr	r3, [pc, #16]	; (100030f8 <__aeabi_uidiv+0x28>)
100030e8:	683a      	ldr	r2, [r7, #0]
100030ea:	625a      	str	r2, [r3, #36]	; 0x24

  return ((uint32_t) MATH->QUOT);
100030ec:	4b02      	ldr	r3, [pc, #8]	; (100030f8 <__aeabi_uidiv+0x28>)
100030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
100030f0:	1c18      	adds	r0, r3, #0
100030f2:	46bd      	mov	sp, r7
100030f4:	b002      	add	sp, #8
100030f6:	bd80      	pop	{r7, pc}
100030f8:	40030000 	.word	0x40030000

100030fc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100030fc:	b580      	push	{r7, lr}
100030fe:	b082      	sub	sp, #8
10003100:	af00      	add	r7, sp, #0
10003102:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10003104:	687b      	ldr	r3, [r7, #4]
10003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003108:	b2db      	uxtb	r3, r3
1000310a:	227f      	movs	r2, #127	; 0x7f
1000310c:	4393      	bics	r3, r2
1000310e:	b2db      	uxtb	r3, r3
}
10003110:	1c18      	adds	r0, r3, #0
10003112:	46bd      	mov	sp, r7
10003114:	b002      	add	sp, #8
10003116:	bd80      	pop	{r7, pc}

10003118 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10003118:	b580      	push	{r7, lr}
1000311a:	b082      	sub	sp, #8
1000311c:	af00      	add	r7, sp, #0
1000311e:	6078      	str	r0, [r7, #4]
10003120:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
10003122:	687b      	ldr	r3, [r7, #4]
10003124:	683a      	ldr	r2, [r7, #0]
10003126:	64da      	str	r2, [r3, #76]	; 0x4c
}
10003128:	46bd      	mov	sp, r7
1000312a:	b002      	add	sp, #8
1000312c:	bd80      	pop	{r7, pc}
1000312e:	46c0      	nop			; (mov r8, r8)

10003130 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
10003130:	b580      	push	{r7, lr}
10003132:	b084      	sub	sp, #16
10003134:	af00      	add	r7, sp, #0
10003136:	6078      	str	r0, [r7, #4]
10003138:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
1000313a:	2310      	movs	r3, #16
1000313c:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
1000313e:	687b      	ldr	r3, [r7, #4]
10003140:	1c18      	adds	r0, r3, #0
10003142:	f000 f89b 	bl	1000327c <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
10003146:	683b      	ldr	r3, [r7, #0]
10003148:	79db      	ldrb	r3, [r3, #7]
1000314a:	2b00      	cmp	r3, #0
1000314c:	d002      	beq.n	10003154 <XMC_UART_CH_Init+0x24>
  {
    oversampling = (uint32_t)config->oversampling;
1000314e:	683b      	ldr	r3, [r7, #0]
10003150:	79db      	ldrb	r3, [r3, #7]
10003152:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
10003154:	683b      	ldr	r3, [r7, #0]
10003156:	681a      	ldr	r2, [r3, #0]
10003158:	6879      	ldr	r1, [r7, #4]
1000315a:	68fb      	ldr	r3, [r7, #12]
1000315c:	1c08      	adds	r0, r1, #0
1000315e:	1c11      	adds	r1, r2, #0
10003160:	1c1a      	adds	r2, r3, #0
10003162:	f000 f8b3 	bl	100032cc <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10003166:	683b      	ldr	r3, [r7, #0]
10003168:	799b      	ldrb	r3, [r3, #6]
1000316a:	3b01      	subs	r3, #1
1000316c:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
1000316e:	68fb      	ldr	r3, [r7, #12]
10003170:	085b      	lsrs	r3, r3, #1
10003172:	3301      	adds	r3, #1
10003174:	021b      	lsls	r3, r3, #8
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10003176:	4313      	orrs	r3, r2
10003178:	2201      	movs	r2, #1
1000317a:	431a      	orrs	r2, r3
1000317c:	687b      	ldr	r3, [r7, #4]
1000317e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10003180:	683b      	ldr	r3, [r7, #0]
10003182:	791b      	ldrb	r3, [r3, #4]
10003184:	3b01      	subs	r3, #1
10003186:	061b      	lsls	r3, r3, #24
10003188:	2281      	movs	r2, #129	; 0x81
1000318a:	0052      	lsls	r2, r2, #1
1000318c:	431a      	orrs	r2, r3
1000318e:	687b      	ldr	r3, [r7, #4]
10003190:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10003192:	683b      	ldr	r3, [r7, #0]
10003194:	795b      	ldrb	r3, [r3, #5]
10003196:	2b00      	cmp	r3, #0
10003198:	d009      	beq.n	100031ae <XMC_UART_CH_Init+0x7e>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
1000319a:	687b      	ldr	r3, [r7, #4]
1000319c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000319e:	683b      	ldr	r3, [r7, #0]
100031a0:	795b      	ldrb	r3, [r3, #5]
100031a2:	3b01      	subs	r3, #1
100031a4:	041b      	lsls	r3, r3, #16
100031a6:	431a      	orrs	r2, r3
100031a8:	687b      	ldr	r3, [r7, #4]
100031aa:	635a      	str	r2, [r3, #52]	; 0x34
100031ac:	e008      	b.n	100031c0 <XMC_UART_CH_Init+0x90>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
100031ae:	687b      	ldr	r3, [r7, #4]
100031b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100031b2:	683b      	ldr	r3, [r7, #0]
100031b4:	791b      	ldrb	r3, [r3, #4]
100031b6:	3b01      	subs	r3, #1
100031b8:	041b      	lsls	r3, r3, #16
100031ba:	431a      	orrs	r2, r3
100031bc:	687b      	ldr	r3, [r7, #4]
100031be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
100031c0:	687b      	ldr	r3, [r7, #4]
100031c2:	22a0      	movs	r2, #160	; 0xa0
100031c4:	00d2      	lsls	r2, r2, #3
100031c6:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
100031c8:	687b      	ldr	r3, [r7, #4]
100031ca:	2201      	movs	r2, #1
100031cc:	4252      	negs	r2, r2
100031ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
100031d0:	683b      	ldr	r3, [r7, #0]
100031d2:	891b      	ldrh	r3, [r3, #8]
100031d4:	1c1a      	adds	r2, r3, #0
100031d6:	687b      	ldr	r3, [r7, #4]
100031d8:	641a      	str	r2, [r3, #64]	; 0x40
}
100031da:	46bd      	mov	sp, r7
100031dc:	b004      	add	sp, #16
100031de:	bd80      	pop	{r7, pc}

100031e0 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
100031e0:	b580      	push	{r7, lr}
100031e2:	b082      	sub	sp, #8
100031e4:	af00      	add	r7, sp, #0
100031e6:	6078      	str	r0, [r7, #4]
100031e8:	1c0a      	adds	r2, r1, #0
100031ea:	1cbb      	adds	r3, r7, #2
100031ec:	801a      	strh	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
100031ee:	687a      	ldr	r2, [r7, #4]
100031f0:	2384      	movs	r3, #132	; 0x84
100031f2:	005b      	lsls	r3, r3, #1
100031f4:	58d2      	ldr	r2, [r2, r3]
100031f6:	23e0      	movs	r3, #224	; 0xe0
100031f8:	04db      	lsls	r3, r3, #19
100031fa:	4013      	ands	r3, r2
100031fc:	d114      	bne.n	10003228 <XMC_UART_CH_Transmit+0x48>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100031fe:	46c0      	nop			; (mov r8, r8)
10003200:	687b      	ldr	r3, [r7, #4]
10003202:	1c18      	adds	r0, r3, #0
10003204:	f7ff ff7a 	bl	100030fc <XMC_USIC_CH_GetTransmitBufferStatus>
10003208:	1e03      	subs	r3, r0, #0
1000320a:	2b80      	cmp	r3, #128	; 0x80
1000320c:	d0f8      	beq.n	10003200 <XMC_UART_CH_Transmit+0x20>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
1000320e:	687a      	ldr	r2, [r7, #4]
10003210:	2380      	movs	r3, #128	; 0x80
10003212:	019b      	lsls	r3, r3, #6
10003214:	1c10      	adds	r0, r2, #0
10003216:	1c19      	adds	r1, r3, #0
10003218:	f7ff ff7e 	bl	10003118 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
1000321c:	1cbb      	adds	r3, r7, #2
1000321e:	881a      	ldrh	r2, [r3, #0]
10003220:	687b      	ldr	r3, [r7, #4]
10003222:	2180      	movs	r1, #128	; 0x80
10003224:	505a      	str	r2, [r3, r1]
10003226:	e005      	b.n	10003234 <XMC_UART_CH_Transmit+0x54>
  }
  else
  {
    channel->IN[0U] = data;
10003228:	1cbb      	adds	r3, r7, #2
1000322a:	8819      	ldrh	r1, [r3, #0]
1000322c:	687a      	ldr	r2, [r7, #4]
1000322e:	23c0      	movs	r3, #192	; 0xc0
10003230:	005b      	lsls	r3, r3, #1
10003232:	50d1      	str	r1, [r2, r3]
  }
}
10003234:	46bd      	mov	sp, r7
10003236:	b002      	add	sp, #8
10003238:	bd80      	pop	{r7, pc}
1000323a:	46c0      	nop			; (mov r8, r8)

1000323c <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
1000323c:	b580      	push	{r7, lr}
1000323e:	b084      	sub	sp, #16
10003240:	af00      	add	r7, sp, #0
10003242:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10003244:	687a      	ldr	r2, [r7, #4]
10003246:	2386      	movs	r3, #134	; 0x86
10003248:	005b      	lsls	r3, r3, #1
1000324a:	58d2      	ldr	r2, [r2, r3]
1000324c:	23e0      	movs	r3, #224	; 0xe0
1000324e:	04db      	lsls	r3, r3, #19
10003250:	4013      	ands	r3, r2
10003252:	d105      	bne.n	10003260 <XMC_UART_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
10003254:	687b      	ldr	r3, [r7, #4]
10003256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10003258:	230e      	movs	r3, #14
1000325a:	18fb      	adds	r3, r7, r3
1000325c:	801a      	strh	r2, [r3, #0]
1000325e:	e006      	b.n	1000326e <XMC_UART_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10003260:	687a      	ldr	r2, [r7, #4]
10003262:	238e      	movs	r3, #142	; 0x8e
10003264:	005b      	lsls	r3, r3, #1
10003266:	58d2      	ldr	r2, [r2, r3]
10003268:	230e      	movs	r3, #14
1000326a:	18fb      	adds	r3, r7, r3
1000326c:	801a      	strh	r2, [r3, #0]
  }

  return retval;
1000326e:	230e      	movs	r3, #14
10003270:	18fb      	adds	r3, r7, r3
10003272:	881b      	ldrh	r3, [r3, #0]
}
10003274:	1c18      	adds	r0, r3, #0
10003276:	46bd      	mov	sp, r7
10003278:	b004      	add	sp, #16
1000327a:	bd80      	pop	{r7, pc}

1000327c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
1000327c:	b580      	push	{r7, lr}
1000327e:	b082      	sub	sp, #8
10003280:	af00      	add	r7, sp, #0
10003282:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10003284:	687a      	ldr	r2, [r7, #4]
10003286:	2390      	movs	r3, #144	; 0x90
10003288:	05db      	lsls	r3, r3, #23
1000328a:	429a      	cmp	r2, r3
1000328c:	d003      	beq.n	10003296 <XMC_USIC_CH_Enable+0x1a>
1000328e:	687b      	ldr	r3, [r7, #4]
10003290:	4a0c      	ldr	r2, [pc, #48]	; (100032c4 <XMC_USIC_CH_Enable+0x48>)
10003292:	4293      	cmp	r3, r2
10003294:	d103      	bne.n	1000329e <XMC_USIC_CH_Enable+0x22>
  {
    XMC_USIC_Enable(XMC_USIC0);
10003296:	4b0c      	ldr	r3, [pc, #48]	; (100032c8 <XMC_USIC_CH_Enable+0x4c>)
10003298:	1c18      	adds	r0, r3, #0
1000329a:	f000 f983 	bl	100035a4 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
1000329e:	687b      	ldr	r3, [r7, #4]
100032a0:	2203      	movs	r2, #3
100032a2:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
100032a4:	46c0      	nop			; (mov r8, r8)
100032a6:	687b      	ldr	r3, [r7, #4]
100032a8:	68db      	ldr	r3, [r3, #12]
100032aa:	2201      	movs	r2, #1
100032ac:	4013      	ands	r3, r2
100032ae:	d0fa      	beq.n	100032a6 <XMC_USIC_CH_Enable+0x2a>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
100032b0:	687b      	ldr	r3, [r7, #4]
100032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100032b4:	220f      	movs	r2, #15
100032b6:	4393      	bics	r3, r2
100032b8:	1c1a      	adds	r2, r3, #0
100032ba:	687b      	ldr	r3, [r7, #4]
100032bc:	641a      	str	r2, [r3, #64]	; 0x40
}
100032be:	46bd      	mov	sp, r7
100032c0:	b002      	add	sp, #8
100032c2:	bd80      	pop	{r7, pc}
100032c4:	48000200 	.word	0x48000200
100032c8:	48000008 	.word	0x48000008

100032cc <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
100032cc:	b580      	push	{r7, lr}
100032ce:	b08e      	sub	sp, #56	; 0x38
100032d0:	af00      	add	r7, sp, #0
100032d2:	60f8      	str	r0, [r7, #12]
100032d4:	60b9      	str	r1, [r7, #8]
100032d6:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
100032d8:	68bb      	ldr	r3, [r7, #8]
100032da:	2b63      	cmp	r3, #99	; 0x63
100032dc:	d95c      	bls.n	10003398 <XMC_USIC_CH_SetBaudrate+0xcc>
100032de:	687b      	ldr	r3, [r7, #4]
100032e0:	2b00      	cmp	r3, #0
100032e2:	d059      	beq.n	10003398 <XMC_USIC_CH_SetBaudrate+0xcc>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
100032e4:	f7ff fd6a 	bl	10002dbc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
100032e8:	1c03      	adds	r3, r0, #0
100032ea:	1c18      	adds	r0, r3, #0
100032ec:	2164      	movs	r1, #100	; 0x64
100032ee:	f7ff feef 	bl	100030d0 <__aeabi_uidiv>
100032f2:	1c03      	adds	r3, r0, #0
100032f4:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
100032f6:	68bb      	ldr	r3, [r7, #8]
100032f8:	1c18      	adds	r0, r3, #0
100032fa:	2164      	movs	r1, #100	; 0x64
100032fc:	f7ff fee8 	bl	100030d0 <__aeabi_uidiv>
10003300:	1c03      	adds	r3, r0, #0
10003302:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
10003304:	2301      	movs	r3, #1
10003306:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
10003308:	2301      	movs	r3, #1
1000330a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
1000330c:	4b28      	ldr	r3, [pc, #160]	; (100033b0 <XMC_USIC_CH_SetBaudrate+0xe4>)
1000330e:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10003310:	4b27      	ldr	r3, [pc, #156]	; (100033b0 <XMC_USIC_CH_SetBaudrate+0xe4>)
10003312:	633b      	str	r3, [r7, #48]	; 0x30
10003314:	e024      	b.n	10003360 <XMC_USIC_CH_SetBaudrate+0x94>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
10003316:	6a3b      	ldr	r3, [r7, #32]
10003318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000331a:	435a      	muls	r2, r3
1000331c:	1c11      	adds	r1, r2, #0
1000331e:	68bb      	ldr	r3, [r7, #8]
10003320:	687a      	ldr	r2, [r7, #4]
10003322:	4353      	muls	r3, r2
10003324:	1c08      	adds	r0, r1, #0
10003326:	1c19      	adds	r1, r3, #0
10003328:	f7ff fed2 	bl	100030d0 <__aeabi_uidiv>
1000332c:	1c03      	adds	r3, r0, #0
1000332e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
10003330:	69fb      	ldr	r3, [r7, #28]
10003332:	0a9b      	lsrs	r3, r3, #10
10003334:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
10003336:	69fb      	ldr	r3, [r7, #28]
10003338:	059b      	lsls	r3, r3, #22
1000333a:	0d9b      	lsrs	r3, r3, #22
1000333c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
1000333e:	69bb      	ldr	r3, [r7, #24]
10003340:	4a1b      	ldr	r2, [pc, #108]	; (100033b0 <XMC_USIC_CH_SetBaudrate+0xe4>)
10003342:	4293      	cmp	r3, r2
10003344:	d809      	bhi.n	1000335a <XMC_USIC_CH_SetBaudrate+0x8e>
10003346:	697a      	ldr	r2, [r7, #20]
10003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000334a:	429a      	cmp	r2, r3
1000334c:	d205      	bcs.n	1000335a <XMC_USIC_CH_SetBaudrate+0x8e>
      {
        pdiv_frac_min = pdiv_frac;
1000334e:	697b      	ldr	r3, [r7, #20]
10003350:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10003352:	69bb      	ldr	r3, [r7, #24]
10003354:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10003358:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
1000335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000335c:	3b01      	subs	r3, #1
1000335e:	633b      	str	r3, [r7, #48]	; 0x30
10003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10003362:	2b00      	cmp	r3, #0
10003364:	d1d7      	bne.n	10003316 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003368:	2280      	movs	r2, #128	; 0x80
1000336a:	0212      	lsls	r2, r2, #8
1000336c:	431a      	orrs	r2, r3
1000336e:	68fb      	ldr	r3, [r7, #12]
10003370:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10003372:	68fb      	ldr	r3, [r7, #12]
10003374:	695b      	ldr	r3, [r3, #20]
10003376:	4a0f      	ldr	r2, [pc, #60]	; (100033b4 <XMC_USIC_CH_SetBaudrate+0xe8>)
10003378:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000337a:	687b      	ldr	r3, [r7, #4]
1000337c:	3b01      	subs	r3, #1
1000337e:	029b      	lsls	r3, r3, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10003380:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003384:	3b01      	subs	r3, #1
10003386:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10003388:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000338a:	68fb      	ldr	r3, [r7, #12]
1000338c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
1000338e:	2337      	movs	r3, #55	; 0x37
10003390:	18fb      	adds	r3, r7, r3
10003392:	2200      	movs	r2, #0
10003394:	701a      	strb	r2, [r3, #0]
10003396:	e003      	b.n	100033a0 <XMC_USIC_CH_SetBaudrate+0xd4>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10003398:	2337      	movs	r3, #55	; 0x37
1000339a:	18fb      	adds	r3, r7, r3
1000339c:	2201      	movs	r2, #1
1000339e:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
100033a0:	2337      	movs	r3, #55	; 0x37
100033a2:	18fb      	adds	r3, r7, r3
100033a4:	781b      	ldrb	r3, [r3, #0]
}
100033a6:	1c18      	adds	r0, r3, #0
100033a8:	46bd      	mov	sp, r7
100033aa:	b00e      	add	sp, #56	; 0x38
100033ac:	bd80      	pop	{r7, pc}
100033ae:	46c0      	nop			; (mov r8, r8)
100033b0:	000003ff 	.word	0x000003ff
100033b4:	fc0080ef 	.word	0xfc0080ef

100033b8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
100033b8:	b580      	push	{r7, lr}
100033ba:	b084      	sub	sp, #16
100033bc:	af00      	add	r7, sp, #0
100033be:	60f8      	str	r0, [r7, #12]
100033c0:	60b9      	str	r1, [r7, #8]
100033c2:	603b      	str	r3, [r7, #0]
100033c4:	1dfb      	adds	r3, r7, #7
100033c6:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
100033c8:	68fa      	ldr	r2, [r7, #12]
100033ca:	2384      	movs	r3, #132	; 0x84
100033cc:	005b      	lsls	r3, r3, #1
100033ce:	58d3      	ldr	r3, [r2, r3]
100033d0:	4a0e      	ldr	r2, [pc, #56]	; (1000340c <XMC_USIC_CH_TXFIFO_Configure+0x54>)
100033d2:	4013      	ands	r3, r2
100033d4:	1c19      	adds	r1, r3, #0
100033d6:	68fa      	ldr	r2, [r7, #12]
100033d8:	2384      	movs	r3, #132	; 0x84
100033da:	005b      	lsls	r3, r3, #1
100033dc:	50d1      	str	r1, [r2, r3]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
100033de:	68fa      	ldr	r2, [r7, #12]
100033e0:	2384      	movs	r3, #132	; 0x84
100033e2:	005b      	lsls	r3, r3, #1
100033e4:	58d3      	ldr	r3, [r2, r3]
100033e6:	4a0a      	ldr	r2, [pc, #40]	; (10003410 <XMC_USIC_CH_TXFIFO_Configure+0x58>)
100033e8:	401a      	ands	r2, r3
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100033ea:	683b      	ldr	r3, [r7, #0]
100033ec:	0219      	lsls	r1, r3, #8
100033ee:	68bb      	ldr	r3, [r7, #8]
100033f0:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
100033f2:	1dfb      	adds	r3, r7, #7
100033f4:	781b      	ldrb	r3, [r3, #0]
100033f6:	061b      	lsls	r3, r3, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100033f8:	430b      	orrs	r3, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
100033fa:	431a      	orrs	r2, r3
100033fc:	1c11      	adds	r1, r2, #0
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
100033fe:	68fa      	ldr	r2, [r7, #12]
10003400:	2384      	movs	r3, #132	; 0x84
10003402:	005b      	lsls	r3, r3, #1
10003404:	50d1      	str	r1, [r2, r3]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
10003406:	46bd      	mov	sp, r7
10003408:	b004      	add	sp, #16
1000340a:	bd80      	pop	{r7, pc}
1000340c:	f8ffffff 	.word	0xf8ffffff
10003410:	f8ffc0c0 	.word	0xf8ffc0c0

10003414 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10003414:	b580      	push	{r7, lr}
10003416:	b084      	sub	sp, #16
10003418:	af00      	add	r7, sp, #0
1000341a:	60f8      	str	r0, [r7, #12]
1000341c:	60b9      	str	r1, [r7, #8]
1000341e:	603b      	str	r3, [r7, #0]
10003420:	1dfb      	adds	r3, r7, #7
10003422:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10003424:	68fa      	ldr	r2, [r7, #12]
10003426:	2386      	movs	r3, #134	; 0x86
10003428:	005b      	lsls	r3, r3, #1
1000342a:	58d3      	ldr	r3, [r2, r3]
1000342c:	4a10      	ldr	r2, [pc, #64]	; (10003470 <XMC_USIC_CH_RXFIFO_Configure+0x5c>)
1000342e:	4013      	ands	r3, r2
10003430:	1c19      	adds	r1, r3, #0
10003432:	68fa      	ldr	r2, [r7, #12]
10003434:	2386      	movs	r3, #134	; 0x86
10003436:	005b      	lsls	r3, r3, #1
10003438:	50d1      	str	r1, [r2, r3]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
1000343a:	68fa      	ldr	r2, [r7, #12]
1000343c:	2386      	movs	r3, #134	; 0x86
1000343e:	005b      	lsls	r3, r3, #1
10003440:	58d3      	ldr	r3, [r2, r3]
10003442:	4a0c      	ldr	r2, [pc, #48]	; (10003474 <XMC_USIC_CH_RXFIFO_Configure+0x60>)
10003444:	401a      	ands	r2, r3
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10003446:	683b      	ldr	r3, [r7, #0]
10003448:	0219      	lsls	r1, r3, #8
1000344a:	68bb      	ldr	r3, [r7, #8]
1000344c:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
1000344e:	1dfb      	adds	r3, r7, #7
10003450:	781b      	ldrb	r3, [r3, #0]
10003452:	061b      	lsls	r3, r3, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
10003454:	430b      	orrs	r3, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10003456:	4313      	orrs	r3, r2
10003458:	2280      	movs	r2, #128	; 0x80
1000345a:	0552      	lsls	r2, r2, #21
1000345c:	431a      	orrs	r2, r3
1000345e:	1c11      	adds	r1, r2, #0
10003460:	68fa      	ldr	r2, [r7, #12]
10003462:	2386      	movs	r3, #134	; 0x86
10003464:	005b      	lsls	r3, r3, #1
10003466:	50d1      	str	r1, [r2, r3]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10003468:	46bd      	mov	sp, r7
1000346a:	b004      	add	sp, #16
1000346c:	bd80      	pop	{r7, pc}
1000346e:	46c0      	nop			; (mov r8, r8)
10003470:	f8ffffff 	.word	0xf8ffffff
10003474:	efffc0c0 	.word	0xefffc0c0

10003478 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
10003478:	b580      	push	{r7, lr}
1000347a:	b084      	sub	sp, #16
1000347c:	af00      	add	r7, sp, #0
1000347e:	60f8      	str	r0, [r7, #12]
10003480:	607a      	str	r2, [r7, #4]
10003482:	230b      	movs	r3, #11
10003484:	18fb      	adds	r3, r7, r3
10003486:	1c0a      	adds	r2, r1, #0
10003488:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000348a:	68fa      	ldr	r2, [r7, #12]
1000348c:	2386      	movs	r3, #134	; 0x86
1000348e:	005b      	lsls	r3, r3, #1
10003490:	58d3      	ldr	r3, [r2, r3]
10003492:	4a0e      	ldr	r2, [pc, #56]	; (100034cc <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x54>)
10003494:	4013      	ands	r3, r2
10003496:	1c19      	adds	r1, r3, #0
10003498:	68fa      	ldr	r2, [r7, #12]
1000349a:	2386      	movs	r3, #134	; 0x86
1000349c:	005b      	lsls	r3, r3, #1
1000349e:	50d1      	str	r1, [r2, r3]

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
100034a0:	68fa      	ldr	r2, [r7, #12]
100034a2:	2386      	movs	r3, #134	; 0x86
100034a4:	005b      	lsls	r3, r3, #1
100034a6:	58d3      	ldr	r3, [r2, r3]
100034a8:	4a09      	ldr	r2, [pc, #36]	; (100034d0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x58>)
100034aa:	401a      	ands	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
100034ac:	687b      	ldr	r3, [r7, #4]
100034ae:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
100034b0:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
100034b2:	230b      	movs	r3, #11
100034b4:	18fb      	adds	r3, r7, r3
100034b6:	781b      	ldrb	r3, [r3, #0]
100034b8:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
100034ba:	431a      	orrs	r2, r3
100034bc:	1c11      	adds	r1, r2, #0
100034be:	68fa      	ldr	r2, [r7, #12]
100034c0:	2386      	movs	r3, #134	; 0x86
100034c2:	005b      	lsls	r3, r3, #1
100034c4:	50d1      	str	r1, [r2, r3]
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
100034c6:	46bd      	mov	sp, r7
100034c8:	b004      	add	sp, #16
100034ca:	bd80      	pop	{r7, pc}
100034cc:	f8ffffff 	.word	0xf8ffffff
100034d0:	ffffc0ff 	.word	0xffffc0ff

100034d4 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
100034d4:	b580      	push	{r7, lr}
100034d6:	b084      	sub	sp, #16
100034d8:	af00      	add	r7, sp, #0
100034da:	60f8      	str	r0, [r7, #12]
100034dc:	607a      	str	r2, [r7, #4]
100034de:	230b      	movs	r3, #11
100034e0:	18fb      	adds	r3, r7, r3
100034e2:	1c0a      	adds	r2, r1, #0
100034e4:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100034e6:	68fb      	ldr	r3, [r7, #12]
100034e8:	699b      	ldr	r3, [r3, #24]
100034ea:	220b      	movs	r2, #11
100034ec:	18ba      	adds	r2, r7, r2
100034ee:	7812      	ldrb	r2, [r2, #0]
100034f0:	2107      	movs	r1, #7
100034f2:	4091      	lsls	r1, r2
100034f4:	1c0a      	adds	r2, r1, #0
100034f6:	43d2      	mvns	r2, r2
100034f8:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
100034fa:	230b      	movs	r3, #11
100034fc:	18fb      	adds	r3, r7, r3
100034fe:	781b      	ldrb	r3, [r3, #0]
10003500:	6879      	ldr	r1, [r7, #4]
10003502:	4099      	lsls	r1, r3
10003504:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10003506:	431a      	orrs	r2, r3
10003508:	68fb      	ldr	r3, [r7, #12]
1000350a:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
1000350c:	46bd      	mov	sp, r7
1000350e:	b004      	add	sp, #16
10003510:	bd80      	pop	{r7, pc}
10003512:	46c0      	nop			; (mov r8, r8)

10003514 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
10003514:	b580      	push	{r7, lr}
10003516:	b084      	sub	sp, #16
10003518:	af00      	add	r7, sp, #0
1000351a:	60f8      	str	r0, [r7, #12]
1000351c:	607a      	str	r2, [r7, #4]
1000351e:	230b      	movs	r3, #11
10003520:	18fb      	adds	r3, r7, r3
10003522:	1c0a      	adds	r2, r1, #0
10003524:	701a      	strb	r2, [r3, #0]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10003526:	68fa      	ldr	r2, [r7, #12]
10003528:	2384      	movs	r3, #132	; 0x84
1000352a:	005b      	lsls	r3, r3, #1
1000352c:	58d3      	ldr	r3, [r2, r3]
1000352e:	220b      	movs	r2, #11
10003530:	18ba      	adds	r2, r7, r2
10003532:	7812      	ldrb	r2, [r2, #0]
10003534:	2107      	movs	r1, #7
10003536:	4091      	lsls	r1, r2
10003538:	1c0a      	adds	r2, r1, #0
1000353a:	43d2      	mvns	r2, r2
1000353c:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
1000353e:	230b      	movs	r3, #11
10003540:	18fb      	adds	r3, r7, r3
10003542:	781b      	ldrb	r3, [r3, #0]
10003544:	6879      	ldr	r1, [r7, #4]
10003546:	4099      	lsls	r1, r3
10003548:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000354a:	431a      	orrs	r2, r3
1000354c:	1c11      	adds	r1, r2, #0
1000354e:	68fa      	ldr	r2, [r7, #12]
10003550:	2384      	movs	r3, #132	; 0x84
10003552:	005b      	lsls	r3, r3, #1
10003554:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
10003556:	46bd      	mov	sp, r7
10003558:	b004      	add	sp, #16
1000355a:	bd80      	pop	{r7, pc}

1000355c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
1000355c:	b580      	push	{r7, lr}
1000355e:	b084      	sub	sp, #16
10003560:	af00      	add	r7, sp, #0
10003562:	60f8      	str	r0, [r7, #12]
10003564:	607a      	str	r2, [r7, #4]
10003566:	230b      	movs	r3, #11
10003568:	18fb      	adds	r3, r7, r3
1000356a:	1c0a      	adds	r2, r1, #0
1000356c:	701a      	strb	r2, [r3, #0]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000356e:	68fa      	ldr	r2, [r7, #12]
10003570:	2386      	movs	r3, #134	; 0x86
10003572:	005b      	lsls	r3, r3, #1
10003574:	58d3      	ldr	r3, [r2, r3]
10003576:	220b      	movs	r2, #11
10003578:	18ba      	adds	r2, r7, r2
1000357a:	7812      	ldrb	r2, [r2, #0]
1000357c:	2107      	movs	r1, #7
1000357e:	4091      	lsls	r1, r2
10003580:	1c0a      	adds	r2, r1, #0
10003582:	43d2      	mvns	r2, r2
10003584:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
10003586:	230b      	movs	r3, #11
10003588:	18fb      	adds	r3, r7, r3
1000358a:	781b      	ldrb	r3, [r3, #0]
1000358c:	6879      	ldr	r1, [r7, #4]
1000358e:	4099      	lsls	r1, r3
10003590:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10003592:	431a      	orrs	r2, r3
10003594:	1c11      	adds	r1, r2, #0
10003596:	68fa      	ldr	r2, [r7, #12]
10003598:	2386      	movs	r3, #134	; 0x86
1000359a:	005b      	lsls	r3, r3, #1
1000359c:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
1000359e:	46bd      	mov	sp, r7
100035a0:	b004      	add	sp, #16
100035a2:	bd80      	pop	{r7, pc}

100035a4 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
100035a4:	b580      	push	{r7, lr}
100035a6:	b082      	sub	sp, #8
100035a8:	af00      	add	r7, sp, #0
100035aa:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
100035ac:	687b      	ldr	r3, [r7, #4]
100035ae:	4a04      	ldr	r2, [pc, #16]	; (100035c0 <XMC_USIC_Enable+0x1c>)
100035b0:	4293      	cmp	r3, r2
100035b2:	d102      	bne.n	100035ba <XMC_USIC_Enable+0x16>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
100035b4:	2008      	movs	r0, #8
100035b6:	f7ff fb25 	bl	10002c04 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
100035ba:	46bd      	mov	sp, r7
100035bc:	b002      	add	sp, #8
100035be:	bd80      	pop	{r7, pc}
100035c0:	48000008 	.word	0x48000008

100035c4 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
100035c4:	b580      	push	{r7, lr}
100035c6:	b084      	sub	sp, #16
100035c8:	af00      	add	r7, sp, #0
100035ca:	6078      	str	r0, [r7, #4]
100035cc:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
100035ce:	1c3b      	adds	r3, r7, #0
100035d0:	781b      	ldrb	r3, [r3, #0]
100035d2:	075b      	lsls	r3, r3, #29
100035d4:	0f5b      	lsrs	r3, r3, #29
100035d6:	b2db      	uxtb	r3, r3
100035d8:	1c1a      	adds	r2, r3, #0
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
100035da:	1cbb      	adds	r3, r7, #2
100035dc:	881b      	ldrh	r3, [r3, #0]
100035de:	059b      	lsls	r3, r3, #22
100035e0:	0d9b      	lsrs	r3, r3, #22
100035e2:	b29b      	uxth	r3, r3
100035e4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
100035e6:	4313      	orrs	r3, r2
100035e8:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
100035ea:	687a      	ldr	r2, [r7, #4]
100035ec:	23f8      	movs	r3, #248	; 0xf8
100035ee:	005b      	lsls	r3, r3, #1
100035f0:	68f9      	ldr	r1, [r7, #12]
100035f2:	50d1      	str	r1, [r2, r3]
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100035f4:	1cfb      	adds	r3, r7, #3
100035f6:	781b      	ldrb	r3, [r3, #0]
100035f8:	06db      	lsls	r3, r3, #27
100035fa:	0fdb      	lsrs	r3, r3, #31
100035fc:	b2db      	uxtb	r3, r3
100035fe:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
10003600:	1cfb      	adds	r3, r7, #3
10003602:	781b      	ldrb	r3, [r3, #0]
10003604:	071b      	lsls	r3, r3, #28
10003606:	0f9b      	lsrs	r3, r3, #30
10003608:	b2db      	uxtb	r3, r3
1000360a:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
1000360c:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
1000360e:	1cfb      	adds	r3, r7, #3
10003610:	781b      	ldrb	r3, [r3, #0]
10003612:	069b      	lsls	r3, r3, #26
10003614:	0fdb      	lsrs	r3, r3, #31
10003616:	b2db      	uxtb	r3, r3
10003618:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
1000361a:	4313      	orrs	r3, r2
1000361c:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
1000361e:	1cfb      	adds	r3, r7, #3
10003620:	781b      	ldrb	r3, [r3, #0]
10003622:	065b      	lsls	r3, r3, #25
10003624:	0fdb      	lsrs	r3, r3, #31
10003626:	b2db      	uxtb	r3, r3
10003628:	079b      	lsls	r3, r3, #30
1000362a:	68fa      	ldr	r2, [r7, #12]
1000362c:	4313      	orrs	r3, r2
1000362e:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
10003630:	687a      	ldr	r2, [r7, #4]
10003632:	23f8      	movs	r3, #248	; 0xf8
10003634:	005b      	lsls	r3, r3, #1
10003636:	58d2      	ldr	r2, [r2, r3]
10003638:	68fb      	ldr	r3, [r7, #12]
1000363a:	4313      	orrs	r3, r2
1000363c:	2280      	movs	r2, #128	; 0x80
1000363e:	0612      	lsls	r2, r2, #24
10003640:	431a      	orrs	r2, r3
10003642:	1c11      	adds	r1, r2, #0
10003644:	687a      	ldr	r2, [r7, #4]
10003646:	23f8      	movs	r3, #248	; 0xf8
10003648:	005b      	lsls	r3, r3, #1
1000364a:	50d1      	str	r1, [r2, r3]
}
1000364c:	46bd      	mov	sp, r7
1000364e:	b004      	add	sp, #16
10003650:	bd80      	pop	{r7, pc}
10003652:	46c0      	nop			; (mov r8, r8)

10003654 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10003654:	b580      	push	{r7, lr}
10003656:	b082      	sub	sp, #8
10003658:	af00      	add	r7, sp, #0
1000365a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
1000365c:	687b      	ldr	r3, [r7, #4]
1000365e:	2284      	movs	r2, #132	; 0x84
10003660:	589b      	ldr	r3, [r3, r2]
10003662:	2280      	movs	r2, #128	; 0x80
10003664:	0452      	lsls	r2, r2, #17
10003666:	431a      	orrs	r2, r3
10003668:	687b      	ldr	r3, [r7, #4]
1000366a:	2184      	movs	r1, #132	; 0x84
1000366c:	505a      	str	r2, [r3, r1]
}
1000366e:	46bd      	mov	sp, r7
10003670:	b002      	add	sp, #8
10003672:	bd80      	pop	{r7, pc}

10003674 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10003674:	b580      	push	{r7, lr}
10003676:	b082      	sub	sp, #8
10003678:	af00      	add	r7, sp, #0
1000367a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
1000367c:	687b      	ldr	r3, [r7, #4]
1000367e:	2284      	movs	r2, #132	; 0x84
10003680:	589b      	ldr	r3, [r3, r2]
10003682:	4a04      	ldr	r2, [pc, #16]	; (10003694 <XMC_VADC_GROUP_QueueDisableArbitrationSlot+0x20>)
10003684:	401a      	ands	r2, r3
10003686:	687b      	ldr	r3, [r7, #4]
10003688:	2184      	movs	r1, #132	; 0x84
1000368a:	505a      	str	r2, [r3, r1]
}
1000368c:	46bd      	mov	sp, r7
1000368e:	b002      	add	sp, #8
10003690:	bd80      	pop	{r7, pc}
10003692:	46c0      	nop			; (mov r8, r8)
10003694:	feffffff 	.word	0xfeffffff

10003698 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10003698:	b580      	push	{r7, lr}
1000369a:	af00      	add	r7, sp, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
1000369c:	4b03      	ldr	r3, [pc, #12]	; (100036ac <XMC_VADC_GLOBAL_EnableModule+0x14>)
1000369e:	22ff      	movs	r2, #255	; 0xff
100036a0:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100036a2:	2001      	movs	r0, #1
100036a4:	f7ff faae 	bl	10002c04 <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
100036a8:	46bd      	mov	sp, r7
100036aa:	bd80      	pop	{r7, pc}
100036ac:	40010500 	.word	0x40010500

100036b0 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
100036b0:	b580      	push	{r7, lr}
100036b2:	b082      	sub	sp, #8
100036b4:	af00      	add	r7, sp, #0
100036b6:	6078      	str	r0, [r7, #4]
100036b8:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
100036ba:	f7ff ffed 	bl	10003698 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
100036be:	683b      	ldr	r3, [r7, #0]
100036c0:	695a      	ldr	r2, [r3, #20]
100036c2:	687b      	ldr	r3, [r7, #4]
100036c4:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
100036c6:	683b      	ldr	r3, [r7, #0]
100036c8:	685b      	ldr	r3, [r3, #4]
100036ca:	2280      	movs	r2, #128	; 0x80
100036cc:	0212      	lsls	r2, r2, #8
100036ce:	431a      	orrs	r2, r3
100036d0:	687b      	ldr	r3, [r7, #4]
100036d2:	2180      	movs	r1, #128	; 0x80
100036d4:	505a      	str	r2, [r3, r1]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
100036d6:	683b      	ldr	r3, [r7, #0]
100036d8:	689a      	ldr	r2, [r3, #8]
100036da:	687b      	ldr	r3, [r7, #4]
100036dc:	21a0      	movs	r1, #160	; 0xa0
100036de:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
100036e0:	683b      	ldr	r3, [r7, #0]
100036e2:	68da      	ldr	r2, [r3, #12]
100036e4:	687b      	ldr	r3, [r7, #4]
100036e6:	21a4      	movs	r1, #164	; 0xa4
100036e8:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
100036ea:	683b      	ldr	r3, [r7, #0]
100036ec:	6919      	ldr	r1, [r3, #16]
100036ee:	687a      	ldr	r2, [r7, #4]
100036f0:	23a0      	movs	r3, #160	; 0xa0
100036f2:	009b      	lsls	r3, r3, #2
100036f4:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
100036f6:	683b      	ldr	r3, [r7, #0]
100036f8:	681a      	ldr	r2, [r3, #0]
100036fa:	687b      	ldr	r3, [r7, #4]
100036fc:	21b8      	movs	r1, #184	; 0xb8
100036fe:	505a      	str	r2, [r3, r1]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
10003700:	46bd      	mov	sp, r7
10003702:	b002      	add	sp, #8
10003704:	bd80      	pop	{r7, pc}
10003706:	46c0      	nop			; (mov r8, r8)

10003708 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
10003708:	b580      	push	{r7, lr}
1000370a:	b084      	sub	sp, #16
1000370c:	af00      	add	r7, sp, #0
1000370e:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10003710:	687b      	ldr	r3, [r7, #4]
10003712:	2280      	movs	r2, #128	; 0x80
10003714:	589b      	ldr	r3, [r3, r2]
10003716:	2280      	movs	r2, #128	; 0x80
10003718:	0612      	lsls	r2, r2, #24
1000371a:	431a      	orrs	r2, r3
1000371c:	687b      	ldr	r3, [r7, #4]
1000371e:	2180      	movs	r1, #128	; 0x80
10003720:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10003722:	230f      	movs	r3, #15
10003724:	18fb      	adds	r3, r7, r3
10003726:	2200      	movs	r2, #0
10003728:	701a      	strb	r2, [r3, #0]
1000372a:	e01c      	b.n	10003766 <XMC_VADC_GLOBAL_StartupCalibration+0x5e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
1000372c:	230f      	movs	r3, #15
1000372e:	18fb      	adds	r3, r7, r3
10003730:	781a      	ldrb	r2, [r3, #0]
10003732:	4b11      	ldr	r3, [pc, #68]	; (10003778 <XMC_VADC_GLOBAL_StartupCalibration+0x70>)
10003734:	0092      	lsls	r2, r2, #2
10003736:	58d3      	ldr	r3, [r2, r3]
10003738:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
1000373a:	68bb      	ldr	r3, [r7, #8]
1000373c:	2280      	movs	r2, #128	; 0x80
1000373e:	589a      	ldr	r2, [r3, r2]
10003740:	23c0      	movs	r3, #192	; 0xc0
10003742:	029b      	lsls	r3, r3, #10
10003744:	4013      	ands	r3, r2
10003746:	d007      	beq.n	10003758 <XMC_VADC_GLOBAL_StartupCalibration+0x50>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10003748:	46c0      	nop			; (mov r8, r8)
1000374a:	68bb      	ldr	r3, [r7, #8]
1000374c:	2280      	movs	r2, #128	; 0x80
1000374e:	589a      	ldr	r2, [r3, r2]
10003750:	2380      	movs	r3, #128	; 0x80
10003752:	055b      	lsls	r3, r3, #21
10003754:	4013      	ands	r3, r2
10003756:	d1f8      	bne.n	1000374a <XMC_VADC_GLOBAL_StartupCalibration+0x42>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10003758:	230f      	movs	r3, #15
1000375a:	18fb      	adds	r3, r7, r3
1000375c:	781a      	ldrb	r2, [r3, #0]
1000375e:	230f      	movs	r3, #15
10003760:	18fb      	adds	r3, r7, r3
10003762:	3201      	adds	r2, #1
10003764:	701a      	strb	r2, [r3, #0]
10003766:	230f      	movs	r3, #15
10003768:	18fb      	adds	r3, r7, r3
1000376a:	781b      	ldrb	r3, [r3, #0]
1000376c:	2b01      	cmp	r3, #1
1000376e:	d9dd      	bls.n	1000372c <XMC_VADC_GLOBAL_StartupCalibration+0x24>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
10003770:	46bd      	mov	sp, r7
10003772:	b004      	add	sp, #16
10003774:	bd80      	pop	{r7, pc}
10003776:	46c0      	nop			; (mov r8, r8)
10003778:	10009758 	.word	0x10009758

1000377c <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
1000377c:	b580      	push	{r7, lr}
1000377e:	b082      	sub	sp, #8
10003780:	af00      	add	r7, sp, #0
10003782:	6078      	str	r0, [r7, #4]
10003784:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
10003786:	687a      	ldr	r2, [r7, #4]
10003788:	683b      	ldr	r3, [r7, #0]
1000378a:	685b      	ldr	r3, [r3, #4]
1000378c:	1c10      	adds	r0, r2, #0
1000378e:	1c19      	adds	r1, r3, #0
10003790:	2200      	movs	r2, #0
10003792:	2300      	movs	r3, #0
10003794:	f000 f830 	bl	100037f8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
10003798:	687a      	ldr	r2, [r7, #4]
1000379a:	683b      	ldr	r3, [r7, #0]
1000379c:	685b      	ldr	r3, [r3, #4]
1000379e:	1c10      	adds	r0, r2, #0
100037a0:	1c19      	adds	r1, r3, #0
100037a2:	2201      	movs	r2, #1
100037a4:	2300      	movs	r3, #0
100037a6:	f000 f827 	bl	100037f8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
100037aa:	687a      	ldr	r2, [r7, #4]
100037ac:	683b      	ldr	r3, [r7, #0]
100037ae:	689b      	ldr	r3, [r3, #8]
100037b0:	1c10      	adds	r0, r2, #0
100037b2:	1c19      	adds	r1, r3, #0
100037b4:	2200      	movs	r2, #0
100037b6:	2301      	movs	r3, #1
100037b8:	f000 f81e 	bl	100037f8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
100037bc:	687a      	ldr	r2, [r7, #4]
100037be:	683b      	ldr	r3, [r7, #0]
100037c0:	689b      	ldr	r3, [r3, #8]
100037c2:	1c10      	adds	r0, r2, #0
100037c4:	1c19      	adds	r1, r3, #0
100037c6:	2201      	movs	r2, #1
100037c8:	2301      	movs	r3, #1
100037ca:	f000 f815 	bl	100037f8 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
100037ce:	683b      	ldr	r3, [r7, #0]
100037d0:	691a      	ldr	r2, [r3, #16]
100037d2:	687b      	ldr	r3, [r7, #4]
100037d4:	2180      	movs	r1, #128	; 0x80
100037d6:	505a      	str	r2, [r3, r1]

  group_ptr->BOUND = config->g_bound;
100037d8:	683b      	ldr	r3, [r7, #0]
100037da:	68da      	ldr	r2, [r3, #12]
100037dc:	687b      	ldr	r3, [r7, #4]
100037de:	21b8      	movs	r1, #184	; 0xb8
100037e0:	505a      	str	r2, [r3, r1]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
100037e2:	687a      	ldr	r2, [r7, #4]
100037e4:	683b      	ldr	r3, [r7, #0]
100037e6:	681b      	ldr	r3, [r3, #0]
100037e8:	1c10      	adds	r0, r2, #0
100037ea:	1c19      	adds	r1, r3, #0
100037ec:	f7ff feea 	bl	100035c4 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
100037f0:	46bd      	mov	sp, r7
100037f2:	b002      	add	sp, #8
100037f4:	bd80      	pop	{r7, pc}
100037f6:	46c0      	nop			; (mov r8, r8)

100037f8 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
100037f8:	b580      	push	{r7, lr}
100037fa:	b08c      	sub	sp, #48	; 0x30
100037fc:	af00      	add	r7, sp, #0
100037fe:	60f8      	str	r0, [r7, #12]
10003800:	60b9      	str	r1, [r7, #8]
10003802:	603b      	str	r3, [r7, #0]
10003804:	1dfb      	adds	r3, r7, #7
10003806:	701a      	strb	r2, [r3, #0]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
10003808:	1dfb      	adds	r3, r7, #7
1000380a:	781b      	ldrb	r3, [r3, #0]
1000380c:	2b00      	cmp	r3, #0
1000380e:	d119      	bne.n	10003844 <XMC_VADC_GROUP_InputClassInit+0x4c>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
10003810:	2308      	movs	r3, #8
10003812:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
10003814:	23e0      	movs	r3, #224	; 0xe0
10003816:	00db      	lsls	r3, r3, #3
10003818:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
1000381a:	2300      	movs	r3, #0
1000381c:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
1000381e:	231f      	movs	r3, #31
10003820:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
10003822:	2308      	movs	r3, #8
10003824:	18fb      	adds	r3, r7, r3
10003826:	781b      	ldrb	r3, [r3, #0]
10003828:	06db      	lsls	r3, r3, #27
1000382a:	0edb      	lsrs	r3, r3, #27
1000382c:	b2db      	uxtb	r3, r3
1000382e:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10003830:	2309      	movs	r3, #9
10003832:	18fb      	adds	r3, r7, r3
10003834:	781b      	ldrb	r3, [r3, #0]
10003836:	075b      	lsls	r3, r3, #29
10003838:	0f5b      	lsrs	r3, r3, #29
1000383a:	b2da      	uxtb	r2, r3
1000383c:	231b      	movs	r3, #27
1000383e:	18fb      	adds	r3, r7, r3
10003840:	701a      	strb	r2, [r3, #0]
10003842:	e019      	b.n	10003878 <XMC_VADC_GROUP_InputClassInit+0x80>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
10003844:	2318      	movs	r3, #24
10003846:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
10003848:	23e0      	movs	r3, #224	; 0xe0
1000384a:	04db      	lsls	r3, r3, #19
1000384c:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
1000384e:	2310      	movs	r3, #16
10003850:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
10003852:	23f8      	movs	r3, #248	; 0xf8
10003854:	035b      	lsls	r3, r3, #13
10003856:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
10003858:	230a      	movs	r3, #10
1000385a:	18fb      	adds	r3, r7, r3
1000385c:	781b      	ldrb	r3, [r3, #0]
1000385e:	06db      	lsls	r3, r3, #27
10003860:	0edb      	lsrs	r3, r3, #27
10003862:	b2db      	uxtb	r3, r3
10003864:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
10003866:	230b      	movs	r3, #11
10003868:	18fb      	adds	r3, r7, r3
1000386a:	781b      	ldrb	r3, [r3, #0]
1000386c:	075b      	lsls	r3, r3, #29
1000386e:	0f5b      	lsrs	r3, r3, #29
10003870:	b2da      	uxtb	r2, r3
10003872:	231b      	movs	r3, #27
10003874:	18fb      	adds	r3, r7, r3
10003876:	701a      	strb	r2, [r3, #0]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10003878:	68fb      	ldr	r3, [r7, #12]
1000387a:	683a      	ldr	r2, [r7, #0]
1000387c:	3228      	adds	r2, #40	; 0x28
1000387e:	0092      	lsls	r2, r2, #2
10003880:	58d3      	ldr	r3, [r2, r3]
10003882:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003886:	43da      	mvns	r2, r3
10003888:	697b      	ldr	r3, [r7, #20]
1000388a:	4013      	ands	r3, r2
1000388c:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
1000388e:	231b      	movs	r3, #27
10003890:	18fb      	adds	r3, r7, r3
10003892:	781a      	ldrb	r2, [r3, #0]
10003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003896:	409a      	lsls	r2, r3
10003898:	1c13      	adds	r3, r2, #0
1000389a:	697a      	ldr	r2, [r7, #20]
1000389c:	4313      	orrs	r3, r2
1000389e:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
100038a0:	6a3b      	ldr	r3, [r7, #32]
100038a2:	43da      	mvns	r2, r3
100038a4:	697b      	ldr	r3, [r7, #20]
100038a6:	4013      	ands	r3, r2
100038a8:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
100038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
100038ac:	69fa      	ldr	r2, [r7, #28]
100038ae:	409a      	lsls	r2, r3
100038b0:	1c13      	adds	r3, r2, #0
100038b2:	697a      	ldr	r2, [r7, #20]
100038b4:	4313      	orrs	r3, r2
100038b6:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
100038b8:	68fb      	ldr	r3, [r7, #12]
100038ba:	683a      	ldr	r2, [r7, #0]
100038bc:	3228      	adds	r2, #40	; 0x28
100038be:	0092      	lsls	r2, r2, #2
100038c0:	6979      	ldr	r1, [r7, #20]
100038c2:	50d1      	str	r1, [r2, r3]
}
100038c4:	46bd      	mov	sp, r7
100038c6:	b00c      	add	sp, #48	; 0x30
100038c8:	bd80      	pop	{r7, pc}
100038ca:	46c0      	nop			; (mov r8, r8)

100038cc <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
100038cc:	b580      	push	{r7, lr}
100038ce:	b084      	sub	sp, #16
100038d0:	af00      	add	r7, sp, #0
100038d2:	6078      	str	r0, [r7, #4]
100038d4:	1c0a      	adds	r2, r1, #0
100038d6:	1cfb      	adds	r3, r7, #3
100038d8:	701a      	strb	r2, [r3, #0]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
100038da:	687b      	ldr	r3, [r7, #4]
100038dc:	2280      	movs	r2, #128	; 0x80
100038de:	589b      	ldr	r3, [r3, r2]
100038e0:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
100038e2:	68fb      	ldr	r3, [r7, #12]
100038e4:	2203      	movs	r2, #3
100038e6:	4393      	bics	r3, r2
100038e8:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
100038ea:	1cfb      	adds	r3, r7, #3
100038ec:	781b      	ldrb	r3, [r3, #0]
100038ee:	68fa      	ldr	r2, [r7, #12]
100038f0:	4313      	orrs	r3, r2
100038f2:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
100038f4:	687b      	ldr	r3, [r7, #4]
100038f6:	2180      	movs	r1, #128	; 0x80
100038f8:	68fa      	ldr	r2, [r7, #12]
100038fa:	505a      	str	r2, [r3, r1]
}
100038fc:	46bd      	mov	sp, r7
100038fe:	b004      	add	sp, #16
10003900:	bd80      	pop	{r7, pc}
10003902:	46c0      	nop			; (mov r8, r8)

10003904 <XMC_VADC_GROUP_SetSyncSlave>:

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
10003904:	b580      	push	{r7, lr}
10003906:	b086      	sub	sp, #24
10003908:	af00      	add	r7, sp, #0
1000390a:	60f8      	str	r0, [r7, #12]
1000390c:	60b9      	str	r1, [r7, #8]
1000390e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
10003910:	687a      	ldr	r2, [r7, #4]
10003912:	68bb      	ldr	r3, [r7, #8]
10003914:	429a      	cmp	r2, r3
10003916:	d902      	bls.n	1000391e <XMC_VADC_GROUP_SetSyncSlave+0x1a>
  {
    master_grp = master_grp + 1U;
10003918:	68bb      	ldr	r3, [r7, #8]
1000391a:	3301      	adds	r3, #1
1000391c:	60bb      	str	r3, [r7, #8]
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
1000391e:	68fb      	ldr	r3, [r7, #12]
10003920:	22c0      	movs	r2, #192	; 0xc0
10003922:	589b      	ldr	r3, [r3, r2]
10003924:	617b      	str	r3, [r7, #20]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
10003926:	697b      	ldr	r3, [r7, #20]
10003928:	2203      	movs	r2, #3
1000392a:	4393      	bics	r3, r2
1000392c:	617b      	str	r3, [r7, #20]
  synctr   |= master_grp;
1000392e:	697a      	ldr	r2, [r7, #20]
10003930:	68bb      	ldr	r3, [r7, #8]
10003932:	4313      	orrs	r3, r2
10003934:	617b      	str	r3, [r7, #20]
  group_ptr->SYNCTR = synctr;
10003936:	68fb      	ldr	r3, [r7, #12]
10003938:	21c0      	movs	r1, #192	; 0xc0
1000393a:	697a      	ldr	r2, [r7, #20]
1000393c:	505a      	str	r2, [r3, r1]
}
1000393e:	46bd      	mov	sp, r7
10003940:	b006      	add	sp, #24
10003942:	bd80      	pop	{r7, pc}

10003944 <XMC_VADC_GROUP_SetSyncMaster>:

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
10003944:	b580      	push	{r7, lr}
10003946:	b084      	sub	sp, #16
10003948:	af00      	add	r7, sp, #0
1000394a:	6078      	str	r0, [r7, #4]
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
1000394c:	687b      	ldr	r3, [r7, #4]
1000394e:	22c0      	movs	r2, #192	; 0xc0
10003950:	589b      	ldr	r3, [r3, r2]
10003952:	60fb      	str	r3, [r7, #12]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
10003954:	68fb      	ldr	r3, [r7, #12]
10003956:	2203      	movs	r2, #3
10003958:	4393      	bics	r3, r2
1000395a:	60fb      	str	r3, [r7, #12]
  group_ptr->SYNCTR = synctr;
1000395c:	687b      	ldr	r3, [r7, #4]
1000395e:	21c0      	movs	r1, #192	; 0xc0
10003960:	68fa      	ldr	r2, [r7, #12]
10003962:	505a      	str	r2, [r3, r1]
}
10003964:	46bd      	mov	sp, r7
10003966:	b004      	add	sp, #16
10003968:	bd80      	pop	{r7, pc}
1000396a:	46c0      	nop			; (mov r8, r8)

1000396c <XMC_VADC_GROUP_CheckSlaveReadiness>:

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
1000396c:	b580      	push	{r7, lr}
1000396e:	b082      	sub	sp, #8
10003970:	af00      	add	r7, sp, #0
10003972:	6078      	str	r0, [r7, #4]
10003974:	6039      	str	r1, [r7, #0]
    ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
  }

  group_ptr->SYNCTR |= (uint32_t)((uint32_t)1 << ready_pos);
#else
  group_ptr->SYNCTR |= ((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
10003976:	687b      	ldr	r3, [r7, #4]
10003978:	22c0      	movs	r2, #192	; 0xc0
1000397a:	589b      	ldr	r3, [r3, r2]
1000397c:	2210      	movs	r2, #16
1000397e:	431a      	orrs	r2, r3
10003980:	687b      	ldr	r3, [r7, #4]
10003982:	21c0      	movs	r1, #192	; 0xc0
10003984:	505a      	str	r2, [r3, r1]
#endif
}
10003986:	46bd      	mov	sp, r7
10003988:	b002      	add	sp, #8
1000398a:	bd80      	pop	{r7, pc}

1000398c <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>:
  shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
}

/* API to enable the accelerated mode of conversion */
void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP_INDEX_t group_num)
{
1000398c:	b580      	push	{r7, lr}
1000398e:	b082      	sub	sp, #8
10003990:	af00      	add	r7, sp, #0
10003992:	6078      	str	r0, [r7, #4]
10003994:	1c0a      	adds	r2, r1, #0
10003996:	1cfb      	adds	r3, r7, #3
10003998:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
1000399a:	1cfb      	adds	r3, r7, #3
1000399c:	781b      	ldrb	r3, [r3, #0]
1000399e:	2b00      	cmp	r3, #0
100039a0:	d108      	bne.n	100039b4 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x28>
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
100039a2:	687b      	ldr	r3, [r7, #4]
100039a4:	2280      	movs	r2, #128	; 0x80
100039a6:	589b      	ldr	r3, [r3, r2]
100039a8:	2201      	movs	r2, #1
100039aa:	431a      	orrs	r2, r3
100039ac:	687b      	ldr	r3, [r7, #4]
100039ae:	2180      	movs	r1, #128	; 0x80
100039b0:	505a      	str	r2, [r3, r1]
100039b2:	e00b      	b.n	100039cc <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
100039b4:	1cfb      	adds	r3, r7, #3
100039b6:	781b      	ldrb	r3, [r3, #0]
100039b8:	2b01      	cmp	r3, #1
100039ba:	d107      	bne.n	100039cc <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  {
    shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
100039bc:	687b      	ldr	r3, [r7, #4]
100039be:	2284      	movs	r2, #132	; 0x84
100039c0:	589b      	ldr	r3, [r3, r2]
100039c2:	2201      	movs	r2, #1
100039c4:	431a      	orrs	r2, r3
100039c6:	687b      	ldr	r3, [r7, #4]
100039c8:	2184      	movs	r1, #132	; 0x84
100039ca:	505a      	str	r2, [r3, r1]
  }
  else
  {
    /* for MISRA*/
  }
}
100039cc:	46bd      	mov	sp, r7
100039ce:	b002      	add	sp, #8
100039d0:	bd80      	pop	{r7, pc}
100039d2:	46c0      	nop			; (mov r8, r8)

100039d4 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
100039d4:	b580      	push	{r7, lr}
100039d6:	b084      	sub	sp, #16
100039d8:	af00      	add	r7, sp, #0
100039da:	6078      	str	r0, [r7, #4]
100039dc:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
100039de:	687b      	ldr	r3, [r7, #4]
100039e0:	1c18      	adds	r0, r3, #0
100039e2:	f7ff fe47 	bl	10003674 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
100039e6:	687b      	ldr	r3, [r7, #4]
100039e8:	2284      	movs	r2, #132	; 0x84
100039ea:	589b      	ldr	r3, [r3, r2]
100039ec:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
100039ee:	68fb      	ldr	r3, [r7, #12]
100039f0:	2203      	movs	r2, #3
100039f2:	4393      	bics	r3, r2
100039f4:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
100039f6:	683b      	ldr	r3, [r7, #0]
100039f8:	781b      	ldrb	r3, [r3, #0]
100039fa:	071b      	lsls	r3, r3, #28
100039fc:	0f9b      	lsrs	r3, r3, #30
100039fe:	b2db      	uxtb	r3, r3
10003a00:	1c1a      	adds	r2, r3, #0
10003a02:	68fb      	ldr	r3, [r7, #12]
10003a04:	4313      	orrs	r3, r2
10003a06:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10003a08:	683b      	ldr	r3, [r7, #0]
10003a0a:	781b      	ldrb	r3, [r3, #0]
10003a0c:	2203      	movs	r2, #3
10003a0e:	4013      	ands	r3, r2
10003a10:	b2db      	uxtb	r3, r3
10003a12:	2b00      	cmp	r3, #0
10003a14:	d003      	beq.n	10003a1e <XMC_VADC_GROUP_QueueInit+0x4a>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
10003a16:	68fb      	ldr	r3, [r7, #12]
10003a18:	2208      	movs	r2, #8
10003a1a:	4313      	orrs	r3, r2
10003a1c:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
10003a1e:	687b      	ldr	r3, [r7, #4]
10003a20:	2184      	movs	r1, #132	; 0x84
10003a22:	68fa      	ldr	r2, [r7, #12]
10003a24:	505a      	str	r2, [r3, r1]


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
10003a26:	683b      	ldr	r3, [r7, #0]
10003a28:	685b      	ldr	r3, [r3, #4]
10003a2a:	4a15      	ldr	r2, [pc, #84]	; (10003a80 <XMC_VADC_GROUP_QueueInit+0xac>)
10003a2c:	431a      	orrs	r2, r3
10003a2e:	1c11      	adds	r1, r2, #0
10003a30:	687a      	ldr	r2, [r7, #4]
10003a32:	2380      	movs	r3, #128	; 0x80
10003a34:	005b      	lsls	r3, r3, #1
10003a36:	50d1      	str	r1, [r2, r3]
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
10003a38:	683b      	ldr	r3, [r7, #0]
10003a3a:	689b      	ldr	r3, [r3, #8]
10003a3c:	2201      	movs	r2, #1
10003a3e:	431a      	orrs	r2, r3
10003a40:	1c11      	adds	r1, r2, #0
10003a42:	687a      	ldr	r2, [r7, #4]
10003a44:	2382      	movs	r3, #130	; 0x82
10003a46:	005b      	lsls	r3, r3, #1
10003a48:	50d1      	str	r1, [r2, r3]

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
10003a4a:	683b      	ldr	r3, [r7, #0]
10003a4c:	781b      	ldrb	r3, [r3, #0]
10003a4e:	2203      	movs	r2, #3
10003a50:	4013      	ands	r3, r2
10003a52:	b2db      	uxtb	r3, r3
10003a54:	2b02      	cmp	r3, #2
10003a56:	d10b      	bne.n	10003a70 <XMC_VADC_GROUP_QueueInit+0x9c>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
10003a58:	687a      	ldr	r2, [r7, #4]
10003a5a:	2382      	movs	r3, #130	; 0x82
10003a5c:	005b      	lsls	r3, r3, #1
10003a5e:	58d3      	ldr	r3, [r2, r3]
10003a60:	2280      	movs	r2, #128	; 0x80
10003a62:	0252      	lsls	r2, r2, #9
10003a64:	431a      	orrs	r2, r3
10003a66:	1c11      	adds	r1, r2, #0
10003a68:	687a      	ldr	r2, [r7, #4]
10003a6a:	2382      	movs	r3, #130	; 0x82
10003a6c:	005b      	lsls	r3, r3, #1
10003a6e:	50d1      	str	r1, [r2, r3]
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
10003a70:	687b      	ldr	r3, [r7, #4]
10003a72:	1c18      	adds	r0, r3, #0
10003a74:	f7ff fdee 	bl	10003654 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
10003a78:	46bd      	mov	sp, r7
10003a7a:	b004      	add	sp, #16
10003a7c:	bd80      	pop	{r7, pc}
10003a7e:	46c0      	nop			; (mov r8, r8)
10003a80:	80808000 	.word	0x80808000

10003a84 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
10003a84:	b580      	push	{r7, lr}
10003a86:	b084      	sub	sp, #16
10003a88:	af00      	add	r7, sp, #0
10003a8a:	6078      	str	r0, [r7, #4]
10003a8c:	1c0a      	adds	r2, r1, #0
10003a8e:	1cfb      	adds	r3, r7, #3
10003a90:	701a      	strb	r2, [r3, #0]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
10003a92:	687a      	ldr	r2, [r7, #4]
10003a94:	23e0      	movs	r3, #224	; 0xe0
10003a96:	005b      	lsls	r3, r3, #1
10003a98:	58d3      	ldr	r3, [r2, r3]
10003a9a:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
10003a9c:	68fb      	ldr	r3, [r7, #12]
10003a9e:	220f      	movs	r2, #15
10003aa0:	4393      	bics	r3, r2
10003aa2:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
10003aa4:	1cfb      	adds	r3, r7, #3
10003aa6:	781b      	ldrb	r3, [r3, #0]
10003aa8:	68fa      	ldr	r2, [r7, #12]
10003aaa:	4313      	orrs	r3, r2
10003aac:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
10003aae:	687a      	ldr	r2, [r7, #4]
10003ab0:	23e0      	movs	r3, #224	; 0xe0
10003ab2:	005b      	lsls	r3, r3, #1
10003ab4:	68f9      	ldr	r1, [r7, #12]
10003ab6:	50d1      	str	r1, [r2, r3]

}
10003ab8:	46bd      	mov	sp, r7
10003aba:	b004      	add	sp, #16
10003abc:	bd80      	pop	{r7, pc}
10003abe:	46c0      	nop			; (mov r8, r8)

10003ac0 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
10003ac0:	b580      	push	{r7, lr}
10003ac2:	b088      	sub	sp, #32
10003ac4:	af00      	add	r7, sp, #0
10003ac6:	60f8      	str	r0, [r7, #12]
10003ac8:	60b9      	str	r1, [r7, #8]
10003aca:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
10003acc:	687b      	ldr	r3, [r7, #4]
10003ace:	7b1b      	ldrb	r3, [r3, #12]
10003ad0:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10003ad2:	68fb      	ldr	r3, [r7, #12]
10003ad4:	2288      	movs	r2, #136	; 0x88
10003ad6:	589b      	ldr	r3, [r3, r2]
10003ad8:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10003ada:	68bb      	ldr	r3, [r7, #8]
10003adc:	2201      	movs	r2, #1
10003ade:	409a      	lsls	r2, r3
10003ae0:	1c13      	adds	r3, r2, #0
10003ae2:	43da      	mvns	r2, r3
10003ae4:	697b      	ldr	r3, [r7, #20]
10003ae6:	4013      	ands	r3, r2
10003ae8:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
10003aea:	68bb      	ldr	r3, [r7, #8]
10003aec:	69ba      	ldr	r2, [r7, #24]
10003aee:	409a      	lsls	r2, r3
10003af0:	1c13      	adds	r3, r2, #0
10003af2:	697a      	ldr	r2, [r7, #20]
10003af4:	4313      	orrs	r3, r2
10003af6:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
10003af8:	68fb      	ldr	r3, [r7, #12]
10003afa:	2188      	movs	r1, #136	; 0x88
10003afc:	697a      	ldr	r2, [r7, #20]
10003afe:	505a      	str	r2, [r3, r1]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10003b00:	687b      	ldr	r3, [r7, #4]
10003b02:	7b5b      	ldrb	r3, [r3, #13]
10003b04:	b25b      	sxtb	r3, r3
10003b06:	2b00      	cmp	r3, #0
10003b08:	db2a      	blt.n	10003b60 <XMC_VADC_GROUP_ChannelInit+0xa0>
  {
    mask = (uint32_t)0;
10003b0a:	2300      	movs	r3, #0
10003b0c:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
10003b0e:	68bb      	ldr	r3, [r7, #8]
10003b10:	2b01      	cmp	r3, #1
10003b12:	d10a      	bne.n	10003b2a <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
10003b14:	2308      	movs	r3, #8
10003b16:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10003b18:	68fb      	ldr	r3, [r7, #12]
10003b1a:	22b0      	movs	r2, #176	; 0xb0
10003b1c:	589b      	ldr	r3, [r3, r2]
10003b1e:	4a1e      	ldr	r2, [pc, #120]	; (10003b98 <XMC_VADC_GROUP_ChannelInit+0xd8>)
10003b20:	401a      	ands	r2, r3
10003b22:	68fb      	ldr	r3, [r7, #12]
10003b24:	21b0      	movs	r1, #176	; 0xb0
10003b26:	505a      	str	r2, [r3, r1]
10003b28:	e00d      	b.n	10003b46 <XMC_VADC_GROUP_ChannelInit+0x86>
    }
    else if ((uint32_t)0 == ch_num)
10003b2a:	68bb      	ldr	r3, [r7, #8]
10003b2c:	2b00      	cmp	r3, #0
10003b2e:	d10a      	bne.n	10003b46 <XMC_VADC_GROUP_ChannelInit+0x86>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
10003b30:	2300      	movs	r3, #0
10003b32:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10003b34:	68fb      	ldr	r3, [r7, #12]
10003b36:	22b0      	movs	r2, #176	; 0xb0
10003b38:	589b      	ldr	r3, [r3, r2]
10003b3a:	221f      	movs	r2, #31
10003b3c:	4393      	bics	r3, r2
10003b3e:	1c1a      	adds	r2, r3, #0
10003b40:	68fb      	ldr	r3, [r7, #12]
10003b42:	21b0      	movs	r1, #176	; 0xb0
10003b44:	505a      	str	r2, [r3, r1]
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
10003b46:	68fb      	ldr	r3, [r7, #12]
10003b48:	22b0      	movs	r2, #176	; 0xb0
10003b4a:	589b      	ldr	r3, [r3, r2]
10003b4c:	687a      	ldr	r2, [r7, #4]
10003b4e:	7b52      	ldrb	r2, [r2, #13]
10003b50:	b251      	sxtb	r1, r2
10003b52:	69fa      	ldr	r2, [r7, #28]
10003b54:	4091      	lsls	r1, r2
10003b56:	1c0a      	adds	r2, r1, #0
10003b58:	431a      	orrs	r2, r3
10003b5a:	68fb      	ldr	r3, [r7, #12]
10003b5c:	21b0      	movs	r1, #176	; 0xb0
10003b5e:	505a      	str	r2, [r3, r1]
  }

  group_ptr->BFL |= config->bfl;
10003b60:	68fb      	ldr	r3, [r7, #12]
10003b62:	22c8      	movs	r2, #200	; 0xc8
10003b64:	589a      	ldr	r2, [r3, r2]
10003b66:	687b      	ldr	r3, [r7, #4]
10003b68:	685b      	ldr	r3, [r3, #4]
10003b6a:	431a      	orrs	r2, r3
10003b6c:	68fb      	ldr	r3, [r7, #12]
10003b6e:	21c8      	movs	r1, #200	; 0xc8
10003b70:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10003b72:	68fb      	ldr	r3, [r7, #12]
10003b74:	22d0      	movs	r2, #208	; 0xd0
10003b76:	589a      	ldr	r2, [r3, r2]
10003b78:	687b      	ldr	r3, [r7, #4]
10003b7a:	689b      	ldr	r3, [r3, #8]
10003b7c:	431a      	orrs	r2, r3
10003b7e:	68fb      	ldr	r3, [r7, #12]
10003b80:	21d0      	movs	r1, #208	; 0xd0
10003b82:	505a      	str	r2, [r3, r1]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10003b84:	687b      	ldr	r3, [r7, #4]
10003b86:	6819      	ldr	r1, [r3, #0]
10003b88:	68fb      	ldr	r3, [r7, #12]
10003b8a:	68ba      	ldr	r2, [r7, #8]
10003b8c:	3280      	adds	r2, #128	; 0x80
10003b8e:	0092      	lsls	r2, r2, #2
10003b90:	50d1      	str	r1, [r2, r3]

}
10003b92:	46bd      	mov	sp, r7
10003b94:	b008      	add	sp, #32
10003b96:	bd80      	pop	{r7, pc}
10003b98:	ffffe0ff 	.word	0xffffe0ff

10003b9c <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
10003b9c:	b580      	push	{r7, lr}
10003b9e:	b086      	sub	sp, #24
10003ba0:	af00      	add	r7, sp, #0
10003ba2:	60f8      	str	r0, [r7, #12]
10003ba4:	60b9      	str	r1, [r7, #8]
10003ba6:	1dfb      	adds	r3, r7, #7
10003ba8:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
10003baa:	68bb      	ldr	r3, [r7, #8]
10003bac:	2b07      	cmp	r3, #7
10003bae:	d81b      	bhi.n	10003be8 <XMC_VADC_GROUP_SetResultInterruptNode+0x4c>
  {
    route_mask  = group_ptr->REVNP0;
10003bb0:	68fa      	ldr	r2, [r7, #12]
10003bb2:	23d8      	movs	r3, #216	; 0xd8
10003bb4:	005b      	lsls	r3, r3, #1
10003bb6:	58d3      	ldr	r3, [r2, r3]
10003bb8:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
10003bba:	68bb      	ldr	r3, [r7, #8]
10003bbc:	009b      	lsls	r3, r3, #2
10003bbe:	1c1a      	adds	r2, r3, #0
10003bc0:	230f      	movs	r3, #15
10003bc2:	4093      	lsls	r3, r2
10003bc4:	43da      	mvns	r2, r3
10003bc6:	697b      	ldr	r3, [r7, #20]
10003bc8:	4013      	ands	r3, r2
10003bca:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
10003bcc:	1dfb      	adds	r3, r7, #7
10003bce:	781b      	ldrb	r3, [r3, #0]
10003bd0:	68ba      	ldr	r2, [r7, #8]
10003bd2:	0092      	lsls	r2, r2, #2
10003bd4:	4093      	lsls	r3, r2
10003bd6:	697a      	ldr	r2, [r7, #20]
10003bd8:	4313      	orrs	r3, r2
10003bda:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
10003bdc:	68fa      	ldr	r2, [r7, #12]
10003bde:	23d8      	movs	r3, #216	; 0xd8
10003be0:	005b      	lsls	r3, r3, #1
10003be2:	6979      	ldr	r1, [r7, #20]
10003be4:	50d1      	str	r1, [r2, r3]
10003be6:	e020      	b.n	10003c2a <XMC_VADC_GROUP_SetResultInterruptNode+0x8e>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10003be8:	68fa      	ldr	r2, [r7, #12]
10003bea:	23da      	movs	r3, #218	; 0xda
10003bec:	005b      	lsls	r3, r3, #1
10003bee:	58d3      	ldr	r3, [r2, r3]
10003bf0:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10003bf2:	68bb      	ldr	r3, [r7, #8]
10003bf4:	4a0e      	ldr	r2, [pc, #56]	; (10003c30 <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
10003bf6:	4694      	mov	ip, r2
10003bf8:	4463      	add	r3, ip
10003bfa:	009b      	lsls	r3, r3, #2
10003bfc:	1c1a      	adds	r2, r3, #0
10003bfe:	230f      	movs	r3, #15
10003c00:	4093      	lsls	r3, r2
10003c02:	43da      	mvns	r2, r3
10003c04:	697b      	ldr	r3, [r7, #20]
10003c06:	4013      	ands	r3, r2
10003c08:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10003c0a:	1dfb      	adds	r3, r7, #7
10003c0c:	781b      	ldrb	r3, [r3, #0]
10003c0e:	68ba      	ldr	r2, [r7, #8]
10003c10:	4907      	ldr	r1, [pc, #28]	; (10003c30 <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
10003c12:	468c      	mov	ip, r1
10003c14:	4462      	add	r2, ip
10003c16:	0092      	lsls	r2, r2, #2
10003c18:	4093      	lsls	r3, r2
10003c1a:	697a      	ldr	r2, [r7, #20]
10003c1c:	4313      	orrs	r3, r2
10003c1e:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
10003c20:	68fa      	ldr	r2, [r7, #12]
10003c22:	23da      	movs	r3, #218	; 0xda
10003c24:	005b      	lsls	r3, r3, #1
10003c26:	6979      	ldr	r1, [r7, #20]
10003c28:	50d1      	str	r1, [r2, r3]
  }
}
10003c2a:	46bd      	mov	sp, r7
10003c2c:	b006      	add	sp, #24
10003c2e:	bd80      	pop	{r7, pc}
10003c30:	3ffffff8 	.word	0x3ffffff8

10003c34 <_init>:
  }
}

/* Init */
void _init(void)
{}
10003c34:	b580      	push	{r7, lr}
10003c36:	af00      	add	r7, sp, #0
10003c38:	46bd      	mov	sp, r7
10003c3a:	bd80      	pop	{r7, pc}

10003c3c <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003c3c:	b580      	push	{r7, lr}
10003c3e:	b082      	sub	sp, #8
10003c40:	af00      	add	r7, sp, #0
10003c42:	6078      	str	r0, [r7, #4]
10003c44:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
10003c46:	687b      	ldr	r3, [r7, #4]
10003c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10003c4a:	683b      	ldr	r3, [r7, #0]
10003c4c:	431a      	orrs	r2, r3
10003c4e:	687b      	ldr	r3, [r7, #4]
10003c50:	641a      	str	r2, [r3, #64]	; 0x40
}
10003c52:	46bd      	mov	sp, r7
10003c54:	b002      	add	sp, #8
10003c56:	bd80      	pop	{r7, pc}

10003c58 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003c58:	b580      	push	{r7, lr}
10003c5a:	b082      	sub	sp, #8
10003c5c:	af00      	add	r7, sp, #0
10003c5e:	6078      	str	r0, [r7, #4]
10003c60:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
10003c62:	687b      	ldr	r3, [r7, #4]
10003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003c66:	683a      	ldr	r2, [r7, #0]
10003c68:	43d2      	mvns	r2, r2
10003c6a:	401a      	ands	r2, r3
10003c6c:	687b      	ldr	r3, [r7, #4]
10003c6e:	641a      	str	r2, [r3, #64]	; 0x40
}
10003c70:	46bd      	mov	sp, r7
10003c72:	b002      	add	sp, #8
10003c74:	bd80      	pop	{r7, pc}
10003c76:	46c0      	nop			; (mov r8, r8)

10003c78 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10003c78:	b580      	push	{r7, lr}
10003c7a:	b082      	sub	sp, #8
10003c7c:	af00      	add	r7, sp, #0
10003c7e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10003c80:	687b      	ldr	r3, [r7, #4]
10003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003c84:	b2db      	uxtb	r3, r3
10003c86:	227f      	movs	r2, #127	; 0x7f
10003c88:	4393      	bics	r3, r2
10003c8a:	b2db      	uxtb	r3, r3
}
10003c8c:	1c18      	adds	r0, r3, #0
10003c8e:	46bd      	mov	sp, r7
10003c90:	b002      	add	sp, #8
10003c92:	bd80      	pop	{r7, pc}

10003c94 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
10003c94:	b580      	push	{r7, lr}
10003c96:	b082      	sub	sp, #8
10003c98:	af00      	add	r7, sp, #0
10003c9a:	6078      	str	r0, [r7, #4]
10003c9c:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
10003c9e:	683b      	ldr	r3, [r7, #0]
10003ca0:	2280      	movs	r2, #128	; 0x80
10003ca2:	0252      	lsls	r2, r2, #9
10003ca4:	409a      	lsls	r2, r3
10003ca6:	687b      	ldr	r3, [r7, #4]
10003ca8:	669a      	str	r2, [r3, #104]	; 0x68
}
10003caa:	46bd      	mov	sp, r7
10003cac:	b002      	add	sp, #8
10003cae:	bd80      	pop	{r7, pc}

10003cb0 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003cb0:	b580      	push	{r7, lr}
10003cb2:	b082      	sub	sp, #8
10003cb4:	af00      	add	r7, sp, #0
10003cb6:	6078      	str	r0, [r7, #4]
10003cb8:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10003cba:	687a      	ldr	r2, [r7, #4]
10003cbc:	2384      	movs	r3, #132	; 0x84
10003cbe:	005b      	lsls	r3, r3, #1
10003cc0:	58d2      	ldr	r2, [r2, r3]
10003cc2:	683b      	ldr	r3, [r7, #0]
10003cc4:	431a      	orrs	r2, r3
10003cc6:	1c11      	adds	r1, r2, #0
10003cc8:	687a      	ldr	r2, [r7, #4]
10003cca:	2384      	movs	r3, #132	; 0x84
10003ccc:	005b      	lsls	r3, r3, #1
10003cce:	50d1      	str	r1, [r2, r3]
}
10003cd0:	46bd      	mov	sp, r7
10003cd2:	b002      	add	sp, #8
10003cd4:	bd80      	pop	{r7, pc}
10003cd6:	46c0      	nop			; (mov r8, r8)

10003cd8 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003cd8:	b580      	push	{r7, lr}
10003cda:	b082      	sub	sp, #8
10003cdc:	af00      	add	r7, sp, #0
10003cde:	6078      	str	r0, [r7, #4]
10003ce0:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
10003ce2:	687a      	ldr	r2, [r7, #4]
10003ce4:	2384      	movs	r3, #132	; 0x84
10003ce6:	005b      	lsls	r3, r3, #1
10003ce8:	58d3      	ldr	r3, [r2, r3]
10003cea:	683a      	ldr	r2, [r7, #0]
10003cec:	43d2      	mvns	r2, r2
10003cee:	401a      	ands	r2, r3
10003cf0:	1c11      	adds	r1, r2, #0
10003cf2:	687a      	ldr	r2, [r7, #4]
10003cf4:	2384      	movs	r3, #132	; 0x84
10003cf6:	005b      	lsls	r3, r3, #1
10003cf8:	50d1      	str	r1, [r2, r3]
}
10003cfa:	46bd      	mov	sp, r7
10003cfc:	b002      	add	sp, #8
10003cfe:	bd80      	pop	{r7, pc}

10003d00 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10003d00:	b580      	push	{r7, lr}
10003d02:	b082      	sub	sp, #8
10003d04:	af00      	add	r7, sp, #0
10003d06:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10003d08:	687a      	ldr	r2, [r7, #4]
10003d0a:	238c      	movs	r3, #140	; 0x8c
10003d0c:	005b      	lsls	r3, r3, #1
10003d0e:	2180      	movs	r1, #128	; 0x80
10003d10:	0209      	lsls	r1, r1, #8
10003d12:	50d1      	str	r1, [r2, r3]
}
10003d14:	46bd      	mov	sp, r7
10003d16:	b002      	add	sp, #8
10003d18:	bd80      	pop	{r7, pc}
10003d1a:	46c0      	nop			; (mov r8, r8)

10003d1c <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10003d1c:	b580      	push	{r7, lr}
10003d1e:	b082      	sub	sp, #8
10003d20:	af00      	add	r7, sp, #0
10003d22:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10003d24:	687a      	ldr	r2, [r7, #4]
10003d26:	238a      	movs	r3, #138	; 0x8a
10003d28:	005b      	lsls	r3, r3, #1
10003d2a:	58d2      	ldr	r2, [r2, r3]
10003d2c:	2380      	movs	r3, #128	; 0x80
10003d2e:	015b      	lsls	r3, r3, #5
10003d30:	4013      	ands	r3, r2
10003d32:	1e5a      	subs	r2, r3, #1
10003d34:	4193      	sbcs	r3, r2
10003d36:	b2db      	uxtb	r3, r3
}
10003d38:	1c18      	adds	r0, r3, #0
10003d3a:	46bd      	mov	sp, r7
10003d3c:	b002      	add	sp, #8
10003d3e:	bd80      	pop	{r7, pc}

10003d40 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10003d40:	b580      	push	{r7, lr}
10003d42:	b082      	sub	sp, #8
10003d44:	af00      	add	r7, sp, #0
10003d46:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
10003d48:	687a      	ldr	r2, [r7, #4]
10003d4a:	238a      	movs	r3, #138	; 0x8a
10003d4c:	005b      	lsls	r3, r3, #1
10003d4e:	58d2      	ldr	r2, [r2, r3]
10003d50:	2380      	movs	r3, #128	; 0x80
10003d52:	011b      	lsls	r3, r3, #4
10003d54:	4013      	ands	r3, r2
10003d56:	1e5a      	subs	r2, r3, #1
10003d58:	4193      	sbcs	r3, r2
10003d5a:	b2db      	uxtb	r3, r3
}
10003d5c:	1c18      	adds	r0, r3, #0
10003d5e:	46bd      	mov	sp, r7
10003d60:	b002      	add	sp, #8
10003d62:	bd80      	pop	{r7, pc}

10003d64 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003d64:	b580      	push	{r7, lr}
10003d66:	b082      	sub	sp, #8
10003d68:	af00      	add	r7, sp, #0
10003d6a:	6078      	str	r0, [r7, #4]
10003d6c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
10003d6e:	687a      	ldr	r2, [r7, #4]
10003d70:	2386      	movs	r3, #134	; 0x86
10003d72:	005b      	lsls	r3, r3, #1
10003d74:	58d2      	ldr	r2, [r2, r3]
10003d76:	683b      	ldr	r3, [r7, #0]
10003d78:	431a      	orrs	r2, r3
10003d7a:	1c11      	adds	r1, r2, #0
10003d7c:	687a      	ldr	r2, [r7, #4]
10003d7e:	2386      	movs	r3, #134	; 0x86
10003d80:	005b      	lsls	r3, r3, #1
10003d82:	50d1      	str	r1, [r2, r3]
}
10003d84:	46bd      	mov	sp, r7
10003d86:	b002      	add	sp, #8
10003d88:	bd80      	pop	{r7, pc}
10003d8a:	46c0      	nop			; (mov r8, r8)

10003d8c <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003d8c:	b580      	push	{r7, lr}
10003d8e:	b082      	sub	sp, #8
10003d90:	af00      	add	r7, sp, #0
10003d92:	6078      	str	r0, [r7, #4]
10003d94:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
10003d96:	687a      	ldr	r2, [r7, #4]
10003d98:	2386      	movs	r3, #134	; 0x86
10003d9a:	005b      	lsls	r3, r3, #1
10003d9c:	58d3      	ldr	r3, [r2, r3]
10003d9e:	683a      	ldr	r2, [r7, #0]
10003da0:	43d2      	mvns	r2, r2
10003da2:	401a      	ands	r2, r3
10003da4:	1c11      	adds	r1, r2, #0
10003da6:	687a      	ldr	r2, [r7, #4]
10003da8:	2386      	movs	r3, #134	; 0x86
10003daa:	005b      	lsls	r3, r3, #1
10003dac:	50d1      	str	r1, [r2, r3]
}
10003dae:	46bd      	mov	sp, r7
10003db0:	b002      	add	sp, #8
10003db2:	bd80      	pop	{r7, pc}

10003db4 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10003db4:	b580      	push	{r7, lr}
10003db6:	b082      	sub	sp, #8
10003db8:	af00      	add	r7, sp, #0
10003dba:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
10003dbc:	687a      	ldr	r2, [r7, #4]
10003dbe:	238c      	movs	r3, #140	; 0x8c
10003dc0:	005b      	lsls	r3, r3, #1
10003dc2:	2180      	movs	r1, #128	; 0x80
10003dc4:	01c9      	lsls	r1, r1, #7
10003dc6:	50d1      	str	r1, [r2, r3]
}
10003dc8:	46bd      	mov	sp, r7
10003dca:	b002      	add	sp, #8
10003dcc:	bd80      	pop	{r7, pc}
10003dce:	46c0      	nop			; (mov r8, r8)

10003dd0 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10003dd0:	b580      	push	{r7, lr}
10003dd2:	b082      	sub	sp, #8
10003dd4:	af00      	add	r7, sp, #0
10003dd6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
10003dd8:	687a      	ldr	r2, [r7, #4]
10003dda:	238a      	movs	r3, #138	; 0x8a
10003ddc:	005b      	lsls	r3, r3, #1
10003dde:	58d3      	ldr	r3, [r2, r3]
10003de0:	2208      	movs	r2, #8
10003de2:	4013      	ands	r3, r2
10003de4:	1e5a      	subs	r2, r3, #1
10003de6:	4193      	sbcs	r3, r2
10003de8:	b2db      	uxtb	r3, r3
}
10003dea:	1c18      	adds	r0, r3, #0
10003dec:	46bd      	mov	sp, r7
10003dee:	b002      	add	sp, #8
10003df0:	bd80      	pop	{r7, pc}
10003df2:	46c0      	nop			; (mov r8, r8)

10003df4 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
10003df4:	b590      	push	{r4, r7, lr}
10003df6:	b085      	sub	sp, #20
10003df8:	af00      	add	r7, sp, #0
10003dfa:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
10003dfc:	230f      	movs	r3, #15
10003dfe:	18fb      	adds	r3, r7, r3
10003e00:	2200      	movs	r2, #0
10003e02:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
10003e04:	687b      	ldr	r3, [r7, #4]
10003e06:	685b      	ldr	r3, [r3, #4]
10003e08:	685b      	ldr	r3, [r3, #4]
10003e0a:	220f      	movs	r2, #15
10003e0c:	18bc      	adds	r4, r7, r2
10003e0e:	4798      	blx	r3
10003e10:	1c03      	adds	r3, r0, #0
10003e12:	7023      	strb	r3, [r4, #0]

  return status;
10003e14:	230f      	movs	r3, #15
10003e16:	18fb      	adds	r3, r7, r3
10003e18:	781b      	ldrb	r3, [r3, #0]
}
10003e1a:	1c18      	adds	r0, r3, #0
10003e1c:	46bd      	mov	sp, r7
10003e1e:	b005      	add	sp, #20
10003e20:	bd90      	pop	{r4, r7, pc}
10003e22:	46c0      	nop			; (mov r8, r8)

10003e24 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10003e24:	b590      	push	{r4, r7, lr}
10003e26:	b087      	sub	sp, #28
10003e28:	af00      	add	r7, sp, #0
10003e2a:	60f8      	str	r0, [r7, #12]
10003e2c:	60b9      	str	r1, [r7, #8]
10003e2e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10003e30:	2317      	movs	r3, #23
10003e32:	18fb      	adds	r3, r7, r3
10003e34:	2204      	movs	r2, #4
10003e36:	701a      	strb	r2, [r3, #0]

  switch(handle->config->transmit_mode)
10003e38:	68fb      	ldr	r3, [r7, #12]
10003e3a:	685b      	ldr	r3, [r3, #4]
10003e3c:	2229      	movs	r2, #41	; 0x29
10003e3e:	5c9b      	ldrb	r3, [r3, r2]
10003e40:	2b00      	cmp	r3, #0
10003e42:	d000      	beq.n	10003e46 <UART_Transmit+0x22>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
10003e44:	e00c      	b.n	10003e60 <UART_Transmit+0x3c>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
10003e46:	2317      	movs	r3, #23
10003e48:	18fc      	adds	r4, r7, r3
10003e4a:	68f9      	ldr	r1, [r7, #12]
10003e4c:	68ba      	ldr	r2, [r7, #8]
10003e4e:	687b      	ldr	r3, [r7, #4]
10003e50:	1c08      	adds	r0, r1, #0
10003e52:	1c11      	adds	r1, r2, #0
10003e54:	1c1a      	adds	r2, r3, #0
10003e56:	f000 f831 	bl	10003ebc <UART_StartTransmitIRQ>
10003e5a:	1c03      	adds	r3, r0, #0
10003e5c:	7023      	strb	r3, [r4, #0]
    break;
10003e5e:	46c0      	nop			; (mov r8, r8)
    break;
#endif
  default:
    break;
  }
  return ret_stat;
10003e60:	2317      	movs	r3, #23
10003e62:	18fb      	adds	r3, r7, r3
10003e64:	781b      	ldrb	r3, [r3, #0]
}
10003e66:	1c18      	adds	r0, r3, #0
10003e68:	46bd      	mov	sp, r7
10003e6a:	b007      	add	sp, #28
10003e6c:	bd90      	pop	{r4, r7, pc}
10003e6e:	46c0      	nop			; (mov r8, r8)

10003e70 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10003e70:	b590      	push	{r4, r7, lr}
10003e72:	b087      	sub	sp, #28
10003e74:	af00      	add	r7, sp, #0
10003e76:	60f8      	str	r0, [r7, #12]
10003e78:	60b9      	str	r1, [r7, #8]
10003e7a:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10003e7c:	2317      	movs	r3, #23
10003e7e:	18fb      	adds	r3, r7, r3
10003e80:	2204      	movs	r2, #4
10003e82:	701a      	strb	r2, [r3, #0]

  switch(handle->config->receive_mode)
10003e84:	68fb      	ldr	r3, [r7, #12]
10003e86:	685b      	ldr	r3, [r3, #4]
10003e88:	222a      	movs	r2, #42	; 0x2a
10003e8a:	5c9b      	ldrb	r3, [r3, r2]
10003e8c:	2b00      	cmp	r3, #0
10003e8e:	d000      	beq.n	10003e92 <UART_Receive+0x22>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
10003e90:	e00c      	b.n	10003eac <UART_Receive+0x3c>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
10003e92:	2317      	movs	r3, #23
10003e94:	18fc      	adds	r4, r7, r3
10003e96:	68f9      	ldr	r1, [r7, #12]
10003e98:	68ba      	ldr	r2, [r7, #8]
10003e9a:	687b      	ldr	r3, [r7, #4]
10003e9c:	1c08      	adds	r0, r1, #0
10003e9e:	1c11      	adds	r1, r2, #0
10003ea0:	1c1a      	adds	r2, r3, #0
10003ea2:	f000 f873 	bl	10003f8c <UART_StartReceiveIRQ>
10003ea6:	1c03      	adds	r3, r0, #0
10003ea8:	7023      	strb	r3, [r4, #0]
    break;
10003eaa:	46c0      	nop			; (mov r8, r8)
    break;
#endif
  default:
    break;
  }
  return ret_stat;
10003eac:	2317      	movs	r3, #23
10003eae:	18fb      	adds	r3, r7, r3
10003eb0:	781b      	ldrb	r3, [r3, #0]
}
10003eb2:	1c18      	adds	r0, r3, #0
10003eb4:	46bd      	mov	sp, r7
10003eb6:	b007      	add	sp, #28
10003eb8:	bd90      	pop	{r4, r7, pc}
10003eba:	46c0      	nop			; (mov r8, r8)

10003ebc <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10003ebc:	b580      	push	{r7, lr}
10003ebe:	b086      	sub	sp, #24
10003ec0:	af00      	add	r7, sp, #0
10003ec2:	60f8      	str	r0, [r7, #12]
10003ec4:	60b9      	str	r1, [r7, #8]
10003ec6:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10003ec8:	2317      	movs	r3, #23
10003eca:	18fb      	adds	r3, r7, r3
10003ecc:	2204      	movs	r2, #4
10003ece:	701a      	strb	r2, [r3, #0]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10003ed0:	68fb      	ldr	r3, [r7, #12]
10003ed2:	689b      	ldr	r3, [r3, #8]
10003ed4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
10003ed6:	68fb      	ldr	r3, [r7, #12]
10003ed8:	685b      	ldr	r3, [r3, #4]
10003eda:	2229      	movs	r2, #41	; 0x29
10003edc:	5c9b      	ldrb	r3, [r3, r2]
10003ede:	2b00      	cmp	r3, #0
10003ee0:	d14c      	bne.n	10003f7c <UART_StartTransmitIRQ+0xc0>
  {
    ret_stat = UART_STATUS_BUSY;
10003ee2:	2317      	movs	r3, #23
10003ee4:	18fb      	adds	r3, r7, r3
10003ee6:	2202      	movs	r2, #2
10003ee8:	701a      	strb	r2, [r3, #0]
    if (ptr_runtime->tx_busy == false)
10003eea:	693b      	ldr	r3, [r7, #16]
10003eec:	7e1b      	ldrb	r3, [r3, #24]
10003eee:	b2db      	uxtb	r3, r3
10003ef0:	2201      	movs	r2, #1
10003ef2:	4053      	eors	r3, r2
10003ef4:	b2db      	uxtb	r3, r3
10003ef6:	2b00      	cmp	r3, #0
10003ef8:	d040      	beq.n	10003f7c <UART_StartTransmitIRQ+0xc0>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
10003efa:	68bb      	ldr	r3, [r7, #8]
10003efc:	2b00      	cmp	r3, #0
10003efe:	d039      	beq.n	10003f74 <UART_StartTransmitIRQ+0xb8>
10003f00:	687b      	ldr	r3, [r7, #4]
10003f02:	2b00      	cmp	r3, #0
10003f04:	d036      	beq.n	10003f74 <UART_StartTransmitIRQ+0xb8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
10003f06:	693b      	ldr	r3, [r7, #16]
10003f08:	68ba      	ldr	r2, [r7, #8]
10003f0a:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
10003f0c:	693b      	ldr	r3, [r7, #16]
10003f0e:	687a      	ldr	r2, [r7, #4]
10003f10:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
10003f12:	693b      	ldr	r3, [r7, #16]
10003f14:	2200      	movs	r2, #0
10003f16:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
10003f18:	693b      	ldr	r3, [r7, #16]
10003f1a:	2201      	movs	r2, #1
10003f1c:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10003f1e:	68fb      	ldr	r3, [r7, #12]
10003f20:	685b      	ldr	r3, [r3, #4]
10003f22:	222b      	movs	r2, #43	; 0x2b
10003f24:	5c9b      	ldrb	r3, [r3, r2]
10003f26:	2b00      	cmp	r3, #0
10003f28:	d00d      	beq.n	10003f46 <UART_StartTransmitIRQ+0x8a>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
10003f2a:	68fb      	ldr	r3, [r7, #12]
10003f2c:	681b      	ldr	r3, [r3, #0]
10003f2e:	1c18      	adds	r0, r3, #0
10003f30:	f7ff fee6 	bl	10003d00 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003f34:	68fb      	ldr	r3, [r7, #12]
10003f36:	681a      	ldr	r2, [r3, #0]
10003f38:	2380      	movs	r3, #128	; 0x80
10003f3a:	05db      	lsls	r3, r3, #23
10003f3c:	1c10      	adds	r0, r2, #0
10003f3e:	1c19      	adds	r1, r3, #0
10003f40:	f7ff feb6 	bl	10003cb0 <XMC_USIC_CH_TXFIFO_EnableEvent>
10003f44:	e007      	b.n	10003f56 <UART_StartTransmitIRQ+0x9a>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
10003f46:	68fb      	ldr	r3, [r7, #12]
10003f48:	681a      	ldr	r2, [r3, #0]
10003f4a:	2380      	movs	r3, #128	; 0x80
10003f4c:	019b      	lsls	r3, r3, #6
10003f4e:	1c10      	adds	r0, r2, #0
10003f50:	1c19      	adds	r1, r3, #0
10003f52:	f7ff fe73 	bl	10003c3c <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
10003f56:	2317      	movs	r3, #23
10003f58:	18fb      	adds	r3, r7, r3
10003f5a:	2200      	movs	r2, #0
10003f5c:	701a      	strb	r2, [r3, #0]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
10003f5e:	68fb      	ldr	r3, [r7, #12]
10003f60:	6819      	ldr	r1, [r3, #0]
10003f62:	68fb      	ldr	r3, [r7, #12]
10003f64:	685b      	ldr	r3, [r3, #4]
10003f66:	222d      	movs	r2, #45	; 0x2d
10003f68:	5c9b      	ldrb	r3, [r3, r2]
10003f6a:	1c08      	adds	r0, r1, #0
10003f6c:	1c19      	adds	r1, r3, #0
10003f6e:	f7ff fe91 	bl	10003c94 <XMC_USIC_CH_TriggerServiceRequest>
10003f72:	e003      	b.n	10003f7c <UART_StartTransmitIRQ+0xc0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
10003f74:	2317      	movs	r3, #23
10003f76:	18fb      	adds	r3, r7, r3
10003f78:	2203      	movs	r2, #3
10003f7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret_stat;
10003f7c:	2317      	movs	r3, #23
10003f7e:	18fb      	adds	r3, r7, r3
10003f80:	781b      	ldrb	r3, [r3, #0]
}
10003f82:	1c18      	adds	r0, r3, #0
10003f84:	46bd      	mov	sp, r7
10003f86:	b006      	add	sp, #24
10003f88:	bd80      	pop	{r7, pc}
10003f8a:	46c0      	nop			; (mov r8, r8)

10003f8c <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10003f8c:	b580      	push	{r7, lr}
10003f8e:	b086      	sub	sp, #24
10003f90:	af00      	add	r7, sp, #0
10003f92:	60f8      	str	r0, [r7, #12]
10003f94:	60b9      	str	r1, [r7, #8]
10003f96:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10003f98:	2317      	movs	r3, #23
10003f9a:	18fb      	adds	r3, r7, r3
10003f9c:	2204      	movs	r2, #4
10003f9e:	701a      	strb	r2, [r3, #0]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10003fa0:	68fb      	ldr	r3, [r7, #12]
10003fa2:	689b      	ldr	r3, [r3, #8]
10003fa4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
10003fa6:	68fb      	ldr	r3, [r7, #12]
10003fa8:	685b      	ldr	r3, [r3, #4]
10003faa:	222a      	movs	r2, #42	; 0x2a
10003fac:	5c9b      	ldrb	r3, [r3, r2]
10003fae:	2b00      	cmp	r3, #0
10003fb0:	d148      	bne.n	10004044 <UART_StartReceiveIRQ+0xb8>
  {
    ret_stat = UART_STATUS_BUSY;
10003fb2:	2317      	movs	r3, #23
10003fb4:	18fb      	adds	r3, r7, r3
10003fb6:	2202      	movs	r2, #2
10003fb8:	701a      	strb	r2, [r3, #0]
    if (ptr_runtime->rx_busy == false)
10003fba:	693b      	ldr	r3, [r7, #16]
10003fbc:	7e5b      	ldrb	r3, [r3, #25]
10003fbe:	b2db      	uxtb	r3, r3
10003fc0:	2201      	movs	r2, #1
10003fc2:	4053      	eors	r3, r2
10003fc4:	b2db      	uxtb	r3, r3
10003fc6:	2b00      	cmp	r3, #0
10003fc8:	d03c      	beq.n	10004044 <UART_StartReceiveIRQ+0xb8>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
10003fca:	68bb      	ldr	r3, [r7, #8]
10003fcc:	2b00      	cmp	r3, #0
10003fce:	d035      	beq.n	1000403c <UART_StartReceiveIRQ+0xb0>
10003fd0:	687b      	ldr	r3, [r7, #4]
10003fd2:	2b00      	cmp	r3, #0
10003fd4:	d032      	beq.n	1000403c <UART_StartReceiveIRQ+0xb0>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
10003fd6:	693b      	ldr	r3, [r7, #16]
10003fd8:	68ba      	ldr	r2, [r7, #8]
10003fda:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
10003fdc:	693b      	ldr	r3, [r7, #16]
10003fde:	687a      	ldr	r2, [r7, #4]
10003fe0:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
10003fe2:	693b      	ldr	r3, [r7, #16]
10003fe4:	2201      	movs	r2, #1
10003fe6:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
10003fe8:	693b      	ldr	r3, [r7, #16]
10003fea:	2200      	movs	r2, #0
10003fec:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10003fee:	68fb      	ldr	r3, [r7, #12]
10003ff0:	685b      	ldr	r3, [r3, #4]
10003ff2:	222c      	movs	r2, #44	; 0x2c
10003ff4:	5c9b      	ldrb	r3, [r3, r2]
10003ff6:	2b00      	cmp	r3, #0
10003ff8:	d013      	beq.n	10004022 <UART_StartReceiveIRQ+0x96>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
10003ffa:	68fb      	ldr	r3, [r7, #12]
10003ffc:	681b      	ldr	r3, [r3, #0]
10003ffe:	1c18      	adds	r0, r3, #0
10004000:	f7ff fed8 	bl	10003db4 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
10004004:	68fa      	ldr	r2, [r7, #12]
10004006:	687b      	ldr	r3, [r7, #4]
10004008:	1c10      	adds	r0, r2, #0
1000400a:	1c19      	adds	r1, r3, #0
1000400c:	f000 f93e 	bl	1000428c <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
10004010:	68fb      	ldr	r3, [r7, #12]
10004012:	681a      	ldr	r2, [r3, #0]
10004014:	23c0      	movs	r3, #192	; 0xc0
10004016:	05db      	lsls	r3, r3, #23
10004018:	1c10      	adds	r0, r2, #0
1000401a:	1c19      	adds	r1, r3, #0
1000401c:	f7ff fea2 	bl	10003d64 <XMC_USIC_CH_RXFIFO_EnableEvent>
10004020:	e007      	b.n	10004032 <UART_StartReceiveIRQ+0xa6>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
10004022:	68fb      	ldr	r3, [r7, #12]
10004024:	681a      	ldr	r2, [r3, #0]
10004026:	23c0      	movs	r3, #192	; 0xc0
10004028:	021b      	lsls	r3, r3, #8
1000402a:	1c10      	adds	r0, r2, #0
1000402c:	1c19      	adds	r1, r3, #0
1000402e:	f7ff fe05 	bl	10003c3c <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
10004032:	2317      	movs	r3, #23
10004034:	18fb      	adds	r3, r7, r3
10004036:	2200      	movs	r2, #0
10004038:	701a      	strb	r2, [r3, #0]
1000403a:	e003      	b.n	10004044 <UART_StartReceiveIRQ+0xb8>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
1000403c:	2317      	movs	r3, #23
1000403e:	18fb      	adds	r3, r7, r3
10004040:	2203      	movs	r2, #3
10004042:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret_stat;
10004044:	2317      	movs	r3, #23
10004046:	18fb      	adds	r3, r7, r3
10004048:	781b      	ldrb	r3, [r3, #0]
}
1000404a:	1c18      	adds	r0, r3, #0
1000404c:	46bd      	mov	sp, r7
1000404e:	b006      	add	sp, #24
10004050:	bd80      	pop	{r7, pc}
10004052:	46c0      	nop			; (mov r8, r8)

10004054 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
10004054:	b580      	push	{r7, lr}
10004056:	b084      	sub	sp, #16
10004058:	af00      	add	r7, sp, #0
1000405a:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
1000405c:	687b      	ldr	r3, [r7, #4]
1000405e:	689b      	ldr	r3, [r3, #8]
10004060:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10004062:	68fb      	ldr	r3, [r7, #12]
10004064:	68da      	ldr	r2, [r3, #12]
10004066:	68fb      	ldr	r3, [r7, #12]
10004068:	689b      	ldr	r3, [r3, #8]
1000406a:	429a      	cmp	r2, r3
1000406c:	d241      	bcs.n	100040f2 <UART_lTransmitHandler+0x9e>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000406e:	687b      	ldr	r3, [r7, #4]
10004070:	685b      	ldr	r3, [r3, #4]
10004072:	222b      	movs	r2, #43	; 0x2b
10004074:	5c9b      	ldrb	r3, [r3, r2]
10004076:	2b00      	cmp	r3, #0
10004078:	d028      	beq.n	100040cc <UART_lTransmitHandler+0x78>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
1000407a:	e01a      	b.n	100040b2 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000407c:	68fb      	ldr	r3, [r7, #12]
1000407e:	68da      	ldr	r2, [r3, #12]
10004080:	68fb      	ldr	r3, [r7, #12]
10004082:	689b      	ldr	r3, [r3, #8]
10004084:	429a      	cmp	r2, r3
10004086:	d212      	bcs.n	100040ae <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10004088:	687b      	ldr	r3, [r7, #4]
1000408a:	6819      	ldr	r1, [r3, #0]
1000408c:	68fb      	ldr	r3, [r7, #12]
1000408e:	681a      	ldr	r2, [r3, #0]
10004090:	68fb      	ldr	r3, [r7, #12]
10004092:	68db      	ldr	r3, [r3, #12]
10004094:	18d3      	adds	r3, r2, r3
10004096:	781b      	ldrb	r3, [r3, #0]
10004098:	b29b      	uxth	r3, r3
1000409a:	1c08      	adds	r0, r1, #0
1000409c:	1c19      	adds	r1, r3, #0
1000409e:	f7ff f89f 	bl	100031e0 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
100040a2:	68fb      	ldr	r3, [r7, #12]
100040a4:	68db      	ldr	r3, [r3, #12]
100040a6:	1c5a      	adds	r2, r3, #1
100040a8:	68fb      	ldr	r3, [r7, #12]
100040aa:	60da      	str	r2, [r3, #12]
100040ac:	e001      	b.n	100040b2 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
100040ae:	46c0      	nop			; (mov r8, r8)
100040b0:	e055      	b.n	1000415e <UART_lTransmitHandler+0x10a>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
100040b2:	687b      	ldr	r3, [r7, #4]
100040b4:	681b      	ldr	r3, [r3, #0]
100040b6:	1c18      	adds	r0, r3, #0
100040b8:	f7ff fe30 	bl	10003d1c <XMC_USIC_CH_TXFIFO_IsFull>
100040bc:	1c03      	adds	r3, r0, #0
100040be:	1c1a      	adds	r2, r3, #0
100040c0:	2301      	movs	r3, #1
100040c2:	4053      	eors	r3, r2
100040c4:	b2db      	uxtb	r3, r3
100040c6:	2b00      	cmp	r3, #0
100040c8:	d1d8      	bne.n	1000407c <UART_lTransmitHandler+0x28>
100040ca:	e048      	b.n	1000415e <UART_lTransmitHandler+0x10a>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
100040cc:	687b      	ldr	r3, [r7, #4]
100040ce:	6819      	ldr	r1, [r3, #0]
100040d0:	68fb      	ldr	r3, [r7, #12]
100040d2:	681a      	ldr	r2, [r3, #0]
100040d4:	68fb      	ldr	r3, [r7, #12]
100040d6:	68db      	ldr	r3, [r3, #12]
100040d8:	18d3      	adds	r3, r2, r3
100040da:	781b      	ldrb	r3, [r3, #0]
100040dc:	b29b      	uxth	r3, r3
100040de:	1c08      	adds	r0, r1, #0
100040e0:	1c19      	adds	r1, r3, #0
100040e2:	f7ff f87d 	bl	100031e0 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
100040e6:	68fb      	ldr	r3, [r7, #12]
100040e8:	68db      	ldr	r3, [r3, #12]
100040ea:	1c5a      	adds	r2, r3, #1
100040ec:	68fb      	ldr	r3, [r7, #12]
100040ee:	60da      	str	r2, [r3, #12]
100040f0:	e035      	b.n	1000415e <UART_lTransmitHandler+0x10a>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
100040f2:	687b      	ldr	r3, [r7, #4]
100040f4:	681b      	ldr	r3, [r3, #0]
100040f6:	1c18      	adds	r0, r3, #0
100040f8:	f7ff fe22 	bl	10003d40 <XMC_USIC_CH_TXFIFO_IsEmpty>
100040fc:	1e03      	subs	r3, r0, #0
100040fe:	d02e      	beq.n	1000415e <UART_lTransmitHandler+0x10a>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10004100:	687b      	ldr	r3, [r7, #4]
10004102:	685b      	ldr	r3, [r3, #4]
10004104:	222b      	movs	r2, #43	; 0x2b
10004106:	5c9b      	ldrb	r3, [r3, r2]
10004108:	2b00      	cmp	r3, #0
1000410a:	d008      	beq.n	1000411e <UART_lTransmitHandler+0xca>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
1000410c:	687b      	ldr	r3, [r7, #4]
1000410e:	681a      	ldr	r2, [r3, #0]
10004110:	2380      	movs	r3, #128	; 0x80
10004112:	05db      	lsls	r3, r3, #23
10004114:	1c10      	adds	r0, r2, #0
10004116:	1c19      	adds	r1, r3, #0
10004118:	f7ff fdde 	bl	10003cd8 <XMC_USIC_CH_TXFIFO_DisableEvent>
1000411c:	e007      	b.n	1000412e <UART_lTransmitHandler+0xda>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
1000411e:	687b      	ldr	r3, [r7, #4]
10004120:	681a      	ldr	r2, [r3, #0]
10004122:	2380      	movs	r3, #128	; 0x80
10004124:	019b      	lsls	r3, r3, #6
10004126:	1c10      	adds	r0, r2, #0
10004128:	1c19      	adds	r1, r3, #0
1000412a:	f7ff fd95 	bl	10003c58 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000412e:	46c0      	nop			; (mov r8, r8)
10004130:	687b      	ldr	r3, [r7, #4]
10004132:	681b      	ldr	r3, [r3, #0]
10004134:	1c18      	adds	r0, r3, #0
10004136:	f7ff fd9f 	bl	10003c78 <XMC_USIC_CH_GetTransmitBufferStatus>
1000413a:	1e03      	subs	r3, r0, #0
1000413c:	2b80      	cmp	r3, #128	; 0x80
1000413e:	d0f7      	beq.n	10004130 <UART_lTransmitHandler+0xdc>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
10004140:	68fb      	ldr	r3, [r7, #12]
10004142:	2200      	movs	r2, #0
10004144:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
10004146:	68fb      	ldr	r3, [r7, #12]
10004148:	2200      	movs	r2, #0
1000414a:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
1000414c:	687b      	ldr	r3, [r7, #4]
1000414e:	685b      	ldr	r3, [r3, #4]
10004150:	689b      	ldr	r3, [r3, #8]
10004152:	2b00      	cmp	r3, #0
10004154:	d003      	beq.n	1000415e <UART_lTransmitHandler+0x10a>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
10004156:	687b      	ldr	r3, [r7, #4]
10004158:	685b      	ldr	r3, [r3, #4]
1000415a:	689b      	ldr	r3, [r3, #8]
1000415c:	4798      	blx	r3
      }
    }
  }
}
1000415e:	46bd      	mov	sp, r7
10004160:	b004      	add	sp, #16
10004162:	bd80      	pop	{r7, pc}

10004164 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
10004164:	b590      	push	{r4, r7, lr}
10004166:	b085      	sub	sp, #20
10004168:	af00      	add	r7, sp, #0
1000416a:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
1000416c:	687b      	ldr	r3, [r7, #4]
1000416e:	689b      	ldr	r3, [r3, #8]
10004170:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10004172:	687b      	ldr	r3, [r7, #4]
10004174:	685b      	ldr	r3, [r3, #4]
10004176:	222c      	movs	r2, #44	; 0x2c
10004178:	5c9b      	ldrb	r3, [r3, r2]
1000417a:	2b00      	cmp	r3, #0
1000417c:	d051      	beq.n	10004222 <UART_lReceiveHandler+0xbe>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
1000417e:	e033      	b.n	100041e8 <UART_lReceiveHandler+0x84>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10004180:	68fb      	ldr	r3, [r7, #12]
10004182:	695a      	ldr	r2, [r3, #20]
10004184:	68fb      	ldr	r3, [r7, #12]
10004186:	691b      	ldr	r3, [r3, #16]
10004188:	429a      	cmp	r2, r3
1000418a:	d211      	bcs.n	100041b0 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1000418c:	68fb      	ldr	r3, [r7, #12]
1000418e:	685a      	ldr	r2, [r3, #4]
10004190:	68fb      	ldr	r3, [r7, #12]
10004192:	695b      	ldr	r3, [r3, #20]
10004194:	18d4      	adds	r4, r2, r3
10004196:	687b      	ldr	r3, [r7, #4]
10004198:	681b      	ldr	r3, [r3, #0]
1000419a:	1c18      	adds	r0, r3, #0
1000419c:	f7ff f84e 	bl	1000323c <XMC_UART_CH_GetReceivedData>
100041a0:	1c03      	adds	r3, r0, #0
100041a2:	b2db      	uxtb	r3, r3
100041a4:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
100041a6:	68fb      	ldr	r3, [r7, #12]
100041a8:	695b      	ldr	r3, [r3, #20]
100041aa:	1c5a      	adds	r2, r3, #1
100041ac:	68fb      	ldr	r3, [r7, #12]
100041ae:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
100041b0:	68fb      	ldr	r3, [r7, #12]
100041b2:	695a      	ldr	r2, [r3, #20]
100041b4:	68fb      	ldr	r3, [r7, #12]
100041b6:	691b      	ldr	r3, [r3, #16]
100041b8:	429a      	cmp	r2, r3
100041ba:	d115      	bne.n	100041e8 <UART_lReceiveHandler+0x84>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
100041bc:	68fb      	ldr	r3, [r7, #12]
100041be:	2200      	movs	r2, #0
100041c0:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
100041c2:	687b      	ldr	r3, [r7, #4]
100041c4:	681a      	ldr	r2, [r3, #0]
100041c6:	23c0      	movs	r3, #192	; 0xc0
100041c8:	05db      	lsls	r3, r3, #23
100041ca:	1c10      	adds	r0, r2, #0
100041cc:	1c19      	adds	r1, r3, #0
100041ce:	f7ff fddd 	bl	10003d8c <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
100041d2:	687b      	ldr	r3, [r7, #4]
100041d4:	685b      	ldr	r3, [r3, #4]
100041d6:	68db      	ldr	r3, [r3, #12]
100041d8:	2b00      	cmp	r3, #0
100041da:	d004      	beq.n	100041e6 <UART_lReceiveHandler+0x82>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
100041dc:	687b      	ldr	r3, [r7, #4]
100041de:	685b      	ldr	r3, [r3, #4]
100041e0:	68db      	ldr	r3, [r3, #12]
100041e2:	4798      	blx	r3
        }
        break;
100041e4:	e00c      	b.n	10004200 <UART_lReceiveHandler+0x9c>
100041e6:	e00b      	b.n	10004200 <UART_lReceiveHandler+0x9c>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
100041e8:	687b      	ldr	r3, [r7, #4]
100041ea:	681b      	ldr	r3, [r3, #0]
100041ec:	1c18      	adds	r0, r3, #0
100041ee:	f7ff fdef 	bl	10003dd0 <XMC_USIC_CH_RXFIFO_IsEmpty>
100041f2:	1c03      	adds	r3, r0, #0
100041f4:	1c1a      	adds	r2, r3, #0
100041f6:	2301      	movs	r3, #1
100041f8:	4053      	eors	r3, r2
100041fa:	b2db      	uxtb	r3, r3
100041fc:	2b00      	cmp	r3, #0
100041fe:	d1bf      	bne.n	10004180 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10004200:	68fb      	ldr	r3, [r7, #12]
10004202:	695a      	ldr	r2, [r3, #20]
10004204:	68fb      	ldr	r3, [r7, #12]
10004206:	691b      	ldr	r3, [r3, #16]
10004208:	429a      	cmp	r2, r3
1000420a:	d23c      	bcs.n	10004286 <UART_lReceiveHandler+0x122>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
1000420c:	68fb      	ldr	r3, [r7, #12]
1000420e:	691a      	ldr	r2, [r3, #16]
10004210:	68fb      	ldr	r3, [r7, #12]
10004212:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
10004214:	1ad3      	subs	r3, r2, r3
10004216:	687a      	ldr	r2, [r7, #4]
10004218:	1c10      	adds	r0, r2, #0
1000421a:	1c19      	adds	r1, r3, #0
1000421c:	f000 f836 	bl	1000428c <UART_lReconfigureRxFIFO>
10004220:	e031      	b.n	10004286 <UART_lReceiveHandler+0x122>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10004222:	68fb      	ldr	r3, [r7, #12]
10004224:	695a      	ldr	r2, [r3, #20]
10004226:	68fb      	ldr	r3, [r7, #12]
10004228:	691b      	ldr	r3, [r3, #16]
1000422a:	429a      	cmp	r2, r3
1000422c:	d211      	bcs.n	10004252 <UART_lReceiveHandler+0xee>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1000422e:	68fb      	ldr	r3, [r7, #12]
10004230:	685a      	ldr	r2, [r3, #4]
10004232:	68fb      	ldr	r3, [r7, #12]
10004234:	695b      	ldr	r3, [r3, #20]
10004236:	18d4      	adds	r4, r2, r3
10004238:	687b      	ldr	r3, [r7, #4]
1000423a:	681b      	ldr	r3, [r3, #0]
1000423c:	1c18      	adds	r0, r3, #0
1000423e:	f7fe fffd 	bl	1000323c <XMC_UART_CH_GetReceivedData>
10004242:	1c03      	adds	r3, r0, #0
10004244:	b2db      	uxtb	r3, r3
10004246:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
10004248:	68fb      	ldr	r3, [r7, #12]
1000424a:	695b      	ldr	r3, [r3, #20]
1000424c:	1c5a      	adds	r2, r3, #1
1000424e:	68fb      	ldr	r3, [r7, #12]
10004250:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10004252:	68fb      	ldr	r3, [r7, #12]
10004254:	695a      	ldr	r2, [r3, #20]
10004256:	68fb      	ldr	r3, [r7, #12]
10004258:	691b      	ldr	r3, [r3, #16]
1000425a:	429a      	cmp	r2, r3
1000425c:	d113      	bne.n	10004286 <UART_lReceiveHandler+0x122>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
1000425e:	68fb      	ldr	r3, [r7, #12]
10004260:	2200      	movs	r2, #0
10004262:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
10004264:	687b      	ldr	r3, [r7, #4]
10004266:	681a      	ldr	r2, [r3, #0]
10004268:	23c0      	movs	r3, #192	; 0xc0
1000426a:	021b      	lsls	r3, r3, #8
1000426c:	1c10      	adds	r0, r2, #0
1000426e:	1c19      	adds	r1, r3, #0
10004270:	f7ff fcf2 	bl	10003c58 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
10004274:	687b      	ldr	r3, [r7, #4]
10004276:	685b      	ldr	r3, [r3, #4]
10004278:	68db      	ldr	r3, [r3, #12]
1000427a:	2b00      	cmp	r3, #0
1000427c:	d003      	beq.n	10004286 <UART_lReceiveHandler+0x122>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
1000427e:	687b      	ldr	r3, [r7, #4]
10004280:	685b      	ldr	r3, [r3, #4]
10004282:	68db      	ldr	r3, [r3, #12]
10004284:	4798      	blx	r3
      }
    }
  }
}
10004286:	46bd      	mov	sp, r7
10004288:	b005      	add	sp, #20
1000428a:	bd90      	pop	{r4, r7, pc}

1000428c <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
1000428c:	b580      	push	{r7, lr}
1000428e:	b084      	sub	sp, #16
10004290:	af00      	add	r7, sp, #0
10004292:	6078      	str	r0, [r7, #4]
10004294:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
10004296:	2300      	movs	r3, #0
10004298:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
1000429a:	687b      	ldr	r3, [r7, #4]
1000429c:	685b      	ldr	r3, [r3, #4]
1000429e:	222c      	movs	r2, #44	; 0x2c
100042a0:	5c9b      	ldrb	r3, [r3, r2]
100042a2:	1c1a      	adds	r2, r3, #0
100042a4:	2301      	movs	r3, #1
100042a6:	4093      	lsls	r3, r2
100042a8:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
100042aa:	683a      	ldr	r2, [r7, #0]
100042ac:	68bb      	ldr	r3, [r7, #8]
100042ae:	429a      	cmp	r2, r3
100042b0:	d203      	bcs.n	100042ba <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
100042b2:	683b      	ldr	r3, [r7, #0]
100042b4:	3b01      	subs	r3, #1
100042b6:	60fb      	str	r3, [r7, #12]
100042b8:	e002      	b.n	100042c0 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
100042ba:	68bb      	ldr	r3, [r7, #8]
100042bc:	3b01      	subs	r3, #1
100042be:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
100042c0:	687b      	ldr	r3, [r7, #4]
100042c2:	6819      	ldr	r1, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
100042c4:	687b      	ldr	r3, [r7, #4]
100042c6:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
100042c8:	222c      	movs	r2, #44	; 0x2c
100042ca:	5c9a      	ldrb	r2, [r3, r2]
100042cc:	68fb      	ldr	r3, [r7, #12]
100042ce:	1c08      	adds	r0, r1, #0
100042d0:	1c11      	adds	r1, r2, #0
100042d2:	1c1a      	adds	r2, r3, #0
100042d4:	f7ff f8d0 	bl	10003478 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
100042d8:	46bd      	mov	sp, r7
100042da:	b004      	add	sp, #16
100042dc:	bd80      	pop	{r7, pc}
100042de:	46c0      	nop			; (mov r8, r8)

100042e0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
100042e0:	b580      	push	{r7, lr}
100042e2:	b082      	sub	sp, #8
100042e4:	af00      	add	r7, sp, #0
100042e6:	1c02      	adds	r2, r0, #0
100042e8:	1dfb      	adds	r3, r7, #7
100042ea:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100042ec:	4b06      	ldr	r3, [pc, #24]	; (10004308 <NVIC_EnableIRQ+0x28>)
100042ee:	1dfa      	adds	r2, r7, #7
100042f0:	7812      	ldrb	r2, [r2, #0]
100042f2:	1c11      	adds	r1, r2, #0
100042f4:	221f      	movs	r2, #31
100042f6:	400a      	ands	r2, r1
100042f8:	2101      	movs	r1, #1
100042fa:	4091      	lsls	r1, r2
100042fc:	1c0a      	adds	r2, r1, #0
100042fe:	601a      	str	r2, [r3, #0]
}
10004300:	46bd      	mov	sp, r7
10004302:	b002      	add	sp, #8
10004304:	bd80      	pop	{r7, pc}
10004306:	46c0      	nop			; (mov r8, r8)
10004308:	e000e100 	.word	0xe000e100

1000430c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000430c:	b5b0      	push	{r4, r5, r7, lr}
1000430e:	b082      	sub	sp, #8
10004310:	af00      	add	r7, sp, #0
10004312:	1c02      	adds	r2, r0, #0
10004314:	6039      	str	r1, [r7, #0]
10004316:	1dfb      	adds	r3, r7, #7
10004318:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
1000431a:	1dfb      	adds	r3, r7, #7
1000431c:	781b      	ldrb	r3, [r3, #0]
1000431e:	2b7f      	cmp	r3, #127	; 0x7f
10004320:	d92f      	bls.n	10004382 <NVIC_SetPriority+0x76>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004322:	4c2d      	ldr	r4, [pc, #180]	; (100043d8 <NVIC_SetPriority+0xcc>)
10004324:	1dfb      	adds	r3, r7, #7
10004326:	781b      	ldrb	r3, [r3, #0]
10004328:	1c1a      	adds	r2, r3, #0
1000432a:	230f      	movs	r3, #15
1000432c:	4013      	ands	r3, r2
1000432e:	3b08      	subs	r3, #8
10004330:	0899      	lsrs	r1, r3, #2
10004332:	4a29      	ldr	r2, [pc, #164]	; (100043d8 <NVIC_SetPriority+0xcc>)
10004334:	1dfb      	adds	r3, r7, #7
10004336:	781b      	ldrb	r3, [r3, #0]
10004338:	1c18      	adds	r0, r3, #0
1000433a:	230f      	movs	r3, #15
1000433c:	4003      	ands	r3, r0
1000433e:	3b08      	subs	r3, #8
10004340:	089b      	lsrs	r3, r3, #2
10004342:	3306      	adds	r3, #6
10004344:	009b      	lsls	r3, r3, #2
10004346:	18d3      	adds	r3, r2, r3
10004348:	685b      	ldr	r3, [r3, #4]
1000434a:	1dfa      	adds	r2, r7, #7
1000434c:	7812      	ldrb	r2, [r2, #0]
1000434e:	1c10      	adds	r0, r2, #0
10004350:	2203      	movs	r2, #3
10004352:	4002      	ands	r2, r0
10004354:	00d2      	lsls	r2, r2, #3
10004356:	1c10      	adds	r0, r2, #0
10004358:	22ff      	movs	r2, #255	; 0xff
1000435a:	4082      	lsls	r2, r0
1000435c:	43d2      	mvns	r2, r2
1000435e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004360:	683b      	ldr	r3, [r7, #0]
10004362:	019b      	lsls	r3, r3, #6
10004364:	20ff      	movs	r0, #255	; 0xff
10004366:	4003      	ands	r3, r0
10004368:	1df8      	adds	r0, r7, #7
1000436a:	7800      	ldrb	r0, [r0, #0]
1000436c:	1c05      	adds	r5, r0, #0
1000436e:	2003      	movs	r0, #3
10004370:	4028      	ands	r0, r5
10004372:	00c0      	lsls	r0, r0, #3
10004374:	4083      	lsls	r3, r0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004376:	431a      	orrs	r2, r3
10004378:	1d8b      	adds	r3, r1, #6
1000437a:	009b      	lsls	r3, r3, #2
1000437c:	18e3      	adds	r3, r4, r3
1000437e:	605a      	str	r2, [r3, #4]
10004380:	e026      	b.n	100043d0 <NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004382:	4c16      	ldr	r4, [pc, #88]	; (100043dc <NVIC_SetPriority+0xd0>)
10004384:	1dfb      	adds	r3, r7, #7
10004386:	781b      	ldrb	r3, [r3, #0]
10004388:	b25b      	sxtb	r3, r3
1000438a:	089b      	lsrs	r3, r3, #2
1000438c:	4913      	ldr	r1, [pc, #76]	; (100043dc <NVIC_SetPriority+0xd0>)
1000438e:	1dfa      	adds	r2, r7, #7
10004390:	7812      	ldrb	r2, [r2, #0]
10004392:	b252      	sxtb	r2, r2
10004394:	0892      	lsrs	r2, r2, #2
10004396:	32c0      	adds	r2, #192	; 0xc0
10004398:	0092      	lsls	r2, r2, #2
1000439a:	5852      	ldr	r2, [r2, r1]
1000439c:	1df9      	adds	r1, r7, #7
1000439e:	7809      	ldrb	r1, [r1, #0]
100043a0:	1c08      	adds	r0, r1, #0
100043a2:	2103      	movs	r1, #3
100043a4:	4001      	ands	r1, r0
100043a6:	00c9      	lsls	r1, r1, #3
100043a8:	1c08      	adds	r0, r1, #0
100043aa:	21ff      	movs	r1, #255	; 0xff
100043ac:	4081      	lsls	r1, r0
100043ae:	43c9      	mvns	r1, r1
100043b0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100043b2:	683a      	ldr	r2, [r7, #0]
100043b4:	0192      	lsls	r2, r2, #6
100043b6:	20ff      	movs	r0, #255	; 0xff
100043b8:	4002      	ands	r2, r0
100043ba:	1df8      	adds	r0, r7, #7
100043bc:	7800      	ldrb	r0, [r0, #0]
100043be:	1c05      	adds	r5, r0, #0
100043c0:	2003      	movs	r0, #3
100043c2:	4028      	ands	r0, r5
100043c4:	00c0      	lsls	r0, r0, #3
100043c6:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100043c8:	430a      	orrs	r2, r1
100043ca:	33c0      	adds	r3, #192	; 0xc0
100043cc:	009b      	lsls	r3, r3, #2
100043ce:	511a      	str	r2, [r3, r4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100043d0:	46bd      	mov	sp, r7
100043d2:	b002      	add	sp, #8
100043d4:	bdb0      	pop	{r4, r5, r7, pc}
100043d6:	46c0      	nop			; (mov r8, r8)
100043d8:	e000ed00 	.word	0xe000ed00
100043dc:	e000e100 	.word	0xe000e100

100043e0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100043e0:	b580      	push	{r7, lr}
100043e2:	b082      	sub	sp, #8
100043e4:	af00      	add	r7, sp, #0
100043e6:	6078      	str	r0, [r7, #4]
100043e8:	1c08      	adds	r0, r1, #0
100043ea:	1c11      	adds	r1, r2, #0
100043ec:	1cfb      	adds	r3, r7, #3
100043ee:	1c02      	adds	r2, r0, #0
100043f0:	701a      	strb	r2, [r3, #0]
100043f2:	1cbb      	adds	r3, r7, #2
100043f4:	1c0a      	adds	r2, r1, #0
100043f6:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100043f8:	1cfb      	adds	r3, r7, #3
100043fa:	7818      	ldrb	r0, [r3, #0]
100043fc:	1cfb      	adds	r3, r7, #3
100043fe:	781b      	ldrb	r3, [r3, #0]
10004400:	687a      	ldr	r2, [r7, #4]
10004402:	3306      	adds	r3, #6
10004404:	009b      	lsls	r3, r3, #2
10004406:	18d3      	adds	r3, r2, r3
10004408:	685b      	ldr	r3, [r3, #4]
1000440a:	2207      	movs	r2, #7
1000440c:	4393      	bics	r3, r2
1000440e:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10004410:	1cbb      	adds	r3, r7, #2
10004412:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10004414:	431a      	orrs	r2, r3
10004416:	6879      	ldr	r1, [r7, #4]
10004418:	1d83      	adds	r3, r0, #6
1000441a:	009b      	lsls	r3, r3, #2
1000441c:	18cb      	adds	r3, r1, r3
1000441e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10004420:	46bd      	mov	sp, r7
10004422:	b002      	add	sp, #8
10004424:	bd80      	pop	{r7, pc}
10004426:	46c0      	nop			; (mov r8, r8)

10004428 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
10004428:	b580      	push	{r7, lr}
1000442a:	b082      	sub	sp, #8
1000442c:	af00      	add	r7, sp, #0
1000442e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10004430:	687b      	ldr	r3, [r7, #4]
10004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004434:	220f      	movs	r2, #15
10004436:	4393      	bics	r3, r2
10004438:	2202      	movs	r2, #2
1000443a:	431a      	orrs	r2, r3
1000443c:	687b      	ldr	r3, [r7, #4]
1000443e:	641a      	str	r2, [r3, #64]	; 0x40
}
10004440:	46bd      	mov	sp, r7
10004442:	b002      	add	sp, #8
10004444:	bd80      	pop	{r7, pc}
10004446:	46c0      	nop			; (mov r8, r8)

10004448 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
10004448:	b580      	push	{r7, lr}
1000444a:	b082      	sub	sp, #8
1000444c:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
1000444e:	1dfb      	adds	r3, r7, #7
10004450:	2200      	movs	r2, #0
10004452:	701a      	strb	r2, [r3, #0]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 1U, &UART_0_rx_pin_config);
10004454:	4a37      	ldr	r2, [pc, #220]	; (10004534 <UART_0_init+0xec>)
10004456:	4b38      	ldr	r3, [pc, #224]	; (10004538 <UART_0_init+0xf0>)
10004458:	1c10      	adds	r0, r2, #0
1000445a:	2101      	movs	r1, #1
1000445c:	1c1a      	adds	r2, r3, #0
1000445e:	f7fe fadb 	bl	10002a18 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
10004462:	2390      	movs	r3, #144	; 0x90
10004464:	05da      	lsls	r2, r3, #23
10004466:	4b35      	ldr	r3, [pc, #212]	; (1000453c <UART_0_init+0xf4>)
10004468:	1c10      	adds	r0, r2, #0
1000446a:	1c19      	adds	r1, r3, #0
1000446c:	f7fe fe60 	bl	10003130 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 5U);
10004470:	2390      	movs	r3, #144	; 0x90
10004472:	05db      	lsls	r3, r3, #23
10004474:	1c18      	adds	r0, r3, #0
10004476:	2100      	movs	r1, #0
10004478:	2205      	movs	r2, #5
1000447a:	f7ff ffb1 	bl	100043e0 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX3, 0U);
1000447e:	2390      	movs	r3, #144	; 0x90
10004480:	05db      	lsls	r3, r3, #23
10004482:	1c18      	adds	r0, r3, #0
10004484:	2103      	movs	r1, #3
10004486:	2200      	movs	r2, #0
10004488:	f7ff ffaa 	bl	100043e0 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX5, 0U);
1000448c:	2390      	movs	r3, #144	; 0x90
1000448e:	05db      	lsls	r3, r3, #23
10004490:	1c18      	adds	r0, r3, #0
10004492:	2105      	movs	r1, #5
10004494:	2200      	movs	r2, #0
10004496:	f7ff ffa3 	bl	100043e0 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
1000449a:	2390      	movs	r3, #144	; 0x90
1000449c:	05db      	lsls	r3, r3, #23
1000449e:	1c18      	adds	r0, r3, #0
100044a0:	2130      	movs	r1, #48	; 0x30
100044a2:	2204      	movs	r2, #4
100044a4:	2301      	movs	r3, #1
100044a6:	f7fe ff87 	bl	100033b8 <XMC_USIC_CH_TXFIFO_Configure>
        48U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
100044aa:	2390      	movs	r3, #144	; 0x90
100044ac:	05db      	lsls	r3, r3, #23
100044ae:	1c18      	adds	r0, r3, #0
100044b0:	2120      	movs	r1, #32
100044b2:	2204      	movs	r2, #4
100044b4:	2300      	movs	r3, #0
100044b6:	f7fe ffad 	bl	10003414 <XMC_USIC_CH_RXFIFO_Configure>
        32U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
100044ba:	2390      	movs	r3, #144	; 0x90
100044bc:	05db      	lsls	r3, r3, #23
100044be:	1c18      	adds	r0, r3, #0
100044c0:	f7ff ffb2 	bl	10004428 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 1U, &UART_0_tx_pin_config);
100044c4:	4a1e      	ldr	r2, [pc, #120]	; (10004540 <UART_0_init+0xf8>)
100044c6:	4b1f      	ldr	r3, [pc, #124]	; (10004544 <UART_0_init+0xfc>)
100044c8:	1c10      	adds	r0, r2, #0
100044ca:	2101      	movs	r1, #1
100044cc:	1c1a      	adds	r2, r3, #0
100044ce:	f7fe faa3 	bl	10002a18 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
100044d2:	2390      	movs	r3, #144	; 0x90
100044d4:	05db      	lsls	r3, r3, #23
100044d6:	1c18      	adds	r0, r3, #0
100044d8:	2110      	movs	r1, #16
100044da:	2200      	movs	r2, #0
100044dc:	f7fe fffa 	bl	100034d4 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
100044e0:	2390      	movs	r3, #144	; 0x90
100044e2:	05db      	lsls	r3, r3, #23
100044e4:	1c18      	adds	r0, r3, #0
100044e6:	2110      	movs	r1, #16
100044e8:	2203      	movs	r2, #3
100044ea:	f7ff f813 	bl	10003514 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      3U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
100044ee:	2390      	movs	r3, #144	; 0x90
100044f0:	05db      	lsls	r3, r3, #23
100044f2:	1c18      	adds	r0, r3, #0
100044f4:	2110      	movs	r1, #16
100044f6:	2201      	movs	r2, #1
100044f8:	f7ff f830 	bl	1000355c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x1U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
100044fc:	2390      	movs	r3, #144	; 0x90
100044fe:	05db      	lsls	r3, r3, #23
10004500:	1c18      	adds	r0, r3, #0
10004502:	2113      	movs	r1, #19
10004504:	2201      	movs	r2, #1
10004506:	f7ff f829 	bl	1000355c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x1U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)12, 3U);
1000450a:	200c      	movs	r0, #12
1000450c:	2103      	movs	r1, #3
1000450e:	f7ff fefd 	bl	1000430c <NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)12);
10004512:	200c      	movs	r0, #12
10004514:	f7ff fee4 	bl	100042e0 <NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)10, 3U);
10004518:	200a      	movs	r0, #10
1000451a:	2103      	movs	r1, #3
1000451c:	f7ff fef6 	bl	1000430c <NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)10);
10004520:	200a      	movs	r0, #10
10004522:	f7ff fedd 	bl	100042e0 <NVIC_EnableIRQ>
  return status;
10004526:	1dfb      	adds	r3, r7, #7
10004528:	781b      	ldrb	r3, [r3, #0]
}
1000452a:	1c18      	adds	r0, r3, #0
1000452c:	46bd      	mov	sp, r7
1000452e:	b002      	add	sp, #8
10004530:	bd80      	pop	{r7, pc}
10004532:	46c0      	nop			; (mov r8, r8)
10004534:	40040200 	.word	0x40040200
10004538:	100097b0 	.word	0x100097b0
1000453c:	10009760 	.word	0x10009760
10004540:	40040100 	.word	0x40040100
10004544:	1000976c 	.word	0x1000976c

10004548 <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
10004548:	b580      	push	{r7, lr}
1000454a:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
1000454c:	4b02      	ldr	r3, [pc, #8]	; (10004558 <USIC0_3_IRQHandler+0x10>)
1000454e:	1c18      	adds	r0, r3, #0
10004550:	f7ff fd80 	bl	10004054 <UART_lTransmitHandler>
}
10004554:	46bd      	mov	sp, r7
10004556:	bd80      	pop	{r7, pc}
10004558:	20000554 	.word	0x20000554

1000455c <USIC0_1_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
1000455c:	b580      	push	{r7, lr}
1000455e:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
10004560:	4b02      	ldr	r3, [pc, #8]	; (1000456c <USIC0_1_IRQHandler+0x10>)
10004562:	1c18      	adds	r0, r3, #0
10004564:	f7ff fdfe 	bl	10004164 <UART_lReceiveHandler>
}
10004568:	46bd      	mov	sp, r7
1000456a:	bd80      	pop	{r7, pc}
1000456c:	20000554 	.word	0x20000554

10004570 <UART_1_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_1_init()
{
10004570:	b580      	push	{r7, lr}
10004572:	b082      	sub	sp, #8
10004574:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
10004576:	1dfb      	adds	r3, r7, #7
10004578:	2200      	movs	r2, #0
1000457a:	701a      	strb	r2, [r3, #0]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 7U, &UART_1_rx_pin_config);
1000457c:	4a31      	ldr	r2, [pc, #196]	; (10004644 <UART_1_init+0xd4>)
1000457e:	4b32      	ldr	r3, [pc, #200]	; (10004648 <UART_1_init+0xd8>)
10004580:	1c10      	adds	r0, r2, #0
10004582:	2107      	movs	r1, #7
10004584:	1c1a      	adds	r2, r3, #0
10004586:	f7fe fa47 	bl	10002a18 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &UART_1_channel_config);
1000458a:	4a30      	ldr	r2, [pc, #192]	; (1000464c <UART_1_init+0xdc>)
1000458c:	4b30      	ldr	r3, [pc, #192]	; (10004650 <UART_1_init+0xe0>)
1000458e:	1c10      	adds	r0, r2, #0
10004590:	1c19      	adds	r1, r3, #0
10004592:	f7fe fdcd 	bl	10003130 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 3U);
10004596:	4b2d      	ldr	r3, [pc, #180]	; (1000464c <UART_1_init+0xdc>)
10004598:	1c18      	adds	r0, r3, #0
1000459a:	2100      	movs	r1, #0
1000459c:	2203      	movs	r2, #3
1000459e:	f7ff ff1f 	bl	100043e0 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
100045a2:	4b2a      	ldr	r3, [pc, #168]	; (1000464c <UART_1_init+0xdc>)
100045a4:	1c18      	adds	r0, r3, #0
100045a6:	2103      	movs	r1, #3
100045a8:	2200      	movs	r2, #0
100045aa:	f7ff ff19 	bl	100043e0 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
100045ae:	4b27      	ldr	r3, [pc, #156]	; (1000464c <UART_1_init+0xdc>)
100045b0:	1c18      	adds	r0, r3, #0
100045b2:	2105      	movs	r1, #5
100045b4:	2200      	movs	r2, #0
100045b6:	f7ff ff13 	bl	100043e0 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
100045ba:	4b24      	ldr	r3, [pc, #144]	; (1000464c <UART_1_init+0xdc>)
100045bc:	1c18      	adds	r0, r3, #0
100045be:	2110      	movs	r1, #16
100045c0:	2204      	movs	r2, #4
100045c2:	2301      	movs	r3, #1
100045c4:	f7fe fef8 	bl	100033b8 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
100045c8:	4b20      	ldr	r3, [pc, #128]	; (1000464c <UART_1_init+0xdc>)
100045ca:	1c18      	adds	r0, r3, #0
100045cc:	2100      	movs	r1, #0
100045ce:	2204      	movs	r2, #4
100045d0:	2300      	movs	r3, #0
100045d2:	f7fe ff1f 	bl	10003414 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);
100045d6:	4b1d      	ldr	r3, [pc, #116]	; (1000464c <UART_1_init+0xdc>)
100045d8:	1c18      	adds	r0, r3, #0
100045da:	f7ff ff25 	bl	10004428 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 6U, &UART_1_tx_pin_config);
100045de:	4a19      	ldr	r2, [pc, #100]	; (10004644 <UART_1_init+0xd4>)
100045e0:	4b1c      	ldr	r3, [pc, #112]	; (10004654 <UART_1_init+0xe4>)
100045e2:	1c10      	adds	r0, r2, #0
100045e4:	2106      	movs	r1, #6
100045e6:	1c1a      	adds	r2, r3, #0
100045e8:	f7fe fa16 	bl	10002a18 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
100045ec:	4b17      	ldr	r3, [pc, #92]	; (1000464c <UART_1_init+0xdc>)
100045ee:	1c18      	adds	r0, r3, #0
100045f0:	2110      	movs	r1, #16
100045f2:	2200      	movs	r2, #0
100045f4:	f7fe ff6e 	bl	100034d4 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
100045f8:	4b14      	ldr	r3, [pc, #80]	; (1000464c <UART_1_init+0xdc>)
100045fa:	1c18      	adds	r0, r3, #0
100045fc:	2110      	movs	r1, #16
100045fe:	2204      	movs	r2, #4
10004600:	f7fe ff88 	bl	10003514 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      4U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
10004604:	4b11      	ldr	r3, [pc, #68]	; (1000464c <UART_1_init+0xdc>)
10004606:	1c18      	adds	r0, r3, #0
10004608:	2110      	movs	r1, #16
1000460a:	2202      	movs	r2, #2
1000460c:	f7fe ffa6 	bl	1000355c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x2U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
10004610:	4b0e      	ldr	r3, [pc, #56]	; (1000464c <UART_1_init+0xdc>)
10004612:	1c18      	adds	r0, r3, #0
10004614:	2113      	movs	r1, #19
10004616:	2202      	movs	r2, #2
10004618:	f7fe ffa0 	bl	1000355c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x2U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)13, 3U);
1000461c:	200d      	movs	r0, #13
1000461e:	2103      	movs	r1, #3
10004620:	f7ff fe74 	bl	1000430c <NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)13);
10004624:	200d      	movs	r0, #13
10004626:	f7ff fe5b 	bl	100042e0 <NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)11, 3U);
1000462a:	200b      	movs	r0, #11
1000462c:	2103      	movs	r1, #3
1000462e:	f7ff fe6d 	bl	1000430c <NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)11);
10004632:	200b      	movs	r0, #11
10004634:	f7ff fe54 	bl	100042e0 <NVIC_EnableIRQ>
  return status;
10004638:	1dfb      	adds	r3, r7, #7
1000463a:	781b      	ldrb	r3, [r3, #0]
}
1000463c:	1c18      	adds	r0, r3, #0
1000463e:	46bd      	mov	sp, r7
10004640:	b002      	add	sp, #8
10004642:	bd80      	pop	{r7, pc}
10004644:	40040000 	.word	0x40040000
10004648:	10009808 	.word	0x10009808
1000464c:	48000200 	.word	0x48000200
10004650:	100097b8 	.word	0x100097b8
10004654:	100097c4 	.word	0x100097c4

10004658 <USIC0_4_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_1_TX_HANDLER()
{
10004658:	b580      	push	{r7, lr}
1000465a:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_1);
1000465c:	4b02      	ldr	r3, [pc, #8]	; (10004668 <USIC0_4_IRQHandler+0x10>)
1000465e:	1c18      	adds	r0, r3, #0
10004660:	f7ff fcf8 	bl	10004054 <UART_lTransmitHandler>
}
10004664:	46bd      	mov	sp, r7
10004666:	bd80      	pop	{r7, pc}
10004668:	20000560 	.word	0x20000560

1000466c <USIC0_2_IRQHandler>:

/*Receive ISR*/
void UART_1_RX_HANDLER()
{
1000466c:	b580      	push	{r7, lr}
1000466e:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_1);
10004670:	4b02      	ldr	r3, [pc, #8]	; (1000467c <USIC0_2_IRQHandler+0x10>)
10004672:	1c18      	adds	r0, r3, #0
10004674:	f7ff fd76 	bl	10004164 <UART_lReceiveHandler>
}
10004678:	46bd      	mov	sp, r7
1000467a:	bd80      	pop	{r7, pc}
1000467c:	20000560 	.word	0x20000560

10004680 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004680:	b5b0      	push	{r4, r5, r7, lr}
10004682:	b082      	sub	sp, #8
10004684:	af00      	add	r7, sp, #0
10004686:	1c02      	adds	r2, r0, #0
10004688:	6039      	str	r1, [r7, #0]
1000468a:	1dfb      	adds	r3, r7, #7
1000468c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
1000468e:	1dfb      	adds	r3, r7, #7
10004690:	781b      	ldrb	r3, [r3, #0]
10004692:	2b7f      	cmp	r3, #127	; 0x7f
10004694:	d92f      	bls.n	100046f6 <NVIC_SetPriority+0x76>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004696:	4c2d      	ldr	r4, [pc, #180]	; (1000474c <NVIC_SetPriority+0xcc>)
10004698:	1dfb      	adds	r3, r7, #7
1000469a:	781b      	ldrb	r3, [r3, #0]
1000469c:	1c1a      	adds	r2, r3, #0
1000469e:	230f      	movs	r3, #15
100046a0:	4013      	ands	r3, r2
100046a2:	3b08      	subs	r3, #8
100046a4:	0899      	lsrs	r1, r3, #2
100046a6:	4a29      	ldr	r2, [pc, #164]	; (1000474c <NVIC_SetPriority+0xcc>)
100046a8:	1dfb      	adds	r3, r7, #7
100046aa:	781b      	ldrb	r3, [r3, #0]
100046ac:	1c18      	adds	r0, r3, #0
100046ae:	230f      	movs	r3, #15
100046b0:	4003      	ands	r3, r0
100046b2:	3b08      	subs	r3, #8
100046b4:	089b      	lsrs	r3, r3, #2
100046b6:	3306      	adds	r3, #6
100046b8:	009b      	lsls	r3, r3, #2
100046ba:	18d3      	adds	r3, r2, r3
100046bc:	685b      	ldr	r3, [r3, #4]
100046be:	1dfa      	adds	r2, r7, #7
100046c0:	7812      	ldrb	r2, [r2, #0]
100046c2:	1c10      	adds	r0, r2, #0
100046c4:	2203      	movs	r2, #3
100046c6:	4002      	ands	r2, r0
100046c8:	00d2      	lsls	r2, r2, #3
100046ca:	1c10      	adds	r0, r2, #0
100046cc:	22ff      	movs	r2, #255	; 0xff
100046ce:	4082      	lsls	r2, r0
100046d0:	43d2      	mvns	r2, r2
100046d2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100046d4:	683b      	ldr	r3, [r7, #0]
100046d6:	019b      	lsls	r3, r3, #6
100046d8:	20ff      	movs	r0, #255	; 0xff
100046da:	4003      	ands	r3, r0
100046dc:	1df8      	adds	r0, r7, #7
100046de:	7800      	ldrb	r0, [r0, #0]
100046e0:	1c05      	adds	r5, r0, #0
100046e2:	2003      	movs	r0, #3
100046e4:	4028      	ands	r0, r5
100046e6:	00c0      	lsls	r0, r0, #3
100046e8:	4083      	lsls	r3, r0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100046ea:	431a      	orrs	r2, r3
100046ec:	1d8b      	adds	r3, r1, #6
100046ee:	009b      	lsls	r3, r3, #2
100046f0:	18e3      	adds	r3, r4, r3
100046f2:	605a      	str	r2, [r3, #4]
100046f4:	e026      	b.n	10004744 <NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100046f6:	4c16      	ldr	r4, [pc, #88]	; (10004750 <NVIC_SetPriority+0xd0>)
100046f8:	1dfb      	adds	r3, r7, #7
100046fa:	781b      	ldrb	r3, [r3, #0]
100046fc:	b25b      	sxtb	r3, r3
100046fe:	089b      	lsrs	r3, r3, #2
10004700:	4913      	ldr	r1, [pc, #76]	; (10004750 <NVIC_SetPriority+0xd0>)
10004702:	1dfa      	adds	r2, r7, #7
10004704:	7812      	ldrb	r2, [r2, #0]
10004706:	b252      	sxtb	r2, r2
10004708:	0892      	lsrs	r2, r2, #2
1000470a:	32c0      	adds	r2, #192	; 0xc0
1000470c:	0092      	lsls	r2, r2, #2
1000470e:	5852      	ldr	r2, [r2, r1]
10004710:	1df9      	adds	r1, r7, #7
10004712:	7809      	ldrb	r1, [r1, #0]
10004714:	1c08      	adds	r0, r1, #0
10004716:	2103      	movs	r1, #3
10004718:	4001      	ands	r1, r0
1000471a:	00c9      	lsls	r1, r1, #3
1000471c:	1c08      	adds	r0, r1, #0
1000471e:	21ff      	movs	r1, #255	; 0xff
10004720:	4081      	lsls	r1, r0
10004722:	43c9      	mvns	r1, r1
10004724:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004726:	683a      	ldr	r2, [r7, #0]
10004728:	0192      	lsls	r2, r2, #6
1000472a:	20ff      	movs	r0, #255	; 0xff
1000472c:	4002      	ands	r2, r0
1000472e:	1df8      	adds	r0, r7, #7
10004730:	7800      	ldrb	r0, [r0, #0]
10004732:	1c05      	adds	r5, r0, #0
10004734:	2003      	movs	r0, #3
10004736:	4028      	ands	r0, r5
10004738:	00c0      	lsls	r0, r0, #3
1000473a:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000473c:	430a      	orrs	r2, r1
1000473e:	33c0      	adds	r3, #192	; 0xc0
10004740:	009b      	lsls	r3, r3, #2
10004742:	511a      	str	r2, [r3, r4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004744:	46bd      	mov	sp, r7
10004746:	b002      	add	sp, #8
10004748:	bdb0      	pop	{r4, r5, r7, pc}
1000474a:	46c0      	nop			; (mov r8, r8)
1000474c:	e000ed00 	.word	0xe000ed00
10004750:	e000e100 	.word	0xe000e100

10004754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10004754:	b580      	push	{r7, lr}
10004756:	b082      	sub	sp, #8
10004758:	af00      	add	r7, sp, #0
1000475a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1000475c:	687b      	ldr	r3, [r7, #4]
1000475e:	3b01      	subs	r3, #1
10004760:	4a0c      	ldr	r2, [pc, #48]	; (10004794 <SysTick_Config+0x40>)
10004762:	4293      	cmp	r3, r2
10004764:	d901      	bls.n	1000476a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10004766:	2301      	movs	r3, #1
10004768:	e010      	b.n	1000478c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000476a:	4b0b      	ldr	r3, [pc, #44]	; (10004798 <SysTick_Config+0x44>)
1000476c:	687a      	ldr	r2, [r7, #4]
1000476e:	3a01      	subs	r2, #1
10004770:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10004772:	2301      	movs	r3, #1
10004774:	425b      	negs	r3, r3
10004776:	1c18      	adds	r0, r3, #0
10004778:	2103      	movs	r1, #3
1000477a:	f7ff ff81 	bl	10004680 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1000477e:	4b06      	ldr	r3, [pc, #24]	; (10004798 <SysTick_Config+0x44>)
10004780:	2200      	movs	r2, #0
10004782:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10004784:	4b04      	ldr	r3, [pc, #16]	; (10004798 <SysTick_Config+0x44>)
10004786:	2207      	movs	r2, #7
10004788:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000478a:	2300      	movs	r3, #0
}
1000478c:	1c18      	adds	r0, r3, #0
1000478e:	46bd      	mov	sp, r7
10004790:	b002      	add	sp, #8
10004792:	bd80      	pop	{r7, pc}
10004794:	00ffffff 	.word	0x00ffffff
10004798:	e000e010 	.word	0xe000e010

1000479c <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
1000479c:	b590      	push	{r4, r7, lr}
1000479e:	b087      	sub	sp, #28
100047a0:	af00      	add	r7, sp, #0
100047a2:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
100047a4:	230f      	movs	r3, #15
100047a6:	18fb      	adds	r3, r7, r3
100047a8:	2200      	movs	r2, #0
100047aa:	701a      	strb	r2, [r3, #0]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
100047ac:	496b      	ldr	r1, [pc, #428]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
100047ae:	687a      	ldr	r2, [r7, #4]
100047b0:	1c13      	adds	r3, r2, #0
100047b2:	00db      	lsls	r3, r3, #3
100047b4:	189b      	adds	r3, r3, r2
100047b6:	009b      	lsls	r3, r3, #2
100047b8:	18cb      	adds	r3, r1, r3
100047ba:	3318      	adds	r3, #24
100047bc:	681b      	ldr	r3, [r3, #0]
100047be:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
100047c0:	4b67      	ldr	r3, [pc, #412]	; (10004960 <SYSTIMER_lInsertTimerList+0x1c4>)
100047c2:	681b      	ldr	r3, [r3, #0]
100047c4:	2b00      	cmp	r3, #0
100047c6:	d109      	bne.n	100047dc <SYSTIMER_lInsertTimerList+0x40>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
100047c8:	687a      	ldr	r2, [r7, #4]
100047ca:	1c13      	adds	r3, r2, #0
100047cc:	00db      	lsls	r3, r3, #3
100047ce:	189b      	adds	r3, r3, r2
100047d0:	009b      	lsls	r3, r3, #2
100047d2:	4a62      	ldr	r2, [pc, #392]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
100047d4:	189a      	adds	r2, r3, r2
100047d6:	4b62      	ldr	r3, [pc, #392]	; (10004960 <SYSTIMER_lInsertTimerList+0x1c4>)
100047d8:	601a      	str	r2, [r3, #0]
100047da:	e0bc      	b.n	10004956 <SYSTIMER_lInsertTimerList+0x1ba>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
100047dc:	4b60      	ldr	r3, [pc, #384]	; (10004960 <SYSTIMER_lInsertTimerList+0x1c4>)
100047de:	681b      	ldr	r3, [r3, #0]
100047e0:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
100047e2:	68bb      	ldr	r3, [r7, #8]
100047e4:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
100047e6:	e0aa      	b.n	1000493e <SYSTIMER_lInsertTimerList+0x1a2>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
100047e8:	697b      	ldr	r3, [r7, #20]
100047ea:	699b      	ldr	r3, [r3, #24]
100047ec:	1c1a      	adds	r2, r3, #0
100047ee:	693b      	ldr	r3, [r7, #16]
100047f0:	1a9b      	subs	r3, r3, r2
100047f2:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
100047f4:	693b      	ldr	r3, [r7, #16]
100047f6:	2b00      	cmp	r3, #0
100047f8:	dc77      	bgt.n	100048ea <SYSTIMER_lInsertTimerList+0x14e>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
100047fa:	697b      	ldr	r3, [r7, #20]
100047fc:	685b      	ldr	r3, [r3, #4]
100047fe:	2b00      	cmp	r3, #0
10004800:	d025      	beq.n	1000484e <SYSTIMER_lInsertTimerList+0xb2>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
10004802:	697b      	ldr	r3, [r7, #20]
10004804:	685a      	ldr	r2, [r3, #4]
10004806:	6879      	ldr	r1, [r7, #4]
10004808:	1c0b      	adds	r3, r1, #0
1000480a:	00db      	lsls	r3, r3, #3
1000480c:	185b      	adds	r3, r3, r1
1000480e:	009b      	lsls	r3, r3, #2
10004810:	4952      	ldr	r1, [pc, #328]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004812:	185b      	adds	r3, r3, r1
10004814:	6013      	str	r3, [r2, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
10004816:	697b      	ldr	r3, [r7, #20]
10004818:	6859      	ldr	r1, [r3, #4]
1000481a:	4850      	ldr	r0, [pc, #320]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
1000481c:	687a      	ldr	r2, [r7, #4]
1000481e:	1c13      	adds	r3, r2, #0
10004820:	00db      	lsls	r3, r3, #3
10004822:	189b      	adds	r3, r3, r2
10004824:	009b      	lsls	r3, r3, #2
10004826:	18c3      	adds	r3, r0, r3
10004828:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
1000482a:	494c      	ldr	r1, [pc, #304]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
1000482c:	687a      	ldr	r2, [r7, #4]
1000482e:	1c13      	adds	r3, r2, #0
10004830:	00db      	lsls	r3, r3, #3
10004832:	189b      	adds	r3, r3, r2
10004834:	009b      	lsls	r3, r3, #2
10004836:	697a      	ldr	r2, [r7, #20]
10004838:	505a      	str	r2, [r3, r1]
          object_ptr->prev = &g_timer_tbl[tbl_index];
1000483a:	687a      	ldr	r2, [r7, #4]
1000483c:	1c13      	adds	r3, r2, #0
1000483e:	00db      	lsls	r3, r3, #3
10004840:	189b      	adds	r3, r3, r2
10004842:	009b      	lsls	r3, r3, #2
10004844:	4a45      	ldr	r2, [pc, #276]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004846:	189a      	adds	r2, r3, r2
10004848:	697b      	ldr	r3, [r7, #20]
1000484a:	605a      	str	r2, [r3, #4]
1000484c:	e01b      	b.n	10004886 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
1000484e:	4b44      	ldr	r3, [pc, #272]	; (10004960 <SYSTIMER_lInsertTimerList+0x1c4>)
10004850:	6818      	ldr	r0, [r3, #0]
10004852:	4942      	ldr	r1, [pc, #264]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004854:	687a      	ldr	r2, [r7, #4]
10004856:	1c13      	adds	r3, r2, #0
10004858:	00db      	lsls	r3, r3, #3
1000485a:	189b      	adds	r3, r3, r2
1000485c:	009b      	lsls	r3, r3, #2
1000485e:	5058      	str	r0, [r3, r1]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
10004860:	4b3f      	ldr	r3, [pc, #252]	; (10004960 <SYSTIMER_lInsertTimerList+0x1c4>)
10004862:	681a      	ldr	r2, [r3, #0]
10004864:	6879      	ldr	r1, [r7, #4]
10004866:	1c0b      	adds	r3, r1, #0
10004868:	00db      	lsls	r3, r3, #3
1000486a:	185b      	adds	r3, r3, r1
1000486c:	009b      	lsls	r3, r3, #2
1000486e:	493b      	ldr	r1, [pc, #236]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004870:	185b      	adds	r3, r3, r1
10004872:	6053      	str	r3, [r2, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
10004874:	687a      	ldr	r2, [r7, #4]
10004876:	1c13      	adds	r3, r2, #0
10004878:	00db      	lsls	r3, r3, #3
1000487a:	189b      	adds	r3, r3, r2
1000487c:	009b      	lsls	r3, r3, #2
1000487e:	4a37      	ldr	r2, [pc, #220]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004880:	189a      	adds	r2, r3, r2
10004882:	4b37      	ldr	r3, [pc, #220]	; (10004960 <SYSTIMER_lInsertTimerList+0x1c4>)
10004884:	601a      	str	r2, [r3, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
10004886:	4935      	ldr	r1, [pc, #212]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004888:	687a      	ldr	r2, [r7, #4]
1000488a:	1c13      	adds	r3, r2, #0
1000488c:	00db      	lsls	r3, r3, #3
1000488e:	189b      	adds	r3, r3, r2
10004890:	009b      	lsls	r3, r3, #2
10004892:	585b      	ldr	r3, [r3, r1]
10004894:	699a      	ldr	r2, [r3, #24]
10004896:	693b      	ldr	r3, [r7, #16]
10004898:	18d1      	adds	r1, r2, r3
1000489a:	4830      	ldr	r0, [pc, #192]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
1000489c:	687a      	ldr	r2, [r7, #4]
1000489e:	1c13      	adds	r3, r2, #0
100048a0:	00db      	lsls	r3, r3, #3
100048a2:	189b      	adds	r3, r3, r2
100048a4:	009b      	lsls	r3, r3, #2
100048a6:	18c3      	adds	r3, r0, r3
100048a8:	3318      	adds	r3, #24
100048aa:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
100048ac:	492b      	ldr	r1, [pc, #172]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
100048ae:	687a      	ldr	r2, [r7, #4]
100048b0:	1c13      	adds	r3, r2, #0
100048b2:	00db      	lsls	r3, r3, #3
100048b4:	189b      	adds	r3, r3, r2
100048b6:	009b      	lsls	r3, r3, #2
100048b8:	585a      	ldr	r2, [r3, r1]
100048ba:	4828      	ldr	r0, [pc, #160]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
100048bc:	6879      	ldr	r1, [r7, #4]
100048be:	1c0b      	adds	r3, r1, #0
100048c0:	00db      	lsls	r3, r3, #3
100048c2:	185b      	adds	r3, r3, r1
100048c4:	009b      	lsls	r3, r3, #2
100048c6:	581b      	ldr	r3, [r3, r0]
100048c8:	6998      	ldr	r0, [r3, #24]
100048ca:	4c24      	ldr	r4, [pc, #144]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
100048cc:	6879      	ldr	r1, [r7, #4]
100048ce:	1c0b      	adds	r3, r1, #0
100048d0:	00db      	lsls	r3, r3, #3
100048d2:	185b      	adds	r3, r3, r1
100048d4:	009b      	lsls	r3, r3, #2
100048d6:	18e3      	adds	r3, r4, r3
100048d8:	3318      	adds	r3, #24
100048da:	681b      	ldr	r3, [r3, #0]
100048dc:	1ac3      	subs	r3, r0, r3
100048de:	6193      	str	r3, [r2, #24]
        found_flag = true;
100048e0:	230f      	movs	r3, #15
100048e2:	18fb      	adds	r3, r7, r3
100048e4:	2201      	movs	r2, #1
100048e6:	701a      	strb	r2, [r3, #0]
100048e8:	e026      	b.n	10004938 <SYSTIMER_lInsertTimerList+0x19c>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
100048ea:	693b      	ldr	r3, [r7, #16]
100048ec:	2b00      	cmp	r3, #0
100048ee:	dd23      	ble.n	10004938 <SYSTIMER_lInsertTimerList+0x19c>
100048f0:	697b      	ldr	r3, [r7, #20]
100048f2:	681b      	ldr	r3, [r3, #0]
100048f4:	2b00      	cmp	r3, #0
100048f6:	d11f      	bne.n	10004938 <SYSTIMER_lInsertTimerList+0x19c>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
100048f8:	4918      	ldr	r1, [pc, #96]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
100048fa:	687a      	ldr	r2, [r7, #4]
100048fc:	1c13      	adds	r3, r2, #0
100048fe:	00db      	lsls	r3, r3, #3
10004900:	189b      	adds	r3, r3, r2
10004902:	009b      	lsls	r3, r3, #2
10004904:	18cb      	adds	r3, r1, r3
10004906:	697a      	ldr	r2, [r7, #20]
10004908:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
1000490a:	687a      	ldr	r2, [r7, #4]
1000490c:	1c13      	adds	r3, r2, #0
1000490e:	00db      	lsls	r3, r3, #3
10004910:	189b      	adds	r3, r3, r2
10004912:	009b      	lsls	r3, r3, #2
10004914:	4a11      	ldr	r2, [pc, #68]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004916:	189a      	adds	r2, r3, r2
10004918:	697b      	ldr	r3, [r7, #20]
1000491a:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
1000491c:	6939      	ldr	r1, [r7, #16]
1000491e:	480f      	ldr	r0, [pc, #60]	; (1000495c <SYSTIMER_lInsertTimerList+0x1c0>)
10004920:	687a      	ldr	r2, [r7, #4]
10004922:	1c13      	adds	r3, r2, #0
10004924:	00db      	lsls	r3, r3, #3
10004926:	189b      	adds	r3, r3, r2
10004928:	009b      	lsls	r3, r3, #2
1000492a:	18c3      	adds	r3, r0, r3
1000492c:	3318      	adds	r3, #24
1000492e:	6019      	str	r1, [r3, #0]
          found_flag = true;
10004930:	230f      	movs	r3, #15
10004932:	18fb      	adds	r3, r7, r3
10004934:	2201      	movs	r2, #1
10004936:	701a      	strb	r2, [r3, #0]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
10004938:	697b      	ldr	r3, [r7, #20]
1000493a:	681b      	ldr	r3, [r3, #0]
1000493c:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
1000493e:	697b      	ldr	r3, [r7, #20]
10004940:	2b00      	cmp	r3, #0
10004942:	d008      	beq.n	10004956 <SYSTIMER_lInsertTimerList+0x1ba>
10004944:	230f      	movs	r3, #15
10004946:	18fb      	adds	r3, r7, r3
10004948:	781b      	ldrb	r3, [r3, #0]
1000494a:	2201      	movs	r2, #1
1000494c:	4053      	eors	r3, r2
1000494e:	b2db      	uxtb	r3, r3
10004950:	2b00      	cmp	r3, #0
10004952:	d000      	beq.n	10004956 <SYSTIMER_lInsertTimerList+0x1ba>
10004954:	e748      	b.n	100047e8 <SYSTIMER_lInsertTimerList+0x4c>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
10004956:	46bd      	mov	sp, r7
10004958:	b007      	add	sp, #28
1000495a:	bd90      	pop	{r4, r7, pc}
1000495c:	20000974 	.word	0x20000974
10004960:	200007b0 	.word	0x200007b0

10004964 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
10004964:	b580      	push	{r7, lr}
10004966:	b084      	sub	sp, #16
10004968:	af00      	add	r7, sp, #0
1000496a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
1000496c:	687a      	ldr	r2, [r7, #4]
1000496e:	1c13      	adds	r3, r2, #0
10004970:	00db      	lsls	r3, r3, #3
10004972:	189b      	adds	r3, r3, r2
10004974:	009b      	lsls	r3, r3, #2
10004976:	4a28      	ldr	r2, [pc, #160]	; (10004a18 <SYSTIMER_lRemoveTimerList+0xb4>)
10004978:	189b      	adds	r3, r3, r2
1000497a:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
1000497c:	68fb      	ldr	r3, [r7, #12]
1000497e:	685b      	ldr	r3, [r3, #4]
10004980:	2b00      	cmp	r3, #0
10004982:	d107      	bne.n	10004994 <SYSTIMER_lRemoveTimerList+0x30>
10004984:	68fb      	ldr	r3, [r7, #12]
10004986:	681b      	ldr	r3, [r3, #0]
10004988:	2b00      	cmp	r3, #0
1000498a:	d103      	bne.n	10004994 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
1000498c:	4b23      	ldr	r3, [pc, #140]	; (10004a1c <SYSTIMER_lRemoveTimerList+0xb8>)
1000498e:	2200      	movs	r2, #0
10004990:	601a      	str	r2, [r3, #0]
10004992:	e03d      	b.n	10004a10 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
10004994:	68fb      	ldr	r3, [r7, #12]
10004996:	685b      	ldr	r3, [r3, #4]
10004998:	2b00      	cmp	r3, #0
1000499a:	d114      	bne.n	100049c6 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
1000499c:	68fb      	ldr	r3, [r7, #12]
1000499e:	681a      	ldr	r2, [r3, #0]
100049a0:	4b1e      	ldr	r3, [pc, #120]	; (10004a1c <SYSTIMER_lRemoveTimerList+0xb8>)
100049a2:	601a      	str	r2, [r3, #0]
    g_timer_list->prev = NULL;
100049a4:	4b1d      	ldr	r3, [pc, #116]	; (10004a1c <SYSTIMER_lRemoveTimerList+0xb8>)
100049a6:	681b      	ldr	r3, [r3, #0]
100049a8:	2200      	movs	r2, #0
100049aa:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
100049ac:	4b1b      	ldr	r3, [pc, #108]	; (10004a1c <SYSTIMER_lRemoveTimerList+0xb8>)
100049ae:	681b      	ldr	r3, [r3, #0]
100049b0:	4a1a      	ldr	r2, [pc, #104]	; (10004a1c <SYSTIMER_lRemoveTimerList+0xb8>)
100049b2:	6812      	ldr	r2, [r2, #0]
100049b4:	6991      	ldr	r1, [r2, #24]
100049b6:	68fa      	ldr	r2, [r7, #12]
100049b8:	6992      	ldr	r2, [r2, #24]
100049ba:	188a      	adds	r2, r1, r2
100049bc:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
100049be:	68fb      	ldr	r3, [r7, #12]
100049c0:	2200      	movs	r2, #0
100049c2:	601a      	str	r2, [r3, #0]
100049c4:	e024      	b.n	10004a10 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
100049c6:	68fb      	ldr	r3, [r7, #12]
100049c8:	681b      	ldr	r3, [r3, #0]
100049ca:	2b00      	cmp	r3, #0
100049cc:	d107      	bne.n	100049de <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
100049ce:	68fb      	ldr	r3, [r7, #12]
100049d0:	685b      	ldr	r3, [r3, #4]
100049d2:	2200      	movs	r2, #0
100049d4:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
100049d6:	68fb      	ldr	r3, [r7, #12]
100049d8:	2200      	movs	r2, #0
100049da:	605a      	str	r2, [r3, #4]
100049dc:	e018      	b.n	10004a10 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
100049de:	68fb      	ldr	r3, [r7, #12]
100049e0:	685b      	ldr	r3, [r3, #4]
100049e2:	68fa      	ldr	r2, [r7, #12]
100049e4:	6812      	ldr	r2, [r2, #0]
100049e6:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
100049e8:	68fb      	ldr	r3, [r7, #12]
100049ea:	681b      	ldr	r3, [r3, #0]
100049ec:	68fa      	ldr	r2, [r7, #12]
100049ee:	6852      	ldr	r2, [r2, #4]
100049f0:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
100049f2:	68fb      	ldr	r3, [r7, #12]
100049f4:	681b      	ldr	r3, [r3, #0]
100049f6:	68fa      	ldr	r2, [r7, #12]
100049f8:	6812      	ldr	r2, [r2, #0]
100049fa:	6991      	ldr	r1, [r2, #24]
100049fc:	68fa      	ldr	r2, [r7, #12]
100049fe:	6992      	ldr	r2, [r2, #24]
10004a00:	188a      	adds	r2, r1, r2
10004a02:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
10004a04:	68fb      	ldr	r3, [r7, #12]
10004a06:	2200      	movs	r2, #0
10004a08:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
10004a0a:	68fb      	ldr	r3, [r7, #12]
10004a0c:	2200      	movs	r2, #0
10004a0e:	605a      	str	r2, [r3, #4]
  }
}
10004a10:	46bd      	mov	sp, r7
10004a12:	b004      	add	sp, #16
10004a14:	bd80      	pop	{r7, pc}
10004a16:	46c0      	nop			; (mov r8, r8)
10004a18:	20000974 	.word	0x20000974
10004a1c:	200007b0 	.word	0x200007b0

10004a20 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
10004a20:	b580      	push	{r7, lr}
10004a22:	b082      	sub	sp, #8
10004a24:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
10004a26:	4b2b      	ldr	r3, [pc, #172]	; (10004ad4 <SYSTIMER_lTimerHandler+0xb4>)
10004a28:	681b      	ldr	r3, [r3, #0]
10004a2a:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
10004a2c:	e048      	b.n	10004ac0 <SYSTIMER_lTimerHandler+0xa0>
  {
    if (true == object_ptr->delete_swtmr)
10004a2e:	687b      	ldr	r3, [r7, #4]
10004a30:	2220      	movs	r2, #32
10004a32:	5c9b      	ldrb	r3, [r3, r2]
10004a34:	2b00      	cmp	r3, #0
10004a36:	d013      	beq.n	10004a60 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10004a38:	687b      	ldr	r3, [r7, #4]
10004a3a:	695b      	ldr	r3, [r3, #20]
10004a3c:	1c18      	adds	r0, r3, #0
10004a3e:	f7ff ff91 	bl	10004964 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
10004a42:	687b      	ldr	r3, [r7, #4]
10004a44:	2200      	movs	r2, #0
10004a46:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
10004a48:	687b      	ldr	r3, [r7, #4]
10004a4a:	695b      	ldr	r3, [r3, #20]
10004a4c:	1c1a      	adds	r2, r3, #0
10004a4e:	2301      	movs	r3, #1
10004a50:	4093      	lsls	r3, r2
10004a52:	43da      	mvns	r2, r3
10004a54:	4b20      	ldr	r3, [pc, #128]	; (10004ad8 <SYSTIMER_lTimerHandler+0xb8>)
10004a56:	681b      	ldr	r3, [r3, #0]
10004a58:	401a      	ands	r2, r3
10004a5a:	4b1f      	ldr	r3, [pc, #124]	; (10004ad8 <SYSTIMER_lTimerHandler+0xb8>)
10004a5c:	601a      	str	r2, [r3, #0]
10004a5e:	e02c      	b.n	10004aba <SYSTIMER_lTimerHandler+0x9a>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
10004a60:	687b      	ldr	r3, [r7, #4]
10004a62:	7b1b      	ldrb	r3, [r3, #12]
10004a64:	2b00      	cmp	r3, #0
10004a66:	d10e      	bne.n	10004a86 <SYSTIMER_lTimerHandler+0x66>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10004a68:	687b      	ldr	r3, [r7, #4]
10004a6a:	695b      	ldr	r3, [r3, #20]
10004a6c:	1c18      	adds	r0, r3, #0
10004a6e:	f7ff ff79 	bl	10004964 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_STOPPED */
      object_ptr->state = SYSTIMER_STATE_STOPPED;
10004a72:	687b      	ldr	r3, [r7, #4]
10004a74:	2202      	movs	r2, #2
10004a76:	735a      	strb	r2, [r3, #13]
      /* Call timer callback function */
      (object_ptr->callback)(object_ptr->args);
10004a78:	687b      	ldr	r3, [r7, #4]
10004a7a:	689a      	ldr	r2, [r3, #8]
10004a7c:	687b      	ldr	r3, [r7, #4]
10004a7e:	691b      	ldr	r3, [r3, #16]
10004a80:	1c18      	adds	r0, r3, #0
10004a82:	4790      	blx	r2
10004a84:	e019      	b.n	10004aba <SYSTIMER_lTimerHandler+0x9a>
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
10004a86:	687b      	ldr	r3, [r7, #4]
10004a88:	7b1b      	ldrb	r3, [r3, #12]
10004a8a:	2b01      	cmp	r3, #1
10004a8c:	d114      	bne.n	10004ab8 <SYSTIMER_lTimerHandler+0x98>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10004a8e:	687b      	ldr	r3, [r7, #4]
10004a90:	695b      	ldr	r3, [r3, #20]
10004a92:	1c18      	adds	r0, r3, #0
10004a94:	f7ff ff66 	bl	10004964 <SYSTIMER_lRemoveTimerList>
      /* Reset timer tick */
      object_ptr->count = object_ptr->reload;
10004a98:	687b      	ldr	r3, [r7, #4]
10004a9a:	69da      	ldr	r2, [r3, #28]
10004a9c:	687b      	ldr	r3, [r7, #4]
10004a9e:	619a      	str	r2, [r3, #24]
      /* Insert timer into timer list */
      SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
10004aa0:	687b      	ldr	r3, [r7, #4]
10004aa2:	695b      	ldr	r3, [r3, #20]
10004aa4:	1c18      	adds	r0, r3, #0
10004aa6:	f7ff fe79 	bl	1000479c <SYSTIMER_lInsertTimerList>
      /* Call timer callback function */
      (object_ptr->callback)(object_ptr->args);
10004aaa:	687b      	ldr	r3, [r7, #4]
10004aac:	689a      	ldr	r2, [r3, #8]
10004aae:	687b      	ldr	r3, [r7, #4]
10004ab0:	691b      	ldr	r3, [r3, #16]
10004ab2:	1c18      	adds	r0, r3, #0
10004ab4:	4790      	blx	r2
10004ab6:	e000      	b.n	10004aba <SYSTIMER_lTimerHandler+0x9a>
    }
    else
    {
      break;
10004ab8:	e009      	b.n	10004ace <SYSTIMER_lTimerHandler+0xae>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
10004aba:	4b06      	ldr	r3, [pc, #24]	; (10004ad4 <SYSTIMER_lTimerHandler+0xb4>)
10004abc:	681b      	ldr	r3, [r3, #0]
10004abe:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
10004ac0:	687b      	ldr	r3, [r7, #4]
10004ac2:	2b00      	cmp	r3, #0
10004ac4:	d003      	beq.n	10004ace <SYSTIMER_lTimerHandler+0xae>
10004ac6:	687b      	ldr	r3, [r7, #4]
10004ac8:	699b      	ldr	r3, [r3, #24]
10004aca:	2b00      	cmp	r3, #0
10004acc:	d0af      	beq.n	10004a2e <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
10004ace:	46bd      	mov	sp, r7
10004ad0:	b002      	add	sp, #8
10004ad2:	bd80      	pop	{r7, pc}
10004ad4:	200007b0 	.word	0x200007b0
10004ad8:	200007b4 	.word	0x200007b4

10004adc <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
10004adc:	b580      	push	{r7, lr}
10004ade:	b082      	sub	sp, #8
10004ae0:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
10004ae2:	4b0e      	ldr	r3, [pc, #56]	; (10004b1c <SysTick_Handler+0x40>)
10004ae4:	681b      	ldr	r3, [r3, #0]
10004ae6:	607b      	str	r3, [r7, #4]
  g_systick_count++;
10004ae8:	4b0d      	ldr	r3, [pc, #52]	; (10004b20 <SysTick_Handler+0x44>)
10004aea:	681b      	ldr	r3, [r3, #0]
10004aec:	1c5a      	adds	r2, r3, #1
10004aee:	4b0c      	ldr	r3, [pc, #48]	; (10004b20 <SysTick_Handler+0x44>)
10004af0:	601a      	str	r2, [r3, #0]

  if (NULL != object_ptr)
10004af2:	687b      	ldr	r3, [r7, #4]
10004af4:	2b00      	cmp	r3, #0
10004af6:	d00e      	beq.n	10004b16 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
10004af8:	687b      	ldr	r3, [r7, #4]
10004afa:	699b      	ldr	r3, [r3, #24]
10004afc:	2b01      	cmp	r3, #1
10004afe:	d905      	bls.n	10004b0c <SysTick_Handler+0x30>
    {
      object_ptr->count--;
10004b00:	687b      	ldr	r3, [r7, #4]
10004b02:	699b      	ldr	r3, [r3, #24]
10004b04:	1e5a      	subs	r2, r3, #1
10004b06:	687b      	ldr	r3, [r7, #4]
10004b08:	619a      	str	r2, [r3, #24]
10004b0a:	e004      	b.n	10004b16 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
10004b0c:	687b      	ldr	r3, [r7, #4]
10004b0e:	2200      	movs	r2, #0
10004b10:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
10004b12:	f7ff ff85 	bl	10004a20 <SYSTIMER_lTimerHandler>
    }
  }
}
10004b16:	46bd      	mov	sp, r7
10004b18:	b002      	add	sp, #8
10004b1a:	bd80      	pop	{r7, pc}
10004b1c:	200007b0 	.word	0x200007b0
10004b20:	200007b8 	.word	0x200007b8

10004b24 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
10004b24:	b580      	push	{r7, lr}
10004b26:	b084      	sub	sp, #16
10004b28:	af00      	add	r7, sp, #0
10004b2a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
10004b2c:	230f      	movs	r3, #15
10004b2e:	18fb      	adds	r3, r7, r3
10004b30:	2200      	movs	r2, #0
10004b32:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
10004b34:	687b      	ldr	r3, [r7, #4]
10004b36:	781b      	ldrb	r3, [r3, #0]
10004b38:	2201      	movs	r2, #1
10004b3a:	4053      	eors	r3, r2
10004b3c:	b2db      	uxtb	r3, r3
10004b3e:	2b00      	cmp	r3, #0
10004b40:	d020      	beq.n	10004b84 <SYSTIMER_Init+0x60>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
10004b42:	4b14      	ldr	r3, [pc, #80]	; (10004b94 <SYSTIMER_Init+0x70>)
10004b44:	2200      	movs	r2, #0
10004b46:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
10004b48:	23fa      	movs	r3, #250	; 0xfa
10004b4a:	01db      	lsls	r3, r3, #7
10004b4c:	1c18      	adds	r0, r3, #0
10004b4e:	f7ff fe01 	bl	10004754 <SysTick_Config>
10004b52:	1c02      	adds	r2, r0, #0
10004b54:	230f      	movs	r3, #15
10004b56:	18fb      	adds	r3, r7, r3
10004b58:	701a      	strb	r2, [r3, #0]

    if (SYSTIMER_STATUS_FAILURE == status)
10004b5a:	230f      	movs	r3, #15
10004b5c:	18fb      	adds	r3, r7, r3
10004b5e:	781b      	ldrb	r3, [r3, #0]
10004b60:	2b01      	cmp	r3, #1
10004b62:	d00f      	beq.n	10004b84 <SYSTIMER_Init+0x60>
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
10004b64:	2301      	movs	r3, #1
10004b66:	425b      	negs	r3, r3
10004b68:	1c18      	adds	r0, r3, #0
10004b6a:	2103      	movs	r1, #3
10004b6c:	f7ff fd88 	bl	10004680 <NVIC_SetPriority>
#endif      
      g_timer_tracker = 0U;
10004b70:	4b09      	ldr	r3, [pc, #36]	; (10004b98 <SYSTIMER_Init+0x74>)
10004b72:	2200      	movs	r2, #0
10004b74:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
10004b76:	687b      	ldr	r3, [r7, #4]
10004b78:	2201      	movs	r2, #1
10004b7a:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
10004b7c:	230f      	movs	r3, #15
10004b7e:	18fb      	adds	r3, r7, r3
10004b80:	2200      	movs	r2, #0
10004b82:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
10004b84:	230f      	movs	r3, #15
10004b86:	18fb      	adds	r3, r7, r3
10004b88:	781b      	ldrb	r3, [r3, #0]
}
10004b8a:	1c18      	adds	r0, r3, #0
10004b8c:	46bd      	mov	sp, r7
10004b8e:	b004      	add	sp, #16
10004b90:	bd80      	pop	{r7, pc}
10004b92:	46c0      	nop			; (mov r8, r8)
10004b94:	200007b0 	.word	0x200007b0
10004b98:	200007b4 	.word	0x200007b4

10004b9c <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
10004b9c:	b580      	push	{r7, lr}
10004b9e:	b088      	sub	sp, #32
10004ba0:	af00      	add	r7, sp, #0
10004ba2:	60f8      	str	r0, [r7, #12]
10004ba4:	607a      	str	r2, [r7, #4]
10004ba6:	603b      	str	r3, [r7, #0]
10004ba8:	230b      	movs	r3, #11
10004baa:	18fb      	adds	r3, r7, r3
10004bac:	1c0a      	adds	r2, r1, #0
10004bae:	701a      	strb	r2, [r3, #0]
  uint32_t id = 0U;
10004bb0:	2300      	movs	r3, #0
10004bb2:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
10004bb4:	2300      	movs	r3, #0
10004bb6:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
10004bb8:	2300      	movs	r3, #0
10004bba:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
10004bbc:	68fb      	ldr	r3, [r7, #12]
10004bbe:	4a44      	ldr	r2, [pc, #272]	; (10004cd0 <SYSTIMER_CreateTimer+0x134>)
10004bc0:	4293      	cmp	r3, r2
10004bc2:	d802      	bhi.n	10004bca <SYSTIMER_CreateTimer+0x2e>
  {
    id = 0U;
10004bc4:	2300      	movs	r3, #0
10004bc6:	61fb      	str	r3, [r7, #28]
10004bc8:	e07d      	b.n	10004cc6 <SYSTIMER_CreateTimer+0x12a>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
10004bca:	2300      	movs	r3, #0
10004bcc:	61bb      	str	r3, [r7, #24]
10004bce:	e077      	b.n	10004cc0 <SYSTIMER_CreateTimer+0x124>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
10004bd0:	69bb      	ldr	r3, [r7, #24]
10004bd2:	2201      	movs	r2, #1
10004bd4:	409a      	lsls	r2, r3
10004bd6:	4b3f      	ldr	r3, [pc, #252]	; (10004cd4 <SYSTIMER_CreateTimer+0x138>)
10004bd8:	681b      	ldr	r3, [r3, #0]
10004bda:	4013      	ands	r3, r2
10004bdc:	d16d      	bne.n	10004cba <SYSTIMER_CreateTimer+0x11e>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
10004bde:	69bb      	ldr	r3, [r7, #24]
10004be0:	2201      	movs	r2, #1
10004be2:	409a      	lsls	r2, r3
10004be4:	4b3b      	ldr	r3, [pc, #236]	; (10004cd4 <SYSTIMER_CreateTimer+0x138>)
10004be6:	681b      	ldr	r3, [r3, #0]
10004be8:	431a      	orrs	r2, r3
10004bea:	4b3a      	ldr	r3, [pc, #232]	; (10004cd4 <SYSTIMER_CreateTimer+0x138>)
10004bec:	601a      	str	r2, [r3, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
10004bee:	493a      	ldr	r1, [pc, #232]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004bf0:	69ba      	ldr	r2, [r7, #24]
10004bf2:	1c13      	adds	r3, r2, #0
10004bf4:	00db      	lsls	r3, r3, #3
10004bf6:	189b      	adds	r3, r3, r2
10004bf8:	009b      	lsls	r3, r3, #2
10004bfa:	18cb      	adds	r3, r1, r3
10004bfc:	3310      	adds	r3, #16
10004bfe:	69ba      	ldr	r2, [r7, #24]
10004c00:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
10004c02:	4935      	ldr	r1, [pc, #212]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004c04:	69ba      	ldr	r2, [r7, #24]
10004c06:	1c13      	adds	r3, r2, #0
10004c08:	00db      	lsls	r3, r3, #3
10004c0a:	189b      	adds	r3, r3, r2
10004c0c:	009b      	lsls	r3, r3, #2
10004c0e:	18cb      	adds	r3, r1, r3
10004c10:	3308      	adds	r3, #8
10004c12:	220b      	movs	r2, #11
10004c14:	18ba      	adds	r2, r7, r2
10004c16:	7812      	ldrb	r2, [r2, #0]
10004c18:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
10004c1a:	492f      	ldr	r1, [pc, #188]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004c1c:	69ba      	ldr	r2, [r7, #24]
10004c1e:	1c13      	adds	r3, r2, #0
10004c20:	00db      	lsls	r3, r3, #3
10004c22:	189b      	adds	r3, r3, r2
10004c24:	009b      	lsls	r3, r3, #2
10004c26:	18cb      	adds	r3, r1, r3
10004c28:	3308      	adds	r3, #8
10004c2a:	2202      	movs	r2, #2
10004c2c:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
10004c2e:	68fb      	ldr	r3, [r7, #12]
10004c30:	1c18      	adds	r0, r3, #0
10004c32:	23fa      	movs	r3, #250	; 0xfa
10004c34:	0099      	lsls	r1, r3, #2
10004c36:	f7fe fa4b 	bl	100030d0 <__aeabi_uidiv>
10004c3a:	1c03      	adds	r3, r0, #0
10004c3c:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
10004c3e:	697b      	ldr	r3, [r7, #20]
10004c40:	1c59      	adds	r1, r3, #1
10004c42:	4825      	ldr	r0, [pc, #148]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004c44:	69ba      	ldr	r2, [r7, #24]
10004c46:	1c13      	adds	r3, r2, #0
10004c48:	00db      	lsls	r3, r3, #3
10004c4a:	189b      	adds	r3, r3, r2
10004c4c:	009b      	lsls	r3, r3, #2
10004c4e:	18c3      	adds	r3, r0, r3
10004c50:	3318      	adds	r3, #24
10004c52:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
10004c54:	4920      	ldr	r1, [pc, #128]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004c56:	69ba      	ldr	r2, [r7, #24]
10004c58:	1c13      	adds	r3, r2, #0
10004c5a:	00db      	lsls	r3, r3, #3
10004c5c:	189b      	adds	r3, r3, r2
10004c5e:	009b      	lsls	r3, r3, #2
10004c60:	18cb      	adds	r3, r1, r3
10004c62:	3318      	adds	r3, #24
10004c64:	697a      	ldr	r2, [r7, #20]
10004c66:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
10004c68:	491b      	ldr	r1, [pc, #108]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004c6a:	69ba      	ldr	r2, [r7, #24]
10004c6c:	1c13      	adds	r3, r2, #0
10004c6e:	00db      	lsls	r3, r3, #3
10004c70:	189b      	adds	r3, r3, r2
10004c72:	009b      	lsls	r3, r3, #2
10004c74:	18cb      	adds	r3, r1, r3
10004c76:	3308      	adds	r3, #8
10004c78:	687a      	ldr	r2, [r7, #4]
10004c7a:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
10004c7c:	4916      	ldr	r1, [pc, #88]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004c7e:	69ba      	ldr	r2, [r7, #24]
10004c80:	1c13      	adds	r3, r2, #0
10004c82:	00db      	lsls	r3, r3, #3
10004c84:	189b      	adds	r3, r3, r2
10004c86:	009b      	lsls	r3, r3, #2
10004c88:	18cb      	adds	r3, r1, r3
10004c8a:	3310      	adds	r3, #16
10004c8c:	683a      	ldr	r2, [r7, #0]
10004c8e:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
10004c90:	4911      	ldr	r1, [pc, #68]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004c92:	69ba      	ldr	r2, [r7, #24]
10004c94:	1c13      	adds	r3, r2, #0
10004c96:	00db      	lsls	r3, r3, #3
10004c98:	189b      	adds	r3, r3, r2
10004c9a:	009b      	lsls	r3, r3, #2
10004c9c:	18cb      	adds	r3, r1, r3
10004c9e:	2200      	movs	r2, #0
10004ca0:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
10004ca2:	490d      	ldr	r1, [pc, #52]	; (10004cd8 <SYSTIMER_CreateTimer+0x13c>)
10004ca4:	69ba      	ldr	r2, [r7, #24]
10004ca6:	1c13      	adds	r3, r2, #0
10004ca8:	00db      	lsls	r3, r3, #3
10004caa:	189b      	adds	r3, r3, r2
10004cac:	009b      	lsls	r3, r3, #2
10004cae:	2200      	movs	r2, #0
10004cb0:	505a      	str	r2, [r3, r1]
        id = count + 1U;
10004cb2:	69bb      	ldr	r3, [r7, #24]
10004cb4:	3301      	adds	r3, #1
10004cb6:	61fb      	str	r3, [r7, #28]
        break;
10004cb8:	e005      	b.n	10004cc6 <SYSTIMER_CreateTimer+0x12a>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
10004cba:	69bb      	ldr	r3, [r7, #24]
10004cbc:	3301      	adds	r3, #1
10004cbe:	61bb      	str	r3, [r7, #24]
10004cc0:	69bb      	ldr	r3, [r7, #24]
10004cc2:	2b07      	cmp	r3, #7
10004cc4:	d984      	bls.n	10004bd0 <SYSTIMER_CreateTimer+0x34>
      }
    }

  }
  
  return (id);
10004cc6:	69fb      	ldr	r3, [r7, #28]
}  
10004cc8:	1c18      	adds	r0, r3, #0
10004cca:	46bd      	mov	sp, r7
10004ccc:	b008      	add	sp, #32
10004cce:	bd80      	pop	{r7, pc}
10004cd0:	000003e7 	.word	0x000003e7
10004cd4:	200007b4 	.word	0x200007b4
10004cd8:	20000974 	.word	0x20000974

10004cdc <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
10004cdc:	b580      	push	{r7, lr}
10004cde:	b084      	sub	sp, #16
10004ce0:	af00      	add	r7, sp, #0
10004ce2:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
10004ce4:	230f      	movs	r3, #15
10004ce6:	18fb      	adds	r3, r7, r3
10004ce8:	2201      	movs	r2, #1
10004cea:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
10004cec:	687b      	ldr	r3, [r7, #4]
10004cee:	1e5a      	subs	r2, r3, #1
10004cf0:	491c      	ldr	r1, [pc, #112]	; (10004d64 <SYSTIMER_StartTimer+0x88>)
10004cf2:	1c13      	adds	r3, r2, #0
10004cf4:	00db      	lsls	r3, r3, #3
10004cf6:	189b      	adds	r3, r3, r2
10004cf8:	009b      	lsls	r3, r3, #2
10004cfa:	18cb      	adds	r3, r1, r3
10004cfc:	3308      	adds	r3, #8
10004cfe:	795b      	ldrb	r3, [r3, #5]
10004d00:	2b02      	cmp	r3, #2
10004d02:	d128      	bne.n	10004d56 <SYSTIMER_StartTimer+0x7a>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
10004d04:	687b      	ldr	r3, [r7, #4]
10004d06:	1e5a      	subs	r2, r3, #1
10004d08:	687b      	ldr	r3, [r7, #4]
10004d0a:	1e59      	subs	r1, r3, #1
10004d0c:	4815      	ldr	r0, [pc, #84]	; (10004d64 <SYSTIMER_StartTimer+0x88>)
10004d0e:	1c0b      	adds	r3, r1, #0
10004d10:	00db      	lsls	r3, r3, #3
10004d12:	185b      	adds	r3, r3, r1
10004d14:	009b      	lsls	r3, r3, #2
10004d16:	18c3      	adds	r3, r0, r3
10004d18:	3318      	adds	r3, #24
10004d1a:	685b      	ldr	r3, [r3, #4]
10004d1c:	1c59      	adds	r1, r3, #1
10004d1e:	4811      	ldr	r0, [pc, #68]	; (10004d64 <SYSTIMER_StartTimer+0x88>)
10004d20:	1c13      	adds	r3, r2, #0
10004d22:	00db      	lsls	r3, r3, #3
10004d24:	189b      	adds	r3, r3, r2
10004d26:	009b      	lsls	r3, r3, #2
10004d28:	18c3      	adds	r3, r0, r3
10004d2a:	3318      	adds	r3, #24
10004d2c:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
10004d2e:	687b      	ldr	r3, [r7, #4]
10004d30:	1e5a      	subs	r2, r3, #1
10004d32:	490c      	ldr	r1, [pc, #48]	; (10004d64 <SYSTIMER_StartTimer+0x88>)
10004d34:	1c13      	adds	r3, r2, #0
10004d36:	00db      	lsls	r3, r3, #3
10004d38:	189b      	adds	r3, r3, r2
10004d3a:	009b      	lsls	r3, r3, #2
10004d3c:	18cb      	adds	r3, r1, r3
10004d3e:	3308      	adds	r3, #8
10004d40:	2201      	movs	r2, #1
10004d42:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
10004d44:	687b      	ldr	r3, [r7, #4]
10004d46:	3b01      	subs	r3, #1
10004d48:	1c18      	adds	r0, r3, #0
10004d4a:	f7ff fd27 	bl	1000479c <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
10004d4e:	230f      	movs	r3, #15
10004d50:	18fb      	adds	r3, r7, r3
10004d52:	2200      	movs	r2, #0
10004d54:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10004d56:	230f      	movs	r3, #15
10004d58:	18fb      	adds	r3, r7, r3
10004d5a:	781b      	ldrb	r3, [r3, #0]
}
10004d5c:	1c18      	adds	r0, r3, #0
10004d5e:	46bd      	mov	sp, r7
10004d60:	b004      	add	sp, #16
10004d62:	bd80      	pop	{r7, pc}
10004d64:	20000974 	.word	0x20000974

10004d68 <XMC_BCCU_StartDimming>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_BCCU_AbortDimming(), XMC_BCCU_ConcurrentStartDimming()\n\n\n
 */
__STATIC_INLINE void XMC_BCCU_StartDimming (XMC_BCCU_t *const bccu, uint32_t dim_no)
{
10004d68:	b580      	push	{r7, lr}
10004d6a:	b082      	sub	sp, #8
10004d6c:	af00      	add	r7, sp, #0
10004d6e:	6078      	str	r0, [r7, #4]
10004d70:	6039      	str	r1, [r7, #0]
	bccu->DESTRCON = (uint32_t)(BCCU_DESTRCON_DE0S_Msk << dim_no);
10004d72:	683b      	ldr	r3, [r7, #0]
10004d74:	2201      	movs	r2, #1
10004d76:	409a      	lsls	r2, r3
10004d78:	687b      	ldr	r3, [r7, #4]
10004d7a:	625a      	str	r2, [r3, #36]	; 0x24
}
10004d7c:	46bd      	mov	sp, r7
10004d7e:	b002      	add	sp, #8
10004d80:	bd80      	pop	{r7, pc}
10004d82:	46c0      	nop			; (mov r8, r8)

10004d84 <PDM_DIMMED_LED_LAMP_Init>:

/**
 * Function which initializes the BCCU peripheral registers using PDM_BCCU & DIM_BCCU APPs
 */
PDM_DIMMED_LED_LAMP_STATUS_t PDM_DIMMED_LED_LAMP_Init(PDM_DIMMED_LED_LAMP_t *handle)
{
10004d84:	b590      	push	{r4, r7, lr}
10004d86:	b087      	sub	sp, #28
10004d88:	af00      	add	r7, sp, #0
10004d8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
10004d8c:	2300      	movs	r3, #0
10004d8e:	617b      	str	r3, [r7, #20]
  uint32_t channel_mask = 0U;
10004d90:	2300      	movs	r3, #0
10004d92:	613b      	str	r3, [r7, #16]
  PDM_DIMMED_LED_LAMP_STATUS_t status;
  status = PDM_DIMMED_LED_LAMP_STATUS_SUCCESS;
10004d94:	230f      	movs	r3, #15
10004d96:	18fb      	adds	r3, r7, r3
10004d98:	2200      	movs	r2, #0
10004d9a:	701a      	strb	r2, [r3, #0]
            (handle->no_of_leds_used <= 9U))));
#endif

  do
  {
    status = (PDM_DIMMED_LED_LAMP_STATUS_t) PDM_BCCU_Init(handle->led[count]);
10004d9c:	687b      	ldr	r3, [r7, #4]
10004d9e:	697a      	ldr	r2, [r7, #20]
10004da0:	0092      	lsls	r2, r2, #2
10004da2:	58d3      	ldr	r3, [r2, r3]
10004da4:	220f      	movs	r2, #15
10004da6:	18bc      	adds	r4, r7, r2
10004da8:	1c18      	adds	r0, r3, #0
10004daa:	f000 f8bb 	bl	10004f24 <PDM_BCCU_Init>
10004dae:	1c03      	adds	r3, r0, #0
10004db0:	7023      	strb	r3, [r4, #0]
    channel_mask |= ((uint32_t)1U << handle->led[count]->channel_no);
10004db2:	687b      	ldr	r3, [r7, #4]
10004db4:	697a      	ldr	r2, [r7, #20]
10004db6:	0092      	lsls	r2, r2, #2
10004db8:	58d3      	ldr	r3, [r2, r3]
10004dba:	69db      	ldr	r3, [r3, #28]
10004dbc:	1c1a      	adds	r2, r3, #0
10004dbe:	2301      	movs	r3, #1
10004dc0:	4093      	lsls	r3, r2
10004dc2:	693a      	ldr	r2, [r7, #16]
10004dc4:	4313      	orrs	r3, r2
10004dc6:	613b      	str	r3, [r7, #16]
    if((PDM_DIMMED_LED_LAMP_CTRL_METHOD_DIRECT_PDM != handle->method) && (PDM_DIMMED_LED_LAMP_STATUS_SUCCESS == status))
    {
      status = PDM_DIMMED_LED_LAMP_lPeakCurCtrlInit(handle, count);
    }
#endif
    count++;
10004dc8:	697b      	ldr	r3, [r7, #20]
10004dca:	3301      	adds	r3, #1
10004dcc:	617b      	str	r3, [r7, #20]
  } while ((count < (handle->no_of_leds_used)) && (status == PDM_DIMMED_LED_LAMP_STATUS_SUCCESS));
10004dce:	687b      	ldr	r3, [r7, #4]
10004dd0:	2239      	movs	r2, #57	; 0x39
10004dd2:	5c9b      	ldrb	r3, [r3, r2]
10004dd4:	1e1a      	subs	r2, r3, #0
10004dd6:	697b      	ldr	r3, [r7, #20]
10004dd8:	429a      	cmp	r2, r3
10004dda:	d904      	bls.n	10004de6 <PDM_DIMMED_LED_LAMP_Init+0x62>
10004ddc:	230f      	movs	r3, #15
10004dde:	18fb      	adds	r3, r7, r3
10004de0:	781b      	ldrb	r3, [r3, #0]
10004de2:	2b00      	cmp	r3, #0
10004de4:	d0da      	beq.n	10004d9c <PDM_DIMMED_LED_LAMP_Init+0x18>

  if (PDM_DIMMED_LED_LAMP_STATUS_SUCCESS == status)
10004de6:	230f      	movs	r3, #15
10004de8:	18fb      	adds	r3, r7, r3
10004dea:	781b      	ldrb	r3, [r3, #0]
10004dec:	2b00      	cmp	r3, #0
10004dee:	d117      	bne.n	10004e20 <PDM_DIMMED_LED_LAMP_Init+0x9c>
  {
    /* Updating the channel mask into PDM_DIMMED_LED_LAMP handle */
    handle->led_channel_mask = (uint16_t)channel_mask;
10004df0:	693b      	ldr	r3, [r7, #16]
10004df2:	b29a      	uxth	r2, r3
10004df4:	687b      	ldr	r3, [r7, #4]
10004df6:	861a      	strh	r2, [r3, #48]	; 0x30
#if (1U == PDM_DIMMED_LED_LAMP_DIMAPP_USED)
    if (true == handle->dimming_used)
10004df8:	687b      	ldr	r3, [r7, #4]
10004dfa:	223a      	movs	r2, #58	; 0x3a
10004dfc:	5c9b      	ldrb	r3, [r3, r2]
10004dfe:	2b00      	cmp	r3, #0
10004e00:	d00e      	beq.n	10004e20 <PDM_DIMMED_LED_LAMP_Init+0x9c>
    {
      status = (PDM_DIMMED_LED_LAMP_STATUS_t) DIM_BCCU_Init (handle->dim_engine);
10004e02:	687b      	ldr	r3, [r7, #4]
10004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004e06:	220f      	movs	r2, #15
10004e08:	18bc      	adds	r4, r7, r2
10004e0a:	1c18      	adds	r0, r3, #0
10004e0c:	f001 fffa 	bl	10006e04 <DIM_BCCU_Init>
10004e10:	1c03      	adds	r3, r0, #0
10004e12:	7023      	strb	r3, [r4, #0]
      /* Updating the dimming engine number into PDM_DIMMED_LED_LAMP handle */
      handle->dim_no = (uint8_t)(handle->dim_engine->dim_engine_num);
10004e14:	687b      	ldr	r3, [r7, #4]
10004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004e18:	7b59      	ldrb	r1, [r3, #13]
10004e1a:	687b      	ldr	r3, [r7, #4]
10004e1c:	2238      	movs	r2, #56	; 0x38
10004e1e:	5499      	strb	r1, [r3, r2]
    }
#endif
  }
  return (status);
10004e20:	230f      	movs	r3, #15
10004e22:	18fb      	adds	r3, r7, r3
10004e24:	781b      	ldrb	r3, [r3, #0]
}
10004e26:	1c18      	adds	r0, r3, #0
10004e28:	46bd      	mov	sp, r7
10004e2a:	b007      	add	sp, #28
10004e2c:	bd90      	pop	{r4, r7, pc}
10004e2e:	46c0      	nop			; (mov r8, r8)

10004e30 <PDM_DIMMED_LED_LAMP_SetColor>:
 *
 * @param  handle with pointers to static and dynamic content.
 * @return none.<BR>
 */
void PDM_DIMMED_LED_LAMP_SetColor(PDM_DIMMED_LED_LAMP_t *handle)
{
10004e30:	b580      	push	{r7, lr}
10004e32:	b084      	sub	sp, #16
10004e34:	af00      	add	r7, sp, #0
10004e36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PDM_DIMMED_LED_LAMP APP handle function pointer uninitialized", (handle != NULL));
  uint32_t count = 0U;
10004e38:	2300      	movs	r3, #0
10004e3a:	60fb      	str	r3, [r7, #12]
  BCCU_CH_Type *ch_ptr;
  for (count = 0U; count < handle->no_of_leds_used; count++)
10004e3c:	2300      	movs	r3, #0
10004e3e:	60fb      	str	r3, [r7, #12]
10004e40:	e01b      	b.n	10004e7a <PDM_DIMMED_LED_LAMP_SetColor+0x4a>
  {
    ch_ptr = handle->led[count]->bccu_ch;
10004e42:	687b      	ldr	r3, [r7, #4]
10004e44:	68fa      	ldr	r2, [r7, #12]
10004e46:	0092      	lsls	r2, r2, #2
10004e48:	58d3      	ldr	r3, [r2, r3]
10004e4a:	691b      	ldr	r3, [r3, #16]
10004e4c:	60bb      	str	r3, [r7, #8]
    XMC_BCCU_CH_SetTargetIntensity(ch_ptr, handle->config->led_intensity[count]);
10004e4e:	687b      	ldr	r3, [r7, #4]
10004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004e52:	68fa      	ldr	r2, [r7, #12]
10004e54:	0052      	lsls	r2, r2, #1
10004e56:	5ad3      	ldrh	r3, [r2, r3]
10004e58:	1c1a      	adds	r2, r3, #0
10004e5a:	68bb      	ldr	r3, [r7, #8]
10004e5c:	1c18      	adds	r0, r3, #0
10004e5e:	1c11      	adds	r1, r2, #0
10004e60:	f7fe f8d8 	bl	10003014 <XMC_BCCU_CH_SetTargetIntensity>
    XMC_BCCU_CH_SetLinearWalkPrescaler(ch_ptr, handle->linearwalk_prescaler);
10004e64:	687b      	ldr	r3, [r7, #4]
10004e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
10004e68:	1c1a      	adds	r2, r3, #0
10004e6a:	68bb      	ldr	r3, [r7, #8]
10004e6c:	1c18      	adds	r0, r3, #0
10004e6e:	1c11      	adds	r1, r2, #0
10004e70:	f7fe f8b8 	bl	10002fe4 <XMC_BCCU_CH_SetLinearWalkPrescaler>
void PDM_DIMMED_LED_LAMP_SetColor(PDM_DIMMED_LED_LAMP_t *handle)
{
  XMC_ASSERT("PDM_DIMMED_LED_LAMP APP handle function pointer uninitialized", (handle != NULL));
  uint32_t count = 0U;
  BCCU_CH_Type *ch_ptr;
  for (count = 0U; count < handle->no_of_leds_used; count++)
10004e74:	68fb      	ldr	r3, [r7, #12]
10004e76:	3301      	adds	r3, #1
10004e78:	60fb      	str	r3, [r7, #12]
10004e7a:	687b      	ldr	r3, [r7, #4]
10004e7c:	2239      	movs	r2, #57	; 0x39
10004e7e:	5c9b      	ldrb	r3, [r3, r2]
10004e80:	1e1a      	subs	r2, r3, #0
10004e82:	68fb      	ldr	r3, [r7, #12]
10004e84:	429a      	cmp	r2, r3
10004e86:	d8dc      	bhi.n	10004e42 <PDM_DIMMED_LED_LAMP_SetColor+0x12>
    ch_ptr = handle->led[count]->bccu_ch;
    XMC_BCCU_CH_SetTargetIntensity(ch_ptr, handle->config->led_intensity[count]);
    XMC_BCCU_CH_SetLinearWalkPrescaler(ch_ptr, handle->linearwalk_prescaler);
  }

  XMC_BCCU_ConcurrentStartLinearWalk(handle->led[0]->bccu_regs, handle->led_channel_mask);
10004e88:	687b      	ldr	r3, [r7, #4]
10004e8a:	681b      	ldr	r3, [r3, #0]
10004e8c:	681a      	ldr	r2, [r3, #0]
10004e8e:	687b      	ldr	r3, [r7, #4]
10004e90:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
10004e92:	1c10      	adds	r0, r2, #0
10004e94:	1c19      	adds	r1, r3, #0
10004e96:	f7fd ffff 	bl	10002e98 <XMC_BCCU_ConcurrentStartLinearWalk>
}
10004e9a:	46bd      	mov	sp, r7
10004e9c:	b004      	add	sp, #16
10004e9e:	bd80      	pop	{r7, pc}

10004ea0 <PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv>:
 * @param dim_div
 * @param dim_prescaler
 * @return none.<BR>
 */
void PDM_DIMMED_LED_LAMP_SetDimLevelExponentialAdv(PDM_DIMMED_LED_LAMP_t *handle, uint32_t dim_div ,uint32_t dim_prescaler)
{
10004ea0:	b580      	push	{r7, lr}
10004ea2:	b086      	sub	sp, #24
10004ea4:	af00      	add	r7, sp, #0
10004ea6:	60f8      	str	r0, [r7, #12]
10004ea8:	60b9      	str	r1, [r7, #8]
10004eaa:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("PDM_DIMMED_LED_LAMP APP handle function pointer uninitialized", (handle != NULL));
  BCCU_Type *global_ptr;
  BCCU_DE_Type *dim_ptr;
  global_ptr = handle->led[0]->bccu_regs;
10004eac:	68fb      	ldr	r3, [r7, #12]
10004eae:	681b      	ldr	r3, [r3, #0]
10004eb0:	681b      	ldr	r3, [r3, #0]
10004eb2:	617b      	str	r3, [r7, #20]
  dim_ptr = handle->dim_engine->bccu_de_regs;
10004eb4:	68fb      	ldr	r3, [r7, #12]
10004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004eb8:	681b      	ldr	r3, [r3, #0]
10004eba:	613b      	str	r3, [r7, #16]

  XMC_BCCU_SetDimClockPrescaler(global_ptr, dim_prescaler);
10004ebc:	697a      	ldr	r2, [r7, #20]
10004ebe:	687b      	ldr	r3, [r7, #4]
10004ec0:	1c10      	adds	r0, r2, #0
10004ec2:	1c19      	adds	r1, r3, #0
10004ec4:	f7fd ffd0 	bl	10002e68 <XMC_BCCU_SetDimClockPrescaler>
  XMC_BCCU_DIM_SetDimDivider(dim_ptr, dim_div);
10004ec8:	693a      	ldr	r2, [r7, #16]
10004eca:	68bb      	ldr	r3, [r7, #8]
10004ecc:	1c10      	adds	r0, r2, #0
10004ece:	1c19      	adds	r1, r3, #0
10004ed0:	f7fe f8c4 	bl	1000305c <XMC_BCCU_DIM_SetDimDivider>
  XMC_BCCU_DIM_SetTargetDimmingLevel(dim_ptr, handle->config->dim_level);
10004ed4:	68fb      	ldr	r3, [r7, #12]
10004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004ed8:	8a5b      	ldrh	r3, [r3, #18]
10004eda:	1c1a      	adds	r2, r3, #0
10004edc:	693b      	ldr	r3, [r7, #16]
10004ede:	1c18      	adds	r0, r3, #0
10004ee0:	1c11      	adds	r1, r2, #0
10004ee2:	f7fe f8af 	bl	10003044 <XMC_BCCU_DIM_SetTargetDimmingLevel>
  XMC_BCCU_StartDimming(global_ptr, handle->dim_no);
10004ee6:	68fb      	ldr	r3, [r7, #12]
10004ee8:	2238      	movs	r2, #56	; 0x38
10004eea:	5c9b      	ldrb	r3, [r3, r2]
10004eec:	1c1a      	adds	r2, r3, #0
10004eee:	697b      	ldr	r3, [r7, #20]
10004ef0:	1c18      	adds	r0, r3, #0
10004ef2:	1c11      	adds	r1, r2, #0
10004ef4:	f7ff ff38 	bl	10004d68 <XMC_BCCU_StartDimming>
}
10004ef8:	46bd      	mov	sp, r7
10004efa:	b006      	add	sp, #24
10004efc:	bd80      	pop	{r7, pc}
10004efe:	46c0      	nop			; (mov r8, r8)

10004f00 <XMC_BCCU_StartLinearWalk>:
 * \par<b>Related APIs:</b><BR>
 * XMC_BCCU_AbortLinearWalk(), XMC_BCCU_CH_SetTargetIntensity(), XMC_BCCU_IsLinearWalkComplete(),
 * XMC_BCCU_ConcurrentStartLinearWalk()\n\n\n
 */
__STATIC_INLINE void XMC_BCCU_StartLinearWalk (XMC_BCCU_t *const bccu, uint32_t chan_no)
{
10004f00:	b580      	push	{r7, lr}
10004f02:	b082      	sub	sp, #8
10004f04:	af00      	add	r7, sp, #0
10004f06:	6078      	str	r0, [r7, #4]
10004f08:	6039      	str	r1, [r7, #0]
  bccu->CHSTRCON |= (uint32_t)(BCCU_CHSTRCON_CH0S_Msk << chan_no);
10004f0a:	687b      	ldr	r3, [r7, #4]
10004f0c:	699a      	ldr	r2, [r3, #24]
10004f0e:	683b      	ldr	r3, [r7, #0]
10004f10:	2101      	movs	r1, #1
10004f12:	4099      	lsls	r1, r3
10004f14:	1c0b      	adds	r3, r1, #0
10004f16:	431a      	orrs	r2, r3
10004f18:	687b      	ldr	r3, [r7, #4]
10004f1a:	619a      	str	r2, [r3, #24]
}
10004f1c:	46bd      	mov	sp, r7
10004f1e:	b002      	add	sp, #8
10004f20:	bd80      	pop	{r7, pc}
10004f22:	46c0      	nop			; (mov r8, r8)

10004f24 <PDM_BCCU_Init>:
 * @brief This function Initializes a  PDM_BCCU APP instances based on user
 *          configuration.
 */

PDM_BCCU_STATUS_t PDM_BCCU_Init(PDM_BCCU_t * handle)
{
10004f24:	b590      	push	{r4, r7, lr}
10004f26:	b085      	sub	sp, #20
10004f28:	af00      	add	r7, sp, #0
10004f2a:	6078      	str	r0, [r7, #4]
            (handle->intensity <= 4095U) && (handle->output_level <= 1) && (handle->trigger_line <= 1))));

  /* Checking for initialization state of the instance */

  /* GLOBAL_BCCU APP Initialization for XMC1000 devices */
  status = (PDM_BCCU_STATUS_t)GLOBAL_BCCU_Init(handle->global_bccu_handleptr);
10004f2c:	687b      	ldr	r3, [r7, #4]
10004f2e:	695b      	ldr	r3, [r3, #20]
10004f30:	220f      	movs	r2, #15
10004f32:	18bc      	adds	r4, r7, r2
10004f34:	1c18      	adds	r0, r3, #0
10004f36:	f000 f961 	bl	100051fc <GLOBAL_BCCU_Init>
10004f3a:	1c03      	adds	r3, r0, #0
10004f3c:	7023      	strb	r3, [r4, #0]
  if (status != PDM_BCCU_STATUS_FAILURE)
10004f3e:	230f      	movs	r3, #15
10004f40:	18fb      	adds	r3, r7, r3
10004f42:	781b      	ldrb	r3, [r3, #0]
10004f44:	2b01      	cmp	r3, #1
10004f46:	d100      	bne.n	10004f4a <PDM_BCCU_Init+0x26>
10004f48:	e07a      	b.n	10005040 <PDM_BCCU_Init+0x11c>
  {
    if (true == handle->output_pin_enable)
10004f4a:	687b      	ldr	r3, [r7, #4]
10004f4c:	222d      	movs	r2, #45	; 0x2d
10004f4e:	5c9b      	ldrb	r3, [r3, r2]
10004f50:	2b00      	cmp	r3, #0
10004f52:	d00b      	beq.n	10004f6c <PDM_BCCU_Init+0x48>
    {
      /* Hardware initialization based on UI */
      XMC_GPIO_Init(handle->gpio_port, handle->gpio_pin, handle->gpio_config);
10004f54:	687b      	ldr	r3, [r7, #4]
10004f56:	68d9      	ldr	r1, [r3, #12]
10004f58:	687b      	ldr	r3, [r7, #4]
10004f5a:	222c      	movs	r2, #44	; 0x2c
10004f5c:	5c9a      	ldrb	r2, [r3, r2]
10004f5e:	687b      	ldr	r3, [r7, #4]
10004f60:	689b      	ldr	r3, [r3, #8]
10004f62:	1c08      	adds	r0, r1, #0
10004f64:	1c11      	adds	r1, r2, #0
10004f66:	1c1a      	adds	r2, r3, #0
10004f68:	f7fd fd56 	bl	10002a18 <XMC_GPIO_Init>
    }
    XMC_BCCU_SetOutputPassiveLevel(handle->bccu_regs, handle->channel_no,
10004f6c:	687b      	ldr	r3, [r7, #4]
10004f6e:	6819      	ldr	r1, [r3, #0]
10004f70:	687b      	ldr	r3, [r7, #4]
10004f72:	69da      	ldr	r2, [r3, #28]
10004f74:	687b      	ldr	r3, [r7, #4]
10004f76:	7e5b      	ldrb	r3, [r3, #25]
10004f78:	1c08      	adds	r0, r1, #0
10004f7a:	1c11      	adds	r1, r2, #0
10004f7c:	1c1a      	adds	r2, r3, #0
10004f7e:	f7fd ffab 	bl	10002ed8 <XMC_BCCU_SetOutputPassiveLevel>
    		                      (XMC_BCCU_CH_ACTIVE_LEVEL_t)handle->output_level);
    if (true == handle->trap_enable)
10004f82:	687b      	ldr	r3, [r7, #4]
10004f84:	222e      	movs	r2, #46	; 0x2e
10004f86:	5c9b      	ldrb	r3, [r3, r2]
10004f88:	2b00      	cmp	r3, #0
10004f8a:	d007      	beq.n	10004f9c <PDM_BCCU_Init+0x78>
    {
      XMC_BCCU_EnableTrap (handle->bccu_regs, handle->channel_no);
10004f8c:	687b      	ldr	r3, [r7, #4]
10004f8e:	681a      	ldr	r2, [r3, #0]
10004f90:	687b      	ldr	r3, [r7, #4]
10004f92:	69db      	ldr	r3, [r3, #28]
10004f94:	1c10      	adds	r0, r2, #0
10004f96:	1c19      	adds	r1, r3, #0
10004f98:	f7fd ffb2 	bl	10002f00 <XMC_BCCU_EnableTrap>
    }
    if ((bool)true == handle->trigger_en)
10004f9c:	687b      	ldr	r3, [r7, #4]
10004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004fa0:	2b01      	cmp	r3, #1
10004fa2:	d11d      	bne.n	10004fe0 <PDM_BCCU_Init+0xbc>
    {
      XMC_BCCU_CH_ConfigTrigger(handle->bccu_ch,
10004fa4:	687b      	ldr	r3, [r7, #4]
10004fa6:	691a      	ldr	r2, [r3, #16]
                               (XMC_BCCU_CH_TRIG_EDGE_t)handle->config->trig_edge,handle->config->force_trig_en);
10004fa8:	687b      	ldr	r3, [r7, #4]
10004faa:	685b      	ldr	r3, [r3, #4]
10004fac:	785b      	ldrb	r3, [r3, #1]
10004fae:	075b      	lsls	r3, r3, #29
10004fb0:	0fdb      	lsrs	r3, r3, #31
10004fb2:	b2db      	uxtb	r3, r3
    {
      XMC_BCCU_EnableTrap (handle->bccu_regs, handle->channel_no);
    }
    if ((bool)true == handle->trigger_en)
    {
      XMC_BCCU_CH_ConfigTrigger(handle->bccu_ch,
10004fb4:	1c19      	adds	r1, r3, #0
                               (XMC_BCCU_CH_TRIG_EDGE_t)handle->config->trig_edge,handle->config->force_trig_en);
10004fb6:	687b      	ldr	r3, [r7, #4]
10004fb8:	685b      	ldr	r3, [r3, #4]
10004fba:	785b      	ldrb	r3, [r3, #1]
10004fbc:	071b      	lsls	r3, r3, #28
10004fbe:	0fdb      	lsrs	r3, r3, #31
10004fc0:	b2db      	uxtb	r3, r3
    {
      XMC_BCCU_EnableTrap (handle->bccu_regs, handle->channel_no);
    }
    if ((bool)true == handle->trigger_en)
    {
      XMC_BCCU_CH_ConfigTrigger(handle->bccu_ch,
10004fc2:	1c10      	adds	r0, r2, #0
10004fc4:	1c1a      	adds	r2, r3, #0
10004fc6:	f7fd ffe9 	bl	10002f9c <XMC_BCCU_CH_ConfigTrigger>
                               (XMC_BCCU_CH_TRIG_EDGE_t)handle->config->trig_edge,handle->config->force_trig_en);
      XMC_BCCU_EnableChannelTrigger (handle->bccu_regs, handle->channel_no,
10004fca:	687b      	ldr	r3, [r7, #4]
10004fcc:	6819      	ldr	r1, [r3, #0]
10004fce:	687b      	ldr	r3, [r7, #4]
10004fd0:	69da      	ldr	r2, [r3, #28]
10004fd2:	687b      	ldr	r3, [r7, #4]
10004fd4:	7e9b      	ldrb	r3, [r3, #26]
10004fd6:	1c08      	adds	r0, r1, #0
10004fd8:	1c11      	adds	r1, r2, #0
10004fda:	1c1a      	adds	r2, r3, #0
10004fdc:	f7fd ffa2 	bl	10002f24 <XMC_BCCU_EnableChannelTrigger>
    		                        (XMC_BCCU_CH_TRIGOUT_t)handle->trigger_line);
    }
    XMC_BCCU_CH_Init(handle->bccu_ch, handle->config);
10004fe0:	687b      	ldr	r3, [r7, #4]
10004fe2:	691a      	ldr	r2, [r3, #16]
10004fe4:	687b      	ldr	r3, [r7, #4]
10004fe6:	685b      	ldr	r3, [r3, #4]
10004fe8:	1c10      	adds	r0, r2, #0
10004fea:	1c19      	adds	r1, r3, #0
10004fec:	f7fd ffc2 	bl	10002f74 <XMC_BCCU_CH_Init>

    if (PDM_BCCU_ENABLE_AT_INIT_TRUE == handle->channel_enable_at_init)
10004ff0:	687b      	ldr	r3, [r7, #4]
10004ff2:	7e1b      	ldrb	r3, [r3, #24]
10004ff4:	2b01      	cmp	r3, #1
10004ff6:	d11f      	bne.n	10005038 <PDM_BCCU_Init+0x114>
    {
      /* To set the linear walker prescaler factor of a BCCU channel */
      XMC_BCCU_CH_SetLinearWalkPrescaler(handle->bccu_ch, handle->linear_walk_time);
10004ff8:	687b      	ldr	r3, [r7, #4]
10004ffa:	691a      	ldr	r2, [r3, #16]
10004ffc:	687b      	ldr	r3, [r7, #4]
10004ffe:	6a1b      	ldr	r3, [r3, #32]
10005000:	1c10      	adds	r0, r2, #0
10005002:	1c19      	adds	r1, r3, #0
10005004:	f7fd ffee 	bl	10002fe4 <XMC_BCCU_CH_SetLinearWalkPrescaler>

      /* Channel Enable at Initialization for XMC1000 devices */
      XMC_BCCU_EnableChannel(handle->bccu_regs, handle->channel_no);
10005008:	687b      	ldr	r3, [r7, #4]
1000500a:	681a      	ldr	r2, [r3, #0]
1000500c:	687b      	ldr	r3, [r7, #4]
1000500e:	69db      	ldr	r3, [r3, #28]
10005010:	1c10      	adds	r0, r2, #0
10005012:	1c19      	adds	r1, r3, #0
10005014:	f7fd ff4e 	bl	10002eb4 <XMC_BCCU_EnableChannel>

      /* To set the set the channel target intensity */
      XMC_BCCU_CH_SetTargetIntensity(handle->bccu_ch, handle->intensity);
10005018:	687b      	ldr	r3, [r7, #4]
1000501a:	691a      	ldr	r2, [r3, #16]
1000501c:	687b      	ldr	r3, [r7, #4]
1000501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005020:	1c10      	adds	r0, r2, #0
10005022:	1c19      	adds	r1, r3, #0
10005024:	f7fd fff6 	bl	10003014 <XMC_BCCU_CH_SetTargetIntensity>

      /* To Start Linear Walk of channel */
      XMC_BCCU_StartLinearWalk(handle->bccu_regs,handle->channel_no);
10005028:	687b      	ldr	r3, [r7, #4]
1000502a:	681a      	ldr	r2, [r3, #0]
1000502c:	687b      	ldr	r3, [r7, #4]
1000502e:	69db      	ldr	r3, [r3, #28]
10005030:	1c10      	adds	r0, r2, #0
10005032:	1c19      	adds	r1, r3, #0
10005034:	f7ff ff64 	bl	10004f00 <XMC_BCCU_StartLinearWalk>
    }
    /* Return status after updation */
    status = PDM_BCCU_STATUS_SUCCESS;
10005038:	230f      	movs	r3, #15
1000503a:	18fb      	adds	r3, r7, r3
1000503c:	2200      	movs	r2, #0
1000503e:	701a      	strb	r2, [r3, #0]
  }
  return (status);
10005040:	230f      	movs	r3, #15
10005042:	18fb      	adds	r3, r7, r3
10005044:	781b      	ldrb	r3, [r3, #0]
}
10005046:	1c18      	adds	r0, r3, #0
10005048:	46bd      	mov	sp, r7
1000504a:	b005      	add	sp, #20
1000504c:	bd90      	pop	{r4, r7, pc}
1000504e:	46c0      	nop			; (mov r8, r8)

10005050 <PDM_BCCU_SetIntensity>:
}
/**
* @brief API to Set Channel Intensity.
*/
void PDM_BCCU_SetIntensity(PDM_BCCU_t *handle, uint32_t intensity)
{
10005050:	b580      	push	{r7, lr}
10005052:	b082      	sub	sp, #8
10005054:	af00      	add	r7, sp, #0
10005056:	6078      	str	r0, [r7, #4]
10005058:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("PDM_BCCU_SetIntensity: handler null pointer", handle != NULL);
  XMC_BCCU_CH_SetTargetIntensity(handle->bccu_ch, intensity);
1000505a:	687b      	ldr	r3, [r7, #4]
1000505c:	691a      	ldr	r2, [r3, #16]
1000505e:	683b      	ldr	r3, [r7, #0]
10005060:	1c10      	adds	r0, r2, #0
10005062:	1c19      	adds	r1, r3, #0
10005064:	f7fd ffd6 	bl	10003014 <XMC_BCCU_CH_SetTargetIntensity>
}
10005068:	46bd      	mov	sp, r7
1000506a:	b002      	add	sp, #8
1000506c:	bd80      	pop	{r7, pc}
1000506e:	46c0      	nop			; (mov r8, r8)

10005070 <PDM_BCCU_SetLinearWalk>:

/**
* @brief API to Set Linear Walk.
*/
void PDM_BCCU_SetLinearWalk(PDM_BCCU_t *handle, uint32_t prescalar)
{
10005070:	b580      	push	{r7, lr}
10005072:	b082      	sub	sp, #8
10005074:	af00      	add	r7, sp, #0
10005076:	6078      	str	r0, [r7, #4]
10005078:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("PDM_BCCU_SetLinearWalk: handler null pointer", handle != NULL);
  XMC_BCCU_CH_SetLinearWalkPrescaler(handle->bccu_ch, prescalar);
1000507a:	687b      	ldr	r3, [r7, #4]
1000507c:	691a      	ldr	r2, [r3, #16]
1000507e:	683b      	ldr	r3, [r7, #0]
10005080:	1c10      	adds	r0, r2, #0
10005082:	1c19      	adds	r1, r3, #0
10005084:	f7fd ffae 	bl	10002fe4 <XMC_BCCU_CH_SetLinearWalkPrescaler>
}
10005088:	46bd      	mov	sp, r7
1000508a:	b002      	add	sp, #8
1000508c:	bd80      	pop	{r7, pc}
1000508e:	46c0      	nop			; (mov r8, r8)

10005090 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10005090:	b580      	push	{r7, lr}
10005092:	b082      	sub	sp, #8
10005094:	af00      	add	r7, sp, #0
10005096:	1c02      	adds	r2, r0, #0
10005098:	1dfb      	adds	r3, r7, #7
1000509a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
1000509c:	4b06      	ldr	r3, [pc, #24]	; (100050b8 <NVIC_EnableIRQ+0x28>)
1000509e:	1dfa      	adds	r2, r7, #7
100050a0:	7812      	ldrb	r2, [r2, #0]
100050a2:	1c11      	adds	r1, r2, #0
100050a4:	221f      	movs	r2, #31
100050a6:	400a      	ands	r2, r1
100050a8:	2101      	movs	r1, #1
100050aa:	4091      	lsls	r1, r2
100050ac:	1c0a      	adds	r2, r1, #0
100050ae:	601a      	str	r2, [r3, #0]
}
100050b0:	46bd      	mov	sp, r7
100050b2:	b002      	add	sp, #8
100050b4:	bd80      	pop	{r7, pc}
100050b6:	46c0      	nop			; (mov r8, r8)
100050b8:	e000e100 	.word	0xe000e100

100050bc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100050bc:	b5b0      	push	{r4, r5, r7, lr}
100050be:	b082      	sub	sp, #8
100050c0:	af00      	add	r7, sp, #0
100050c2:	1c02      	adds	r2, r0, #0
100050c4:	6039      	str	r1, [r7, #0]
100050c6:	1dfb      	adds	r3, r7, #7
100050c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
100050ca:	1dfb      	adds	r3, r7, #7
100050cc:	781b      	ldrb	r3, [r3, #0]
100050ce:	2b7f      	cmp	r3, #127	; 0x7f
100050d0:	d92f      	bls.n	10005132 <NVIC_SetPriority+0x76>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100050d2:	4c2d      	ldr	r4, [pc, #180]	; (10005188 <NVIC_SetPriority+0xcc>)
100050d4:	1dfb      	adds	r3, r7, #7
100050d6:	781b      	ldrb	r3, [r3, #0]
100050d8:	1c1a      	adds	r2, r3, #0
100050da:	230f      	movs	r3, #15
100050dc:	4013      	ands	r3, r2
100050de:	3b08      	subs	r3, #8
100050e0:	0899      	lsrs	r1, r3, #2
100050e2:	4a29      	ldr	r2, [pc, #164]	; (10005188 <NVIC_SetPriority+0xcc>)
100050e4:	1dfb      	adds	r3, r7, #7
100050e6:	781b      	ldrb	r3, [r3, #0]
100050e8:	1c18      	adds	r0, r3, #0
100050ea:	230f      	movs	r3, #15
100050ec:	4003      	ands	r3, r0
100050ee:	3b08      	subs	r3, #8
100050f0:	089b      	lsrs	r3, r3, #2
100050f2:	3306      	adds	r3, #6
100050f4:	009b      	lsls	r3, r3, #2
100050f6:	18d3      	adds	r3, r2, r3
100050f8:	685b      	ldr	r3, [r3, #4]
100050fa:	1dfa      	adds	r2, r7, #7
100050fc:	7812      	ldrb	r2, [r2, #0]
100050fe:	1c10      	adds	r0, r2, #0
10005100:	2203      	movs	r2, #3
10005102:	4002      	ands	r2, r0
10005104:	00d2      	lsls	r2, r2, #3
10005106:	1c10      	adds	r0, r2, #0
10005108:	22ff      	movs	r2, #255	; 0xff
1000510a:	4082      	lsls	r2, r0
1000510c:	43d2      	mvns	r2, r2
1000510e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10005110:	683b      	ldr	r3, [r7, #0]
10005112:	019b      	lsls	r3, r3, #6
10005114:	20ff      	movs	r0, #255	; 0xff
10005116:	4003      	ands	r3, r0
10005118:	1df8      	adds	r0, r7, #7
1000511a:	7800      	ldrb	r0, [r0, #0]
1000511c:	1c05      	adds	r5, r0, #0
1000511e:	2003      	movs	r0, #3
10005120:	4028      	ands	r0, r5
10005122:	00c0      	lsls	r0, r0, #3
10005124:	4083      	lsls	r3, r0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10005126:	431a      	orrs	r2, r3
10005128:	1d8b      	adds	r3, r1, #6
1000512a:	009b      	lsls	r3, r3, #2
1000512c:	18e3      	adds	r3, r4, r3
1000512e:	605a      	str	r2, [r3, #4]
10005130:	e026      	b.n	10005180 <NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10005132:	4c16      	ldr	r4, [pc, #88]	; (1000518c <NVIC_SetPriority+0xd0>)
10005134:	1dfb      	adds	r3, r7, #7
10005136:	781b      	ldrb	r3, [r3, #0]
10005138:	b25b      	sxtb	r3, r3
1000513a:	089b      	lsrs	r3, r3, #2
1000513c:	4913      	ldr	r1, [pc, #76]	; (1000518c <NVIC_SetPriority+0xd0>)
1000513e:	1dfa      	adds	r2, r7, #7
10005140:	7812      	ldrb	r2, [r2, #0]
10005142:	b252      	sxtb	r2, r2
10005144:	0892      	lsrs	r2, r2, #2
10005146:	32c0      	adds	r2, #192	; 0xc0
10005148:	0092      	lsls	r2, r2, #2
1000514a:	5852      	ldr	r2, [r2, r1]
1000514c:	1df9      	adds	r1, r7, #7
1000514e:	7809      	ldrb	r1, [r1, #0]
10005150:	1c08      	adds	r0, r1, #0
10005152:	2103      	movs	r1, #3
10005154:	4001      	ands	r1, r0
10005156:	00c9      	lsls	r1, r1, #3
10005158:	1c08      	adds	r0, r1, #0
1000515a:	21ff      	movs	r1, #255	; 0xff
1000515c:	4081      	lsls	r1, r0
1000515e:	43c9      	mvns	r1, r1
10005160:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10005162:	683a      	ldr	r2, [r7, #0]
10005164:	0192      	lsls	r2, r2, #6
10005166:	20ff      	movs	r0, #255	; 0xff
10005168:	4002      	ands	r2, r0
1000516a:	1df8      	adds	r0, r7, #7
1000516c:	7800      	ldrb	r0, [r0, #0]
1000516e:	1c05      	adds	r5, r0, #0
10005170:	2003      	movs	r0, #3
10005172:	4028      	ands	r0, r5
10005174:	00c0      	lsls	r0, r0, #3
10005176:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10005178:	430a      	orrs	r2, r1
1000517a:	33c0      	adds	r3, #192	; 0xc0
1000517c:	009b      	lsls	r3, r3, #2
1000517e:	511a      	str	r2, [r3, r4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10005180:	46bd      	mov	sp, r7
10005182:	b002      	add	sp, #8
10005184:	bdb0      	pop	{r4, r5, r7, pc}
10005186:	46c0      	nop			; (mov r8, r8)
10005188:	e000ed00 	.word	0xe000ed00
1000518c:	e000e100 	.word	0xe000e100

10005190 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
10005190:	b580      	push	{r7, lr}
10005192:	b082      	sub	sp, #8
10005194:	af00      	add	r7, sp, #0
10005196:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10005198:	687b      	ldr	r3, [r7, #4]
1000519a:	781b      	ldrb	r3, [r3, #0]
1000519c:	b25b      	sxtb	r3, r3
1000519e:	1c18      	adds	r0, r3, #0
100051a0:	f7ff ff76 	bl	10005090 <NVIC_EnableIRQ>
}
100051a4:	46bd      	mov	sp, r7
100051a6:	b002      	add	sp, #8
100051a8:	bd80      	pop	{r7, pc}
100051aa:	46c0      	nop			; (mov r8, r8)

100051ac <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
100051ac:	b580      	push	{r7, lr}
100051ae:	b082      	sub	sp, #8
100051b0:	af00      	add	r7, sp, #0
100051b2:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
100051b4:	687b      	ldr	r3, [r7, #4]
100051b6:	781a      	ldrb	r2, [r3, #0]
100051b8:	687b      	ldr	r3, [r7, #4]
100051ba:	785b      	ldrb	r3, [r3, #1]
100051bc:	1c19      	adds	r1, r3, #0
100051be:	b253      	sxtb	r3, r2
100051c0:	1c18      	adds	r0, r3, #0
100051c2:	f7ff ff7b 	bl	100050bc <NVIC_SetPriority>
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
100051c6:	687b      	ldr	r3, [r7, #4]
100051c8:	789b      	ldrb	r3, [r3, #2]
100051ca:	2b00      	cmp	r3, #0
100051cc:	d003      	beq.n	100051d6 <INTERRUPT_Init+0x2a>
  {
    INTERRUPT_Enable(handler);
100051ce:	687b      	ldr	r3, [r7, #4]
100051d0:	1c18      	adds	r0, r3, #0
100051d2:	f7ff ffdd 	bl	10005190 <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
100051d6:	2300      	movs	r3, #0
}
100051d8:	1c18      	adds	r0, r3, #0
100051da:	46bd      	mov	sp, r7
100051dc:	b002      	add	sp, #8
100051de:	bd80      	pop	{r7, pc}

100051e0 <XMC_BCCU_EnableInterrupt>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_BCCU_DisableInterrupt()\n\n\n
 */
__STATIC_INLINE void XMC_BCCU_EnableInterrupt (XMC_BCCU_t *const bccu, uint32_t event)
{
100051e0:	b580      	push	{r7, lr}
100051e2:	b082      	sub	sp, #8
100051e4:	af00      	add	r7, sp, #0
100051e6:	6078      	str	r0, [r7, #4]
100051e8:	6039      	str	r1, [r7, #0]
  bccu->EVIER |= event;
100051ea:	687b      	ldr	r3, [r7, #4]
100051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100051ee:	683b      	ldr	r3, [r7, #0]
100051f0:	431a      	orrs	r2, r3
100051f2:	687b      	ldr	r3, [r7, #4]
100051f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
100051f6:	46bd      	mov	sp, r7
100051f8:	b002      	add	sp, #8
100051fa:	bd80      	pop	{r7, pc}

100051fc <GLOBAL_BCCU_Init>:
/**
 * @brief   This function Initializes a GLOBAL_BCCU APP instances based on
 *          user configuration.
 */
GLOBAL_BCCU_STATUS_t GLOBAL_BCCU_Init(GLOBAL_BCCU_t *handle)
{
100051fc:	b580      	push	{r7, lr}
100051fe:	b084      	sub	sp, #16
10005200:	af00      	add	r7, sp, #0
10005202:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_BCCU APP handle function pointer uninitialized", (((handle != NULL) &&
  			(handle->bccuregs != NULL)) && ((handle->config != NULL) && (handle->enable_events <= 31U) &&
  	        (handle->trap_source <= 15))));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
10005204:	687b      	ldr	r3, [r7, #4]
10005206:	7b9b      	ldrb	r3, [r3, #14]
10005208:	2201      	movs	r2, #1
1000520a:	4053      	eors	r3, r2
1000520c:	b2db      	uxtb	r3, r3
1000520e:	2b00      	cmp	r3, #0
10005210:	d02b      	beq.n	1000526a <GLOBAL_BCCU_Init+0x6e>
  {
    /* Configure Trap input source */
    XMC_BCCU_SelectTrapInput(handle->bccuregs,handle->trap_source);
10005212:	687b      	ldr	r3, [r7, #4]
10005214:	681a      	ldr	r2, [r3, #0]
10005216:	687b      	ldr	r3, [r7, #4]
10005218:	7b1b      	ldrb	r3, [r3, #12]
1000521a:	1c10      	adds	r0, r2, #0
1000521c:	1c19      	adds	r1, r3, #0
1000521e:	f7fd fdef 	bl	10002e00 <XMC_BCCU_SelectTrapInput>
    /* Configure Trap input edge*/
    XMC_BCCU_SetTrapEdge(handle->bccuregs,handle->trap_edge);
10005222:	687b      	ldr	r3, [r7, #4]
10005224:	681a      	ldr	r2, [r3, #0]
10005226:	687b      	ldr	r3, [r7, #4]
10005228:	7b5b      	ldrb	r3, [r3, #13]
1000522a:	1c10      	adds	r0, r2, #0
1000522c:	1c19      	adds	r1, r3, #0
1000522e:	f7fd fe01 	bl	10002e34 <XMC_BCCU_SetTrapEdge>
    /* Hardware initialization based on UI */
    XMC_BCCU_GlobalInit(handle->bccuregs, handle->config);
10005232:	687b      	ldr	r3, [r7, #4]
10005234:	681a      	ldr	r2, [r3, #0]
10005236:	687b      	ldr	r3, [r7, #4]
10005238:	685b      	ldr	r3, [r3, #4]
1000523a:	1c10      	adds	r0, r2, #0
1000523c:	1c19      	adds	r1, r3, #0
1000523e:	f7fd fdc7 	bl	10002dd0 <XMC_BCCU_GlobalInit>
	/**< Initialize all the interrupt configurations */
    if (0U != handle->enable_events)
10005242:	687b      	ldr	r3, [r7, #4]
10005244:	689b      	ldr	r3, [r3, #8]
10005246:	2b00      	cmp	r3, #0
10005248:	d007      	beq.n	1000525a <GLOBAL_BCCU_Init+0x5e>
    {
      XMC_BCCU_EnableInterrupt(handle->bccuregs, handle->enable_events);
1000524a:	687b      	ldr	r3, [r7, #4]
1000524c:	681a      	ldr	r2, [r3, #0]
1000524e:	687b      	ldr	r3, [r7, #4]
10005250:	689b      	ldr	r3, [r3, #8]
10005252:	1c10      	adds	r0, r2, #0
10005254:	1c19      	adds	r1, r3, #0
10005256:	f7ff ffc3 	bl	100051e0 <XMC_BCCU_EnableInterrupt>
    }
    /* Return status after initialization */
    status = GLOBAL_BCCU_STATUS_SUCCESS;
1000525a:	230f      	movs	r3, #15
1000525c:	18fb      	adds	r3, r7, r3
1000525e:	2200      	movs	r2, #0
10005260:	701a      	strb	r2, [r3, #0]

    /* Update the Initialization status of the GLOBAL_BCCU APP instance */
    handle->init_status = true;
10005262:	687b      	ldr	r3, [r7, #4]
10005264:	2201      	movs	r2, #1
10005266:	739a      	strb	r2, [r3, #14]
10005268:	e003      	b.n	10005272 <GLOBAL_BCCU_Init+0x76>
  }
  else
  {
    /* Return the status if instance is already initialized */
    status = GLOBAL_BCCU_STATUS_SUCCESS;
1000526a:	230f      	movs	r3, #15
1000526c:	18fb      	adds	r3, r7, r3
1000526e:	2200      	movs	r2, #0
10005270:	701a      	strb	r2, [r3, #0]
  }
  return (status);
10005272:	230f      	movs	r3, #15
10005274:	18fb      	adds	r3, r7, r3
10005276:	781b      	ldrb	r3, [r3, #0]
}
10005278:	1c18      	adds	r0, r3, #0
1000527a:	46bd      	mov	sp, r7
1000527c:	b004      	add	sp, #16
1000527e:	bd80      	pop	{r7, pc}

10005280 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
10005280:	b580      	push	{r7, lr}
10005282:	b082      	sub	sp, #8
10005284:	af00      	add	r7, sp, #0
10005286:	6078      	str	r0, [r7, #4]
10005288:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
1000528a:	687b      	ldr	r3, [r7, #4]
1000528c:	2280      	movs	r2, #128	; 0x80
1000528e:	589a      	ldr	r2, [r3, r2]
10005290:	683b      	ldr	r3, [r7, #0]
10005292:	3310      	adds	r3, #16
10005294:	1c19      	adds	r1, r3, #0
10005296:	2301      	movs	r3, #1
10005298:	408b      	lsls	r3, r1
1000529a:	431a      	orrs	r2, r3
1000529c:	687b      	ldr	r3, [r7, #4]
1000529e:	2180      	movs	r1, #128	; 0x80
100052a0:	505a      	str	r2, [r3, r1]
}
100052a2:	46bd      	mov	sp, r7
100052a4:	b002      	add	sp, #8
100052a6:	bd80      	pop	{r7, pc}

100052a8 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
100052a8:	b580      	push	{r7, lr}
100052aa:	b084      	sub	sp, #16
100052ac:	af00      	add	r7, sp, #0
100052ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
100052b0:	687b      	ldr	r3, [r7, #4]
100052b2:	7d1b      	ldrb	r3, [r3, #20]
100052b4:	2b02      	cmp	r3, #2
100052b6:	d152      	bne.n	1000535e <GLOBAL_ADC_Init+0xb6>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
100052b8:	687b      	ldr	r3, [r7, #4]
100052ba:	68da      	ldr	r2, [r3, #12]
100052bc:	687b      	ldr	r3, [r7, #4]
100052be:	689b      	ldr	r3, [r3, #8]
100052c0:	1c10      	adds	r0, r2, #0
100052c2:	1c19      	adds	r1, r3, #0
100052c4:	f7fe f9f4 	bl	100036b0 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
100052c8:	2300      	movs	r3, #0
100052ca:	60fb      	str	r3, [r7, #12]
100052cc:	e038      	b.n	10005340 <GLOBAL_ADC_Init+0x98>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
100052ce:	687b      	ldr	r3, [r7, #4]
100052d0:	68fa      	ldr	r2, [r7, #12]
100052d2:	0092      	lsls	r2, r2, #2
100052d4:	58d3      	ldr	r3, [r2, r3]
100052d6:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
100052d8:	687b      	ldr	r3, [r7, #4]
100052da:	68fa      	ldr	r2, [r7, #12]
100052dc:	0092      	lsls	r2, r2, #2
100052de:	58d3      	ldr	r3, [r2, r3]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
100052e0:	685b      	ldr	r3, [r3, #4]
100052e2:	1c08      	adds	r0, r1, #0
100052e4:	1c19      	adds	r1, r3, #0
100052e6:	f7fe fa49 	bl	1000377c <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
100052ea:	687b      	ldr	r3, [r7, #4]
100052ec:	68fa      	ldr	r2, [r7, #12]
100052ee:	0092      	lsls	r2, r2, #2
100052f0:	58d3      	ldr	r3, [r2, r3]
100052f2:	681b      	ldr	r3, [r3, #0]
100052f4:	1c18      	adds	r0, r3, #0
100052f6:	2103      	movs	r1, #3
100052f8:	f7fe fae8 	bl	100038cc <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
100052fc:	687b      	ldr	r3, [r7, #4]
100052fe:	68fa      	ldr	r2, [r7, #12]
10005300:	0092      	lsls	r2, r2, #2
10005302:	58d3      	ldr	r3, [r2, r3]
10005304:	7a1b      	ldrb	r3, [r3, #8]
10005306:	2201      	movs	r2, #1
10005308:	4053      	eors	r3, r2
1000530a:	b2db      	uxtb	r3, r3
1000530c:	2b00      	cmp	r3, #0
1000530e:	d006      	beq.n	1000531e <GLOBAL_ADC_Init+0x76>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
10005310:	687b      	ldr	r3, [r7, #4]
10005312:	68da      	ldr	r2, [r3, #12]
10005314:	68fb      	ldr	r3, [r7, #12]
10005316:	1c10      	adds	r0, r2, #0
10005318:	1c19      	adds	r1, r3, #0
1000531a:	f7ff ffb1 	bl	10005280 <XMC_VADC_GLOBAL_DisablePostCalibration>
      }

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
1000531e:	687b      	ldr	r3, [r7, #4]
10005320:	691a      	ldr	r2, [r3, #16]
10005322:	68fb      	ldr	r3, [r7, #12]
10005324:	b2db      	uxtb	r3, r3
10005326:	1c10      	adds	r0, r2, #0
10005328:	1c19      	adds	r1, r3, #0
1000532a:	f7fe fb2f 	bl	1000398c <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
1000532e:	687b      	ldr	r3, [r7, #4]
10005330:	68fa      	ldr	r2, [r7, #12]
10005332:	0092      	lsls	r2, r2, #2
10005334:	58d3      	ldr	r3, [r2, r3]
10005336:	2200      	movs	r2, #0
10005338:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
1000533a:	68fb      	ldr	r3, [r7, #12]
1000533c:	3301      	adds	r3, #1
1000533e:	60fb      	str	r3, [r7, #12]
10005340:	68fb      	ldr	r3, [r7, #12]
10005342:	2b01      	cmp	r3, #1
10005344:	d9c3      	bls.n	100052ce <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
10005346:	687b      	ldr	r3, [r7, #4]
10005348:	7d5b      	ldrb	r3, [r3, #21]
1000534a:	2b00      	cmp	r3, #0
1000534c:	d004      	beq.n	10005358 <GLOBAL_ADC_Init+0xb0>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
1000534e:	687b      	ldr	r3, [r7, #4]
10005350:	68db      	ldr	r3, [r3, #12]
10005352:	1c18      	adds	r0, r3, #0
10005354:	f7fe f9d8 	bl	10003708 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
10005358:	687b      	ldr	r3, [r7, #4]
1000535a:	2200      	movs	r2, #0
1000535c:	751a      	strb	r2, [r3, #20]
  }
  return (handle_ptr->init_state);
1000535e:	687b      	ldr	r3, [r7, #4]
10005360:	7d1b      	ldrb	r3, [r3, #20]
}
10005362:	1c18      	adds	r0, r3, #0
10005364:	46bd      	mov	sp, r7
10005366:	b004      	add	sp, #16
10005368:	bd80      	pop	{r7, pc}
1000536a:	46c0      	nop			; (mov r8, r8)

1000536c <XMC_FLASH_SetHardReadLevel>:
 * \par<b>Related APIs:</b><BR>
 * None 
 *
 */
__STATIC_INLINE void XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_t level)
{
1000536c:	b580      	push	{r7, lr}
1000536e:	b082      	sub	sp, #8
10005370:	af00      	add	r7, sp, #0
10005372:	1c02      	adds	r2, r0, #0
10005374:	1dfb      	adds	r3, r7, #7
10005376:	701a      	strb	r2, [r3, #0]
  NVM->NVMCONF &= (uint16_t)(~(uint16_t)NVM_NVMCONF_HRLEV_Msk);
10005378:	4a0b      	ldr	r2, [pc, #44]	; (100053a8 <XMC_FLASH_SetHardReadLevel+0x3c>)
1000537a:	4b0b      	ldr	r3, [pc, #44]	; (100053a8 <XMC_FLASH_SetHardReadLevel+0x3c>)
1000537c:	891b      	ldrh	r3, [r3, #8]
1000537e:	b29b      	uxth	r3, r3
10005380:	2106      	movs	r1, #6
10005382:	438b      	bics	r3, r1
10005384:	b29b      	uxth	r3, r3
10005386:	8113      	strh	r3, [r2, #8]
  NVM->NVMCONF |= (uint16_t)(level<< (uint16_t)NVM_NVMCONF_HRLEV_Pos);
10005388:	4907      	ldr	r1, [pc, #28]	; (100053a8 <XMC_FLASH_SetHardReadLevel+0x3c>)
1000538a:	4b07      	ldr	r3, [pc, #28]	; (100053a8 <XMC_FLASH_SetHardReadLevel+0x3c>)
1000538c:	891b      	ldrh	r3, [r3, #8]
1000538e:	b29a      	uxth	r2, r3
10005390:	1dfb      	adds	r3, r7, #7
10005392:	781b      	ldrb	r3, [r3, #0]
10005394:	b29b      	uxth	r3, r3
10005396:	18db      	adds	r3, r3, r3
10005398:	b29b      	uxth	r3, r3
1000539a:	4313      	orrs	r3, r2
1000539c:	b29b      	uxth	r3, r3
1000539e:	810b      	strh	r3, [r1, #8]
}
100053a0:	46bd      	mov	sp, r7
100053a2:	b002      	add	sp, #8
100053a4:	bd80      	pop	{r7, pc}
100053a6:	46c0      	nop			; (mov r8, r8)
100053a8:	40050000 	.word	0x40050000

100053ac <E_EEPROM_XMC1_Init>:
 * 
 * Description     : Driver Module Initialization function. This service shall initialize the Flash EEPROM Emulation 
 *                   module using the values provided by configuration set.
 */
E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_Init(E_EEPROM_XMC1_t *const handle_ptr)
{
100053ac:	b580      	push	{r7, lr}
100053ae:	b086      	sub	sp, #24
100053b0:	af00      	add	r7, sp, #0
100053b2:	6078      	str	r0, [r7, #4]
  uint32_t marker_state;

  XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (handle_ptr != NULL))

  /* Check if the E_EEPROM_XMC1_Init API is called once*/
  if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
100053b4:	687b      	ldr	r3, [r7, #4]
100053b6:	7a1b      	ldrb	r3, [r3, #8]
100053b8:	2b00      	cmp	r3, #0
100053ba:	d100      	bne.n	100053be <E_EEPROM_XMC1_Init+0x12>
100053bc:	e084      	b.n	100054c8 <E_EEPROM_XMC1_Init+0x11c>
    }
    else
    #endif
    {
      /* Initialize the cache variables for the User defined Block configuration list */
      indx = 0U;
100053be:	2300      	movs	r3, #0
100053c0:	617b      	str	r3, [r7, #20]
      do
      {
        E_EEPROM_XMC1_CACHE_t * block_ptr;
        block_ptr = &(handle_ptr->data_ptr->block_info[indx]);
100053c2:	687b      	ldr	r3, [r7, #4]
100053c4:	685a      	ldr	r2, [r3, #4]
100053c6:	697b      	ldr	r3, [r7, #20]
100053c8:	00db      	lsls	r3, r3, #3
100053ca:	18d3      	adds	r3, r2, r3
100053cc:	613b      	str	r3, [r7, #16]

        block_ptr->address = 0U;
100053ce:	693b      	ldr	r3, [r7, #16]
100053d0:	2200      	movs	r2, #0
100053d2:	601a      	str	r2, [r3, #0]
        block_ptr->status.consistent = 0U;
100053d4:	693b      	ldr	r3, [r7, #16]
100053d6:	791a      	ldrb	r2, [r3, #4]
100053d8:	2102      	movs	r1, #2
100053da:	438a      	bics	r2, r1
100053dc:	711a      	strb	r2, [r3, #4]
        block_ptr->status.valid = 1U;
100053de:	693b      	ldr	r3, [r7, #16]
100053e0:	791a      	ldrb	r2, [r3, #4]
100053e2:	2101      	movs	r1, #1
100053e4:	430a      	orrs	r2, r1
100053e6:	711a      	strb	r2, [r3, #4]
        block_ptr->status.copied = 0U;
100053e8:	693b      	ldr	r3, [r7, #16]
100053ea:	791a      	ldrb	r2, [r3, #4]
100053ec:	2104      	movs	r1, #4
100053ee:	438a      	bics	r2, r1
100053f0:	711a      	strb	r2, [r3, #4]
        block_ptr->status.crc = 0U;
100053f2:	693b      	ldr	r3, [r7, #16]
100053f4:	791a      	ldrb	r2, [r3, #4]
100053f6:	2108      	movs	r1, #8
100053f8:	438a      	bics	r2, r1
100053fa:	711a      	strb	r2, [r3, #4]
        indx++;
100053fc:	697b      	ldr	r3, [r7, #20]
100053fe:	3301      	adds	r3, #1
10005400:	617b      	str	r3, [r7, #20]
      } while (indx < handle_ptr->block_count);
10005402:	687b      	ldr	r3, [r7, #4]
10005404:	7a5b      	ldrb	r3, [r3, #9]
10005406:	1e1a      	subs	r2, r3, #0
10005408:	697b      	ldr	r3, [r7, #20]
1000540a:	429a      	cmp	r2, r3
1000540c:	d8d9      	bhi.n	100053c2 <E_EEPROM_XMC1_Init+0x16>

      /********* Initialize all global variables *****************/
      handle_ptr->data_ptr->updated_cache_index = 0U;
1000540e:	687b      	ldr	r3, [r7, #4]
10005410:	685a      	ldr	r2, [r3, #4]
10005412:	23c2      	movs	r3, #194	; 0xc2
10005414:	005b      	lsls	r3, r3, #1
10005416:	2100      	movs	r1, #0
10005418:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->cache_state = E_EEPROM_XMC1_CACHE_IDLE;
1000541a:	687b      	ldr	r3, [r7, #4]
1000541c:	685a      	ldr	r2, [r3, #4]
1000541e:	23c0      	movs	r3, #192	; 0xc0
10005420:	005b      	lsls	r3, r3, #1
10005422:	2100      	movs	r1, #0
10005424:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->gc_state = E_EEPROM_XMC1_GC_UNINT;
10005426:	687b      	ldr	r3, [r7, #4]
10005428:	685a      	ldr	r2, [r3, #4]
1000542a:	23ba      	movs	r3, #186	; 0xba
1000542c:	005b      	lsls	r3, r3, #1
1000542e:	2100      	movs	r1, #0
10005430:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->init_gc_state = 0U;
10005432:	687b      	ldr	r3, [r7, #4]
10005434:	685a      	ldr	r2, [r3, #4]
10005436:	23bc      	movs	r3, #188	; 0xbc
10005438:	005b      	lsls	r3, r3, #1
1000543a:	2100      	movs	r1, #0
1000543c:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->gc_log_block_count = 0U;
1000543e:	687b      	ldr	r3, [r7, #4]
10005440:	685a      	ldr	r2, [r3, #4]
10005442:	23be      	movs	r3, #190	; 0xbe
10005444:	005b      	lsls	r3, r3, #1
10005446:	2100      	movs	r1, #0
10005448:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->crc_buffer = 0U;
1000544a:	687b      	ldr	r3, [r7, #4]
1000544c:	685b      	ldr	r3, [r3, #4]
1000544e:	2200      	movs	r2, #0
10005450:	66da      	str	r2, [r3, #108]	; 0x6c

      handle_ptr->data_ptr->written_block_counter = (uint32_t)0;
10005452:	687b      	ldr	r3, [r7, #4]
10005454:	685b      	ldr	r3, [r3, #4]
10005456:	2200      	movs	r2, #0
10005458:	659a      	str	r2, [r3, #88]	; 0x58
      handle_ptr->data_ptr->curr_bank_src_addr = 0U;
1000545a:	687b      	ldr	r3, [r7, #4]
1000545c:	685b      	ldr	r3, [r3, #4]
1000545e:	2200      	movs	r2, #0
10005460:	651a      	str	r2, [r3, #80]	; 0x50
      handle_ptr->data_ptr->gc_src_addr = 0U;
10005462:	687b      	ldr	r3, [r7, #4]
10005464:	685b      	ldr	r3, [r3, #4]
10005466:	2200      	movs	r2, #0
10005468:	641a      	str	r2, [r3, #64]	; 0x40
      handle_ptr->data_ptr->gc_dest_addr = 0U;
1000546a:	687b      	ldr	r3, [r7, #4]
1000546c:	685b      	ldr	r3, [r3, #4]
1000546e:	2200      	movs	r2, #0
10005470:	63da      	str	r2, [r3, #60]	; 0x3c
      handle_ptr->data_ptr->next_free_block_addr = 0U;
10005472:	687b      	ldr	r3, [r7, #4]
10005474:	685b      	ldr	r3, [r3, #4]
10005476:	2200      	movs	r2, #0
10005478:	64da      	str	r2, [r3, #76]	; 0x4c
      handle_ptr->data_ptr->gc_block_counter = (uint32_t)0;
1000547a:	687b      	ldr	r3, [r7, #4]
1000547c:	685b      	ldr	r3, [r3, #4]
1000547e:	2200      	movs	r2, #0
10005480:	655a      	str	r2, [r3, #84]	; 0x54
      handle_ptr->data_ptr->user_write_bytes_count = 0U;
10005482:	687b      	ldr	r3, [r7, #4]
10005484:	685a      	ldr	r2, [r3, #4]
10005486:	23b8      	movs	r3, #184	; 0xb8
10005488:	005b      	lsls	r3, r3, #1
1000548a:	2100      	movs	r1, #0
1000548c:	50d1      	str	r1, [r2, r3]

      handle_ptr->data_ptr->current_bank = 0U;
1000548e:	687b      	ldr	r3, [r7, #4]
10005490:	685b      	ldr	r3, [r3, #4]
10005492:	2200      	movs	r2, #0
10005494:	639a      	str	r2, [r3, #56]	; 0x38

      XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_WRITTEN);
10005496:	2001      	movs	r0, #1
10005498:	f7ff ff68 	bl	1000536c <XMC_FLASH_SetHardReadLevel>

      /* Read the marker blocks from flash and decide the MARKER STATES */
      marker_state = E_EEPROM_XMC1_lReadMarkerBlocks();
1000549c:	f001 f81a 	bl	100064d4 <E_EEPROM_XMC1_lReadMarkerBlocks>
100054a0:	1c03      	adds	r3, r0, #0
100054a2:	60fb      	str	r3, [r7, #12]

      /*
       * Call INIT-GC state machine function to take decision on current MARKER STATE available.
       * Progress to GC state machine or PrepareDFLASH State machine after completing  the Cache update
       */
      E_EEPROM_XMC1_lInitGc(marker_state);
100054a4:	68fb      	ldr	r3, [r7, #12]
100054a6:	1c18      	adds	r0, r3, #0
100054a8:	f000 f8d4 	bl	10005654 <E_EEPROM_XMC1_lInitGc>

      /* If Initialization is done without any errors, set the INIT API called state into Initialized once */
      if (handle_ptr->data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
100054ac:	687b      	ldr	r3, [r7, #4]
100054ae:	685a      	ldr	r2, [r3, #4]
100054b0:	23ba      	movs	r3, #186	; 0xba
100054b2:	005b      	lsls	r3, r3, #1
100054b4:	58d3      	ldr	r3, [r2, r3]
100054b6:	2b0a      	cmp	r3, #10
100054b8:	d103      	bne.n	100054c2 <E_EEPROM_XMC1_Init+0x116>
      {
        handle_ptr->state = E_EEPROM_XMC1_STATUS_SUCCESS;
100054ba:	687b      	ldr	r3, [r7, #4]
100054bc:	2200      	movs	r2, #0
100054be:	721a      	strb	r2, [r3, #8]
100054c0:	e002      	b.n	100054c8 <E_EEPROM_XMC1_Init+0x11c>
      }
      else
      {
        handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
100054c2:	687b      	ldr	r3, [r7, #4]
100054c4:	2201      	movs	r2, #1
100054c6:	721a      	strb	r2, [r3, #8]
      }
    }
  }
  return (handle_ptr->state);
100054c8:	687b      	ldr	r3, [r7, #4]
100054ca:	7a1b      	ldrb	r3, [r3, #8]
}
100054cc:	1c18      	adds	r0, r3, #0
100054ce:	46bd      	mov	sp, r7
100054d0:	b006      	add	sp, #24
100054d2:	bd80      	pop	{r7, pc}

100054d4 <E_EEPROM_XMC1_Write>:
 * Return value   : E_EEPROM_XMC1_OPERATION_STATUS_t
 * 
 * Description    : This function shall write user data block into flash.
 */
E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Write(uint8_t block_number, uint8_t *data_buffer_ptr)
{
100054d4:	b580      	push	{r7, lr}
100054d6:	b084      	sub	sp, #16
100054d8:	af00      	add	r7, sp, #0
100054da:	1c02      	adds	r2, r0, #0
100054dc:	6039      	str	r1, [r7, #0]
100054de:	1dfb      	adds	r3, r7, #7
100054e0:	701a      	strb	r2, [r3, #0]
  E_EEPROM_XMC1_OPERATION_STATUS_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100054e2:	4b10      	ldr	r3, [pc, #64]	; (10005524 <E_EEPROM_XMC1_Write+0x50>)
100054e4:	685b      	ldr	r3, [r3, #4]
100054e6:	60bb      	str	r3, [r7, #8]
  
  XMC_ASSERT("E_EEPROM_XMC1_Write:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(block_number) !=
                                                        E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND))
  XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (data_buffer_ptr != NULL))
  
  status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
100054e8:	230f      	movs	r3, #15
100054ea:	18fb      	adds	r3, r7, r3
100054ec:	2205      	movs	r2, #5
100054ee:	701a      	strb	r2, [r3, #0]

  /* Execute only if there is no previous pending request and the GC process is in IDLE state */
  if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
100054f0:	68ba      	ldr	r2, [r7, #8]
100054f2:	23ba      	movs	r3, #186	; 0xba
100054f4:	005b      	lsls	r3, r3, #1
100054f6:	58d3      	ldr	r3, [r2, r3]
100054f8:	2b0a      	cmp	r3, #10
100054fa:	d10b      	bne.n	10005514 <E_EEPROM_XMC1_Write+0x40>
  {
    /* Call local function to write the specified block of data into flash */
    status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite(block_number, data_buffer_ptr, 0U);
100054fc:	1dfb      	adds	r3, r7, #7
100054fe:	781a      	ldrb	r2, [r3, #0]
10005500:	683b      	ldr	r3, [r7, #0]
10005502:	1c10      	adds	r0, r2, #0
10005504:	1c19      	adds	r1, r3, #0
10005506:	2200      	movs	r2, #0
10005508:	f001 f932 	bl	10006770 <E_EEPROM_XMC1_lLocalWrite>
1000550c:	1c02      	adds	r2, r0, #0
1000550e:	230f      	movs	r3, #15
10005510:	18fb      	adds	r3, r7, r3
10005512:	701a      	strb	r2, [r3, #0]
  }

  return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
10005514:	230f      	movs	r3, #15
10005516:	18fb      	adds	r3, r7, r3
10005518:	781b      	ldrb	r3, [r3, #0]
}
1000551a:	1c18      	adds	r0, r3, #0
1000551c:	46bd      	mov	sp, r7
1000551e:	b004      	add	sp, #16
10005520:	bd80      	pop	{r7, pc}
10005522:	46c0      	nop			; (mov r8, r8)
10005524:	20000718 	.word	0x20000718

10005528 <E_EEPROM_XMC1_Read>:
 */
E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Read(uint8_t block_number,
                                                    uint32_t offset,
                                                    uint8_t *data_buffer_ptr,
                                                    uint32_t length)
{
10005528:	b580      	push	{r7, lr}
1000552a:	b088      	sub	sp, #32
1000552c:	af00      	add	r7, sp, #0
1000552e:	60b9      	str	r1, [r7, #8]
10005530:	607a      	str	r2, [r7, #4]
10005532:	603b      	str	r3, [r7, #0]
10005534:	230f      	movs	r3, #15
10005536:	18fb      	adds	r3, r7, r3
10005538:	1c02      	adds	r2, r0, #0
1000553a:	701a      	strb	r2, [r3, #0]
  uint32_t block_size;
  uint32_t user_block_index;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_OPERATION_STATUS_t status;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000553c:	4b31      	ldr	r3, [pc, #196]	; (10005604 <E_EEPROM_XMC1_Read+0xdc>)
1000553e:	685b      	ldr	r3, [r3, #4]
10005540:	61bb      	str	r3, [r7, #24]
  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10005542:	230f      	movs	r3, #15
10005544:	18fb      	adds	r3, r7, r3
10005546:	781b      	ldrb	r3, [r3, #0]
10005548:	1c18      	adds	r0, r3, #0
1000554a:	f000 ff1b 	bl	10006384 <E_EEPROM_XMC1_lGetUsrBlockIndex>
1000554e:	1c03      	adds	r3, r0, #0
10005550:	617b      	str	r3, [r7, #20]
  block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
10005552:	4b2c      	ldr	r3, [pc, #176]	; (10005604 <E_EEPROM_XMC1_Read+0xdc>)
10005554:	681a      	ldr	r2, [r3, #0]
10005556:	697b      	ldr	r3, [r7, #20]
10005558:	00db      	lsls	r3, r3, #3
1000555a:	18d3      	adds	r3, r2, r3
1000555c:	685b      	ldr	r3, [r3, #4]
1000555e:	613b      	str	r3, [r7, #16]
  
  XMC_ASSERT("E_EEPROM_XMC1_Read:Wrong Block Number", (user_block_index  != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND))
  XMC_ASSERT("E_EEPROM_XMC1_Read:Invalid Buffer Pointer", (data_buffer_ptr != NULL))

  status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
10005560:	231f      	movs	r3, #31
10005562:	18fb      	adds	r3, r7, r3
10005564:	2205      	movs	r2, #5
10005566:	701a      	strb	r2, [r3, #0]

  /*Execute only if GC process is in IDLE state */
  if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
10005568:	69ba      	ldr	r2, [r7, #24]
1000556a:	23ba      	movs	r3, #186	; 0xba
1000556c:	005b      	lsls	r3, r3, #1
1000556e:	58d3      	ldr	r3, [r2, r3]
10005570:	2b0a      	cmp	r3, #10
10005572:	d140      	bne.n	100055f6 <E_EEPROM_XMC1_Read+0xce>
10005574:	68ba      	ldr	r2, [r7, #8]
10005576:	683b      	ldr	r3, [r7, #0]
10005578:	18d2      	adds	r2, r2, r3
1000557a:	693b      	ldr	r3, [r7, #16]
1000557c:	429a      	cmp	r2, r3
1000557e:	d83a      	bhi.n	100055f6 <E_EEPROM_XMC1_Read+0xce>
  {
    if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
10005580:	69ba      	ldr	r2, [r7, #24]
10005582:	697b      	ldr	r3, [r7, #20]
10005584:	00db      	lsls	r3, r3, #3
10005586:	18d3      	adds	r3, r2, r3
10005588:	791b      	ldrb	r3, [r3, #4]
1000558a:	07db      	lsls	r3, r3, #31
1000558c:	0fdb      	lsrs	r3, r3, #31
1000558e:	b2db      	uxtb	r3, r3
10005590:	2b00      	cmp	r3, #0
10005592:	d104      	bne.n	1000559e <E_EEPROM_XMC1_Read+0x76>
    {
      status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
10005594:	231f      	movs	r3, #31
10005596:	18fb      	adds	r3, r7, r3
10005598:	2203      	movs	r2, #3
1000559a:	701a      	strb	r2, [r3, #0]
1000559c:	e02b      	b.n	100055f6 <E_EEPROM_XMC1_Read+0xce>
    }
    else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Invalid */
1000559e:	69ba      	ldr	r2, [r7, #24]
100055a0:	697b      	ldr	r3, [r7, #20]
100055a2:	00db      	lsls	r3, r3, #3
100055a4:	18d3      	adds	r3, r2, r3
100055a6:	791b      	ldrb	r3, [r3, #4]
100055a8:	079b      	lsls	r3, r3, #30
100055aa:	0fdb      	lsrs	r3, r3, #31
100055ac:	b2db      	uxtb	r3, r3
100055ae:	2b00      	cmp	r3, #0
100055b0:	d104      	bne.n	100055bc <E_EEPROM_XMC1_Read+0x94>
    {
      status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
100055b2:	231f      	movs	r3, #31
100055b4:	18fb      	adds	r3, r7, r3
100055b6:	2202      	movs	r2, #2
100055b8:	701a      	strb	r2, [r3, #0]
100055ba:	e01c      	b.n	100055f6 <E_EEPROM_XMC1_Read+0xce>
    }
    else
    {
      data_ptr->read_start_address = data_ptr->block_info[user_block_index].address;
100055bc:	69bb      	ldr	r3, [r7, #24]
100055be:	697a      	ldr	r2, [r7, #20]
100055c0:	00d2      	lsls	r2, r2, #3
100055c2:	58d1      	ldr	r1, [r2, r3]
100055c4:	69ba      	ldr	r2, [r7, #24]
100055c6:	23c6      	movs	r3, #198	; 0xc6
100055c8:	005b      	lsls	r3, r3, #1
100055ca:	50d1      	str	r1, [r2, r3]
      status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr , length , offset);
100055cc:	6879      	ldr	r1, [r7, #4]
100055ce:	683a      	ldr	r2, [r7, #0]
100055d0:	68bb      	ldr	r3, [r7, #8]
100055d2:	1c08      	adds	r0, r1, #0
100055d4:	1c11      	adds	r1, r2, #0
100055d6:	1c1a      	adds	r2, r3, #0
100055d8:	f001 fb32 	bl	10006c40 <E_EEPROM_XMC1_lReadBlockContents>
100055dc:	1c02      	adds	r2, r0, #0
100055de:	231f      	movs	r3, #31
100055e0:	18fb      	adds	r3, r7, r3
100055e2:	701a      	strb	r2, [r3, #0]

      if ((uint32_t)status != 0U)
100055e4:	231f      	movs	r3, #31
100055e6:	18fb      	adds	r3, r7, r3
100055e8:	781b      	ldrb	r3, [r3, #0]
100055ea:	2b00      	cmp	r3, #0
100055ec:	d003      	beq.n	100055f6 <E_EEPROM_XMC1_Read+0xce>
      {
         status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
100055ee:	231f      	movs	r3, #31
100055f0:	18fb      	adds	r3, r7, r3
100055f2:	2201      	movs	r2, #1
100055f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
100055f6:	231f      	movs	r3, #31
100055f8:	18fb      	adds	r3, r7, r3
100055fa:	781b      	ldrb	r3, [r3, #0]
}
100055fc:	1c18      	adds	r0, r3, #0
100055fe:	46bd      	mov	sp, r7
10005600:	b008      	add	sp, #32
10005602:	bd80      	pop	{r7, pc}
10005604:	20000718 	.word	0x20000718

10005608 <E_EEPROM_XMC1_GetStatus>:
 * Return value    : E_EEPROM_XMC1_STATUS_t
 *
 * Description     : This function shall return the status of the APP
 */
E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_GetStatus(void)
{
10005608:	b580      	push	{r7, lr}
1000560a:	b082      	sub	sp, #8
1000560c:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_STATUS_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000560e:	4b10      	ldr	r3, [pc, #64]	; (10005650 <E_EEPROM_XMC1_GetStatus+0x48>)
10005610:	685b      	ldr	r3, [r3, #4]
10005612:	603b      	str	r3, [r7, #0]
  
  /* If the GC/InitGC has failed */
  if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
10005614:	683a      	ldr	r2, [r7, #0]
10005616:	23ba      	movs	r3, #186	; 0xba
10005618:	005b      	lsls	r3, r3, #1
1000561a:	58d3      	ldr	r3, [r2, r3]
1000561c:	2b0a      	cmp	r3, #10
1000561e:	d103      	bne.n	10005628 <E_EEPROM_XMC1_GetStatus+0x20>
  {
     status = E_EEPROM_XMC1_STATUS_IDLE;
10005620:	1dfb      	adds	r3, r7, #7
10005622:	2203      	movs	r2, #3
10005624:	701a      	strb	r2, [r3, #0]
10005626:	e00c      	b.n	10005642 <E_EEPROM_XMC1_GetStatus+0x3a>
  }
  else if (data_ptr->gc_state == E_EEPROM_XMC1_GC_FAIL)
10005628:	683a      	ldr	r2, [r7, #0]
1000562a:	23ba      	movs	r3, #186	; 0xba
1000562c:	005b      	lsls	r3, r3, #1
1000562e:	58d3      	ldr	r3, [r2, r3]
10005630:	2b09      	cmp	r3, #9
10005632:	d103      	bne.n	1000563c <E_EEPROM_XMC1_GetStatus+0x34>
  {
     status = E_EEPROM_XMC1_STATUS_FAILURE;
10005634:	1dfb      	adds	r3, r7, #7
10005636:	2201      	movs	r2, #1
10005638:	701a      	strb	r2, [r3, #0]
1000563a:	e002      	b.n	10005642 <E_EEPROM_XMC1_GetStatus+0x3a>
  }
  else
  {
     status = E_EEPROM_XMC1_STATUS_BUSY;
1000563c:	1dfb      	adds	r3, r7, #7
1000563e:	2204      	movs	r2, #4
10005640:	701a      	strb	r2, [r3, #0]
  }
  
  return (status);
10005642:	1dfb      	adds	r3, r7, #7
10005644:	781b      	ldrb	r3, [r3, #0]
}
10005646:	1c18      	adds	r0, r3, #0
10005648:	46bd      	mov	sp, r7
1000564a:	b002      	add	sp, #8
1000564c:	bd80      	pop	{r7, pc}
1000564e:	46c0      	nop			; (mov r8, r8)
10005650:	20000718 	.word	0x20000718

10005654 <E_EEPROM_XMC1_lInitGc>:
 * Description     : This function shall detect if there was any interruption in the ongoing running state
 *                   (Read/Write/GC). If yes, then this routine shall decide to run a state machine to bring back the 
 *                   emulation to normal state
 */
static void E_EEPROM_XMC1_lInitGc(const uint32_t marker_dirty_state)
{
10005654:	b580      	push	{r7, lr}
10005656:	b084      	sub	sp, #16
10005658:	af00      	add	r7, sp, #0
1000565a:	6078      	str	r0, [r7, #4]
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000565c:	4b25      	ldr	r3, [pc, #148]	; (100056f4 <E_EEPROM_XMC1_lInitGc+0xa0>)
1000565e:	685b      	ldr	r3, [r3, #4]
10005660:	60fb      	str	r3, [r7, #12]
  
  if ( marker_dirty_state == E_EEPROM_XMC1_BOTH_BANKS_INVALID )  /* If both Bank state markers are in dirty state */
10005662:	687b      	ldr	r3, [r7, #4]
10005664:	2b03      	cmp	r3, #3
10005666:	d107      	bne.n	10005678 <E_EEPROM_XMC1_lInitGc+0x24>
  {
    data_ptr->init_gc_state = E_EEPROM_XMC1_MB_DIRTY;
10005668:	68fa      	ldr	r2, [r7, #12]
1000566a:	23bc      	movs	r3, #188	; 0xbc
1000566c:	005b      	lsls	r3, r3, #1
1000566e:	21dd      	movs	r1, #221	; 0xdd
10005670:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitllegalStateMachine();
10005672:	f000 f841 	bl	100056f8 <E_EEPROM_XMC1_lInitllegalStateMachine>
10005676:	e039      	b.n	100056ec <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else if ( marker_dirty_state == E_EEPROM_XMC1_BANK0_INVALID )  /* If Only Bank0 state marker is in dirty state */
10005678:	687b      	ldr	r3, [r7, #4]
1000567a:	2b01      	cmp	r3, #1
1000567c:	d118      	bne.n	100056b0 <E_EEPROM_XMC1_lInitGc+0x5c>
  {
    data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_0F;
1000567e:	68fa      	ldr	r2, [r7, #12]
10005680:	23bc      	movs	r3, #188	; 0xbc
10005682:	005b      	lsls	r3, r3, #1
10005684:	58d3      	ldr	r3, [r2, r3]
10005686:	220f      	movs	r2, #15
10005688:	4013      	ands	r3, r2
1000568a:	1c19      	adds	r1, r3, #0
1000568c:	68fa      	ldr	r2, [r7, #12]
1000568e:	23bc      	movs	r3, #188	; 0xbc
10005690:	005b      	lsls	r3, r3, #1
10005692:	50d1      	str	r1, [r2, r3]
    data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_D0;
10005694:	68fa      	ldr	r2, [r7, #12]
10005696:	23bc      	movs	r3, #188	; 0xbc
10005698:	005b      	lsls	r3, r3, #1
1000569a:	58d3      	ldr	r3, [r2, r3]
1000569c:	22d0      	movs	r2, #208	; 0xd0
1000569e:	431a      	orrs	r2, r3
100056a0:	1c11      	adds	r1, r2, #0
100056a2:	68fa      	ldr	r2, [r7, #12]
100056a4:	23bc      	movs	r3, #188	; 0xbc
100056a6:	005b      	lsls	r3, r3, #1
100056a8:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitDirtyStateMachine();
100056aa:	f000 f841 	bl	10005730 <E_EEPROM_XMC1_lInitDirtyStateMachine>
100056ae:	e01d      	b.n	100056ec <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else if ( marker_dirty_state == E_EEPROM_XMC1_BANK1_INVALID )  /* If Only Bank1 state marker is in dirty state */
100056b0:	687b      	ldr	r3, [r7, #4]
100056b2:	2b02      	cmp	r3, #2
100056b4:	d118      	bne.n	100056e8 <E_EEPROM_XMC1_lInitGc+0x94>
  {
    data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_F0;
100056b6:	68fa      	ldr	r2, [r7, #12]
100056b8:	23bc      	movs	r3, #188	; 0xbc
100056ba:	005b      	lsls	r3, r3, #1
100056bc:	58d3      	ldr	r3, [r2, r3]
100056be:	22f0      	movs	r2, #240	; 0xf0
100056c0:	4013      	ands	r3, r2
100056c2:	1c19      	adds	r1, r3, #0
100056c4:	68fa      	ldr	r2, [r7, #12]
100056c6:	23bc      	movs	r3, #188	; 0xbc
100056c8:	005b      	lsls	r3, r3, #1
100056ca:	50d1      	str	r1, [r2, r3]
    data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_0D;
100056cc:	68fa      	ldr	r2, [r7, #12]
100056ce:	23bc      	movs	r3, #188	; 0xbc
100056d0:	005b      	lsls	r3, r3, #1
100056d2:	58d3      	ldr	r3, [r2, r3]
100056d4:	220d      	movs	r2, #13
100056d6:	431a      	orrs	r2, r3
100056d8:	1c11      	adds	r1, r2, #0
100056da:	68fa      	ldr	r2, [r7, #12]
100056dc:	23bc      	movs	r3, #188	; 0xbc
100056de:	005b      	lsls	r3, r3, #1
100056e0:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitDirtyStateMachine();
100056e2:	f000 f825 	bl	10005730 <E_EEPROM_XMC1_lInitDirtyStateMachine>
100056e6:	e001      	b.n	100056ec <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else                                      /* If both Bank state markers have valid state */
  {
    E_EEPROM_XMC1_lInitNormalStateMachine();
100056e8:	f000 f876 	bl	100057d8 <E_EEPROM_XMC1_lInitNormalStateMachine>
  }
}
100056ec:	46bd      	mov	sp, r7
100056ee:	b004      	add	sp, #16
100056f0:	bd80      	pop	{r7, pc}
100056f2:	46c0      	nop			; (mov r8, r8)
100056f4:	20000718 	.word	0x20000718

100056f8 <E_EEPROM_XMC1_lInitllegalStateMachine>:
 * Return value    : void
 *
 * Description     : This function shall erase all flash and start from fresh depending upon the user configuration
 */
static void E_EEPROM_XMC1_lInitllegalStateMachine(void)
{
100056f8:	b580      	push	{r7, lr}
100056fa:	b082      	sub	sp, #8
100056fc:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100056fe:	4b0b      	ldr	r3, [pc, #44]	; (1000572c <E_EEPROM_XMC1_lInitllegalStateMachine+0x34>)
10005700:	685b      	ldr	r3, [r3, #4]
10005702:	607b      	str	r3, [r7, #4]
  
  /*
   * Any state apart from the normal states is considered as Illegal state. Next operation = Start Prepare DFlash
   * (Only if the configuration option Erase all is 1U) IF Configuration Option is 0U, Next Operation = Fail State
   */
  if (E_EEPROM_XMC1_HANDLE_PTR->erase_all_auto_recovery == 1U)
10005704:	4b09      	ldr	r3, [pc, #36]	; (1000572c <E_EEPROM_XMC1_lInitllegalStateMachine+0x34>)
10005706:	7a9b      	ldrb	r3, [r3, #10]
10005708:	2b01      	cmp	r3, #1
1000570a:	d107      	bne.n	1000571c <E_EEPROM_XMC1_lInitllegalStateMachine+0x24>
  {
    /* Change the current Bank to Bank0 */
    data_ptr->current_bank = 0U;
1000570c:	687b      	ldr	r3, [r7, #4]
1000570e:	2200      	movs	r2, #0
10005710:	639a      	str	r2, [r3, #56]	; 0x38
    E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, 1U);
10005712:	2001      	movs	r0, #1
10005714:	2101      	movs	r1, #1
10005716:	f000 f957 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
1000571a:	e004      	b.n	10005726 <E_EEPROM_XMC1_lInitllegalStateMachine+0x2e>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000571c:	687a      	ldr	r2, [r7, #4]
1000571e:	23ba      	movs	r3, #186	; 0xba
10005720:	005b      	lsls	r3, r3, #1
10005722:	2109      	movs	r1, #9
10005724:	50d1      	str	r1, [r2, r3]
  }
}
10005726:	46bd      	mov	sp, r7
10005728:	b002      	add	sp, #8
1000572a:	bd80      	pop	{r7, pc}
1000572c:	20000718 	.word	0x20000718

10005730 <E_EEPROM_XMC1_lInitDirtyStateMachine>:
 * Return value   : void
 *
 * Description    : This function shall address the dirty state recovery mechanism by erasing and rewriting states
 */
static void E_EEPROM_XMC1_lInitDirtyStateMachine(void)
{
10005730:	b580      	push	{r7, lr}
10005732:	b082      	sub	sp, #8
10005734:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005736:	4b27      	ldr	r3, [pc, #156]	; (100057d4 <E_EEPROM_XMC1_lInitDirtyStateMachine+0xa4>)
10005738:	685b      	ldr	r3, [r3, #4]
1000573a:	607b      	str	r3, [r7, #4]
  switch (data_ptr->init_gc_state)
1000573c:	687a      	ldr	r2, [r7, #4]
1000573e:	23bc      	movs	r3, #188	; 0xbc
10005740:	005b      	lsls	r3, r3, #1
10005742:	58d3      	ldr	r3, [r2, r3]
10005744:	2bad      	cmp	r3, #173	; 0xad
10005746:	d01a      	beq.n	1000577e <E_EEPROM_XMC1_lInitDirtyStateMachine+0x4e>
10005748:	d804      	bhi.n	10005754 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x24>
1000574a:	2b0d      	cmp	r3, #13
1000574c:	d029      	beq.n	100057a2 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x72>
1000574e:	2b2d      	cmp	r3, #45	; 0x2d
10005750:	d007      	beq.n	10005762 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x32>
10005752:	e038      	b.n	100057c6 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x96>
10005754:	2bd2      	cmp	r3, #210	; 0xd2
10005756:	d00b      	beq.n	10005770 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x40>
10005758:	2bda      	cmp	r3, #218	; 0xda
1000575a:	d019      	beq.n	10005790 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x60>
1000575c:	2bd0      	cmp	r3, #208	; 0xd0
1000575e:	d029      	beq.n	100057b4 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x84>
10005760:	e031      	b.n	100057c6 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x96>
  {
    case E_EEPROM_XMC1_INIT_STATE_2D:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E  */
      data_ptr->current_bank = 0U;
10005762:	687b      	ldr	r3, [r7, #4]
10005764:	2200      	movs	r2, #0
10005766:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : 2D -> 2F -> 2E */
      E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
10005768:	2030      	movs	r0, #48	; 0x30
1000576a:	f000 f999 	bl	10005aa0 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>
      break;
1000576e:	e02d      	b.n	100057cc <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_D2:
      /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
      data_ptr->current_bank = 1U;
10005770:	687b      	ldr	r3, [r7, #4]
10005772:	2201      	movs	r2, #1
10005774:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : D2 -> F2 -> E2 */
      E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
10005776:	2030      	movs	r0, #48	; 0x30
10005778:	f000 f992 	bl	10005aa0 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>
      break;
1000577c:	e026      	b.n	100057cc <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_AD:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
      data_ptr->current_bank = 0U;
1000577e:	687b      	ldr	r3, [r7, #4]
10005780:	2200      	movs	r2, #0
10005782:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : AD -> A0 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10005784:	2000      	movs	r0, #0
10005786:	2107      	movs	r1, #7
10005788:	2201      	movs	r2, #1
1000578a:	f000 f9c3 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
1000578e:	e01d      	b.n	100057cc <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_DA:
      /* Change the current Bank to Bank1  and recover from the dirty state to E2*/
      data_ptr->current_bank = 1U;
10005790:	687b      	ldr	r3, [r7, #4]
10005792:	2201      	movs	r2, #1
10005794:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : DA -> 0A -> GC PROCESS -> E2 */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10005796:	2000      	movs	r0, #0
10005798:	2107      	movs	r1, #7
1000579a:	2201      	movs	r2, #1
1000579c:	f000 f9ba 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
100057a0:	e014      	b.n	100057cc <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_0D:
      /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
      data_ptr->current_bank = 1U;
100057a2:	687b      	ldr	r3, [r7, #4]
100057a4:	2201      	movs	r2, #1
100057a6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : 0D -> 02 -> GC PROCESS -> E2 */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
100057a8:	2020      	movs	r0, #32
100057aa:	2103      	movs	r1, #3
100057ac:	2200      	movs	r2, #0
100057ae:	f000 f9b1 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
100057b2:	e00b      	b.n	100057cc <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_D0:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
      data_ptr->current_bank = 0U;
100057b4:	687b      	ldr	r3, [r7, #4]
100057b6:	2200      	movs	r2, #0
100057b8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
100057ba:	2020      	movs	r0, #32
100057bc:	2103      	movs	r1, #3
100057be:	2200      	movs	r2, #0
100057c0:	f000 f9a8 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
100057c4:	e002      	b.n	100057cc <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    default:
      /* Any state apart from the normal states is considered as Illegal state */
      /* Transition states : Illegal -> PREPARE DFLASH -> 2E */
      E_EEPROM_XMC1_lInitllegalStateMachine();
100057c6:	f7ff ff97 	bl	100056f8 <E_EEPROM_XMC1_lInitllegalStateMachine>
      break;
100057ca:	46c0      	nop			; (mov r8, r8)
  }
}
100057cc:	46bd      	mov	sp, r7
100057ce:	b002      	add	sp, #8
100057d0:	bd80      	pop	{r7, pc}
100057d2:	46c0      	nop			; (mov r8, r8)
100057d4:	20000718 	.word	0x20000718

100057d8 <E_EEPROM_XMC1_lInitNormalStateMachine>:
* Return value   : void
*
* Description    : Check which normal bank state machine process has executed.
*/
static void E_EEPROM_XMC1_lInitNormalStateMachine(void)
{
100057d8:	b580      	push	{r7, lr}
100057da:	af00      	add	r7, sp, #0
  /* Check if the state matches with any of the normal marker states with active bank as bank-0*/
  if (E_EEPROM_XMC1_lInitBank0NormalStateMachine() == 0U)
100057dc:	f000 f80e 	bl	100057fc <E_EEPROM_XMC1_lInitBank0NormalStateMachine>
100057e0:	1e03      	subs	r3, r0, #0
100057e2:	d109      	bne.n	100057f8 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
  {
    /* Check if the state matches with any of the normal marker states with active bank as bank-1*/
    if (E_EEPROM_XMC1_lInitBank1NormalStateMachine() == 0U)
100057e4:	f000 f856 	bl	10005894 <E_EEPROM_XMC1_lInitBank1NormalStateMachine>
100057e8:	1e03      	subs	r3, r0, #0
100057ea:	d105      	bne.n	100057f8 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
    {
      /* Check if the state matches with any other intermediate states from where a recover is possible  */
      if (E_EEPROM_XMC1_lInitOtherNormalStateMachine() == 0U)
100057ec:	f000 f89e 	bl	1000592c <E_EEPROM_XMC1_lInitOtherNormalStateMachine>
100057f0:	1e03      	subs	r3, r0, #0
100057f2:	d101      	bne.n	100057f8 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
      {
        /* If no matches found then go to illegal state and try to recover by erasing complete DFLASH */
        E_EEPROM_XMC1_lInitllegalStateMachine();
100057f4:	f7ff ff80 	bl	100056f8 <E_EEPROM_XMC1_lInitllegalStateMachine>
      }
    }
  }
}
100057f8:	46bd      	mov	sp, r7
100057fa:	bd80      	pop	{r7, pc}

100057fc <E_EEPROM_XMC1_lInitBank0NormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute bank 0 state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void)
{
100057fc:	b580      	push	{r7, lr}
100057fe:	b082      	sub	sp, #8
10005800:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005802:	4b23      	ldr	r3, [pc, #140]	; (10005890 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x94>)
10005804:	685b      	ldr	r3, [r3, #4]
10005806:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
10005808:	2301      	movs	r3, #1
1000580a:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
1000580c:	683a      	ldr	r2, [r7, #0]
1000580e:	23bc      	movs	r3, #188	; 0xbc
10005810:	005b      	lsls	r3, r3, #1
10005812:	58d3      	ldr	r3, [r2, r3]
10005814:	2b2e      	cmp	r3, #46	; 0x2e
10005816:	d00a      	beq.n	1000582e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x32>
10005818:	d804      	bhi.n	10005824 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x28>
1000581a:	2b20      	cmp	r3, #32
1000581c:	d01f      	beq.n	1000585e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x62>
1000581e:	2b2a      	cmp	r3, #42	; 0x2a
10005820:	d00d      	beq.n	1000583e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x42>
10005822:	e02c      	b.n	1000587e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x82>
10005824:	2b2f      	cmp	r3, #47	; 0x2f
10005826:	d022      	beq.n	1000586e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x72>
10005828:	2ba0      	cmp	r3, #160	; 0xa0
1000582a:	d010      	beq.n	1000584e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x52>
1000582c:	e027      	b.n	1000587e <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x82>
    /*
     * Normal Data write in Bank-0 interrupted (2E), Next step = Cache Update and get ready to accept new request
     * Transition states : Nothing
     */
    case E_EEPROM_XMC1_INIT_NORMAL1:
    data_ptr->current_bank = 0U;
1000582e:	683b      	ldr	r3, [r7, #0]
10005830:	2200      	movs	r2, #0
10005832:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE);
10005834:	200a      	movs	r0, #10
10005836:	2100      	movs	r1, #0
10005838:	f000 f8c6 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000583c:	e022      	b.n	10005884 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Data copy from Bank0 to Bank1 interrupted (2A), Next step = Erasing Bank-1 and restart copy from Bank-0
     * Transition states : (2A) -> ERASE_BANK0 (2F) -> 2E -> GC_PROCESS (2A -> 0A -> 20 -> F2 -> E2)
     */
    case E_EEPROM_XMC1_INIT_DATA_COPY1:
      data_ptr->current_bank = 0U;
1000583e:	683b      	ldr	r3, [r7, #0]
10005840:	2200      	movs	r2, #0
10005842:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSET);
10005844:	2004      	movs	r0, #4
10005846:	2130      	movs	r1, #48	; 0x30
10005848:	f000 f8ee 	bl	10005a28 <E_EEPROM_XMC1_lInitGcDataCopyState>
      break;
1000584c:	e01a      	b.n	10005884 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after copy completion from Bank1 to Bank0 (A0),Next step = Writing Valid state into Bank-0
     * Transition states : (A0) -> (20) -> GC_PROCESS (2F -> 2E)
     */
    case E_EEPROM_XMC1_INIT_COPY_DONE1:
      data_ptr->current_bank = 0U;
1000584e:	683b      	ldr	r3, [r7, #0]
10005850:	2200      	movs	r2, #0
10005852:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC_STATE);
10005854:	2007      	movs	r0, #7
10005856:	2102      	movs	r1, #2
10005858:	f000 f8b6 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000585c:	e012      	b.n	10005884 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after writing valid state to Bank0 (20), Next step = Erase of old redundant Bank-1 (2F)
     * Transition states : (20) -> (2F) -> GC_PROCESS (2E)
     */
    case E_EEPROM_XMC1_INIT_NEXT_VALID1:
      data_ptr->current_bank = 0U;
1000585e:	683b      	ldr	r3, [r7, #0]
10005860:	2200      	movs	r2, #0
10005862:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC_STATE);
10005864:	2003      	movs	r0, #3
10005866:	2102      	movs	r1, #2
10005868:	f000 f8ae 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000586c:	e00a      	b.n	10005884 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after erase of old bank completed(2F), Next step = Mark erased Bank-1 with Formated state(2E)
     * Transition states : (2F) -> GC_PROCESS (2E)
     */
    case E_EEPROM_XMC1_INIT_END_ERASE1:
      data_ptr->current_bank = 0U;
1000586e:	683b      	ldr	r3, [r7, #0]
10005870:	2200      	movs	r2, #0
10005872:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC_STATE);
10005874:	2008      	movs	r0, #8
10005876:	2102      	movs	r1, #2
10005878:	f000 f8a6 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000587c:	e002      	b.n	10005884 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    
    default:
      state_found = 0U;
1000587e:	2300      	movs	r3, #0
10005880:	607b      	str	r3, [r7, #4]
      break;
10005882:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
10005884:	687b      	ldr	r3, [r7, #4]
}
10005886:	1c18      	adds	r0, r3, #0
10005888:	46bd      	mov	sp, r7
1000588a:	b002      	add	sp, #8
1000588c:	bd80      	pop	{r7, pc}
1000588e:	46c0      	nop			; (mov r8, r8)
10005890:	20000718 	.word	0x20000718

10005894 <E_EEPROM_XMC1_lInitBank1NormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute bank 1 state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void)
{
10005894:	b580      	push	{r7, lr}
10005896:	b082      	sub	sp, #8
10005898:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000589a:	4b23      	ldr	r3, [pc, #140]	; (10005928 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x94>)
1000589c:	685b      	ldr	r3, [r3, #4]
1000589e:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
100058a0:	2301      	movs	r3, #1
100058a2:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
100058a4:	683a      	ldr	r2, [r7, #0]
100058a6:	23bc      	movs	r3, #188	; 0xbc
100058a8:	005b      	lsls	r3, r3, #1
100058aa:	58d3      	ldr	r3, [r2, r3]
100058ac:	2ba2      	cmp	r3, #162	; 0xa2
100058ae:	d012      	beq.n	100058d6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x42>
100058b0:	d804      	bhi.n	100058bc <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x28>
100058b2:	2b02      	cmp	r3, #2
100058b4:	d01f      	beq.n	100058f6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x62>
100058b6:	2b0a      	cmp	r3, #10
100058b8:	d015      	beq.n	100058e6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x52>
100058ba:	e02c      	b.n	10005916 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x82>
100058bc:	2be2      	cmp	r3, #226	; 0xe2
100058be:	d002      	beq.n	100058c6 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x32>
100058c0:	2bf2      	cmp	r3, #242	; 0xf2
100058c2:	d020      	beq.n	10005906 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x72>
100058c4:	e027      	b.n	10005916 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x82>
    /*
     * Normal Data write in Bank-1 interrupted (E2), Next step = Cache Update and get ready to accept new request
     * Transition states : Nothing
     */
    case E_EEPROM_XMC1_INIT_NORMAL2:
      data_ptr->current_bank = 1U;
100058c6:	683b      	ldr	r3, [r7, #0]
100058c8:	2201      	movs	r2, #1
100058ca:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE);
100058cc:	200a      	movs	r0, #10
100058ce:	2100      	movs	r1, #0
100058d0:	f000 f87a 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100058d4:	e022      	b.n	1000591c <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Data copy from Bank1 to Bank0 interrupted (A2), Next step = Erasing Bank-0 and restart copy from Bank-1
     * Transition states : (A2) -> ERASE_BANK0 (F2) -> E2 -> GC_PROCESS (A2 -> A0 -> 20 -> 2F -> 2E)
     */
    case E_EEPROM_XMC1_INIT_DATA_COPY2:
      data_ptr->current_bank = 1U;
100058d6:	683b      	ldr	r3, [r7, #0]
100058d8:	2201      	movs	r2, #1
100058da:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSET);
100058dc:	2004      	movs	r0, #4
100058de:	2130      	movs	r1, #48	; 0x30
100058e0:	f000 f8a2 	bl	10005a28 <E_EEPROM_XMC1_lInitGcDataCopyState>
      break;
100058e4:	e01a      	b.n	1000591c <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after copy completion from Bank0 to Bank1 (0A),Next step = Writing Valid state into Bank-1
     * Transition states : (0A) -> (02) -> GC_PROCESS (F2 -> E2)
     */
    case E_EEPROM_XMC1_INIT_COPY_DONE2:
      data_ptr->current_bank = 1U;
100058e6:	683b      	ldr	r3, [r7, #0]
100058e8:	2201      	movs	r2, #1
100058ea:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100058ec:	2007      	movs	r0, #7
100058ee:	2102      	movs	r1, #2
100058f0:	f000 f86a 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100058f4:	e012      	b.n	1000591c <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after writing valid state to Bank1 (02), Next step = Erase of old redundant Bank-0 (F2)
     * Transition states : (02) -> (F2) -> GC_PROCESS (E2)
     */
    case E_EEPROM_XMC1_INIT_NEXT_VALID2:
      data_ptr->current_bank = 1U;
100058f6:	683b      	ldr	r3, [r7, #0]
100058f8:	2201      	movs	r2, #1
100058fa:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100058fc:	2003      	movs	r0, #3
100058fe:	2102      	movs	r1, #2
10005900:	f000 f862 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10005904:	e00a      	b.n	1000591c <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after erase of old bank completed(F2), Next step = Mark erased Bank-0 with Formated state(E2)
     * Transition states : (F2) -> GC_PROCESS (E2)
     */
    case E_EEPROM_XMC1_INIT_END_ERASE2:
      data_ptr->current_bank = 1U;
10005906:	683b      	ldr	r3, [r7, #0]
10005908:	2201      	movs	r2, #1
1000590a:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC_STATE);
1000590c:	2008      	movs	r0, #8
1000590e:	2102      	movs	r1, #2
10005910:	f000 f85a 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10005914:	e002      	b.n	1000591c <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    
    default:
      state_found = 0U;
10005916:	2300      	movs	r3, #0
10005918:	607b      	str	r3, [r7, #4]
      break;
1000591a:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
1000591c:	687b      	ldr	r3, [r7, #4]
}
1000591e:	1c18      	adds	r0, r3, #0
10005920:	46bd      	mov	sp, r7
10005922:	b002      	add	sp, #8
10005924:	bd80      	pop	{r7, pc}
10005926:	46c0      	nop			; (mov r8, r8)
10005928:	20000718 	.word	0x20000718

1000592c <E_EEPROM_XMC1_lInitOtherNormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute other state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void)
{
1000592c:	b580      	push	{r7, lr}
1000592e:	b082      	sub	sp, #8
10005930:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005932:	4b24      	ldr	r3, [pc, #144]	; (100059c4 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x98>)
10005934:	685b      	ldr	r3, [r3, #4]
10005936:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
10005938:	2301      	movs	r3, #1
1000593a:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
1000593c:	683a      	ldr	r2, [r7, #0]
1000593e:	23bc      	movs	r3, #188	; 0xbc
10005940:	005b      	lsls	r3, r3, #1
10005942:	58d3      	ldr	r3, [r2, r3]
10005944:	2bf0      	cmp	r3, #240	; 0xf0
10005946:	d02c      	beq.n	100059a2 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x76>
10005948:	d804      	bhi.n	10005954 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x28>
1000594a:	2b0f      	cmp	r3, #15
1000594c:	d020      	beq.n	10005990 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x64>
1000594e:	2baf      	cmp	r3, #175	; 0xaf
10005950:	d00c      	beq.n	1000596c <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x40>
10005952:	e02f      	b.n	100059b4 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x88>
10005954:	2bfa      	cmp	r3, #250	; 0xfa
10005956:	d012      	beq.n	1000597e <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x52>
10005958:	2bff      	cmp	r3, #255	; 0xff
1000595a:	d12b      	bne.n	100059b4 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x88>
  {
    /* Interrupted after erase of both banks completed (FF), Next step = Start Prepare DFlash  */
    case E_EEPROM_XMC1_INIT_ALL_ERASED:
      /* Change the current Bank to Bank0 */
      data_ptr->current_bank = 0U;
1000595c:	683b      	ldr	r3, [r7, #0]
1000595e:	2200      	movs	r2, #0
10005960:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : FF ->  PREPARE_DFLASH (2F) -> 2E */
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, E_EEPROM_XMC1_EXECUTE_PREP_FLASH);
10005962:	2001      	movs	r0, #1
10005964:	2101      	movs	r1, #1
10005966:	f000 f82f 	bl	100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000596a:	e026      	b.n	100059ba <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
     * Interrupted after erase of Bank1 during previous recovery(AF), Next step = Bank0 marker Page program (A0)
     * Transition states : AF -> A0 -> GC PROCESS -> 20 -> 2F -> 2E
     */
    case E_EEPROM_XMC1_INIT_STATE_AF:
      /* Change the current Bank to Bank1 */
      data_ptr->current_bank = 0U;
1000596c:	683b      	ldr	r3, [r7, #0]
1000596e:	2200      	movs	r2, #0
10005970:	639a      	str	r2, [r3, #56]	; 0x38
    
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10005972:	2000      	movs	r0, #0
10005974:	2107      	movs	r1, #7
10005976:	2201      	movs	r2, #1
10005978:	f000 f8cc 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
1000597c:	e01d      	b.n	100059ba <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    /*
     * Interrupted after erase of Bank0 during previous recovery(FA), Next step = Bank1 marker Page program (0A)
     * Transition states : FA -> 0A -> GC PROCESS -> 02 -> F2 -> E2
     */
    case E_EEPROM_XMC1_INIT_STATE_FA:
      data_ptr->current_bank = 1U;
1000597e:	683b      	ldr	r3, [r7, #0]
10005980:	2201      	movs	r2, #1
10005982:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
10005984:	2000      	movs	r0, #0
10005986:	2107      	movs	r1, #7
10005988:	2201      	movs	r2, #1
1000598a:	f000 f8c3 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
1000598e:	e014      	b.n	100059ba <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    /*
     * Interrupted after erase of Bank1 during previous recover(0F), Next step = Bank1 marker Page program (02)
     * Transition states : 0F -> 02 -> GC PROCESS -> F2 -> E2
     */
    case E_EEPROM_XMC1_INIT_STATE_0F:
      data_ptr->current_bank = 1U;
10005990:	683b      	ldr	r3, [r7, #0]
10005992:	2201      	movs	r2, #1
10005994:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10005996:	2020      	movs	r0, #32
10005998:	2103      	movs	r1, #3
1000599a:	2200      	movs	r2, #0
1000599c:	f000 f8ba 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
100059a0:	e00b      	b.n	100059ba <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
     * Interrupted after erase of Bank1 during previous recover(F0), Next step = Bank1 marker Page program (20)
     * Transition states : F0 -> 20 -> GC PROCESS -> 2F -> 2E
     */
    case E_EEPROM_XMC1_INIT_STATE_F0:
      /* Change the current Bank to Bank0 */
      data_ptr->current_bank = 0U;
100059a2:	683b      	ldr	r3, [r7, #0]
100059a4:	2200      	movs	r2, #0
100059a6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
100059a8:	2020      	movs	r0, #32
100059aa:	2103      	movs	r1, #3
100059ac:	2200      	movs	r2, #0
100059ae:	f000 f8b1 	bl	10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
100059b2:	e002      	b.n	100059ba <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    
    default:
      state_found = 0U;
100059b4:	2300      	movs	r3, #0
100059b6:	607b      	str	r3, [r7, #4]
      break;
100059b8:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
100059ba:	687b      	ldr	r3, [r7, #4]
}
100059bc:	1c18      	adds	r0, r3, #0
100059be:	46bd      	mov	sp, r7
100059c0:	b002      	add	sp, #8
100059c2:	bd80      	pop	{r7, pc}
100059c4:	20000718 	.word	0x20000718

100059c8 <E_EEPROM_XMC1_lInitGcNormalStates>:
* Return value    : void
*
* Description     : Executes normal Garbage collection state machine sub process
*/
static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process)
{
100059c8:	b580      	push	{r7, lr}
100059ca:	b084      	sub	sp, #16
100059cc:	af00      	add	r7, sp, #0
100059ce:	6078      	str	r0, [r7, #4]
100059d0:	6039      	str	r1, [r7, #0]
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100059d2:	4b14      	ldr	r3, [pc, #80]	; (10005a24 <E_EEPROM_XMC1_lInitGcNormalStates+0x5c>)
100059d4:	685b      	ldr	r3, [r3, #4]
100059d6:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
100059d8:	f000 fd46 	bl	10006468 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  if (next_process == E_EEPROM_XMC1_EXECUTE_PREP_FLASH)
100059dc:	683b      	ldr	r3, [r7, #0]
100059de:	2b01      	cmp	r3, #1
100059e0:	d109      	bne.n	100059f6 <E_EEPROM_XMC1_lInitGcNormalStates+0x2e>
  {
    /* Update the GC state*/
    data_ptr->gc_state = current_state;
100059e2:	68fa      	ldr	r2, [r7, #12]
100059e4:	23ba      	movs	r3, #186	; 0xba
100059e6:	005b      	lsls	r3, r3, #1
100059e8:	6879      	ldr	r1, [r7, #4]
100059ea:	50d1      	str	r1, [r2, r3]
    /* Start Prepare DFlash routine to build FEE base  */
    E_EEPROM_XMC1_lPrepareDFlash();
100059ec:	f000 fab0 	bl	10005f50 <E_EEPROM_XMC1_lPrepareDFlash>
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
100059f0:	f000 fb2e 	bl	10006050 <E_EEPROM_XMC1_lUpdateCache>
100059f4:	e013      	b.n	10005a1e <E_EEPROM_XMC1_lInitGcNormalStates+0x56>
  }  
  else if (next_process == E_EEPROM_XMC1_EXECUTE_GC_STATE)
100059f6:	683b      	ldr	r3, [r7, #0]
100059f8:	2b02      	cmp	r3, #2
100059fa:	d109      	bne.n	10005a10 <E_EEPROM_XMC1_lInitGcNormalStates+0x48>
  {
    /* Update the GC state */
    data_ptr->gc_state = current_state;
100059fc:	68fa      	ldr	r2, [r7, #12]
100059fe:	23ba      	movs	r3, #186	; 0xba
10005a00:	005b      	lsls	r3, r3, #1
10005a02:	6879      	ldr	r1, [r7, #4]
10005a04:	50d1      	str	r1, [r2, r3]
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
10005a06:	f000 fb23 	bl	10006050 <E_EEPROM_XMC1_lUpdateCache>
    /* Start Garbage Collection */
    E_EEPROM_XMC1_lGarbageCollection();
10005a0a:	f000 f8c3 	bl	10005b94 <E_EEPROM_XMC1_lGarbageCollection>
10005a0e:	e006      	b.n	10005a1e <E_EEPROM_XMC1_lInitGcNormalStates+0x56>
  }
  else /* if ( next_process == E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE ) */
  {
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
10005a10:	f000 fb1e 	bl	10006050 <E_EEPROM_XMC1_lUpdateCache>
    /* Update the GC state as Bank-0 Erase Completed state */
    data_ptr->gc_state = current_state;
10005a14:	68fa      	ldr	r2, [r7, #12]
10005a16:	23ba      	movs	r3, #186	; 0xba
10005a18:	005b      	lsls	r3, r3, #1
10005a1a:	6879      	ldr	r1, [r7, #4]
10005a1c:	50d1      	str	r1, [r2, r3]
  }
}
10005a1e:	46bd      	mov	sp, r7
10005a20:	b004      	add	sp, #16
10005a22:	bd80      	pop	{r7, pc}
10005a24:	20000718 	.word	0x20000718

10005a28 <E_EEPROM_XMC1_lInitGcDataCopyState>:
* Return value    : void
*
* Description     : Executes data copy state GC state machine sub process.
*/
static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset)
{
10005a28:	b580      	push	{r7, lr}
10005a2a:	b084      	sub	sp, #16
10005a2c:	af00      	add	r7, sp, #0
10005a2e:	6078      	str	r0, [r7, #4]
10005a30:	6039      	str	r1, [r7, #0]
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005a32:	4b1a      	ldr	r3, [pc, #104]	; (10005a9c <E_EEPROM_XMC1_lInitGcDataCopyState+0x74>)
10005a34:	685b      	ldr	r3, [r3, #4]
10005a36:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005a38:	f000 fd16 	bl	10006468 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Update the GC state as restart copy process */
  data_ptr->gc_state = current_state ;
10005a3c:	68fa      	ldr	r2, [r7, #12]
10005a3e:	23ba      	movs	r3, #186	; 0xba
10005a40:	005b      	lsls	r3, r3, #1
10005a42:	6879      	ldr	r1, [r7, #4]
10005a44:	50d1      	str	r1, [r2, r3]
  
  /* Update the RAM Cache Table with */
  E_EEPROM_XMC1_lUpdateCache();
10005a46:	f000 fb03 	bl	10006050 <E_EEPROM_XMC1_lUpdateCache>
  
  /* Erase the previous redundant bank */
  status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10005a4a:	68fb      	ldr	r3, [r7, #12]
10005a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005a4e:	1c18      	adds	r0, r3, #0
10005a50:	f000 fe48 	bl	100066e4 <E_EEPROM_XMC1_lEraseBank>
10005a54:	1c03      	adds	r3, r0, #0
10005a56:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
10005a58:	68bb      	ldr	r3, [r7, #8]
10005a5a:	2b00      	cmp	r3, #0
10005a5c:	d116      	bne.n	10005a8c <E_EEPROM_XMC1_lInitGcDataCopyState+0x64>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005a5e:	f000 fddf 	bl	10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    
    /* Write formatted state to the erased bank (2E)  */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
10005a62:	68fb      	ldr	r3, [r7, #12]
10005a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005a66:	683b      	ldr	r3, [r7, #0]
10005a68:	18d3      	adds	r3, r2, r3
10005a6a:	1c18      	adds	r0, r3, #0
10005a6c:	f000 fe64 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005a70:	1c03      	adds	r3, r0, #0
10005a72:	60bb      	str	r3, [r7, #8]
    
    if (status == 0U)
10005a74:	68bb      	ldr	r3, [r7, #8]
10005a76:	2b00      	cmp	r3, #0
10005a78:	d102      	bne.n	10005a80 <E_EEPROM_XMC1_lInitGcDataCopyState+0x58>
    {
      /* Start Garbage Collection */
      E_EEPROM_XMC1_lGarbageCollection();
10005a7a:	f000 f88b 	bl	10005b94 <E_EEPROM_XMC1_lGarbageCollection>
10005a7e:	e00a      	b.n	10005a96 <E_EEPROM_XMC1_lInitGcDataCopyState+0x6e>
    }
    else
    {
      data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005a80:	68fa      	ldr	r2, [r7, #12]
10005a82:	23ba      	movs	r3, #186	; 0xba
10005a84:	005b      	lsls	r3, r3, #1
10005a86:	2109      	movs	r1, #9
10005a88:	50d1      	str	r1, [r2, r3]
10005a8a:	e004      	b.n	10005a96 <E_EEPROM_XMC1_lInitGcDataCopyState+0x6e>
    }
    
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005a8c:	68fa      	ldr	r2, [r7, #12]
10005a8e:	23ba      	movs	r3, #186	; 0xba
10005a90:	005b      	lsls	r3, r3, #1
10005a92:	2109      	movs	r1, #9
10005a94:	50d1      	str	r1, [r2, r3]
  }
  
}
10005a96:	46bd      	mov	sp, r7
10005a98:	b004      	add	sp, #16
10005a9a:	bd80      	pop	{r7, pc}
10005a9c:	20000718 	.word	0x20000718

10005aa0 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>:
 * Return value    : void
 *
 * Description     : Executes state machine sub process for erase dirty states to recover.
 */
static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset)
{
10005aa0:	b580      	push	{r7, lr}
10005aa2:	b084      	sub	sp, #16
10005aa4:	af00      	add	r7, sp, #0
10005aa6:	6078      	str	r0, [r7, #4]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005aa8:	4b19      	ldr	r3, [pc, #100]	; (10005b10 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x70>)
10005aaa:	685b      	ldr	r3, [r3, #4]
10005aac:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005aae:	f000 fcdb 	bl	10006468 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Erase the previous redundant bank */
  status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10005ab2:	68fb      	ldr	r3, [r7, #12]
10005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005ab6:	1c18      	adds	r0, r3, #0
10005ab8:	f000 fe14 	bl	100066e4 <E_EEPROM_XMC1_lEraseBank>
10005abc:	1c03      	adds	r3, r0, #0
10005abe:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
10005ac0:	68bb      	ldr	r3, [r7, #8]
10005ac2:	2b00      	cmp	r3, #0
10005ac4:	d11b      	bne.n	10005afe <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x5e>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005ac6:	f000 fdab 	bl	10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    
    /* Write formatted state to the erased bank */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
10005aca:	68fb      	ldr	r3, [r7, #12]
10005acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005ace:	687b      	ldr	r3, [r7, #4]
10005ad0:	18d3      	adds	r3, r2, r3
10005ad2:	1c18      	adds	r0, r3, #0
10005ad4:	f000 fe30 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005ad8:	1c03      	adds	r3, r0, #0
10005ada:	60bb      	str	r3, [r7, #8]
    if (status == 0U)
10005adc:	68bb      	ldr	r3, [r7, #8]
10005ade:	2b00      	cmp	r3, #0
10005ae0:	d107      	bne.n	10005af2 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x52>
    {
      /* Update the RAM Cache Table with the written blocks of data.*/
      E_EEPROM_XMC1_lUpdateCache();
10005ae2:	f000 fab5 	bl	10006050 <E_EEPROM_XMC1_lUpdateCache>
      
      data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
10005ae6:	68fa      	ldr	r2, [r7, #12]
10005ae8:	23ba      	movs	r3, #186	; 0xba
10005aea:	005b      	lsls	r3, r3, #1
10005aec:	210a      	movs	r1, #10
10005aee:	50d1      	str	r1, [r2, r3]
10005af0:	e00a      	b.n	10005b08 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x68>
    }
    else
    {
      data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005af2:	68fa      	ldr	r2, [r7, #12]
10005af4:	23ba      	movs	r3, #186	; 0xba
10005af6:	005b      	lsls	r3, r3, #1
10005af8:	2109      	movs	r1, #9
10005afa:	50d1      	str	r1, [r2, r3]
10005afc:	e004      	b.n	10005b08 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x68>
    }
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005afe:	68fa      	ldr	r2, [r7, #12]
10005b00:	23ba      	movs	r3, #186	; 0xba
10005b02:	005b      	lsls	r3, r3, #1
10005b04:	2109      	movs	r1, #9
10005b06:	50d1      	str	r1, [r2, r3]
  }
}
10005b08:	46bd      	mov	sp, r7
10005b0a:	b004      	add	sp, #16
10005b0c:	bd80      	pop	{r7, pc}
10005b0e:	46c0      	nop			; (mov r8, r8)
10005b10:	20000718 	.word	0x20000718

10005b14 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>:
 * Description     : Recovers from any copy process dirty state.
 */
static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( uint32_t current_state,
                                                          uint32_t next_state,
                                                          uint32_t page_addr_select)
{
10005b14:	b580      	push	{r7, lr}
10005b16:	b086      	sub	sp, #24
10005b18:	af00      	add	r7, sp, #0
10005b1a:	60f8      	str	r0, [r7, #12]
10005b1c:	60b9      	str	r1, [r7, #8]
10005b1e:	607a      	str	r2, [r7, #4]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005b20:	4b1b      	ldr	r3, [pc, #108]	; (10005b90 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x7c>)
10005b22:	685b      	ldr	r3, [r3, #4]
10005b24:	617b      	str	r3, [r7, #20]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005b26:	f000 fc9f 	bl	10006468 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Set the marker blocks with copy completed state */
  E_EEPROM_XMC1_lSetMarkerPageBuffer(current_state);
10005b2a:	68fb      	ldr	r3, [r7, #12]
10005b2c:	1c18      	adds	r0, r3, #0
10005b2e:	f000 fd95 	bl	1000665c <E_EEPROM_XMC1_lSetMarkerPageBuffer>
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10005b32:	f7fc fe93 	bl	1000285c <XMC_FLASH_ClearStatus>
  
  /* Decide the bank from page_addr_select and Erase the marker page + Program with the current state + Verify */
  if (page_addr_select == 1U)
10005b36:	687b      	ldr	r3, [r7, #4]
10005b38:	2b01      	cmp	r3, #1
10005b3a:	d108      	bne.n	10005b4e <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x3a>
  {
    E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_dest_addr, (uint32_t*)(void*)data_ptr->page_write_buffer);
10005b3c:	697b      	ldr	r3, [r7, #20]
10005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005b40:	697b      	ldr	r3, [r7, #20]
10005b42:	3370      	adds	r3, #112	; 0x70
10005b44:	1c10      	adds	r0, r2, #0
10005b46:	1c19      	adds	r1, r3, #0
10005b48:	f001 f916 	bl	10006d78 <E_EEPROM_XMC1_lWriteSinglePage>
10005b4c:	e007      	b.n	10005b5e <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x4a>
  }
  else
  {
    E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_src_addr, (uint32_t*)(void*)data_ptr->page_write_buffer);
10005b4e:	697b      	ldr	r3, [r7, #20]
10005b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005b52:	697b      	ldr	r3, [r7, #20]
10005b54:	3370      	adds	r3, #112	; 0x70
10005b56:	1c10      	adds	r0, r2, #0
10005b58:	1c19      	adds	r1, r3, #0
10005b5a:	f001 f90d 	bl	10006d78 <E_EEPROM_XMC1_lWriteSinglePage>
  }
  
  status = E_EEPROM_XMC1_lGetFlashStatus();
10005b5e:	f001 f925 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
10005b62:	1c03      	adds	r3, r0, #0
10005b64:	613b      	str	r3, [r7, #16]
  
  if (status == 0U)
10005b66:	693b      	ldr	r3, [r7, #16]
10005b68:	2b00      	cmp	r3, #0
10005b6a:	d109      	bne.n	10005b80 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x6c>
  {
    /* Update the GC state as write next bank valid */
    data_ptr->gc_state = next_state ;
10005b6c:	697a      	ldr	r2, [r7, #20]
10005b6e:	23ba      	movs	r3, #186	; 0xba
10005b70:	005b      	lsls	r3, r3, #1
10005b72:	68b9      	ldr	r1, [r7, #8]
10005b74:	50d1      	str	r1, [r2, r3]
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
10005b76:	f000 fa6b 	bl	10006050 <E_EEPROM_XMC1_lUpdateCache>
    /* Start Garbage Collection */
    E_EEPROM_XMC1_lGarbageCollection();
10005b7a:	f000 f80b 	bl	10005b94 <E_EEPROM_XMC1_lGarbageCollection>
10005b7e:	e004      	b.n	10005b8a <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x76>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005b80:	697a      	ldr	r2, [r7, #20]
10005b82:	23ba      	movs	r3, #186	; 0xba
10005b84:	005b      	lsls	r3, r3, #1
10005b86:	2109      	movs	r1, #9
10005b88:	50d1      	str	r1, [r2, r3]
  }
}
10005b8a:	46bd      	mov	sp, r7
10005b8c:	b006      	add	sp, #24
10005b8e:	bd80      	pop	{r7, pc}
10005b90:	20000718 	.word	0x20000718

10005b94 <E_EEPROM_XMC1_lGarbageCollection>:
 * Return value    : void
 *
 * Description     : This function execute's the garbage collection state machine.
 */
static void E_EEPROM_XMC1_lGarbageCollection(void)
{
10005b94:	b580      	push	{r7, lr}
10005b96:	b082      	sub	sp, #8
10005b98:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005b9a:	4b24      	ldr	r3, [pc, #144]	; (10005c2c <E_EEPROM_XMC1_lGarbageCollection+0x98>)
10005b9c:	685b      	ldr	r3, [r3, #4]
10005b9e:	607b      	str	r3, [r7, #4]
  
  do
  {
    switch (data_ptr->gc_state)
10005ba0:	687a      	ldr	r2, [r7, #4]
10005ba2:	23ba      	movs	r3, #186	; 0xba
10005ba4:	005b      	lsls	r3, r3, #1
10005ba6:	58d3      	ldr	r3, [r2, r3]
10005ba8:	2b08      	cmp	r3, #8
10005baa:	d82c      	bhi.n	10005c06 <E_EEPROM_XMC1_lGarbageCollection+0x72>
10005bac:	009a      	lsls	r2, r3, #2
10005bae:	4b20      	ldr	r3, [pc, #128]	; (10005c30 <E_EEPROM_XMC1_lGarbageCollection+0x9c>)
10005bb0:	18d3      	adds	r3, r2, r3
10005bb2:	681b      	ldr	r3, [r3, #0]
10005bb4:	469f      	mov	pc, r3
    {
      case E_EEPROM_XMC1_GC_COPY_START:
        E_EEPROM_XMC1_lHandleGcStartCopy();
10005bb6:	f000 f881 	bl	10005cbc <E_EEPROM_XMC1_lHandleGcStartCopy>
        break;
10005bba:	e027      	b.n	10005c0c <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_COPY_WRITE:
        E_EEPROM_XMC1_lHandleGcCopyWrite();
10005bbc:	f000 f8e8 	bl	10005d90 <E_EEPROM_XMC1_lHandleGcCopyWrite>
        break;
10005bc0:	e024      	b.n	10005c0c <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_READ_NXTBLOCK:
        XMC_FLASH_ClearStatus();
10005bc2:	f7fc fe4b 	bl	1000285c <XMC_FLASH_ClearStatus>
        E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr ,(uint32_t*)(void*)data_ptr->read_write_buffer);
10005bc6:	687b      	ldr	r3, [r7, #4]
10005bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005bca:	687b      	ldr	r3, [r7, #4]
10005bcc:	335c      	adds	r3, #92	; 0x5c
10005bce:	1c10      	adds	r0, r2, #0
10005bd0:	1c19      	adds	r1, r3, #0
10005bd2:	f001 f8c1 	bl	10006d58 <E_EEPROM_XMC1_lReadSingleBlock>
        data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
10005bd6:	687a      	ldr	r2, [r7, #4]
10005bd8:	23ba      	movs	r3, #186	; 0xba
10005bda:	005b      	lsls	r3, r3, #1
10005bdc:	2105      	movs	r1, #5
10005bde:	50d1      	str	r1, [r2, r3]
        break;
10005be0:	e014      	b.n	10005c0c <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_COPY_END:
        E_EEPROM_XMC1_lHandleGcEndOfCopy();
10005be2:	f000 f94b 	bl	10005e7c <E_EEPROM_XMC1_lHandleGcEndOfCopy>
        break;
10005be6:	e011      	b.n	10005c0c <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_NEXT_BANK_VALID:
        E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_GC_ERASE_PREV_BANK);
10005be8:	2007      	movs	r0, #7
10005bea:	2103      	movs	r1, #3
10005bec:	f000 f972 	bl	10005ed4 <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
10005bf0:	e00c      	b.n	10005c0c <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_ERASE_PREV_BANK:
        E_EEPROM_XMC1_lHandleGcOtherStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_GC_MARK_END_ERASE1);
10005bf2:	2003      	movs	r0, #3
10005bf4:	2108      	movs	r1, #8
10005bf6:	f000 f96d 	bl	10005ed4 <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
10005bfa:	e007      	b.n	10005c0c <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_MARK_END_ERASE1:
        E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_GC_IDLE);
10005bfc:	2008      	movs	r0, #8
10005bfe:	210a      	movs	r1, #10
10005c00:	f000 f968 	bl	10005ed4 <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
10005c04:	e002      	b.n	10005c0c <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      default:
        E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
10005c06:	f000 f815 	bl	10005c34 <E_EEPROM_XMC1_lHandleGcRequested>
      break;
10005c0a:	46c0      	nop			; (mov r8, r8)
    }
    
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
10005c0c:	687a      	ldr	r2, [r7, #4]
10005c0e:	23ba      	movs	r3, #186	; 0xba
10005c10:	005b      	lsls	r3, r3, #1
10005c12:	58d3      	ldr	r3, [r2, r3]
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
10005c14:	2b0a      	cmp	r3, #10
10005c16:	d005      	beq.n	10005c24 <E_EEPROM_XMC1_lGarbageCollection+0x90>
10005c18:	687a      	ldr	r2, [r7, #4]
10005c1a:	23ba      	movs	r3, #186	; 0xba
10005c1c:	005b      	lsls	r3, r3, #1
10005c1e:	58d3      	ldr	r3, [r2, r3]
      default:
        E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
      break;
    }
    
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
10005c20:	2b09      	cmp	r3, #9
10005c22:	d1bd      	bne.n	10005ba0 <E_EEPROM_XMC1_lGarbageCollection+0xc>
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
}
10005c24:	46bd      	mov	sp, r7
10005c26:	b002      	add	sp, #8
10005c28:	bd80      	pop	{r7, pc}
10005c2a:	46c0      	nop			; (mov r8, r8)
10005c2c:	20000718 	.word	0x20000718
10005c30:	10009858 	.word	0x10009858

10005c34 <E_EEPROM_XMC1_lHandleGcRequested>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC REQUESTED state
 */
static void E_EEPROM_XMC1_lHandleGcRequested(void)
{
10005c34:	b580      	push	{r7, lr}
10005c36:	b084      	sub	sp, #16
10005c38:	af00      	add	r7, sp, #0
  uint32_t status;
  uint32_t block_count;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005c3a:	4b1f      	ldr	r3, [pc, #124]	; (10005cb8 <E_EEPROM_XMC1_lHandleGcRequested+0x84>)
10005c3c:	685b      	ldr	r3, [r3, #4]
10005c3e:	607b      	str	r3, [r7, #4]
  
  E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005c40:	f000 fcee 	bl	10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
  /* Write Copy start state to new bank  (2A) or (A2) */
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_BEGIN_OFFSET));
10005c44:	687b      	ldr	r3, [r7, #4]
10005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005c48:	3310      	adds	r3, #16
10005c4a:	1c18      	adds	r0, r3, #0
10005c4c:	f000 fd74 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005c50:	1c03      	adds	r3, r0, #0
10005c52:	603b      	str	r3, [r7, #0]
  if (status == 0U)
10005c54:	683b      	ldr	r3, [r7, #0]
10005c56:	2b00      	cmp	r3, #0
10005c58:	d125      	bne.n	10005ca6 <E_EEPROM_XMC1_lHandleGcRequested+0x72>
  {
    /* Initialize the copied status for all the logical blocks */
    cache_ptr = data_ptr->block_info;
10005c5a:	687b      	ldr	r3, [r7, #4]
10005c5c:	60bb      	str	r3, [r7, #8]
    block_count = 0U;
10005c5e:	2300      	movs	r3, #0
10005c60:	60fb      	str	r3, [r7, #12]
    do
    {
      cache_ptr->status.copied = 0U;
10005c62:	68bb      	ldr	r3, [r7, #8]
10005c64:	791a      	ldrb	r2, [r3, #4]
10005c66:	2104      	movs	r1, #4
10005c68:	438a      	bics	r2, r1
10005c6a:	711a      	strb	r2, [r3, #4]
      block_count++;
10005c6c:	68fb      	ldr	r3, [r7, #12]
10005c6e:	3301      	adds	r3, #1
10005c70:	60fb      	str	r3, [r7, #12]
      cache_ptr++;
10005c72:	68bb      	ldr	r3, [r7, #8]
10005c74:	3308      	adds	r3, #8
10005c76:	60bb      	str	r3, [r7, #8]
    } while (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count);
10005c78:	4b0f      	ldr	r3, [pc, #60]	; (10005cb8 <E_EEPROM_XMC1_lHandleGcRequested+0x84>)
10005c7a:	7a5b      	ldrb	r3, [r3, #9]
10005c7c:	1e1a      	subs	r2, r3, #0
10005c7e:	68fb      	ldr	r3, [r7, #12]
10005c80:	429a      	cmp	r2, r3
10005c82:	d1ee      	bne.n	10005c62 <E_EEPROM_XMC1_lHandleGcRequested+0x2e>
    
    data_ptr->gc_log_block_count = 0U;
10005c84:	687a      	ldr	r2, [r7, #4]
10005c86:	23be      	movs	r3, #190	; 0xbe
10005c88:	005b      	lsls	r3, r3, #1
10005c8a:	2100      	movs	r1, #0
10005c8c:	50d1      	str	r1, [r2, r3]
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
10005c8e:	687a      	ldr	r2, [r7, #4]
10005c90:	23ba      	movs	r3, #186	; 0xba
10005c92:	005b      	lsls	r3, r3, #1
10005c94:	2101      	movs	r1, #1
10005c96:	50d1      	str	r1, [r2, r3]
    data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
10005c98:	687b      	ldr	r3, [r7, #4]
10005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005c9c:	1c5a      	adds	r2, r3, #1
10005c9e:	32ff      	adds	r2, #255	; 0xff
10005ca0:	687b      	ldr	r3, [r7, #4]
10005ca2:	63da      	str	r2, [r3, #60]	; 0x3c
10005ca4:	e004      	b.n	10005cb0 <E_EEPROM_XMC1_lHandleGcRequested+0x7c>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005ca6:	687a      	ldr	r2, [r7, #4]
10005ca8:	23ba      	movs	r3, #186	; 0xba
10005caa:	005b      	lsls	r3, r3, #1
10005cac:	2109      	movs	r1, #9
10005cae:	50d1      	str	r1, [r2, r3]
  }
}
10005cb0:	46bd      	mov	sp, r7
10005cb2:	b004      	add	sp, #16
10005cb4:	bd80      	pop	{r7, pc}
10005cb6:	46c0      	nop			; (mov r8, r8)
10005cb8:	20000718 	.word	0x20000718

10005cbc <E_EEPROM_XMC1_lHandleGcStartCopy>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC START COPY state
 */
static void E_EEPROM_XMC1_lHandleGcStartCopy(void)
{
10005cbc:	b580      	push	{r7, lr}
10005cbe:	b084      	sub	sp, #16
10005cc0:	af00      	add	r7, sp, #0
  uint32_t state_flag;
  uint32_t block_count;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005cc2:	4b32      	ldr	r3, [pc, #200]	; (10005d8c <E_EEPROM_XMC1_lHandleGcStartCopy+0xd0>)
10005cc4:	685b      	ldr	r3, [r3, #4]
10005cc6:	603b      	str	r3, [r7, #0]
  
  state_flag = 0U;
10005cc8:	2300      	movs	r3, #0
10005cca:	60fb      	str	r3, [r7, #12]
  /* initialize the copied status for all the logical blocks */
  block_count = data_ptr->gc_log_block_count;
10005ccc:	683a      	ldr	r2, [r7, #0]
10005cce:	23be      	movs	r3, #190	; 0xbe
10005cd0:	005b      	lsls	r3, r3, #1
10005cd2:	58d3      	ldr	r3, [r2, r3]
10005cd4:	60bb      	str	r3, [r7, #8]
  cache_ptr = data_ptr->block_info + block_count;
10005cd6:	68bb      	ldr	r3, [r7, #8]
10005cd8:	00db      	lsls	r3, r3, #3
10005cda:	683a      	ldr	r2, [r7, #0]
10005cdc:	18d3      	adds	r3, r2, r3
10005cde:	607b      	str	r3, [r7, #4]
  /*
   * Check all available blocks in cache table for Copy process. Condition breaks on either the current block is
   * consistent or all blocks check for consistency is finished
   */
  while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
10005ce0:	e01a      	b.n	10005d18 <E_EEPROM_XMC1_lHandleGcStartCopy+0x5c>
  {
    /* If block is consistent set state flag for copy enable*/
    if (((cache_ptr->address != 0U) && (cache_ptr->status.consistent == 1U)) && (cache_ptr->status.copied == 0U))
10005ce2:	687b      	ldr	r3, [r7, #4]
10005ce4:	681b      	ldr	r3, [r3, #0]
10005ce6:	2b00      	cmp	r3, #0
10005ce8:	d010      	beq.n	10005d0c <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
10005cea:	687b      	ldr	r3, [r7, #4]
10005cec:	791b      	ldrb	r3, [r3, #4]
10005cee:	2202      	movs	r2, #2
10005cf0:	4013      	ands	r3, r2
10005cf2:	b2db      	uxtb	r3, r3
10005cf4:	2b00      	cmp	r3, #0
10005cf6:	d009      	beq.n	10005d0c <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
10005cf8:	687b      	ldr	r3, [r7, #4]
10005cfa:	791b      	ldrb	r3, [r3, #4]
10005cfc:	2204      	movs	r2, #4
10005cfe:	4013      	ands	r3, r2
10005d00:	b2db      	uxtb	r3, r3
10005d02:	2b00      	cmp	r3, #0
10005d04:	d102      	bne.n	10005d0c <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
    {
      state_flag = 1U;
10005d06:	2301      	movs	r3, #1
10005d08:	60fb      	str	r3, [r7, #12]
10005d0a:	e005      	b.n	10005d18 <E_EEPROM_XMC1_lHandleGcStartCopy+0x5c>
    }
    /* If block is inconsistent ignore the block from copy and try next block*/
    else
    {
      block_count++;
10005d0c:	68bb      	ldr	r3, [r7, #8]
10005d0e:	3301      	adds	r3, #1
10005d10:	60bb      	str	r3, [r7, #8]
      cache_ptr++;
10005d12:	687b      	ldr	r3, [r7, #4]
10005d14:	3308      	adds	r3, #8
10005d16:	607b      	str	r3, [r7, #4]
  cache_ptr = data_ptr->block_info + block_count;
  /*
   * Check all available blocks in cache table for Copy process. Condition breaks on either the current block is
   * consistent or all blocks check for consistency is finished
   */
  while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
10005d18:	68fb      	ldr	r3, [r7, #12]
10005d1a:	2b00      	cmp	r3, #0
10005d1c:	d105      	bne.n	10005d2a <E_EEPROM_XMC1_lHandleGcStartCopy+0x6e>
10005d1e:	4b1b      	ldr	r3, [pc, #108]	; (10005d8c <E_EEPROM_XMC1_lHandleGcStartCopy+0xd0>)
10005d20:	7a5b      	ldrb	r3, [r3, #9]
10005d22:	1e1a      	subs	r2, r3, #0
10005d24:	68bb      	ldr	r3, [r7, #8]
10005d26:	429a      	cmp	r2, r3
10005d28:	d1db      	bne.n	10005ce2 <E_EEPROM_XMC1_lHandleGcStartCopy+0x26>
      cache_ptr++;
    }
  } /* end of while */
  
  /* If block is consistent */
  if (state_flag == 1U)
10005d2a:	68fb      	ldr	r3, [r7, #12]
10005d2c:	2b01      	cmp	r3, #1
10005d2e:	d116      	bne.n	10005d5e <E_EEPROM_XMC1_lHandleGcStartCopy+0xa2>
  {
    data_ptr->gc_src_addr = cache_ptr->address;
10005d30:	687b      	ldr	r3, [r7, #4]
10005d32:	681a      	ldr	r2, [r3, #0]
10005d34:	683b      	ldr	r3, [r7, #0]
10005d36:	641a      	str	r2, [r3, #64]	; 0x40
    data_ptr->gc_block_counter = 0U;
10005d38:	683b      	ldr	r3, [r7, #0]
10005d3a:	2200      	movs	r2, #0
10005d3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Clear all error status flags before flash operation*/
    XMC_FLASH_ClearStatus();
10005d3e:	f7fc fd8d 	bl	1000285c <XMC_FLASH_ClearStatus>
    
    E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr,(uint32_t*)(void*)data_ptr->read_write_buffer);
10005d42:	683b      	ldr	r3, [r7, #0]
10005d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005d46:	683b      	ldr	r3, [r7, #0]
10005d48:	335c      	adds	r3, #92	; 0x5c
10005d4a:	1c10      	adds	r0, r2, #0
10005d4c:	1c19      	adds	r1, r3, #0
10005d4e:	f001 f803 	bl	10006d58 <E_EEPROM_XMC1_lReadSingleBlock>
    
    /* Return value above is ignored as parameters passed from FEE are correct */
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
10005d52:	683a      	ldr	r2, [r7, #0]
10005d54:	23ba      	movs	r3, #186	; 0xba
10005d56:	005b      	lsls	r3, r3, #1
10005d58:	2105      	movs	r1, #5
10005d5a:	50d1      	str	r1, [r2, r3]
10005d5c:	e00e      	b.n	10005d7c <E_EEPROM_XMC1_lHandleGcStartCopy+0xc0>
  }
  /* Finished copying all the logical blocks */
  else
  {
    /* Update the next free block pointer */
    data_ptr->next_free_block_addr = data_ptr->gc_dest_addr;
10005d5e:	683b      	ldr	r3, [r7, #0]
10005d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005d62:	683b      	ldr	r3, [r7, #0]
10005d64:	64da      	str	r2, [r3, #76]	; 0x4c
    data_ptr->gc_src_addr = data_ptr->curr_bank_src_addr;
10005d66:	683b      	ldr	r3, [r7, #0]
10005d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10005d6a:	683b      	ldr	r3, [r7, #0]
10005d6c:	641a      	str	r2, [r3, #64]	; 0x40
    E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005d6e:	f000 fb7b 	bl	10006468 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_END;
10005d72:	683a      	ldr	r2, [r7, #0]
10005d74:	23ba      	movs	r3, #186	; 0xba
10005d76:	005b      	lsls	r3, r3, #1
10005d78:	2106      	movs	r1, #6
10005d7a:	50d1      	str	r1, [r2, r3]
  }
  data_ptr->gc_log_block_count = block_count;
10005d7c:	683a      	ldr	r2, [r7, #0]
10005d7e:	23be      	movs	r3, #190	; 0xbe
10005d80:	005b      	lsls	r3, r3, #1
10005d82:	68b9      	ldr	r1, [r7, #8]
10005d84:	50d1      	str	r1, [r2, r3]
}
10005d86:	46bd      	mov	sp, r7
10005d88:	b004      	add	sp, #16
10005d8a:	bd80      	pop	{r7, pc}
10005d8c:	20000718 	.word	0x20000718

10005d90 <E_EEPROM_XMC1_lHandleGcCopyWrite>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC START COPY WRITE state.
 */
static void E_EEPROM_XMC1_lHandleGcCopyWrite(void)
{
10005d90:	b580      	push	{r7, lr}
10005d92:	b086      	sub	sp, #24
10005d94:	af00      	add	r7, sp, #0
  uint32_t block_count;
  uint32_t flash_physical_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005d96:	4b38      	ldr	r3, [pc, #224]	; (10005e78 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xe8>)
10005d98:	685b      	ldr	r3, [r3, #4]
10005d9a:	613b      	str	r3, [r7, #16]
  
  /* initialize the copied status for all the logical blocks */
  block_count = data_ptr->gc_log_block_count;
10005d9c:	693a      	ldr	r2, [r7, #16]
10005d9e:	23be      	movs	r3, #190	; 0xbe
10005da0:	005b      	lsls	r3, r3, #1
10005da2:	58d3      	ldr	r3, [r2, r3]
10005da4:	617b      	str	r3, [r7, #20]
  cache_ptr = data_ptr->block_info + block_count;
10005da6:	697b      	ldr	r3, [r7, #20]
10005da8:	00db      	lsls	r3, r3, #3
10005daa:	693a      	ldr	r2, [r7, #16]
10005dac:	18d3      	adds	r3, r2, r3
10005dae:	60fb      	str	r3, [r7, #12]
  
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr));
10005db0:	693b      	ldr	r3, [r7, #16]
10005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005db4:	1c18      	adds	r0, r3, #0
10005db6:	f000 fcbf 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005dba:	1c03      	adds	r3, r0, #0
10005dbc:	60bb      	str	r3, [r7, #8]
  if (status == 0U)
10005dbe:	68bb      	ldr	r3, [r7, #8]
10005dc0:	2b00      	cmp	r3, #0
10005dc2:	d14b      	bne.n	10005e5c <E_EEPROM_XMC1_lHandleGcCopyWrite+0xcc>
  {      
    (data_ptr->gc_block_counter)++;
10005dc4:	693b      	ldr	r3, [r7, #16]
10005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10005dc8:	1c5a      	adds	r2, r3, #1
10005dca:	693b      	ldr	r3, [r7, #16]
10005dcc:	655a      	str	r2, [r3, #84]	; 0x54
    size = (E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_count].size);
10005dce:	4b2a      	ldr	r3, [pc, #168]	; (10005e78 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xe8>)
10005dd0:	681a      	ldr	r2, [r3, #0]
10005dd2:	697b      	ldr	r3, [r7, #20]
10005dd4:	00db      	lsls	r3, r3, #3
10005dd6:	18d3      	adds	r3, r2, r3
10005dd8:	685b      	ldr	r3, [r3, #4]
10005dda:	607b      	str	r3, [r7, #4]
    flash_physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
10005ddc:	687b      	ldr	r3, [r7, #4]
10005dde:	1c18      	adds	r0, r3, #0
10005de0:	f000 fb00 	bl	100063e4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
10005de4:	1c03      	adds	r3, r0, #0
10005de6:	603b      	str	r3, [r7, #0]
    /* If all the blocks of the logical block are copied */
    if ((data_ptr->gc_block_counter == flash_physical_blocks) || (cache_ptr->status.valid == 0U))
10005de8:	693b      	ldr	r3, [r7, #16]
10005dea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10005dec:	683b      	ldr	r3, [r7, #0]
10005dee:	429a      	cmp	r2, r3
10005df0:	d006      	beq.n	10005e00 <E_EEPROM_XMC1_lHandleGcCopyWrite+0x70>
10005df2:	68fb      	ldr	r3, [r7, #12]
10005df4:	791b      	ldrb	r3, [r3, #4]
10005df6:	2201      	movs	r2, #1
10005df8:	4013      	ands	r3, r2
10005dfa:	b2db      	uxtb	r3, r3
10005dfc:	2b00      	cmp	r3, #0
10005dfe:	d11b      	bne.n	10005e38 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xa8>
    {
      cache_ptr->status.copied = 1U;
10005e00:	68fb      	ldr	r3, [r7, #12]
10005e02:	791a      	ldrb	r2, [r3, #4]
10005e04:	2104      	movs	r1, #4
10005e06:	430a      	orrs	r2, r1
10005e08:	711a      	strb	r2, [r3, #4]
      block_count++;
10005e0a:	697b      	ldr	r3, [r7, #20]
10005e0c:	3301      	adds	r3, #1
10005e0e:	617b      	str	r3, [r7, #20]
      data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
10005e10:	693a      	ldr	r2, [r7, #16]
10005e12:	23ba      	movs	r3, #186	; 0xba
10005e14:	005b      	lsls	r3, r3, #1
10005e16:	2101      	movs	r1, #1
10005e18:	50d1      	str	r1, [r2, r3]
      data_ptr->gc_dest_addr += E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005e1a:	693b      	ldr	r3, [r7, #16]
10005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005e1e:	3310      	adds	r3, #16
10005e20:	1c1a      	adds	r2, r3, #0
10005e22:	693b      	ldr	r3, [r7, #16]
10005e24:	63da      	str	r2, [r3, #60]	; 0x3c
      cache_ptr->address = data_ptr->gc_dest_addr - (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * data_ptr->gc_block_counter);
10005e26:	693b      	ldr	r3, [r7, #16]
10005e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005e2a:	693b      	ldr	r3, [r7, #16]
10005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10005e2e:	011b      	lsls	r3, r3, #4
10005e30:	1ad2      	subs	r2, r2, r3
10005e32:	68fb      	ldr	r3, [r7, #12]
10005e34:	601a      	str	r2, [r3, #0]
10005e36:	e016      	b.n	10005e66 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xd6>
    }
    else
    {
      data_ptr->gc_src_addr = data_ptr->gc_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005e38:	693b      	ldr	r3, [r7, #16]
10005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005e3c:	3310      	adds	r3, #16
10005e3e:	1c1a      	adds	r2, r3, #0
10005e40:	693b      	ldr	r3, [r7, #16]
10005e42:	641a      	str	r2, [r3, #64]	; 0x40
      data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005e44:	693b      	ldr	r3, [r7, #16]
10005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005e48:	3310      	adds	r3, #16
10005e4a:	1c1a      	adds	r2, r3, #0
10005e4c:	693b      	ldr	r3, [r7, #16]
10005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
      data_ptr->gc_state = E_EEPROM_XMC1_GC_READ_NXTBLOCK;
10005e50:	693a      	ldr	r2, [r7, #16]
10005e52:	23ba      	movs	r3, #186	; 0xba
10005e54:	005b      	lsls	r3, r3, #1
10005e56:	2102      	movs	r1, #2
10005e58:	50d1      	str	r1, [r2, r3]
10005e5a:	e004      	b.n	10005e66 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xd6>
    }
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005e5c:	693a      	ldr	r2, [r7, #16]
10005e5e:	23ba      	movs	r3, #186	; 0xba
10005e60:	005b      	lsls	r3, r3, #1
10005e62:	2109      	movs	r1, #9
10005e64:	50d1      	str	r1, [r2, r3]
  }
  data_ptr->gc_log_block_count = block_count;
10005e66:	693a      	ldr	r2, [r7, #16]
10005e68:	23be      	movs	r3, #190	; 0xbe
10005e6a:	005b      	lsls	r3, r3, #1
10005e6c:	6979      	ldr	r1, [r7, #20]
10005e6e:	50d1      	str	r1, [r2, r3]
}
10005e70:	46bd      	mov	sp, r7
10005e72:	b006      	add	sp, #24
10005e74:	bd80      	pop	{r7, pc}
10005e76:	46c0      	nop			; (mov r8, r8)
10005e78:	20000718 	.word	0x20000718

10005e7c <E_EEPROM_XMC1_lHandleGcEndOfCopy>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC END OF COPY state
 */
static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void)
{
10005e7c:	b580      	push	{r7, lr}
10005e7e:	b082      	sub	sp, #8
10005e80:	af00      	add	r7, sp, #0
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005e82:	4b13      	ldr	r3, [pc, #76]	; (10005ed0 <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x54>)
10005e84:	685b      	ldr	r3, [r3, #4]
10005e86:	607b      	str	r3, [r7, #4]
  
  E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005e88:	f000 fbca 	bl	10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
  /* Write Copy completed state to old bank (0A) or (A0) */
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_END_OF_COPY_OFFSET));
10005e8c:	687b      	ldr	r3, [r7, #4]
10005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005e90:	3320      	adds	r3, #32
10005e92:	1c18      	adds	r0, r3, #0
10005e94:	f000 fc50 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005e98:	1c03      	adds	r3, r0, #0
10005e9a:	603b      	str	r3, [r7, #0]
  if (status == 0U)
10005e9c:	683b      	ldr	r3, [r7, #0]
10005e9e:	2b00      	cmp	r3, #0
10005ea0:	d10d      	bne.n	10005ebe <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x42>
  {
    /* Update the current bank to next bank */
    data_ptr->current_bank = data_ptr->current_bank ^ 1U;
10005ea2:	687b      	ldr	r3, [r7, #4]
10005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005ea6:	2201      	movs	r2, #1
10005ea8:	405a      	eors	r2, r3
10005eaa:	687b      	ldr	r3, [r7, #4]
10005eac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Update the Bank related global variables */
    E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005eae:	f000 fadb 	bl	10006468 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
    data_ptr->gc_state = E_EEPROM_XMC1_GC_NEXT_BANK_VALID;
10005eb2:	687a      	ldr	r2, [r7, #4]
10005eb4:	23ba      	movs	r3, #186	; 0xba
10005eb6:	005b      	lsls	r3, r3, #1
10005eb8:	2107      	movs	r1, #7
10005eba:	50d1      	str	r1, [r2, r3]
10005ebc:	e004      	b.n	10005ec8 <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x4c>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005ebe:	687a      	ldr	r2, [r7, #4]
10005ec0:	23ba      	movs	r3, #186	; 0xba
10005ec2:	005b      	lsls	r3, r3, #1
10005ec4:	2109      	movs	r1, #9
10005ec6:	50d1      	str	r1, [r2, r3]
  }
}
10005ec8:	46bd      	mov	sp, r7
10005eca:	b002      	add	sp, #8
10005ecc:	bd80      	pop	{r7, pc}
10005ece:	46c0      	nop			; (mov r8, r8)
10005ed0:	20000718 	.word	0x20000718

10005ed4 <E_EEPROM_XMC1_lHandleGcOtherStates>:
 *
 * Description     : This function handles Garbage Collection GC NEXT BANk VALID, ERASE PREV BANK and GC COMPLETED IDLE
 *                   state
*/
static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state)
{
10005ed4:	b580      	push	{r7, lr}
10005ed6:	b084      	sub	sp, #16
10005ed8:	af00      	add	r7, sp, #0
10005eda:	6078      	str	r0, [r7, #4]
10005edc:	6039      	str	r1, [r7, #0]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005ede:	4b1b      	ldr	r3, [pc, #108]	; (10005f4c <E_EEPROM_XMC1_lHandleGcOtherStates+0x78>)
10005ee0:	685b      	ldr	r3, [r3, #4]
10005ee2:	60bb      	str	r3, [r7, #8]
  
  if (current_state == E_EEPROM_XMC1_GC_NEXT_BANK_VALID)
10005ee4:	687b      	ldr	r3, [r7, #4]
10005ee6:	2b07      	cmp	r3, #7
10005ee8:	d109      	bne.n	10005efe <E_EEPROM_XMC1_lHandleGcOtherStates+0x2a>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005eea:	f000 fb99 	bl	10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    /* Write next bank to valid state  (02) or (20) */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_NEXT_VALID_OFFSET));
10005eee:	68bb      	ldr	r3, [r7, #8]
10005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005ef2:	1c18      	adds	r0, r3, #0
10005ef4:	f000 fc20 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005ef8:	1c03      	adds	r3, r0, #0
10005efa:	60fb      	str	r3, [r7, #12]
10005efc:	e014      	b.n	10005f28 <E_EEPROM_XMC1_lHandleGcOtherStates+0x54>
  }
  else if (current_state == E_EEPROM_XMC1_GC_ERASE_PREV_BANK)
10005efe:	687b      	ldr	r3, [r7, #4]
10005f00:	2b03      	cmp	r3, #3
10005f02:	d107      	bne.n	10005f14 <E_EEPROM_XMC1_lHandleGcOtherStates+0x40>
  {
    /* Erase the previous redundant bank (F2) or (2F) */
    status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10005f04:	68bb      	ldr	r3, [r7, #8]
10005f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005f08:	1c18      	adds	r0, r3, #0
10005f0a:	f000 fbeb 	bl	100066e4 <E_EEPROM_XMC1_lEraseBank>
10005f0e:	1c03      	adds	r3, r0, #0
10005f10:	60fb      	str	r3, [r7, #12]
10005f12:	e009      	b.n	10005f28 <E_EEPROM_XMC1_lHandleGcOtherStates+0x54>
  }
  else
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005f14:	f000 fb84 	bl	10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    /* Write formatted state to the old erased bank (E2) or (2E) */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_END_ERASE_OFFSET));
10005f18:	68bb      	ldr	r3, [r7, #8]
10005f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005f1c:	3330      	adds	r3, #48	; 0x30
10005f1e:	1c18      	adds	r0, r3, #0
10005f20:	f000 fc0a 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005f24:	1c03      	adds	r3, r0, #0
10005f26:	60fb      	str	r3, [r7, #12]
  }
  
  if (status == 0U)
10005f28:	68fb      	ldr	r3, [r7, #12]
10005f2a:	2b00      	cmp	r3, #0
10005f2c:	d105      	bne.n	10005f3a <E_EEPROM_XMC1_lHandleGcOtherStates+0x66>
  {
    data_ptr->gc_state = next_state;
10005f2e:	68ba      	ldr	r2, [r7, #8]
10005f30:	23ba      	movs	r3, #186	; 0xba
10005f32:	005b      	lsls	r3, r3, #1
10005f34:	6839      	ldr	r1, [r7, #0]
10005f36:	50d1      	str	r1, [r2, r3]
10005f38:	e004      	b.n	10005f44 <E_EEPROM_XMC1_lHandleGcOtherStates+0x70>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005f3a:	68ba      	ldr	r2, [r7, #8]
10005f3c:	23ba      	movs	r3, #186	; 0xba
10005f3e:	005b      	lsls	r3, r3, #1
10005f40:	2109      	movs	r1, #9
10005f42:	50d1      	str	r1, [r2, r3]
  }
}
10005f44:	46bd      	mov	sp, r7
10005f46:	b004      	add	sp, #16
10005f48:	bd80      	pop	{r7, pc}
10005f4a:	46c0      	nop			; (mov r8, r8)
10005f4c:	20000718 	.word	0x20000718

10005f50 <E_EEPROM_XMC1_lPrepareDFlash>:
 * Return value   : void
 *
 * Description    : This function executes the prepare data flash to bring the state machine to default state (2E).
 */
static void E_EEPROM_XMC1_lPrepareDFlash(void)
{
10005f50:	b580      	push	{r7, lr}
10005f52:	b082      	sub	sp, #8
10005f54:	af00      	add	r7, sp, #0
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005f56:	4b3b      	ldr	r3, [pc, #236]	; (10006044 <E_EEPROM_XMC1_lPrepareDFlash+0xf4>)
10005f58:	685b      	ldr	r3, [r3, #4]
10005f5a:	607b      	str	r3, [r7, #4]
  
  do
  {
    switch (data_ptr->gc_state)
10005f5c:	687a      	ldr	r2, [r7, #4]
10005f5e:	23ba      	movs	r3, #186	; 0xba
10005f60:	005b      	lsls	r3, r3, #1
10005f62:	58d3      	ldr	r3, [r2, r3]
10005f64:	2b04      	cmp	r3, #4
10005f66:	d002      	beq.n	10005f6e <E_EEPROM_XMC1_lPrepareDFlash+0x1e>
10005f68:	2b05      	cmp	r3, #5
10005f6a:	d01f      	beq.n	10005fac <E_EEPROM_XMC1_lPrepareDFlash+0x5c>
10005f6c:	e035      	b.n	10005fda <E_EEPROM_XMC1_lPrepareDFlash+0x8a>
    {
      case E_EEPROM_XMC1_PREPFLASH_2F:
      
      /* Set the marker blocks with copy completed state */
      E_EEPROM_XMC1_lSetMarkerPageBuffer(E_EEPROM_XMC1_VALID_STATE);
10005f6e:	2020      	movs	r0, #32
10005f70:	f000 fb74 	bl	1000665c <E_EEPROM_XMC1_lSetMarkerPageBuffer>
      
      /* Clear all error status flags before flash operation*/
      XMC_FLASH_ClearStatus();
10005f74:	f7fc fc72 	bl	1000285c <XMC_FLASH_ClearStatus>
      
      E_EEPROM_XMC1_lWriteSinglePage(E_EEPROM_XMC1_FLASH_BANK0_BASE , (uint32_t*)(void*)data_ptr->page_write_buffer);
10005f78:	687b      	ldr	r3, [r7, #4]
10005f7a:	3370      	adds	r3, #112	; 0x70
10005f7c:	4a32      	ldr	r2, [pc, #200]	; (10006048 <E_EEPROM_XMC1_lPrepareDFlash+0xf8>)
10005f7e:	1c10      	adds	r0, r2, #0
10005f80:	1c19      	adds	r1, r3, #0
10005f82:	f000 fef9 	bl	10006d78 <E_EEPROM_XMC1_lWriteSinglePage>
      
      status = E_EEPROM_XMC1_lGetFlashStatus();
10005f86:	f000 ff11 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
10005f8a:	1c03      	adds	r3, r0, #0
10005f8c:	603b      	str	r3, [r7, #0]
      
      if (status == 0U)
10005f8e:	683b      	ldr	r3, [r7, #0]
10005f90:	2b00      	cmp	r3, #0
10005f92:	d105      	bne.n	10005fa0 <E_EEPROM_XMC1_lPrepareDFlash+0x50>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
10005f94:	687a      	ldr	r2, [r7, #4]
10005f96:	23ba      	movs	r3, #186	; 0xba
10005f98:	005b      	lsls	r3, r3, #1
10005f9a:	2105      	movs	r1, #5
10005f9c:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
10005f9e:	e042      	b.n	10006026 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005fa0:	687a      	ldr	r2, [r7, #4]
10005fa2:	23ba      	movs	r3, #186	; 0xba
10005fa4:	005b      	lsls	r3, r3, #1
10005fa6:	2109      	movs	r1, #9
10005fa8:	50d1      	str	r1, [r2, r3]
      }
      break;
10005faa:	e03c      	b.n	10006026 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      
      case E_EEPROM_XMC1_PREPFLASH_2E:
        
      E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005fac:	f000 fb38 	bl	10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
      
      /* Write Bank1 to formatted state  (2E) */
      status = E_EEPROM_XMC1_lGCWrite((uint32_t)E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_END_ERASE_OFFSET);
10005fb0:	4b26      	ldr	r3, [pc, #152]	; (1000604c <E_EEPROM_XMC1_lPrepareDFlash+0xfc>)
10005fb2:	1c18      	adds	r0, r3, #0
10005fb4:	f000 fbc0 	bl	10006738 <E_EEPROM_XMC1_lGCWrite>
10005fb8:	1c03      	adds	r3, r0, #0
10005fba:	603b      	str	r3, [r7, #0]
      
      if (status == 0U)
10005fbc:	683b      	ldr	r3, [r7, #0]
10005fbe:	2b00      	cmp	r3, #0
10005fc0:	d105      	bne.n	10005fce <E_EEPROM_XMC1_lPrepareDFlash+0x7e>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
10005fc2:	687a      	ldr	r2, [r7, #4]
10005fc4:	23ba      	movs	r3, #186	; 0xba
10005fc6:	005b      	lsls	r3, r3, #1
10005fc8:	210a      	movs	r1, #10
10005fca:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
10005fcc:	e02b      	b.n	10006026 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005fce:	687a      	ldr	r2, [r7, #4]
10005fd0:	23ba      	movs	r3, #186	; 0xba
10005fd2:	005b      	lsls	r3, r3, #1
10005fd4:	2109      	movs	r1, #9
10005fd6:	50d1      	str	r1, [r2, r3]
      }
      break;
10005fd8:	e025      	b.n	10006026 <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      
      default:  /* gc_state : E_EEPROM_XMC1_PREPFLASH_FF*/
      
      /* Erase the previous redundant bank */
      status = E_EEPROM_XMC1_lEraseBank(data_ptr->curr_bank_end_addr);
10005fda:	687b      	ldr	r3, [r7, #4]
10005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10005fde:	1c18      	adds	r0, r3, #0
10005fe0:	f000 fb80 	bl	100066e4 <E_EEPROM_XMC1_lEraseBank>
10005fe4:	1c03      	adds	r3, r0, #0
10005fe6:	603b      	str	r3, [r7, #0]
      
      /* Erase the previous redundant bank */
      if (status == 0U)
10005fe8:	683b      	ldr	r3, [r7, #0]
10005fea:	2b00      	cmp	r3, #0
10005fec:	d115      	bne.n	1000601a <E_EEPROM_XMC1_lPrepareDFlash+0xca>
      {
        status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10005fee:	687b      	ldr	r3, [r7, #4]
10005ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005ff2:	1c18      	adds	r0, r3, #0
10005ff4:	f000 fb76 	bl	100066e4 <E_EEPROM_XMC1_lEraseBank>
10005ff8:	1c03      	adds	r3, r0, #0
10005ffa:	603b      	str	r3, [r7, #0]
        
        if (status == 0U)
10005ffc:	683b      	ldr	r3, [r7, #0]
10005ffe:	2b00      	cmp	r3, #0
10006000:	d105      	bne.n	1000600e <E_EEPROM_XMC1_lPrepareDFlash+0xbe>
        {
          data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
10006002:	687a      	ldr	r2, [r7, #4]
10006004:	23ba      	movs	r3, #186	; 0xba
10006006:	005b      	lsls	r3, r3, #1
10006008:	2104      	movs	r1, #4
1000600a:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
1000600c:	e00a      	b.n	10006024 <E_EEPROM_XMC1_lPrepareDFlash+0xd4>
        {
          data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
        }
        else
        {
          data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000600e:	687a      	ldr	r2, [r7, #4]
10006010:	23ba      	movs	r3, #186	; 0xba
10006012:	005b      	lsls	r3, r3, #1
10006014:	2109      	movs	r1, #9
10006016:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
10006018:	e004      	b.n	10006024 <E_EEPROM_XMC1_lPrepareDFlash+0xd4>
          data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
        }
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000601a:	687a      	ldr	r2, [r7, #4]
1000601c:	23ba      	movs	r3, #186	; 0xba
1000601e:	005b      	lsls	r3, r3, #1
10006020:	2109      	movs	r1, #9
10006022:	50d1      	str	r1, [r2, r3]
      }
      break;
10006024:	46c0      	nop			; (mov r8, r8)
    }
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
10006026:	687a      	ldr	r2, [r7, #4]
10006028:	23ba      	movs	r3, #186	; 0xba
1000602a:	005b      	lsls	r3, r3, #1
1000602c:	58d3      	ldr	r3, [r2, r3]
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
1000602e:	2b0a      	cmp	r3, #10
10006030:	d005      	beq.n	1000603e <E_EEPROM_XMC1_lPrepareDFlash+0xee>
10006032:	687a      	ldr	r2, [r7, #4]
10006034:	23ba      	movs	r3, #186	; 0xba
10006036:	005b      	lsls	r3, r3, #1
10006038:	58d3      	ldr	r3, [r2, r3]
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
    }
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
1000603a:	2b09      	cmp	r3, #9
1000603c:	d18e      	bne.n	10005f5c <E_EEPROM_XMC1_lPrepareDFlash+0xc>
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
}
1000603e:	46bd      	mov	sp, r7
10006040:	b002      	add	sp, #8
10006042:	bd80      	pop	{r7, pc}
10006044:	20000718 	.word	0x20000718
10006048:	10010a00 	.word	0x10010a00
1000604c:	10010d30 	.word	0x10010d30

10006050 <E_EEPROM_XMC1_lUpdateCache>:
 *
 * Description     : This utility function update's the cache table which contains the latest information about the
 *                   FLASH contents.
 */
static void E_EEPROM_XMC1_lUpdateCache(void)
{
10006050:	b580      	push	{r7, lr}
10006052:	b084      	sub	sp, #16
10006054:	af00      	add	r7, sp, #0
  uint32_t end_addr;
  uint32_t read_status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006056:	4b39      	ldr	r3, [pc, #228]	; (1000613c <E_EEPROM_XMC1_lUpdateCache+0xec>)
10006058:	685b      	ldr	r3, [r3, #4]
1000605a:	607b      	str	r3, [r7, #4]
  
  /* Evaluate the end address of the bank to start reading blocks for cache update */
  if (data_ptr->current_bank == 0U)
1000605c:	687b      	ldr	r3, [r7, #4]
1000605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10006060:	2b00      	cmp	r3, #0
10006062:	d102      	bne.n	1000606a <E_EEPROM_XMC1_lUpdateCache+0x1a>
  {
    end_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
10006064:	4b36      	ldr	r3, [pc, #216]	; (10006140 <E_EEPROM_XMC1_lUpdateCache+0xf0>)
10006066:	60fb      	str	r3, [r7, #12]
10006068:	e001      	b.n	1000606e <E_EEPROM_XMC1_lUpdateCache+0x1e>
  }
  else
  {
    end_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
1000606a:	4b36      	ldr	r3, [pc, #216]	; (10006144 <E_EEPROM_XMC1_lUpdateCache+0xf4>)
1000606c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the read number of blocks count variable and reset cache update index */
  data_ptr->written_block_counter = 0U;
1000606e:	687b      	ldr	r3, [r7, #4]
10006070:	2200      	movs	r2, #0
10006072:	659a      	str	r2, [r3, #88]	; 0x58
  data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10006074:	687a      	ldr	r2, [r7, #4]
10006076:	23c2      	movs	r3, #194	; 0xc2
10006078:	005b      	lsls	r3, r3, #1
1000607a:	21ff      	movs	r1, #255	; 0xff
1000607c:	50d1      	str	r1, [r2, r3]
  
  /* Start the Cache Update state machine */
  data_ptr->cache_state = E_EEPROM_XMC1_CACHE_EMPTY_BLOCK;
1000607e:	687a      	ldr	r2, [r7, #4]
10006080:	23c0      	movs	r3, #192	; 0xc0
10006082:	005b      	lsls	r3, r3, #1
10006084:	2101      	movs	r1, #1
10006086:	50d1      	str	r1, [r2, r3]
  
  /* Point to starting address of last data block of the bank */
  data_ptr->curr_bank_src_addr += ( E_EEPROM_XMC1_FLASH_BANK_SIZE - E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
10006088:	687b      	ldr	r3, [r7, #4]
1000608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000608c:	22bc      	movs	r2, #188	; 0xbc
1000608e:	0092      	lsls	r2, r2, #2
10006090:	189a      	adds	r2, r3, r2
10006092:	687b      	ldr	r3, [r7, #4]
10006094:	651a      	str	r2, [r3, #80]	; 0x50
  /* Search for the first entry of a non empty block inside the valid bank starting from bottom */
  do{
      read_status = E_EEPROM_XMC1_lCacheEmptyBlkEval(end_addr);
10006096:	68fb      	ldr	r3, [r7, #12]
10006098:	1c18      	adds	r0, r3, #0
1000609a:	f000 f855 	bl	10006148 <E_EEPROM_XMC1_lCacheEmptyBlkEval>
1000609e:	1c03      	adds	r3, r0, #0
100060a0:	60bb      	str	r3, [r7, #8]
  } while (data_ptr->cache_state == E_EEPROM_XMC1_CACHE_EMPTY_BLOCK);
100060a2:	687a      	ldr	r2, [r7, #4]
100060a4:	23c0      	movs	r3, #192	; 0xc0
100060a6:	005b      	lsls	r3, r3, #1
100060a8:	58d3      	ldr	r3, [r2, r3]
100060aa:	2b01      	cmp	r3, #1
100060ac:	d0f3      	beq.n	10006096 <E_EEPROM_XMC1_lUpdateCache+0x46>
  
   /* Update the next free block location only if it is not done by the previous function call  */
  if (data_ptr->next_free_block_addr == 0U)
100060ae:	687b      	ldr	r3, [r7, #4]
100060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100060b2:	2b00      	cmp	r3, #0
100060b4:	d105      	bne.n	100060c2 <E_EEPROM_XMC1_lUpdateCache+0x72>
  {
    data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
100060b6:	687b      	ldr	r3, [r7, #4]
100060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100060ba:	3310      	adds	r3, #16
100060bc:	1c1a      	adds	r2, r3, #0
100060be:	687b      	ldr	r3, [r7, #4]
100060c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  
  /* Execute the Cache update state machine until the Start address of bank is reached traversing from end of bank */
  while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
100060c2:	e031      	b.n	10006128 <E_EEPROM_XMC1_lUpdateCache+0xd8>
  {
    /* Check If the previous read had an ECC error or not */
    if (!(read_status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR))
100060c4:	68bb      	ldr	r3, [r7, #8]
100060c6:	2220      	movs	r2, #32
100060c8:	4013      	ands	r3, r2
100060ca:	d102      	bne.n	100060d2 <E_EEPROM_XMC1_lUpdateCache+0x82>
    {
      /* Evaluate the Block status since no error found */
      E_EEPROM_XMC1_lEvalBlockStatus();
100060cc:	f000 f89a 	bl	10006204 <E_EEPROM_XMC1_lEvalBlockStatus>
100060d0:	e01b      	b.n	1000610a <E_EEPROM_XMC1_lUpdateCache+0xba>
    }
    else
    {
      /* If previous read block of the block had correct block number then mark the block as inconsistent */
      if ( data_ptr->updated_cache_index != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND )
100060d2:	687a      	ldr	r2, [r7, #4]
100060d4:	23c2      	movs	r3, #194	; 0xc2
100060d6:	005b      	lsls	r3, r3, #1
100060d8:	58d3      	ldr	r3, [r2, r3]
100060da:	2bff      	cmp	r3, #255	; 0xff
100060dc:	d00d      	beq.n	100060fa <E_EEPROM_XMC1_lUpdateCache+0xaa>
      {
        /* Goto the cache table entry for the given block */
        cache_ptr = data_ptr->block_info;
100060de:	687b      	ldr	r3, [r7, #4]
100060e0:	603b      	str	r3, [r7, #0]
        cache_ptr = cache_ptr + data_ptr->updated_cache_index;
100060e2:	687a      	ldr	r2, [r7, #4]
100060e4:	23c2      	movs	r3, #194	; 0xc2
100060e6:	005b      	lsls	r3, r3, #1
100060e8:	58d3      	ldr	r3, [r2, r3]
100060ea:	00db      	lsls	r3, r3, #3
100060ec:	683a      	ldr	r2, [r7, #0]
100060ee:	18d3      	adds	r3, r2, r3
100060f0:	603b      	str	r3, [r7, #0]
        /* Since CacheUpdateIndex contains valid block the  previous read block must belong to this block */
        cache_ptr->address = E_EEPROM_XMC1_ALL_ONES;
100060f2:	683b      	ldr	r3, [r7, #0]
100060f4:	2201      	movs	r2, #1
100060f6:	4252      	negs	r2, r2
100060f8:	601a      	str	r2, [r3, #0]
      }
      /* Prepare for the next block */
      data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
100060fa:	687a      	ldr	r2, [r7, #4]
100060fc:	23c2      	movs	r3, #194	; 0xc2
100060fe:	005b      	lsls	r3, r3, #1
10006100:	21ff      	movs	r1, #255	; 0xff
10006102:	50d1      	str	r1, [r2, r3]
      data_ptr->written_block_counter = 0U;
10006104:	687b      	ldr	r3, [r7, #4]
10006106:	2200      	movs	r2, #0
10006108:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Check if all blocks have been read */
    if ( data_ptr->curr_bank_src_addr == end_addr )
1000610a:	687b      	ldr	r3, [r7, #4]
1000610c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1000610e:	68fb      	ldr	r3, [r7, #12]
10006110:	429a      	cmp	r2, r3
10006112:	d105      	bne.n	10006120 <E_EEPROM_XMC1_lUpdateCache+0xd0>
    {
      /* Goto the next state */
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
10006114:	687a      	ldr	r2, [r7, #4]
10006116:	23c0      	movs	r3, #192	; 0xc0
10006118:	005b      	lsls	r3, r3, #1
1000611a:	2104      	movs	r1, #4
1000611c:	50d1      	str	r1, [r2, r3]
1000611e:	e003      	b.n	10006128 <E_EEPROM_XMC1_lUpdateCache+0xd8>
    }
    else
    {
      read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
10006120:	f000 f90c 	bl	1000633c <E_EEPROM_XMC1_lUpdateCacheBlockRead>
10006124:	1c03      	adds	r3, r0, #0
10006126:	60bb      	str	r3, [r7, #8]
  {
    data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
  }
  
  /* Execute the Cache update state machine until the Start address of bank is reached traversing from end of bank */
  while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
10006128:	687a      	ldr	r2, [r7, #4]
1000612a:	23c0      	movs	r3, #192	; 0xc0
1000612c:	005b      	lsls	r3, r3, #1
1000612e:	58d3      	ldr	r3, [r2, r3]
10006130:	2b04      	cmp	r3, #4
10006132:	d1c7      	bne.n	100060c4 <E_EEPROM_XMC1_lUpdateCache+0x74>
    else
    {
      read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
    }
  }
}
10006134:	46bd      	mov	sp, r7
10006136:	b004      	add	sp, #16
10006138:	bd80      	pop	{r7, pc}
1000613a:	46c0      	nop			; (mov r8, r8)
1000613c:	20000718 	.word	0x20000718
10006140:	10010b00 	.word	0x10010b00
10006144:	10010e00 	.word	0x10010e00

10006148 <E_EEPROM_XMC1_lCacheEmptyBlkEval>:
 *
 * Description     : This utility function  will search through the FLASH from the bottom of the bank until a
 *                   readable data block is found.
 */
static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr)
{
10006148:	b580      	push	{r7, lr}
1000614a:	b086      	sub	sp, #24
1000614c:	af00      	add	r7, sp, #0
1000614e:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t *read_word_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006150:	4b2b      	ldr	r3, [pc, #172]	; (10006200 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xb8>)
10006152:	685b      	ldr	r3, [r3, #4]
10006154:	617b      	str	r3, [r7, #20]
  
  XMC_FLASH_ClearStatus();
10006156:	f7fc fb81 	bl	1000285c <XMC_FLASH_ClearStatus>
  
  /* Read the complete block */
  E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
1000615a:	697b      	ldr	r3, [r7, #20]
1000615c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1000615e:	697b      	ldr	r3, [r7, #20]
10006160:	335c      	adds	r3, #92	; 0x5c
10006162:	1c10      	adds	r0, r2, #0
10006164:	1c19      	adds	r1, r3, #0
10006166:	f000 fdf7 	bl	10006d58 <E_EEPROM_XMC1_lReadSingleBlock>
  
  status = E_EEPROM_XMC1_lGetFlashStatus();
1000616a:	f000 fe1f 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
1000616e:	1c03      	adds	r3, r0, #0
10006170:	613b      	str	r3, [r7, #16]
  
  /* If ECC error exists because of any previous interruptions or power failures during Flash operation in progress*/
  if (status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR)
10006172:	693b      	ldr	r3, [r7, #16]
10006174:	2220      	movs	r2, #32
10006176:	4013      	ands	r3, r2
10006178:	d01b      	beq.n	100061b2 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x6a>
  {
    /* Update the free block location of the valid bank once and for ever until new write happens*/
    if (data_ptr->next_free_block_addr == 0U)
1000617a:	697b      	ldr	r3, [r7, #20]
1000617c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000617e:	2b00      	cmp	r3, #0
10006180:	d105      	bne.n	1000618e <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x46>
    {
      data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
10006182:	697b      	ldr	r3, [r7, #20]
10006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10006186:	3310      	adds	r3, #16
10006188:	1c1a      	adds	r2, r3, #0
1000618a:	697b      	ldr	r3, [r7, #20]
1000618c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* Check if all blocks have been read? If yes go to cache update complete state else move to the next block */
    if ( data_ptr->curr_bank_src_addr == end_addr )
1000618e:	697b      	ldr	r3, [r7, #20]
10006190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10006192:	687b      	ldr	r3, [r7, #4]
10006194:	429a      	cmp	r2, r3
10006196:	d105      	bne.n	100061a4 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x5c>
    {
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
10006198:	697a      	ldr	r2, [r7, #20]
1000619a:	23c0      	movs	r3, #192	; 0xc0
1000619c:	005b      	lsls	r3, r3, #1
1000619e:	2104      	movs	r1, #4
100061a0:	50d1      	str	r1, [r2, r3]
100061a2:	e028      	b.n	100061f6 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
    else
    {
      data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
100061a4:	697b      	ldr	r3, [r7, #20]
100061a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100061a8:	3b10      	subs	r3, #16
100061aa:	1c1a      	adds	r2, r3, #0
100061ac:	697b      	ldr	r3, [r7, #20]
100061ae:	651a      	str	r2, [r3, #80]	; 0x50
100061b0:	e021      	b.n	100061f6 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
  }
  /* No ECC Error */
  else
  {
    read_word_ptr = ((uint32_t*)(void*)data_ptr->read_write_buffer);
100061b2:	697b      	ldr	r3, [r7, #20]
100061b4:	335c      	adds	r3, #92	; 0x5c
100061b6:	60fb      	str	r3, [r7, #12]
    /* Check if the first word of the block is having some data written on it */
    if (*read_word_ptr != E_EEPROM_XMC1_ALL_ONES)
100061b8:	68fb      	ldr	r3, [r7, #12]
100061ba:	681b      	ldr	r3, [r3, #0]
100061bc:	3301      	adds	r3, #1
100061be:	d00a      	beq.n	100061d6 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x8e>
    {
      /* Increment the data block count and go to the next block read state */
      data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
100061c0:	697b      	ldr	r3, [r7, #20]
100061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100061c4:	1c5a      	adds	r2, r3, #1
100061c6:	697b      	ldr	r3, [r7, #20]
100061c8:	659a      	str	r2, [r3, #88]	; 0x58
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_NEXT_BLK;
100061ca:	697a      	ldr	r2, [r7, #20]
100061cc:	23c0      	movs	r3, #192	; 0xc0
100061ce:	005b      	lsls	r3, r3, #1
100061d0:	2102      	movs	r1, #2
100061d2:	50d1      	str	r1, [r2, r3]
100061d4:	e00f      	b.n	100061f6 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
    else
    {
      /* Check if all blocks have been read? If yes go to cache update complete state else move to next block */
      if ( data_ptr->curr_bank_src_addr == end_addr )
100061d6:	697b      	ldr	r3, [r7, #20]
100061d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
100061da:	687b      	ldr	r3, [r7, #4]
100061dc:	429a      	cmp	r2, r3
100061de:	d104      	bne.n	100061ea <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xa2>
      {
        data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
100061e0:	697a      	ldr	r2, [r7, #20]
100061e2:	23c0      	movs	r3, #192	; 0xc0
100061e4:	005b      	lsls	r3, r3, #1
100061e6:	2104      	movs	r1, #4
100061e8:	50d1      	str	r1, [r2, r3]
      }
      data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
100061ea:	697b      	ldr	r3, [r7, #20]
100061ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100061ee:	3b10      	subs	r3, #16
100061f0:	1c1a      	adds	r2, r3, #0
100061f2:	697b      	ldr	r3, [r7, #20]
100061f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  return (status);
100061f6:	693b      	ldr	r3, [r7, #16]
}
100061f8:	1c18      	adds	r0, r3, #0
100061fa:	46bd      	mov	sp, r7
100061fc:	b006      	add	sp, #24
100061fe:	bd80      	pop	{r7, pc}
10006200:	20000718 	.word	0x20000718

10006204 <E_EEPROM_XMC1_lEvalBlockStatus>:
 *                    2) cache updated: inconsistent           
 *                    3) cache already updated (no actions done)   
 *                    4) cannot evaluate - requires more blocks to be read          
 */
static void E_EEPROM_XMC1_lEvalBlockStatus(void)
{
10006204:	b580      	push	{r7, lr}
10006206:	b088      	sub	sp, #32
10006208:	af00      	add	r7, sp, #0
  uint32_t physical_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;
  E_EEPROM_XMC1_BLOCK_HEADER_t *Ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000620a:	4b4b      	ldr	r3, [pc, #300]	; (10006338 <E_EEPROM_XMC1_lEvalBlockStatus+0x134>)
1000620c:	685b      	ldr	r3, [r3, #4]
1000620e:	61fb      	str	r3, [r7, #28]
  Ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t *)(void *)data_ptr->read_write_buffer;
10006210:	69fb      	ldr	r3, [r7, #28]
10006212:	335c      	adds	r3, #92	; 0x5c
10006214:	61bb      	str	r3, [r7, #24]
  block_number = Ptr->block_number;
10006216:	2317      	movs	r3, #23
10006218:	18fb      	adds	r3, r7, r3
1000621a:	69ba      	ldr	r2, [r7, #24]
1000621c:	7812      	ldrb	r2, [r2, #0]
1000621e:	701a      	strb	r2, [r3, #0]
  status_byte = Ptr->status;
10006220:	69bb      	ldr	r3, [r7, #24]
10006222:	785b      	ldrb	r3, [r3, #1]
10006224:	613b      	str	r3, [r7, #16]
  
  cache_ptr = data_ptr->block_info;
10006226:	69fb      	ldr	r3, [r7, #28]
10006228:	60fb      	str	r3, [r7, #12]
  
  /* Get the Index of the read block from the user configuration */
  indx = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
1000622a:	2317      	movs	r3, #23
1000622c:	18fb      	adds	r3, r7, r3
1000622e:	781b      	ldrb	r3, [r3, #0]
10006230:	1c18      	adds	r0, r3, #0
10006232:	f000 f8a7 	bl	10006384 <E_EEPROM_XMC1_lGetUsrBlockIndex>
10006236:	1c03      	adds	r3, r0, #0
10006238:	60bb      	str	r3, [r7, #8]
  
  /* If the block is found */
  if ( (indx != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND) )
1000623a:	68bb      	ldr	r3, [r7, #8]
1000623c:	2bff      	cmp	r3, #255	; 0xff
1000623e:	d100      	bne.n	10006242 <E_EEPROM_XMC1_lEvalBlockStatus+0x3e>
10006240:	e06f      	b.n	10006322 <E_EEPROM_XMC1_lEvalBlockStatus+0x11e>
  {
    /* Point to the cache table entry for the block to be evaluated */
    cache_ptr = cache_ptr + indx;
10006242:	68bb      	ldr	r3, [r7, #8]
10006244:	00db      	lsls	r3, r3, #3
10006246:	68fa      	ldr	r2, [r7, #12]
10006248:	18d3      	adds	r3, r2, r3
1000624a:	60fb      	str	r3, [r7, #12]
    
    /* Store Index of current block */
    data_ptr->updated_cache_index = indx;
1000624c:	69fa      	ldr	r2, [r7, #28]
1000624e:	23c2      	movs	r3, #194	; 0xc2
10006250:	005b      	lsls	r3, r3, #1
10006252:	68b9      	ldr	r1, [r7, #8]
10006254:	50d1      	str	r1, [r2, r3]
    
    /* Check if cache table is updated for the given block : address = 0U => cache table not yet updated */
    if (cache_ptr->address == 0U)
10006256:	68fb      	ldr	r3, [r7, #12]
10006258:	681b      	ldr	r3, [r3, #0]
1000625a:	2b00      	cmp	r3, #0
1000625c:	d158      	bne.n	10006310 <E_EEPROM_XMC1_lEvalBlockStatus+0x10c>
    {
      /* If the starting block of the block found */
      if ((status_byte & E_EEPROM_XMC1_START_BIT ) != 0U)
1000625e:	693b      	ldr	r3, [r7, #16]
10006260:	2280      	movs	r2, #128	; 0x80
10006262:	4013      	ands	r3, r2
10006264:	d065      	beq.n	10006332 <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
      {
        /* Update the cache with block address */
        cache_ptr->address = data_ptr->curr_bank_src_addr;
10006266:	69fb      	ldr	r3, [r7, #28]
10006268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1000626a:	68fb      	ldr	r3, [r7, #12]
1000626c:	601a      	str	r2, [r3, #0]
        
        /* if the Valid bit for the logical block is set */
        if ((status_byte & (E_EEPROM_XMC1_VALID_BIT) ) != 0U)
1000626e:	693b      	ldr	r3, [r7, #16]
10006270:	2240      	movs	r2, #64	; 0x40
10006272:	4013      	ands	r3, r2
10006274:	d014      	beq.n	100062a0 <E_EEPROM_XMC1_lEvalBlockStatus+0x9c>
        {
          cache_ptr->status.valid = 1U;
10006276:	68fb      	ldr	r3, [r7, #12]
10006278:	791a      	ldrb	r2, [r3, #4]
1000627a:	2101      	movs	r1, #1
1000627c:	430a      	orrs	r2, r1
1000627e:	711a      	strb	r2, [r3, #4]
          
          /* if the CRC bit for the logical block is set */
          if ((status_byte & (E_EEPROM_XMC1_CRC_BIT) ) != 0U)
10006280:	693b      	ldr	r3, [r7, #16]
10006282:	2210      	movs	r2, #16
10006284:	4013      	ands	r3, r2
10006286:	d005      	beq.n	10006294 <E_EEPROM_XMC1_lEvalBlockStatus+0x90>
          {
            cache_ptr->status.crc = 1U;
10006288:	68fb      	ldr	r3, [r7, #12]
1000628a:	791a      	ldrb	r2, [r3, #4]
1000628c:	2108      	movs	r1, #8
1000628e:	430a      	orrs	r2, r1
10006290:	711a      	strb	r2, [r3, #4]
10006292:	e00a      	b.n	100062aa <E_EEPROM_XMC1_lEvalBlockStatus+0xa6>
          }
          else
          {
            cache_ptr->status.crc = 0U;
10006294:	68fb      	ldr	r3, [r7, #12]
10006296:	791a      	ldrb	r2, [r3, #4]
10006298:	2108      	movs	r1, #8
1000629a:	438a      	bics	r2, r1
1000629c:	711a      	strb	r2, [r3, #4]
1000629e:	e004      	b.n	100062aa <E_EEPROM_XMC1_lEvalBlockStatus+0xa6>
          }
        }
        else
        {
          cache_ptr->status.valid = 0U;
100062a0:	68fb      	ldr	r3, [r7, #12]
100062a2:	791a      	ldrb	r2, [r3, #4]
100062a4:	2101      	movs	r1, #1
100062a6:	438a      	bics	r2, r1
100062a8:	711a      	strb	r2, [r3, #4]
        }
        
        /* Check If number of Flash blocks used for this data block is same in size */
        size = (uint32_t)(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx].size);
100062aa:	4b23      	ldr	r3, [pc, #140]	; (10006338 <E_EEPROM_XMC1_lEvalBlockStatus+0x134>)
100062ac:	681a      	ldr	r2, [r3, #0]
100062ae:	68bb      	ldr	r3, [r7, #8]
100062b0:	00db      	lsls	r3, r3, #3
100062b2:	18d3      	adds	r3, r2, r3
100062b4:	685b      	ldr	r3, [r3, #4]
100062b6:	607b      	str	r3, [r7, #4]
        physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
100062b8:	687b      	ldr	r3, [r7, #4]
100062ba:	1c18      	adds	r0, r3, #0
100062bc:	f000 f892 	bl	100063e4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
100062c0:	1c03      	adds	r3, r0, #0
100062c2:	603b      	str	r3, [r7, #0]
        
        if ( data_ptr->written_block_counter == physical_blocks)
100062c4:	69fb      	ldr	r3, [r7, #28]
100062c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
100062c8:	683b      	ldr	r3, [r7, #0]
100062ca:	429a      	cmp	r2, r3
100062cc:	d105      	bne.n	100062da <E_EEPROM_XMC1_lEvalBlockStatus+0xd6>
        {
          cache_ptr->status.consistent = 1U;  /* EVALUATION RESULT : BLOCK CONSISTENT*/
100062ce:	68fb      	ldr	r3, [r7, #12]
100062d0:	791a      	ldrb	r2, [r3, #4]
100062d2:	2102      	movs	r1, #2
100062d4:	430a      	orrs	r2, r1
100062d6:	711a      	strb	r2, [r3, #4]
100062d8:	e011      	b.n	100062fe <E_EEPROM_XMC1_lEvalBlockStatus+0xfa>
        }
        else
        {
          if (cache_ptr->status.valid == 1U)
100062da:	68fb      	ldr	r3, [r7, #12]
100062dc:	791b      	ldrb	r3, [r3, #4]
100062de:	2201      	movs	r2, #1
100062e0:	4013      	ands	r3, r2
100062e2:	b2db      	uxtb	r3, r3
100062e4:	2b00      	cmp	r3, #0
100062e6:	d005      	beq.n	100062f4 <E_EEPROM_XMC1_lEvalBlockStatus+0xf0>
          {
            cache_ptr->status.consistent = 0U;  /* EVALUATION RESULT : BLOCK INCONSISTENT */
100062e8:	68fb      	ldr	r3, [r7, #12]
100062ea:	791a      	ldrb	r2, [r3, #4]
100062ec:	2102      	movs	r1, #2
100062ee:	438a      	bics	r2, r1
100062f0:	711a      	strb	r2, [r3, #4]
100062f2:	e004      	b.n	100062fe <E_EEPROM_XMC1_lEvalBlockStatus+0xfa>
          }
          else
          {
            cache_ptr->status.consistent = 1U; /* If the block is invalid, then mark : BLOCK INCONSISTENT */
100062f4:	68fb      	ldr	r3, [r7, #12]
100062f6:	791a      	ldrb	r2, [r3, #4]
100062f8:	2102      	movs	r1, #2
100062fa:	430a      	orrs	r2, r1
100062fc:	711a      	strb	r2, [r3, #4]
          }
        }
        /* Initialize the Index, block block count for the next read */
        data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
100062fe:	69fa      	ldr	r2, [r7, #28]
10006300:	23c2      	movs	r3, #194	; 0xc2
10006302:	005b      	lsls	r3, r3, #1
10006304:	21ff      	movs	r1, #255	; 0xff
10006306:	50d1      	str	r1, [r2, r3]
        data_ptr->written_block_counter = 0U;
10006308:	69fb      	ldr	r3, [r7, #28]
1000630a:	2200      	movs	r2, #0
1000630c:	659a      	str	r2, [r3, #88]	; 0x58
1000630e:	e010      	b.n	10006332 <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
    {
      /*
       * EVALUATION RESULT : CACHE ALREADY UPDATED
       * If cache table is already updated for the block, no need to evaluate the block
       */
      data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10006310:	69fa      	ldr	r2, [r7, #28]
10006312:	23c2      	movs	r3, #194	; 0xc2
10006314:	005b      	lsls	r3, r3, #1
10006316:	21ff      	movs	r1, #255	; 0xff
10006318:	50d1      	str	r1, [r2, r3]
      data_ptr->written_block_counter = 0U;
1000631a:	69fb      	ldr	r3, [r7, #28]
1000631c:	2200      	movs	r2, #0
1000631e:	659a      	str	r2, [r3, #88]	; 0x58
10006320:	e007      	b.n	10006332 <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
    }
  }
  else
  {    
    data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10006322:	69fa      	ldr	r2, [r7, #28]
10006324:	23c2      	movs	r3, #194	; 0xc2
10006326:	005b      	lsls	r3, r3, #1
10006328:	21ff      	movs	r1, #255	; 0xff
1000632a:	50d1      	str	r1, [r2, r3]
    data_ptr->written_block_counter = 0U;
1000632c:	69fb      	ldr	r3, [r7, #28]
1000632e:	2200      	movs	r2, #0
10006330:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
10006332:	46bd      	mov	sp, r7
10006334:	b008      	add	sp, #32
10006336:	bd80      	pop	{r7, pc}
10006338:	20000718 	.word	0x20000718

1000633c <E_EEPROM_XMC1_lUpdateCacheBlockRead>:
 * Return value   : uint32_t
 *
 * Description    : Utility function to read data block from flash for cache update function.
 */
static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void)
{
1000633c:	b580      	push	{r7, lr}
1000633e:	b082      	sub	sp, #8
10006340:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006342:	4b0f      	ldr	r3, [pc, #60]	; (10006380 <E_EEPROM_XMC1_lUpdateCacheBlockRead+0x44>)
10006344:	685b      	ldr	r3, [r3, #4]
10006346:	607b      	str	r3, [r7, #4]
  
  /* Set the Write Source pointer to the next block */
  data_ptr->curr_bank_src_addr = data_ptr->curr_bank_src_addr -  E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10006348:	687b      	ldr	r3, [r7, #4]
1000634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000634c:	3b10      	subs	r3, #16
1000634e:	1c1a      	adds	r2, r3, #0
10006350:	687b      	ldr	r3, [r7, #4]
10006352:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10006354:	f7fc fa82 	bl	1000285c <XMC_FLASH_ClearStatus>
  
  E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr,  (uint32_t*)(void*)data_ptr->read_write_buffer);
10006358:	687b      	ldr	r3, [r7, #4]
1000635a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1000635c:	687b      	ldr	r3, [r7, #4]
1000635e:	335c      	adds	r3, #92	; 0x5c
10006360:	1c10      	adds	r0, r2, #0
10006362:	1c19      	adds	r1, r3, #0
10006364:	f000 fcf8 	bl	10006d58 <E_EEPROM_XMC1_lReadSingleBlock>
  
  /* Increment number of read block counter  */
  data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
10006368:	687b      	ldr	r3, [r7, #4]
1000636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000636c:	1c5a      	adds	r2, r3, #1
1000636e:	687b      	ldr	r3, [r7, #4]
10006370:	659a      	str	r2, [r3, #88]	; 0x58
  
  return (E_EEPROM_XMC1_lGetFlashStatus());
10006372:	f000 fd1b 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
10006376:	1c03      	adds	r3, r0, #0
}
10006378:	1c18      	adds	r0, r3, #0
1000637a:	46bd      	mov	sp, r7
1000637c:	b002      	add	sp, #8
1000637e:	bd80      	pop	{r7, pc}
10006380:	20000718 	.word	0x20000718

10006384 <E_EEPROM_XMC1_lGetUsrBlockIndex>:
 * Return value   : uint32_t : returns array index pointer of block configuration
 *
 * Description    : This utility function will return the Index (location) of the block in the user configuration.
 */
static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number)
{
10006384:	b580      	push	{r7, lr}
10006386:	b084      	sub	sp, #16
10006388:	af00      	add	r7, sp, #0
1000638a:	1c02      	adds	r2, r0, #0
1000638c:	1dfb      	adds	r3, r7, #7
1000638e:	701a      	strb	r2, [r3, #0]
  uint32_t indx;
  E_EEPROM_XMC1_BLOCK_t  *block_ptr;
  
  indx = 0U;
10006390:	2300      	movs	r3, #0
10006392:	60fb      	str	r3, [r7, #12]
  block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
10006394:	4b12      	ldr	r3, [pc, #72]	; (100063e0 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
10006396:	681a      	ldr	r2, [r3, #0]
10006398:	68fb      	ldr	r3, [r7, #12]
1000639a:	00db      	lsls	r3, r3, #3
1000639c:	18d3      	adds	r3, r2, r3
1000639e:	60bb      	str	r3, [r7, #8]
  
  /* Check for max configured block count reached and block number is matched against the configured block numbers */
  while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_number) )
100063a0:	e005      	b.n	100063ae <E_EEPROM_XMC1_lGetUsrBlockIndex+0x2a>
  {
    indx++;
100063a2:	68fb      	ldr	r3, [r7, #12]
100063a4:	3301      	adds	r3, #1
100063a6:	60fb      	str	r3, [r7, #12]
    block_ptr++;
100063a8:	68bb      	ldr	r3, [r7, #8]
100063aa:	3308      	adds	r3, #8
100063ac:	60bb      	str	r3, [r7, #8]
  
  indx = 0U;
  block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
  
  /* Check for max configured block count reached and block number is matched against the configured block numbers */
  while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_number) )
100063ae:	4b0c      	ldr	r3, [pc, #48]	; (100063e0 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
100063b0:	7a5b      	ldrb	r3, [r3, #9]
100063b2:	1e1a      	subs	r2, r3, #0
100063b4:	68fb      	ldr	r3, [r7, #12]
100063b6:	429a      	cmp	r2, r3
100063b8:	d905      	bls.n	100063c6 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x42>
100063ba:	68bb      	ldr	r3, [r7, #8]
100063bc:	781b      	ldrb	r3, [r3, #0]
100063be:	1dfa      	adds	r2, r7, #7
100063c0:	7812      	ldrb	r2, [r2, #0]
100063c2:	429a      	cmp	r2, r3
100063c4:	d1ed      	bne.n	100063a2 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x1e>
  {
    indx++;
    block_ptr++;
  }
  
  if ( indx == E_EEPROM_XMC1_HANDLE_PTR->block_count )
100063c6:	4b06      	ldr	r3, [pc, #24]	; (100063e0 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
100063c8:	7a5b      	ldrb	r3, [r3, #9]
100063ca:	1e1a      	subs	r2, r3, #0
100063cc:	68fb      	ldr	r3, [r7, #12]
100063ce:	429a      	cmp	r2, r3
100063d0:	d101      	bne.n	100063d6 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x52>
  {
    indx = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
100063d2:	23ff      	movs	r3, #255	; 0xff
100063d4:	60fb      	str	r3, [r7, #12]
  }
  return (indx);
100063d6:	68fb      	ldr	r3, [r7, #12]
}
100063d8:	1c18      	adds	r0, r3, #0
100063da:	46bd      	mov	sp, r7
100063dc:	b004      	add	sp, #16
100063de:	bd80      	pop	{r7, pc}
100063e0:	20000718 	.word	0x20000718

100063e4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>:
 * Return value   : uint32_t - returns maximum physical flash blocks required to store the data.
 *
 * Description    : Calculates and return the number of FLASH blocks required for a user data block size.
 */
static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size)
{
100063e4:	b580      	push	{r7, lr}
100063e6:	b084      	sub	sp, #16
100063e8:	af00      	add	r7, sp, #0
100063ea:	6078      	str	r0, [r7, #4]
  uint32_t physical_blocks;

  physical_blocks = 1U;
100063ec:	2301      	movs	r3, #1
100063ee:	60fb      	str	r3, [r7, #12]
  /* If size is greater than the  */
  if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
100063f0:	687b      	ldr	r3, [r7, #4]
100063f2:	2b0c      	cmp	r3, #12
100063f4:	d90f      	bls.n	10006416 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x32>
  {
    size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
100063f6:	687b      	ldr	r3, [r7, #4]
100063f8:	3b0c      	subs	r3, #12
100063fa:	607b      	str	r3, [r7, #4]
    physical_blocks++;
100063fc:	68fb      	ldr	r3, [r7, #12]
100063fe:	3301      	adds	r3, #1
10006400:	60fb      	str	r3, [r7, #12]
    
    while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
10006402:	e005      	b.n	10006410 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x2c>
    {
      physical_blocks++;
10006404:	68fb      	ldr	r3, [r7, #12]
10006406:	3301      	adds	r3, #1
10006408:	60fb      	str	r3, [r7, #12]
      size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
1000640a:	687b      	ldr	r3, [r7, #4]
1000640c:	3b0e      	subs	r3, #14
1000640e:	607b      	str	r3, [r7, #4]
  if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
  {
    size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
    physical_blocks++;
    
    while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
10006410:	687b      	ldr	r3, [r7, #4]
10006412:	2b0e      	cmp	r3, #14
10006414:	d8f6      	bhi.n	10006404 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x20>
    {
      physical_blocks++;
      size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
    }
  }
  return(physical_blocks);
10006416:	68fb      	ldr	r3, [r7, #12]
}
10006418:	1c18      	adds	r0, r3, #0
1000641a:	46bd      	mov	sp, r7
1000641c:	b004      	add	sp, #16
1000641e:	bd80      	pop	{r7, pc}

10006420 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>:
 * Return value    : uint32_t : Number of physical blocks left in the bank for writing data.
 *
 * Description     : This routine will calculate the number of empty DFLASH blocks remaining in the bank.
 */
static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void)
{
10006420:	b580      	push	{r7, lr}
10006422:	b084      	sub	sp, #16
10006424:	af00      	add	r7, sp, #0
  uint32_t base_addr;
  uint32_t free_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006426:	4b0d      	ldr	r3, [pc, #52]	; (1000645c <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x3c>)
10006428:	685b      	ldr	r3, [r3, #4]
1000642a:	60bb      	str	r3, [r7, #8]
  
  if (data_ptr->current_bank == 0U)
1000642c:	68bb      	ldr	r3, [r7, #8]
1000642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10006430:	2b00      	cmp	r3, #0
10006432:	d102      	bne.n	1000643a <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x1a>
  {
    base_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10006434:	4b0a      	ldr	r3, [pc, #40]	; (10006460 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x40>)
10006436:	60fb      	str	r3, [r7, #12]
10006438:	e001      	b.n	1000643e <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x1e>
  }
  else
  {
    base_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
1000643a:	4b0a      	ldr	r3, [pc, #40]	; (10006464 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x44>)
1000643c:	60fb      	str	r3, [r7, #12]
  }
  free_blocks = (uint32_t)( ( (base_addr + E_EEPROM_XMC1_FLASH_BANK_SIZE) - (data_ptr->next_free_block_addr)  )
1000643e:	68bb      	ldr	r3, [r7, #8]
10006440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10006442:	68fa      	ldr	r2, [r7, #12]
10006444:	1ad3      	subs	r3, r2, r3
10006446:	22c0      	movs	r2, #192	; 0xc0
10006448:	0092      	lsls	r2, r2, #2
1000644a:	4694      	mov	ip, r2
1000644c:	4463      	add	r3, ip
1000644e:	091b      	lsrs	r3, r3, #4
10006450:	607b      	str	r3, [r7, #4]
                /  E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
  return (free_blocks);
10006452:	687b      	ldr	r3, [r7, #4]
}
10006454:	1c18      	adds	r0, r3, #0
10006456:	46bd      	mov	sp, r7
10006458:	b004      	add	sp, #16
1000645a:	bd80      	pop	{r7, pc}
1000645c:	20000718 	.word	0x20000718
10006460:	10010a00 	.word	0x10010a00
10006464:	10010d00 	.word	0x10010d00

10006468 <E_EEPROM_XMC1_lUpdateCurrBankInfo>:
 * Return value    : void
 *
 * Description     : Updates global addresses to keep track of writing and reading operations respectively.
 */
static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void)
{
10006468:	b580      	push	{r7, lr}
1000646a:	b082      	sub	sp, #8
1000646c:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000646e:	4b14      	ldr	r3, [pc, #80]	; (100064c0 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x58>)
10006470:	685b      	ldr	r3, [r3, #4]
10006472:	607b      	str	r3, [r7, #4]
  
  if (data_ptr->current_bank == 0U)
10006474:	687b      	ldr	r3, [r7, #4]
10006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10006478:	2b00      	cmp	r3, #0
1000647a:	d10f      	bne.n	1000649c <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x34>
  {
    data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
1000647c:	687b      	ldr	r3, [r7, #4]
1000647e:	4a11      	ldr	r2, [pc, #68]	; (100064c4 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
10006480:	651a      	str	r2, [r3, #80]	; 0x50
    data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10006482:	687b      	ldr	r3, [r7, #4]
10006484:	4a0f      	ldr	r2, [pc, #60]	; (100064c4 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
10006486:	641a      	str	r2, [r3, #64]	; 0x40
    data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
10006488:	687b      	ldr	r3, [r7, #4]
1000648a:	4a0f      	ldr	r2, [pc, #60]	; (100064c8 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
1000648c:	63da      	str	r2, [r3, #60]	; 0x3c
    data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
1000648e:	687b      	ldr	r3, [r7, #4]
10006490:	4a0e      	ldr	r2, [pc, #56]	; (100064cc <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x64>)
10006492:	645a      	str	r2, [r3, #68]	; 0x44
    data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
10006494:	687b      	ldr	r3, [r7, #4]
10006496:	4a0e      	ldr	r2, [pc, #56]	; (100064d0 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x68>)
10006498:	649a      	str	r2, [r3, #72]	; 0x48
1000649a:	e00e      	b.n	100064ba <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x52>
  }
  else
  {
    data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
1000649c:	687b      	ldr	r3, [r7, #4]
1000649e:	4a0a      	ldr	r2, [pc, #40]	; (100064c8 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
100064a0:	651a      	str	r2, [r3, #80]	; 0x50
    data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
100064a2:	687b      	ldr	r3, [r7, #4]
100064a4:	4a08      	ldr	r2, [pc, #32]	; (100064c8 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
100064a6:	641a      	str	r2, [r3, #64]	; 0x40
    data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
100064a8:	687b      	ldr	r3, [r7, #4]
100064aa:	4a06      	ldr	r2, [pc, #24]	; (100064c4 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
100064ac:	63da      	str	r2, [r3, #60]	; 0x3c
    data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
100064ae:	687b      	ldr	r3, [r7, #4]
100064b0:	4a07      	ldr	r2, [pc, #28]	; (100064d0 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x68>)
100064b2:	645a      	str	r2, [r3, #68]	; 0x44
    data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
100064b4:	687b      	ldr	r3, [r7, #4]
100064b6:	4a05      	ldr	r2, [pc, #20]	; (100064cc <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x64>)
100064b8:	649a      	str	r2, [r3, #72]	; 0x48
  }
}
100064ba:	46bd      	mov	sp, r7
100064bc:	b002      	add	sp, #8
100064be:	bd80      	pop	{r7, pc}
100064c0:	20000718 	.word	0x20000718
100064c4:	10010a00 	.word	0x10010a00
100064c8:	10010d00 	.word	0x10010d00
100064cc:	10010cff 	.word	0x10010cff
100064d0:	10010fff 	.word	0x10010fff

100064d4 <E_EEPROM_XMC1_lReadMarkerBlocks>:
 * Return value    : uint32_t : marker_dirty_state
 *
 * Description     : This function will read the Block marker contents
 */
static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void)
{
100064d4:	b580      	push	{r7, lr}
100064d6:	b088      	sub	sp, #32
100064d8:	af00      	add	r7, sp, #0
  uint32_t state_marker_cnt;
  uint32_t temp_state_marker;
  uint32_t marker_dirty_state;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100064da:	4b20      	ldr	r3, [pc, #128]	; (1000655c <E_EEPROM_XMC1_lReadMarkerBlocks+0x88>)
100064dc:	685b      	ldr	r3, [r3, #4]
100064de:	613b      	str	r3, [r7, #16]
  
  /* Initialize Local variables */
  temp_bank_state = 0U;
100064e0:	2300      	movs	r3, #0
100064e2:	61fb      	str	r3, [r7, #28]
  marker_dirty_state = 0U;
100064e4:	2300      	movs	r3, #0
100064e6:	617b      	str	r3, [r7, #20]
  state_marker_cnt = 0U;
100064e8:	2300      	movs	r3, #0
100064ea:	61bb      	str	r3, [r7, #24]
  do
  {
    /* Prepare the variables for state block update */
    temp_bank_state = (uint32_t)((uint32_t)temp_bank_state << (uint32_t)1U);
100064ec:	69fb      	ldr	r3, [r7, #28]
100064ee:	005b      	lsls	r3, r3, #1
100064f0:	61fb      	str	r3, [r7, #28]
    
    bank  = (uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS;
100064f2:	69bb      	ldr	r3, [r7, #24]
100064f4:	089b      	lsrs	r3, r3, #2
100064f6:	60fb      	str	r3, [r7, #12]
    block = (uint32_t)state_marker_cnt - ((uint32_t)bank << E_EEPROM_XMC1_TWO_BIT_POS);
100064f8:	68fb      	ldr	r3, [r7, #12]
100064fa:	009b      	lsls	r3, r3, #2
100064fc:	69ba      	ldr	r2, [r7, #24]
100064fe:	1ad3      	subs	r3, r2, r3
10006500:	60bb      	str	r3, [r7, #8]
    
    /* Read the state block of bank*/
    temp_state_marker = E_EEPROM_XMC1_lReadVerifyMarker(bank , block);
10006502:	68fa      	ldr	r2, [r7, #12]
10006504:	68bb      	ldr	r3, [r7, #8]
10006506:	1c10      	adds	r0, r2, #0
10006508:	1c19      	adds	r1, r3, #0
1000650a:	f000 f829 	bl	10006560 <E_EEPROM_XMC1_lReadVerifyMarker>
1000650e:	1c03      	adds	r3, r0, #0
10006510:	607b      	str	r3, [r7, #4]
    
    if (temp_state_marker == E_EEPROM_XMC1_ALL_ONES)
10006512:	687b      	ldr	r3, [r7, #4]
10006514:	3301      	adds	r3, #1
10006516:	d104      	bne.n	10006522 <E_EEPROM_XMC1_lReadMarkerBlocks+0x4e>
    {
     temp_bank_state |= 1U;
10006518:	69fb      	ldr	r3, [r7, #28]
1000651a:	2201      	movs	r2, #1
1000651c:	4313      	orrs	r3, r2
1000651e:	61fb      	str	r3, [r7, #28]
10006520:	e00c      	b.n	1000653c <E_EEPROM_XMC1_lReadMarkerBlocks+0x68>
    }
    else if (temp_state_marker == E_EEPROM_XMC1_ALL_ZEROS)
10006522:	687b      	ldr	r3, [r7, #4]
10006524:	2b00      	cmp	r3, #0
10006526:	d009      	beq.n	1000653c <E_EEPROM_XMC1_lReadMarkerBlocks+0x68>
    {
     temp_bank_state |= 0U;
    }
    else
    {
     indx = (uint32_t)((uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS);
10006528:	69bb      	ldr	r3, [r7, #24]
1000652a:	089b      	lsrs	r3, r3, #2
1000652c:	603b      	str	r3, [r7, #0]
     marker_dirty_state |= (uint32_t)((uint32_t)1U << (uint32_t)indx);
1000652e:	683b      	ldr	r3, [r7, #0]
10006530:	2201      	movs	r2, #1
10006532:	409a      	lsls	r2, r3
10006534:	1c13      	adds	r3, r2, #0
10006536:	697a      	ldr	r2, [r7, #20]
10006538:	4313      	orrs	r3, r2
1000653a:	617b      	str	r3, [r7, #20]
    }
    /* Update the counter "StateBlockCnt" */
    state_marker_cnt++;
1000653c:	69bb      	ldr	r3, [r7, #24]
1000653e:	3301      	adds	r3, #1
10006540:	61bb      	str	r3, [r7, #24]
  } while (state_marker_cnt < E_EEPROM_XMC1_EIGHT_BYTES);
10006542:	69bb      	ldr	r3, [r7, #24]
10006544:	2b07      	cmp	r3, #7
10006546:	d9d1      	bls.n	100064ec <E_EEPROM_XMC1_lReadMarkerBlocks+0x18>
  
  /* Update Global variables */
  data_ptr->init_gc_state = temp_bank_state;
10006548:	693a      	ldr	r2, [r7, #16]
1000654a:	23bc      	movs	r3, #188	; 0xbc
1000654c:	005b      	lsls	r3, r3, #1
1000654e:	69f9      	ldr	r1, [r7, #28]
10006550:	50d1      	str	r1, [r2, r3]
  
  return (marker_dirty_state);
10006552:	697b      	ldr	r3, [r7, #20]
}
10006554:	1c18      	adds	r0, r3, #0
10006556:	46bd      	mov	sp, r7
10006558:	b008      	add	sp, #32
1000655a:	bd80      	pop	{r7, pc}
1000655c:	20000718 	.word	0x20000718

10006560 <E_EEPROM_XMC1_lReadVerifyMarker>:
 *                    E_EEPROM_XMC1_MB_DIRTY
 *
 * Description    : This function will verify the marker contents read out from state page.
 */
static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block)
{
10006560:	b580      	push	{r7, lr}
10006562:	b08a      	sub	sp, #40	; 0x28
10006564:	af00      	add	r7, sp, #0
10006566:	6078      	str	r0, [r7, #4]
10006568:	6039      	str	r1, [r7, #0]
  uint32_t zeros_counter;
  uint32_t marker_block_addr;
  uint32_t *marker_array_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000656a:	4b2b      	ldr	r3, [pc, #172]	; (10006618 <E_EEPROM_XMC1_lReadVerifyMarker+0xb8>)
1000656c:	685b      	ldr	r3, [r3, #4]
1000656e:	617b      	str	r3, [r7, #20]
  
  ones_counter = 0U;
10006570:	2300      	movs	r3, #0
10006572:	61fb      	str	r3, [r7, #28]
  zeros_counter = 0U;
10006574:	2300      	movs	r3, #0
10006576:	61bb      	str	r3, [r7, #24]
  marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
10006578:	697b      	ldr	r3, [r7, #20]
1000657a:	335c      	adds	r3, #92	; 0x5c
1000657c:	613b      	str	r3, [r7, #16]
  
  /* Calculate the Marker Block address from bank and Block size*/
  marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
                      ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
1000657e:	687a      	ldr	r2, [r7, #4]
10006580:	1c13      	adds	r3, r2, #0
10006582:	005b      	lsls	r3, r3, #1
10006584:	189b      	adds	r3, r3, r2
10006586:	011b      	lsls	r3, r3, #4
10006588:	1c1a      	adds	r2, r3, #0
1000658a:	683b      	ldr	r3, [r7, #0]
1000658c:	18d3      	adds	r3, r2, r3
1000658e:	4a23      	ldr	r2, [pc, #140]	; (1000661c <E_EEPROM_XMC1_lReadVerifyMarker+0xbc>)
10006590:	4694      	mov	ip, r2
10006592:	4463      	add	r3, ip
  ones_counter = 0U;
  zeros_counter = 0U;
  marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
  
  /* Calculate the Marker Block address from bank and Block size*/
  marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
10006594:	011b      	lsls	r3, r3, #4
10006596:	60fb      	str	r3, [r7, #12]
                      ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
                      ((uint32_t)block * (uint32_t)E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10006598:	f7fc f960 	bl	1000285c <XMC_FLASH_ClearStatus>
  
  /* Read one complete block of data (4 Words = 128 bit) from the targeted Marker Block */
  E_EEPROM_XMC1_lReadSingleBlock(marker_block_addr, (uint32_t*)(void*)marker_array_ptr);
1000659c:	68fa      	ldr	r2, [r7, #12]
1000659e:	693b      	ldr	r3, [r7, #16]
100065a0:	1c10      	adds	r0, r2, #0
100065a2:	1c19      	adds	r1, r3, #0
100065a4:	f000 fbd8 	bl	10006d58 <E_EEPROM_XMC1_lReadSingleBlock>
  
  /* Check for any flash hardware errors*/
  if (E_EEPROM_XMC1_lGetFlashStatus())
100065a8:	f000 fc00 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
100065ac:	1e03      	subs	r3, r0, #0
100065ae:	d002      	beq.n	100065b6 <E_EEPROM_XMC1_lReadVerifyMarker+0x56>
  {
    /* Any Hardware errors will result in Dirty state*/
    return_val = E_EEPROM_XMC1_MB_DIRTY;
100065b0:	23dd      	movs	r3, #221	; 0xdd
100065b2:	623b      	str	r3, [r7, #32]
100065b4:	e02b      	b.n	1000660e <E_EEPROM_XMC1_lReadVerifyMarker+0xae>
  }
  else
  {
    for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
100065b6:	2300      	movs	r3, #0
100065b8:	627b      	str	r3, [r7, #36]	; 0x24
100065ba:	e016      	b.n	100065ea <E_EEPROM_XMC1_lReadVerifyMarker+0x8a>
    {
      /* Check for the Marker field and verify Marker either 0 or 1*/
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ZEROS)
100065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100065be:	009b      	lsls	r3, r3, #2
100065c0:	693a      	ldr	r2, [r7, #16]
100065c2:	18d3      	adds	r3, r2, r3
100065c4:	681b      	ldr	r3, [r3, #0]
100065c6:	2b00      	cmp	r3, #0
100065c8:	d102      	bne.n	100065d0 <E_EEPROM_XMC1_lReadVerifyMarker+0x70>
      {
        zeros_counter++;
100065ca:	69bb      	ldr	r3, [r7, #24]
100065cc:	3301      	adds	r3, #1
100065ce:	61bb      	str	r3, [r7, #24]
      }
      
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
100065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100065d2:	009b      	lsls	r3, r3, #2
100065d4:	693a      	ldr	r2, [r7, #16]
100065d6:	18d3      	adds	r3, r2, r3
100065d8:	681b      	ldr	r3, [r3, #0]
100065da:	3301      	adds	r3, #1
100065dc:	d102      	bne.n	100065e4 <E_EEPROM_XMC1_lReadVerifyMarker+0x84>
      {
        ones_counter++;
100065de:	69fb      	ldr	r3, [r7, #28]
100065e0:	3301      	adds	r3, #1
100065e2:	61fb      	str	r3, [r7, #28]
    /* Any Hardware errors will result in Dirty state*/
    return_val = E_EEPROM_XMC1_MB_DIRTY;
  }
  else
  {
    for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
100065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100065e6:	3301      	adds	r3, #1
100065e8:	627b      	str	r3, [r7, #36]	; 0x24
100065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100065ec:	2b03      	cmp	r3, #3
100065ee:	d9e5      	bls.n	100065bc <E_EEPROM_XMC1_lReadVerifyMarker+0x5c>
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
      {
        ones_counter++;
      }
    }
    if (ones_counter == E_EEPROM_XMC1_FOUR_BYTES)
100065f0:	69fb      	ldr	r3, [r7, #28]
100065f2:	2b04      	cmp	r3, #4
100065f4:	d103      	bne.n	100065fe <E_EEPROM_XMC1_lReadVerifyMarker+0x9e>
    {
      return_val = E_EEPROM_XMC1_ALL_ONES;
100065f6:	2301      	movs	r3, #1
100065f8:	425b      	negs	r3, r3
100065fa:	623b      	str	r3, [r7, #32]
100065fc:	e007      	b.n	1000660e <E_EEPROM_XMC1_lReadVerifyMarker+0xae>
    }
    else if (zeros_counter == E_EEPROM_XMC1_FOUR_BYTES)
100065fe:	69bb      	ldr	r3, [r7, #24]
10006600:	2b04      	cmp	r3, #4
10006602:	d102      	bne.n	1000660a <E_EEPROM_XMC1_lReadVerifyMarker+0xaa>
    {
      return_val = E_EEPROM_XMC1_ALL_ZEROS;
10006604:	2300      	movs	r3, #0
10006606:	623b      	str	r3, [r7, #32]
10006608:	e001      	b.n	1000660e <E_EEPROM_XMC1_lReadVerifyMarker+0xae>
    }
    else
    {
      return_val = E_EEPROM_XMC1_MB_DIRTY;
1000660a:	23dd      	movs	r3, #221	; 0xdd
1000660c:	623b      	str	r3, [r7, #32]
    }
  }
  return (return_val);
1000660e:	6a3b      	ldr	r3, [r7, #32]
}
10006610:	1c18      	adds	r0, r3, #0
10006612:	46bd      	mov	sp, r7
10006614:	b00a      	add	sp, #40	; 0x28
10006616:	bd80      	pop	{r7, pc}
10006618:	20000718 	.word	0x20000718
1000661c:	010010a0 	.word	0x010010a0

10006620 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>:
 * Return value    : void
 *
 * Description     : This function will update the write buffer for a particular bank marker state
 */
static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void)
{
10006620:	b580      	push	{r7, lr}
10006622:	b084      	sub	sp, #16
10006624:	af00      	add	r7, sp, #0
  uint32_t *array_ptr;
  uint32_t indx;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006626:	4b0c      	ldr	r3, [pc, #48]	; (10006658 <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x38>)
10006628:	685b      	ldr	r3, [r3, #4]
1000662a:	60bb      	str	r3, [r7, #8]
  
  array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
1000662c:	68bb      	ldr	r3, [r7, #8]
1000662e:	335c      	adds	r3, #92	; 0x5c
10006630:	607b      	str	r3, [r7, #4]
  for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
10006632:	2300      	movs	r3, #0
10006634:	60fb      	str	r3, [r7, #12]
10006636:	e008      	b.n	1000664a <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x2a>
  {
    array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
10006638:	68fb      	ldr	r3, [r7, #12]
1000663a:	009b      	lsls	r3, r3, #2
1000663c:	687a      	ldr	r2, [r7, #4]
1000663e:	18d3      	adds	r3, r2, r3
10006640:	2200      	movs	r2, #0
10006642:	601a      	str	r2, [r3, #0]
  uint32_t indx;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
  
  array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
  for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
10006644:	68fb      	ldr	r3, [r7, #12]
10006646:	3301      	adds	r3, #1
10006648:	60fb      	str	r3, [r7, #12]
1000664a:	68fb      	ldr	r3, [r7, #12]
1000664c:	2b03      	cmp	r3, #3
1000664e:	d9f3      	bls.n	10006638 <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x18>
  {
    array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
  }

}
10006650:	46bd      	mov	sp, r7
10006652:	b004      	add	sp, #16
10006654:	bd80      	pop	{r7, pc}
10006656:	46c0      	nop			; (mov r8, r8)
10006658:	20000718 	.word	0x20000718

1000665c <E_EEPROM_XMC1_lSetMarkerPageBuffer>:
 *                     ----------------------------------------------------------------------
 *                     ----------------------------------------------------------------------
 *                     BLOCK16-  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
 */
static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state)
{
1000665c:	b580      	push	{r7, lr}
1000665e:	b088      	sub	sp, #32
10006660:	af00      	add	r7, sp, #0
10006662:	6078      	str	r0, [r7, #4]
  uint32_t bit_mask;
  uint32_t word_data;
  uint32_t *array_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006664:	4b1e      	ldr	r3, [pc, #120]	; (100066e0 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x84>)
10006666:	685b      	ldr	r3, [r3, #4]
10006668:	60fb      	str	r3, [r7, #12]
  
  array_ptr = (uint32_t*)(void*)data_ptr->page_write_buffer;
1000666a:	68fb      	ldr	r3, [r7, #12]
1000666c:	3370      	adds	r3, #112	; 0x70
1000666e:	613b      	str	r3, [r7, #16]
   * Depending upon the state received check the bit positions where a state marker has to be updated to
   * get the actual state. Fill the first four blocks of the page with the state marker information.
   */

  /* Fill the first rest 4 blocks of the page with marker data  */
  for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
10006670:	2300      	movs	r3, #0
10006672:	61bb      	str	r3, [r7, #24]
10006674:	e01e      	b.n	100066b4 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x58>
  {
    if ( (state & (E_EEPROM_XMC1_MARKER_POSITION >> bit_mask )) == 0U )
10006676:	69bb      	ldr	r3, [r7, #24]
10006678:	2280      	movs	r2, #128	; 0x80
1000667a:	40da      	lsrs	r2, r3
1000667c:	1c13      	adds	r3, r2, #0
1000667e:	687a      	ldr	r2, [r7, #4]
10006680:	4013      	ands	r3, r2
10006682:	d102      	bne.n	1000668a <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x2e>
    {
       word_data = E_EEPROM_XMC1_ALL_ZEROS;
10006684:	2300      	movs	r3, #0
10006686:	617b      	str	r3, [r7, #20]
10006688:	e002      	b.n	10006690 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x34>
    }
    else
    {
       word_data = E_EEPROM_XMC1_ALL_ONES;
1000668a:	2301      	movs	r3, #1
1000668c:	425b      	negs	r3, r3
1000668e:	617b      	str	r3, [r7, #20]
    }
    for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
10006690:	2300      	movs	r3, #0
10006692:	61fb      	str	r3, [r7, #28]
10006694:	e008      	b.n	100066a8 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x4c>
    {
       *array_ptr = word_data;
10006696:	693b      	ldr	r3, [r7, #16]
10006698:	697a      	ldr	r2, [r7, #20]
1000669a:	601a      	str	r2, [r3, #0]
       array_ptr++;
1000669c:	693b      	ldr	r3, [r7, #16]
1000669e:	3304      	adds	r3, #4
100066a0:	613b      	str	r3, [r7, #16]
    }
    else
    {
       word_data = E_EEPROM_XMC1_ALL_ONES;
    }
    for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
100066a2:	69fb      	ldr	r3, [r7, #28]
100066a4:	3301      	adds	r3, #1
100066a6:	61fb      	str	r3, [r7, #28]
100066a8:	69fb      	ldr	r3, [r7, #28]
100066aa:	2b03      	cmp	r3, #3
100066ac:	d9f3      	bls.n	10006696 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x3a>
   * Depending upon the state received check the bit positions where a state marker has to be updated to
   * get the actual state. Fill the first four blocks of the page with the state marker information.
   */

  /* Fill the first rest 4 blocks of the page with marker data  */
  for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
100066ae:	69bb      	ldr	r3, [r7, #24]
100066b0:	3301      	adds	r3, #1
100066b2:	61bb      	str	r3, [r7, #24]
100066b4:	69bb      	ldr	r3, [r7, #24]
100066b6:	2b03      	cmp	r3, #3
100066b8:	d9dd      	bls.n	10006676 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x1a>
       array_ptr++;
    }

  }
  /* Fill the first rest 12 blocks of the page with all ones*/
  for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
100066ba:	2300      	movs	r3, #0
100066bc:	61fb      	str	r3, [r7, #28]
100066be:	e009      	b.n	100066d4 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x78>
  {
    *array_ptr = E_EEPROM_XMC1_ALL_ONES;
100066c0:	693b      	ldr	r3, [r7, #16]
100066c2:	2201      	movs	r2, #1
100066c4:	4252      	negs	r2, r2
100066c6:	601a      	str	r2, [r3, #0]
    array_ptr++;
100066c8:	693b      	ldr	r3, [r7, #16]
100066ca:	3304      	adds	r3, #4
100066cc:	613b      	str	r3, [r7, #16]
       array_ptr++;
    }

  }
  /* Fill the first rest 12 blocks of the page with all ones*/
  for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
100066ce:	69fb      	ldr	r3, [r7, #28]
100066d0:	3301      	adds	r3, #1
100066d2:	61fb      	str	r3, [r7, #28]
100066d4:	69fb      	ldr	r3, [r7, #28]
100066d6:	2b2f      	cmp	r3, #47	; 0x2f
100066d8:	d9f2      	bls.n	100066c0 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x64>
  {
    *array_ptr = E_EEPROM_XMC1_ALL_ONES;
    array_ptr++;
  }

}
100066da:	46bd      	mov	sp, r7
100066dc:	b008      	add	sp, #32
100066de:	bd80      	pop	{r7, pc}
100066e0:	20000718 	.word	0x20000718

100066e4 <E_EEPROM_XMC1_lEraseBank>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Erases the particular bank
 */
static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address)
{
100066e4:	b580      	push	{r7, lr}
100066e6:	b084      	sub	sp, #16
100066e8:	af00      	add	r7, sp, #0
100066ea:	6078      	str	r0, [r7, #4]
  uint32_t indx;
  uint32_t status;
  /* Clear all error status flags before flash operation*/
  page_address = ((page_address) - E_EEPROM_XMC1_FLASH_PAGE_SIZE );
100066ec:	687b      	ldr	r3, [r7, #4]
100066ee:	3b01      	subs	r3, #1
100066f0:	3bff      	subs	r3, #255	; 0xff
100066f2:	607b      	str	r3, [r7, #4]
  page_address += 1U;
100066f4:	687b      	ldr	r3, [r7, #4]
100066f6:	3301      	adds	r3, #1
100066f8:	607b      	str	r3, [r7, #4]
  indx = 0U;
100066fa:	2300      	movs	r3, #0
100066fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    /* Clear all error status flags before flash operation*/
    XMC_FLASH_ClearStatus();
100066fe:	f7fc f8ad 	bl	1000285c <XMC_FLASH_ClearStatus>
    
    E_EEPROM_XMC1_lEraseSinglePage(page_address);
10006702:	687b      	ldr	r3, [r7, #4]
10006704:	1c18      	adds	r0, r3, #0
10006706:	f000 fb45 	bl	10006d94 <E_EEPROM_XMC1_lEraseSinglePage>
    
    status = E_EEPROM_XMC1_lGetFlashStatus();
1000670a:	f000 fb4f 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
1000670e:	1c03      	adds	r3, r0, #0
10006710:	60bb      	str	r3, [r7, #8]
    
    page_address = page_address - (E_EEPROM_XMC1_FLASH_PAGE_SIZE );
10006712:	687b      	ldr	r3, [r7, #4]
10006714:	3b01      	subs	r3, #1
10006716:	3bff      	subs	r3, #255	; 0xff
10006718:	607b      	str	r3, [r7, #4]
    indx++;
1000671a:	68fb      	ldr	r3, [r7, #12]
1000671c:	3301      	adds	r3, #1
1000671e:	60fb      	str	r3, [r7, #12]
  } while ((indx <E_EEPROM_XMC1_BANK_PAGES) && (status == 0U));
10006720:	68fb      	ldr	r3, [r7, #12]
10006722:	2b02      	cmp	r3, #2
10006724:	d802      	bhi.n	1000672c <E_EEPROM_XMC1_lEraseBank+0x48>
10006726:	68bb      	ldr	r3, [r7, #8]
10006728:	2b00      	cmp	r3, #0
1000672a:	d0e8      	beq.n	100066fe <E_EEPROM_XMC1_lEraseBank+0x1a>
  
  return (status);
1000672c:	68bb      	ldr	r3, [r7, #8]
}
1000672e:	1c18      	adds	r0, r3, #0
10006730:	46bd      	mov	sp, r7
10006732:	b004      	add	sp, #16
10006734:	bd80      	pop	{r7, pc}
10006736:	46c0      	nop			; (mov r8, r8)

10006738 <E_EEPROM_XMC1_lGCWrite>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Local function to write data into specified location during GC operation
 */
static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address)
{
10006738:	b580      	push	{r7, lr}
1000673a:	b084      	sub	sp, #16
1000673c:	af00      	add	r7, sp, #0
1000673e:	6078      	str	r0, [r7, #4]
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006740:	4b0a      	ldr	r3, [pc, #40]	; (1000676c <E_EEPROM_XMC1_lGCWrite+0x34>)
10006742:	685b      	ldr	r3, [r3, #4]
10006744:	60fb      	str	r3, [r7, #12]
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10006746:	f7fc f889 	bl	1000285c <XMC_FLASH_ClearStatus>
  
  /* Write a single block into flash*/
  E_EEPROM_XMC1_lWriteSingleBlock(block_address, (uint32_t*)(void*)data_ptr->read_write_buffer);
1000674a:	68fb      	ldr	r3, [r7, #12]
1000674c:	335c      	adds	r3, #92	; 0x5c
1000674e:	687a      	ldr	r2, [r7, #4]
10006750:	1c10      	adds	r0, r2, #0
10006752:	1c19      	adds	r1, r3, #0
10006754:	f000 faf0 	bl	10006d38 <E_EEPROM_XMC1_lWriteSingleBlock>
  status = E_EEPROM_XMC1_lGetFlashStatus();
10006758:	f000 fb28 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
1000675c:	1c03      	adds	r3, r0, #0
1000675e:	60bb      	str	r3, [r7, #8]
  return (status);
10006760:	68bb      	ldr	r3, [r7, #8]
}
10006762:	1c18      	adds	r0, r3, #0
10006764:	46bd      	mov	sp, r7
10006766:	b004      	add	sp, #16
10006768:	bd80      	pop	{r7, pc}
1000676a:	46c0      	nop			; (mov r8, r8)
1000676c:	20000718 	.word	0x20000718

10006770 <E_EEPROM_XMC1_lLocalWrite>:
 * Description     : Common local write function to do write block function or invalidate block.
 */
static uint32_t E_EEPROM_XMC1_lLocalWrite( uint8_t block_number,
                                           uint8_t* data_buffer_ptr,
                                           uint32_t invalidate)
{
10006770:	b580      	push	{r7, lr}
10006772:	b08c      	sub	sp, #48	; 0x30
10006774:	af00      	add	r7, sp, #0
10006776:	60b9      	str	r1, [r7, #8]
10006778:	607a      	str	r2, [r7, #4]
1000677a:	230f      	movs	r3, #15
1000677c:	18fb      	adds	r3, r7, r3
1000677e:	1c02      	adds	r2, r0, #0
10006780:	701a      	strb	r2, [r3, #0]
  uint32_t user_block_index;
  uint32_t remaining_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_BLOCK_t *block_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006782:	4b3b      	ldr	r3, [pc, #236]	; (10006870 <E_EEPROM_XMC1_lLocalWrite+0x100>)
10006784:	685b      	ldr	r3, [r3, #4]
10006786:	627b      	str	r3, [r7, #36]	; 0x24

  status = 0U;
10006788:	2300      	movs	r3, #0
1000678a:	62fb      	str	r3, [r7, #44]	; 0x2c
  perform_write = 0U;
1000678c:	2300      	movs	r3, #0
1000678e:	62bb      	str	r3, [r7, #40]	; 0x28
  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10006790:	230f      	movs	r3, #15
10006792:	18fb      	adds	r3, r7, r3
10006794:	781b      	ldrb	r3, [r3, #0]
10006796:	1c18      	adds	r0, r3, #0
10006798:	f7ff fdf4 	bl	10006384 <E_EEPROM_XMC1_lGetUsrBlockIndex>
1000679c:	1c03      	adds	r3, r0, #0
1000679e:	623b      	str	r3, [r7, #32]
  block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
100067a0:	4b33      	ldr	r3, [pc, #204]	; (10006870 <E_EEPROM_XMC1_lLocalWrite+0x100>)
100067a2:	681a      	ldr	r2, [r3, #0]
100067a4:	6a3b      	ldr	r3, [r7, #32]
100067a6:	00db      	lsls	r3, r3, #3
100067a8:	18d3      	adds	r3, r2, r3
100067aa:	61fb      	str	r3, [r7, #28]
  
  flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
100067ac:	69fb      	ldr	r3, [r7, #28]
100067ae:	685b      	ldr	r3, [r3, #4]
100067b0:	1c18      	adds	r0, r3, #0
100067b2:	f7ff fe17 	bl	100063e4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
100067b6:	1c03      	adds	r3, r0, #0
100067b8:	61bb      	str	r3, [r7, #24]
  remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
100067ba:	f7ff fe31 	bl	10006420 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>
100067be:	1c03      	adds	r3, r0, #0
100067c0:	617b      	str	r3, [r7, #20]
  
  if (remaining_blocks < flash_blocks)
100067c2:	697a      	ldr	r2, [r7, #20]
100067c4:	69bb      	ldr	r3, [r7, #24]
100067c6:	429a      	cmp	r2, r3
100067c8:	d228      	bcs.n	1000681c <E_EEPROM_XMC1_lLocalWrite+0xac>
  {
    /* Doesn't do Garbage collection if, GUI option garbage collection is disabled*/
    if (E_EEPROM_XMC1_HANDLE_PTR->garbage_collection == 1U)
100067ca:	4b29      	ldr	r3, [pc, #164]	; (10006870 <E_EEPROM_XMC1_lLocalWrite+0x100>)
100067cc:	7b1b      	ldrb	r3, [r3, #12]
100067ce:	2b01      	cmp	r3, #1
100067d0:	d121      	bne.n	10006816 <E_EEPROM_XMC1_lLocalWrite+0xa6>
    {
      /* Request for Garbage Collection and continue */
      data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
100067d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100067d4:	23ba      	movs	r3, #186	; 0xba
100067d6:	005b      	lsls	r3, r3, #1
100067d8:	2104      	movs	r1, #4
100067da:	50d1      	str	r1, [r2, r3]
      E_EEPROM_XMC1_lGarbageCollection();
100067dc:	f7ff f9da 	bl	10005b94 <E_EEPROM_XMC1_lGarbageCollection>
      
      /*Check the size of the GC requested block to check if space is available in the new bank or not.*/
      flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
100067e0:	69fb      	ldr	r3, [r7, #28]
100067e2:	685b      	ldr	r3, [r3, #4]
100067e4:	1c18      	adds	r0, r3, #0
100067e6:	f7ff fdfd 	bl	100063e4 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
100067ea:	1c03      	adds	r3, r0, #0
100067ec:	61bb      	str	r3, [r7, #24]
      remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
100067ee:	f7ff fe17 	bl	10006420 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>
100067f2:	1c03      	adds	r3, r0, #0
100067f4:	617b      	str	r3, [r7, #20]
      
      /* Check for GC overflows the complete space in the new bank, hence cant write the GC triggered block*/
      if ((remaining_blocks >= flash_blocks)&&(data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE))
100067f6:	697a      	ldr	r2, [r7, #20]
100067f8:	69bb      	ldr	r3, [r7, #24]
100067fa:	429a      	cmp	r2, r3
100067fc:	d308      	bcc.n	10006810 <E_EEPROM_XMC1_lLocalWrite+0xa0>
100067fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006800:	23ba      	movs	r3, #186	; 0xba
10006802:	005b      	lsls	r3, r3, #1
10006804:	58d3      	ldr	r3, [r2, r3]
10006806:	2b0a      	cmp	r3, #10
10006808:	d102      	bne.n	10006810 <E_EEPROM_XMC1_lLocalWrite+0xa0>
      {
        perform_write = 1U;
1000680a:	2301      	movs	r3, #1
1000680c:	62bb      	str	r3, [r7, #40]	; 0x28
1000680e:	e007      	b.n	10006820 <E_EEPROM_XMC1_lLocalWrite+0xb0>
      }
      else
      {
        status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
10006810:	2305      	movs	r3, #5
10006812:	62fb      	str	r3, [r7, #44]	; 0x2c
10006814:	e004      	b.n	10006820 <E_EEPROM_XMC1_lLocalWrite+0xb0>
      }
    }
    else
    {
      status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_MEMORY_BANK_FULL;
10006816:	2306      	movs	r3, #6
10006818:	62fb      	str	r3, [r7, #44]	; 0x2c
1000681a:	e001      	b.n	10006820 <E_EEPROM_XMC1_lLocalWrite+0xb0>
    }
  }
  else
  {
    perform_write = 1U;
1000681c:	2301      	movs	r3, #1
1000681e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  /* Write operation Starts */
  if (perform_write == 1U)
10006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006822:	2b01      	cmp	r3, #1
10006824:	d11f      	bne.n	10006866 <E_EEPROM_XMC1_lLocalWrite+0xf6>
  {
    data_ptr->written_block_counter = 0U;
10006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006828:	2200      	movs	r2, #0
1000682a:	659a      	str	r2, [r3, #88]	; 0x58
    if (invalidate == 1U)
1000682c:	687b      	ldr	r3, [r7, #4]
1000682e:	2b01      	cmp	r3, #1
10006830:	d10a      	bne.n	10006848 <E_EEPROM_XMC1_lLocalWrite+0xd8>
    {
      status = E_EEPROM_XMC1_lHandleInvalidReq(block_number, user_block_index);
10006832:	230f      	movs	r3, #15
10006834:	18fb      	adds	r3, r7, r3
10006836:	781a      	ldrb	r2, [r3, #0]
10006838:	6a3b      	ldr	r3, [r7, #32]
1000683a:	1c10      	adds	r0, r2, #0
1000683c:	1c19      	adds	r1, r3, #0
1000683e:	f000 f8c9 	bl	100069d4 <E_EEPROM_XMC1_lHandleInvalidReq>
10006842:	1c03      	adds	r3, r0, #0
10006844:	62fb      	str	r3, [r7, #44]	; 0x2c
10006846:	e009      	b.n	1000685c <E_EEPROM_XMC1_lLocalWrite+0xec>
    }
    else
    {
      status = E_EEPROM_XMC1_lHandleWriteReq(block_number, data_buffer_ptr);
10006848:	230f      	movs	r3, #15
1000684a:	18fb      	adds	r3, r7, r3
1000684c:	781a      	ldrb	r2, [r3, #0]
1000684e:	68bb      	ldr	r3, [r7, #8]
10006850:	1c10      	adds	r0, r2, #0
10006852:	1c19      	adds	r1, r3, #0
10006854:	f000 f80e 	bl	10006874 <E_EEPROM_XMC1_lHandleWriteReq>
10006858:	1c03      	adds	r3, r0, #0
1000685a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (status != 0U)
1000685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000685e:	2b00      	cmp	r3, #0
10006860:	d001      	beq.n	10006866 <E_EEPROM_XMC1_lLocalWrite+0xf6>
    {
       status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
10006862:	2301      	movs	r3, #1
10006864:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  return (status);
10006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
10006868:	1c18      	adds	r0, r3, #0
1000686a:	46bd      	mov	sp, r7
1000686c:	b00c      	add	sp, #48	; 0x30
1000686e:	bd80      	pop	{r7, pc}
10006870:	20000718 	.word	0x20000718

10006874 <E_EEPROM_XMC1_lHandleWriteReq>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Handle function to write one complete data block into flash.
 */
static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr)
{
10006874:	b580      	push	{r7, lr}
10006876:	b088      	sub	sp, #32
10006878:	af00      	add	r7, sp, #0
1000687a:	1c02      	adds	r2, r0, #0
1000687c:	6039      	str	r1, [r7, #0]
1000687e:	1dfb      	adds	r3, r7, #7
10006880:	701a      	strb	r2, [r3, #0]
  uint32_t user_block_index;
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_BLOCK_t *block_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006882:	4b53      	ldr	r3, [pc, #332]	; (100069d0 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
10006884:	685b      	ldr	r3, [r3, #4]
10006886:	61bb      	str	r3, [r7, #24]
  

  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10006888:	1dfb      	adds	r3, r7, #7
1000688a:	781b      	ldrb	r3, [r3, #0]
1000688c:	1c18      	adds	r0, r3, #0
1000688e:	f7ff fd79 	bl	10006384 <E_EEPROM_XMC1_lGetUsrBlockIndex>
10006892:	1c03      	adds	r3, r0, #0
10006894:	617b      	str	r3, [r7, #20]
  block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
10006896:	4b4e      	ldr	r3, [pc, #312]	; (100069d0 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
10006898:	681a      	ldr	r2, [r3, #0]
1000689a:	697b      	ldr	r3, [r7, #20]
1000689c:	00db      	lsls	r3, r3, #3
1000689e:	18d3      	adds	r3, r2, r3
100068a0:	613b      	str	r3, [r7, #16]
  block_size = block_ptr->size;
100068a2:	693b      	ldr	r3, [r7, #16]
100068a4:	685b      	ldr	r3, [r3, #4]
100068a6:	60fb      	str	r3, [r7, #12]
  data_ptr->user_write_bytes_count = 0U;
100068a8:	69ba      	ldr	r2, [r7, #24]
100068aa:	23b8      	movs	r3, #184	; 0xb8
100068ac:	005b      	lsls	r3, r3, #1
100068ae:	2100      	movs	r1, #0
100068b0:	50d1      	str	r1, [r2, r3]
  data_ptr->user_write_state = E_EEPROM_XMC1_FIRST_BLOCK_WRITE;
100068b2:	69ba      	ldr	r2, [r7, #24]
100068b4:	23c4      	movs	r3, #196	; 0xc4
100068b6:	005b      	lsls	r3, r3, #1
100068b8:	2101      	movs	r1, #1
100068ba:	50d1      	str	r1, [r2, r3]
  status = 0U;
100068bc:	2300      	movs	r3, #0
100068be:	61fb      	str	r3, [r7, #28]
  do
  {
    switch (data_ptr->user_write_state)
100068c0:	69ba      	ldr	r2, [r7, #24]
100068c2:	23c4      	movs	r3, #196	; 0xc4
100068c4:	005b      	lsls	r3, r3, #1
100068c6:	58d3      	ldr	r3, [r2, r3]
100068c8:	2b02      	cmp	r3, #2
100068ca:	d002      	beq.n	100068d2 <E_EEPROM_XMC1_lHandleWriteReq+0x5e>
100068cc:	2b03      	cmp	r3, #3
100068ce:	d012      	beq.n	100068f6 <E_EEPROM_XMC1_lHandleWriteReq+0x82>
100068d0:	e04a      	b.n	10006968 <E_EEPROM_XMC1_lHandleWriteReq+0xf4>
    {
      case E_EEPROM_XMC1_NEXT_BLOCK_WRITE:
      status = E_EEPROM_XMC1_lWriteDataBlock();
100068d2:	f000 f98f 	bl	10006bf4 <E_EEPROM_XMC1_lWriteDataBlock>
100068d6:	1c03      	adds	r3, r0, #0
100068d8:	61fb      	str	r3, [r7, #28]
      if (status == (uint32_t)0U)
100068da:	69fb      	ldr	r3, [r7, #28]
100068dc:	2b00      	cmp	r3, #0
100068de:	d109      	bne.n	100068f4 <E_EEPROM_XMC1_lHandleWriteReq+0x80>
      {
        E_EEPROM_XMC1_lPopulateNextBlock(block_number,data_buffer_ptr,block_size);
100068e0:	1dfb      	adds	r3, r7, #7
100068e2:	7819      	ldrb	r1, [r3, #0]
100068e4:	683a      	ldr	r2, [r7, #0]
100068e6:	68fb      	ldr	r3, [r7, #12]
100068e8:	1c08      	adds	r0, r1, #0
100068ea:	1c11      	adds	r1, r2, #0
100068ec:	1c1a      	adds	r2, r3, #0
100068ee:	f000 f929 	bl	10006b44 <E_EEPROM_XMC1_lPopulateNextBlock>
      }
      break;
100068f2:	e043      	b.n	1000697c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
100068f4:	e042      	b.n	1000697c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
      
      case E_EEPROM_XMC1_LAST_BLOCK_WRITE:
      status = E_EEPROM_XMC1_lWriteDataBlock();
100068f6:	f000 f97d 	bl	10006bf4 <E_EEPROM_XMC1_lWriteDataBlock>
100068fa:	1c03      	adds	r3, r0, #0
100068fc:	61fb      	str	r3, [r7, #28]
      if (status == (uint32_t)0U)
100068fe:	69fb      	ldr	r3, [r7, #28]
10006900:	2b00      	cmp	r3, #0
10006902:	d130      	bne.n	10006966 <E_EEPROM_XMC1_lHandleWriteReq+0xf2>
      {
        /* Mark the block as inconsistent */
        data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
10006904:	69bb      	ldr	r3, [r7, #24]
10006906:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
10006908:	69bb      	ldr	r3, [r7, #24]
1000690a:	697a      	ldr	r2, [r7, #20]
1000690c:	00d2      	lsls	r2, r2, #3
1000690e:	50d1      	str	r1, [r2, r3]
        data_ptr->block_info[user_block_index].status.valid = 1U;
10006910:	69ba      	ldr	r2, [r7, #24]
10006912:	697b      	ldr	r3, [r7, #20]
10006914:	00db      	lsls	r3, r3, #3
10006916:	18d3      	adds	r3, r2, r3
10006918:	791a      	ldrb	r2, [r3, #4]
1000691a:	2101      	movs	r1, #1
1000691c:	430a      	orrs	r2, r1
1000691e:	711a      	strb	r2, [r3, #4]
        data_ptr->block_info[user_block_index].status.consistent = 1U;
10006920:	69ba      	ldr	r2, [r7, #24]
10006922:	697b      	ldr	r3, [r7, #20]
10006924:	00db      	lsls	r3, r3, #3
10006926:	18d3      	adds	r3, r2, r3
10006928:	791a      	ldrb	r2, [r3, #4]
1000692a:	2102      	movs	r1, #2
1000692c:	430a      	orrs	r2, r1
1000692e:	711a      	strb	r2, [r3, #4]
        if (E_EEPROM_XMC1_HANDLE_PTR->data_block_crc ==1U)
10006930:	4b27      	ldr	r3, [pc, #156]	; (100069d0 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
10006932:	7adb      	ldrb	r3, [r3, #11]
10006934:	2b01      	cmp	r3, #1
10006936:	d108      	bne.n	1000694a <E_EEPROM_XMC1_lHandleWriteReq+0xd6>
        {
          /* Updated Cache table Block Header status as CRC enabled block*/
          data_ptr->block_info[user_block_index].status.crc = 1U;
10006938:	69ba      	ldr	r2, [r7, #24]
1000693a:	697b      	ldr	r3, [r7, #20]
1000693c:	00db      	lsls	r3, r3, #3
1000693e:	18d3      	adds	r3, r2, r3
10006940:	791a      	ldrb	r2, [r3, #4]
10006942:	2108      	movs	r1, #8
10006944:	430a      	orrs	r2, r1
10006946:	711a      	strb	r2, [r3, #4]
10006948:	e007      	b.n	1000695a <E_EEPROM_XMC1_lHandleWriteReq+0xe6>
        }
        else
        {
          /* Updated Cache table Block Header status as CRC disabled block*/
          data_ptr->block_info[user_block_index].status.crc = 0U;
1000694a:	69ba      	ldr	r2, [r7, #24]
1000694c:	697b      	ldr	r3, [r7, #20]
1000694e:	00db      	lsls	r3, r3, #3
10006950:	18d3      	adds	r3, r2, r3
10006952:	791a      	ldrb	r2, [r3, #4]
10006954:	2108      	movs	r1, #8
10006956:	438a      	bics	r2, r1
10006958:	711a      	strb	r2, [r3, #4]
        }
        
        data_ptr->user_write_state = E_EEPROM_XMC1_BLOCK_WRITE_IDLE;
1000695a:	69ba      	ldr	r2, [r7, #24]
1000695c:	23c4      	movs	r3, #196	; 0xc4
1000695e:	005b      	lsls	r3, r3, #1
10006960:	2100      	movs	r1, #0
10006962:	50d1      	str	r1, [r2, r3]
      }
      break;
10006964:	e00a      	b.n	1000697c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
10006966:	e009      	b.n	1000697c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
      
      default:
      E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_FIRST_BLOCK_WRITE*/
10006968:	1dfb      	adds	r3, r7, #7
1000696a:	7819      	ldrb	r1, [r3, #0]
1000696c:	683a      	ldr	r2, [r7, #0]
1000696e:	68fb      	ldr	r3, [r7, #12]
10006970:	1c08      	adds	r0, r1, #0
10006972:	1c11      	adds	r1, r2, #0
10006974:	1c1a      	adds	r2, r3, #0
10006976:	f000 f883 	bl	10006a80 <E_EEPROM_XMC1_lPopulateFirstBlock>
      break;
1000697a:	46c0      	nop			; (mov r8, r8)
    }
  } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
1000697c:	69fb      	ldr	r3, [r7, #28]
1000697e:	2b00      	cmp	r3, #0
10006980:	d105      	bne.n	1000698e <E_EEPROM_XMC1_lHandleWriteReq+0x11a>
10006982:	69ba      	ldr	r2, [r7, #24]
10006984:	23c4      	movs	r3, #196	; 0xc4
10006986:	005b      	lsls	r3, r3, #1
10006988:	58d3      	ldr	r3, [r2, r3]
1000698a:	2b00      	cmp	r3, #0
1000698c:	d198      	bne.n	100068c0 <E_EEPROM_XMC1_lHandleWriteReq+0x4c>
  
  data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
1000698e:	69bb      	ldr	r3, [r7, #24]
10006990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                                   (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
10006992:	69bb      	ldr	r3, [r7, #24]
10006994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10006996:	011b      	lsls	r3, r3, #4
      E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_FIRST_BLOCK_WRITE*/
      break;
    }
  } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
  
  data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
10006998:	18d2      	adds	r2, r2, r3
1000699a:	69bb      	ldr	r3, [r7, #24]
1000699c:	64da      	str	r2, [r3, #76]	; 0x4c
                                   (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
  if (status != 0U)
1000699e:	69fb      	ldr	r3, [r7, #28]
100069a0:	2b00      	cmp	r3, #0
100069a2:	d00f      	beq.n	100069c4 <E_EEPROM_XMC1_lHandleWriteReq+0x150>
  {
    data_ptr->block_info[user_block_index].status.valid = 1U;
100069a4:	69ba      	ldr	r2, [r7, #24]
100069a6:	697b      	ldr	r3, [r7, #20]
100069a8:	00db      	lsls	r3, r3, #3
100069aa:	18d3      	adds	r3, r2, r3
100069ac:	791a      	ldrb	r2, [r3, #4]
100069ae:	2101      	movs	r1, #1
100069b0:	430a      	orrs	r2, r1
100069b2:	711a      	strb	r2, [r3, #4]
    data_ptr->block_info[user_block_index].status.consistent = 0U;
100069b4:	69ba      	ldr	r2, [r7, #24]
100069b6:	697b      	ldr	r3, [r7, #20]
100069b8:	00db      	lsls	r3, r3, #3
100069ba:	18d3      	adds	r3, r2, r3
100069bc:	791a      	ldrb	r2, [r3, #4]
100069be:	2102      	movs	r1, #2
100069c0:	438a      	bics	r2, r1
100069c2:	711a      	strb	r2, [r3, #4]
  }
  return (status);
100069c4:	69fb      	ldr	r3, [r7, #28]
}
100069c6:	1c18      	adds	r0, r3, #0
100069c8:	46bd      	mov	sp, r7
100069ca:	b008      	add	sp, #32
100069cc:	bd80      	pop	{r7, pc}
100069ce:	46c0      	nop			; (mov r8, r8)
100069d0:	20000718 	.word	0x20000718

100069d4 <E_EEPROM_XMC1_lHandleInvalidReq>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Write one block with all data element as 0xFF to invalidate a block.
 */
static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t  user_block_index)
{
100069d4:	b580      	push	{r7, lr}
100069d6:	b086      	sub	sp, #24
100069d8:	af00      	add	r7, sp, #0
100069da:	1c02      	adds	r2, r0, #0
100069dc:	6039      	str	r1, [r7, #0]
100069de:	1dfb      	adds	r3, r7, #7
100069e0:	701a      	strb	r2, [r3, #0]
  uint32_t status;
  uint32_t data_byte_count;
  uint8_t* read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100069e2:	4b26      	ldr	r3, [pc, #152]	; (10006a7c <E_EEPROM_XMC1_lHandleInvalidReq+0xa8>)
100069e4:	685b      	ldr	r3, [r3, #4]
100069e6:	613b      	str	r3, [r7, #16]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
100069e8:	693b      	ldr	r3, [r7, #16]
100069ea:	335c      	adds	r3, #92	; 0x5c
100069ec:	60fb      	str	r3, [r7, #12]
  *read_write_buffer_ptr = block_number;
100069ee:	68fb      	ldr	r3, [r7, #12]
100069f0:	1dfa      	adds	r2, r7, #7
100069f2:	7812      	ldrb	r2, [r2, #0]
100069f4:	701a      	strb	r2, [r3, #0]
  *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
100069f6:	68fb      	ldr	r3, [r7, #12]
100069f8:	3301      	adds	r3, #1
100069fa:	2280      	movs	r2, #128	; 0x80
100069fc:	701a      	strb	r2, [r3, #0]
  
  
  for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;data_byte_count++)
100069fe:	2302      	movs	r3, #2
10006a00:	617b      	str	r3, [r7, #20]
10006a02:	e007      	b.n	10006a14 <E_EEPROM_XMC1_lHandleInvalidReq+0x40>
  {
    *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
10006a04:	68fa      	ldr	r2, [r7, #12]
10006a06:	697b      	ldr	r3, [r7, #20]
10006a08:	18d3      	adds	r3, r2, r3
10006a0a:	22ff      	movs	r2, #255	; 0xff
10006a0c:	701a      	strb	r2, [r3, #0]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
  *read_write_buffer_ptr = block_number;
  *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
  
  
  for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;data_byte_count++)
10006a0e:	697b      	ldr	r3, [r7, #20]
10006a10:	3301      	adds	r3, #1
10006a12:	617b      	str	r3, [r7, #20]
10006a14:	697b      	ldr	r3, [r7, #20]
10006a16:	2b0f      	cmp	r3, #15
10006a18:	d9f4      	bls.n	10006a04 <E_EEPROM_XMC1_lHandleInvalidReq+0x30>
  {
    *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
  }
  
  status = E_EEPROM_XMC1_lWriteDataBlock();
10006a1a:	f000 f8eb 	bl	10006bf4 <E_EEPROM_XMC1_lWriteDataBlock>
10006a1e:	1c03      	adds	r3, r0, #0
10006a20:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
10006a22:	68bb      	ldr	r3, [r7, #8]
10006a24:	2b00      	cmp	r3, #0
10006a26:	d10e      	bne.n	10006a46 <E_EEPROM_XMC1_lHandleInvalidReq+0x72>
  {
    data_ptr->block_info[user_block_index].status.consistent = 1U;
10006a28:	693a      	ldr	r2, [r7, #16]
10006a2a:	683b      	ldr	r3, [r7, #0]
10006a2c:	00db      	lsls	r3, r3, #3
10006a2e:	18d3      	adds	r3, r2, r3
10006a30:	791a      	ldrb	r2, [r3, #4]
10006a32:	2102      	movs	r1, #2
10006a34:	430a      	orrs	r2, r1
10006a36:	711a      	strb	r2, [r3, #4]
    data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
10006a38:	693b      	ldr	r3, [r7, #16]
10006a3a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
10006a3c:	693b      	ldr	r3, [r7, #16]
10006a3e:	683a      	ldr	r2, [r7, #0]
10006a40:	00d2      	lsls	r2, r2, #3
10006a42:	50d1      	str	r1, [r2, r3]
10006a44:	e007      	b.n	10006a56 <E_EEPROM_XMC1_lHandleInvalidReq+0x82>
  }
  else
  {
    data_ptr->block_info[user_block_index].status.consistent = 0U;
10006a46:	693a      	ldr	r2, [r7, #16]
10006a48:	683b      	ldr	r3, [r7, #0]
10006a4a:	00db      	lsls	r3, r3, #3
10006a4c:	18d3      	adds	r3, r2, r3
10006a4e:	791a      	ldrb	r2, [r3, #4]
10006a50:	2102      	movs	r1, #2
10006a52:	438a      	bics	r2, r1
10006a54:	711a      	strb	r2, [r3, #4]
  }
  
  data_ptr->block_info[user_block_index].status.valid = 0U;
10006a56:	693a      	ldr	r2, [r7, #16]
10006a58:	683b      	ldr	r3, [r7, #0]
10006a5a:	00db      	lsls	r3, r3, #3
10006a5c:	18d3      	adds	r3, r2, r3
10006a5e:	791a      	ldrb	r2, [r3, #4]
10006a60:	2101      	movs	r1, #1
10006a62:	438a      	bics	r2, r1
10006a64:	711a      	strb	r2, [r3, #4]
  data_ptr->next_free_block_addr = (E_EEPROM_XMC1_FLASH_BLOCK_SIZE + (uint32_t)(data_ptr->next_free_block_addr));
10006a66:	693b      	ldr	r3, [r7, #16]
10006a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10006a6a:	3310      	adds	r3, #16
10006a6c:	1c1a      	adds	r2, r3, #0
10006a6e:	693b      	ldr	r3, [r7, #16]
10006a70:	64da      	str	r2, [r3, #76]	; 0x4c
  
  return (status);
10006a72:	68bb      	ldr	r3, [r7, #8]
}
10006a74:	1c18      	adds	r0, r3, #0
10006a76:	46bd      	mov	sp, r7
10006a78:	b006      	add	sp, #24
10006a7a:	bd80      	pop	{r7, pc}
10006a7c:	20000718 	.word	0x20000718

10006a80 <E_EEPROM_XMC1_lPopulateFirstBlock>:
 * Description    : Populates the first block with data elements starting from the passed data buffer address.
 */
static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number,
                                              uint8_t* user_data_buffer_ptr,
                                              uint32_t block_size)
{
10006a80:	b580      	push	{r7, lr}
10006a82:	b08a      	sub	sp, #40	; 0x28
10006a84:	af00      	add	r7, sp, #0
10006a86:	60b9      	str	r1, [r7, #8]
10006a88:	607a      	str	r2, [r7, #4]
10006a8a:	230f      	movs	r3, #15
10006a8c:	18fb      	adds	r3, r7, r3
10006a8e:	1c02      	adds	r2, r0, #0
10006a90:	701a      	strb	r2, [r3, #0]
  uint32_t crc_buffer;
  uint32_t data_byte_count;
  uint8_t* read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006a92:	4b2a      	ldr	r3, [pc, #168]	; (10006b3c <E_EEPROM_XMC1_lPopulateFirstBlock+0xbc>)
10006a94:	685b      	ldr	r3, [r3, #4]
10006a96:	623b      	str	r3, [r7, #32]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
10006a98:	6a3b      	ldr	r3, [r7, #32]
10006a9a:	335c      	adds	r3, #92	; 0x5c
10006a9c:	61fb      	str	r3, [r7, #28]
  data_ptr->user_write_state = E_EEPROM_XMC1_NEXT_BLOCK_WRITE;
10006a9e:	6a3a      	ldr	r2, [r7, #32]
10006aa0:	23c4      	movs	r3, #196	; 0xc4
10006aa2:	005b      	lsls	r3, r3, #1
10006aa4:	2102      	movs	r1, #2
10006aa6:	50d1      	str	r1, [r2, r3]
    /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the data buffer*/
    CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,user_data_buffer_ptr,block_size);
    crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
    crc_bit = E_EEPROM_XMC1_CRC_BIT;
  #else
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
10006aa8:	4b25      	ldr	r3, [pc, #148]	; (10006b40 <E_EEPROM_XMC1_lPopulateFirstBlock+0xc0>)
10006aaa:	61bb      	str	r3, [r7, #24]
    crc_bit = 0U;
10006aac:	2300      	movs	r3, #0
10006aae:	617b      	str	r3, [r7, #20]
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
10006ab0:	230f      	movs	r3, #15
10006ab2:	18fb      	adds	r3, r7, r3
10006ab4:	781a      	ldrb	r2, [r3, #0]
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
10006ab6:	697b      	ldr	r3, [r7, #20]
10006ab8:	21c0      	movs	r1, #192	; 0xc0
10006aba:	430b      	orrs	r3, r1
10006abc:	021b      	lsls	r3, r3, #8
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
    crc_bit = 0U;
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
10006abe:	431a      	orrs	r2, r3
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
                                                   crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
                                                   (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT));
10006ac0:	69bb      	ldr	r3, [r7, #24]
10006ac2:	041b      	lsls	r3, r3, #16
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
    crc_bit = 0U;
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
10006ac4:	431a      	orrs	r2, r3
10006ac6:	69fb      	ldr	r3, [r7, #28]
10006ac8:	601a      	str	r2, [r3, #0]
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
                                                   crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
                                                   (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT));
  data_byte_count = E_EEPROM_XMC1_FOUR_BYTES;
10006aca:	2304      	movs	r3, #4
10006acc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Add data to the write buffer from the user specified pointer */
  do
  {
    if (data_ptr->user_write_bytes_count < block_size  )
10006ace:	6a3a      	ldr	r2, [r7, #32]
10006ad0:	23b8      	movs	r3, #184	; 0xb8
10006ad2:	005b      	lsls	r3, r3, #1
10006ad4:	58d2      	ldr	r2, [r2, r3]
10006ad6:	687b      	ldr	r3, [r7, #4]
10006ad8:	429a      	cmp	r2, r3
10006ada:	d214      	bcs.n	10006b06 <E_EEPROM_XMC1_lPopulateFirstBlock+0x86>
    {
      *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_bytes_count);
10006adc:	69fa      	ldr	r2, [r7, #28]
10006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006ae0:	18d3      	adds	r3, r2, r3
10006ae2:	6a39      	ldr	r1, [r7, #32]
10006ae4:	22b8      	movs	r2, #184	; 0xb8
10006ae6:	0052      	lsls	r2, r2, #1
10006ae8:	588a      	ldr	r2, [r1, r2]
10006aea:	68b9      	ldr	r1, [r7, #8]
10006aec:	188a      	adds	r2, r1, r2
10006aee:	7812      	ldrb	r2, [r2, #0]
10006af0:	701a      	strb	r2, [r3, #0]
       (data_ptr->user_write_bytes_count)++;
10006af2:	6a3a      	ldr	r2, [r7, #32]
10006af4:	23b8      	movs	r3, #184	; 0xb8
10006af6:	005b      	lsls	r3, r3, #1
10006af8:	58d3      	ldr	r3, [r2, r3]
10006afa:	1c59      	adds	r1, r3, #1
10006afc:	6a3a      	ldr	r2, [r7, #32]
10006afe:	23b8      	movs	r3, #184	; 0xb8
10006b00:	005b      	lsls	r3, r3, #1
10006b02:	50d1      	str	r1, [r2, r3]
10006b04:	e004      	b.n	10006b10 <E_EEPROM_XMC1_lPopulateFirstBlock+0x90>
    }
    else
    {
      *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
10006b06:	69fa      	ldr	r2, [r7, #28]
10006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006b0a:	18d3      	adds	r3, r2, r3
10006b0c:	22ff      	movs	r2, #255	; 0xff
10006b0e:	701a      	strb	r2, [r3, #0]
    }
    data_byte_count++;
10006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006b12:	3301      	adds	r3, #1
10006b14:	627b      	str	r3, [r7, #36]	; 0x24
    
  } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE); /* Check for block size overflow*/
10006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006b18:	2b10      	cmp	r3, #16
10006b1a:	d1d8      	bne.n	10006ace <E_EEPROM_XMC1_lPopulateFirstBlock+0x4e>

  if (data_ptr->user_write_bytes_count >= block_size)
10006b1c:	6a3a      	ldr	r2, [r7, #32]
10006b1e:	23b8      	movs	r3, #184	; 0xb8
10006b20:	005b      	lsls	r3, r3, #1
10006b22:	58d2      	ldr	r2, [r2, r3]
10006b24:	687b      	ldr	r3, [r7, #4]
10006b26:	429a      	cmp	r2, r3
10006b28:	d304      	bcc.n	10006b34 <E_EEPROM_XMC1_lPopulateFirstBlock+0xb4>
  {
    data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
10006b2a:	6a3a      	ldr	r2, [r7, #32]
10006b2c:	23c4      	movs	r3, #196	; 0xc4
10006b2e:	005b      	lsls	r3, r3, #1
10006b30:	2103      	movs	r1, #3
10006b32:	50d1      	str	r1, [r2, r3]
  }
}
10006b34:	46bd      	mov	sp, r7
10006b36:	b00a      	add	sp, #40	; 0x28
10006b38:	bd80      	pop	{r7, pc}
10006b3a:	46c0      	nop			; (mov r8, r8)
10006b3c:	20000718 	.word	0x20000718
10006b40:	a5a50000 	.word	0xa5a50000

10006b44 <E_EEPROM_XMC1_lPopulateNextBlock>:
 * Description    : Populates the successive blocks with data elements starting from the passed data buffer address.
 */
static void E_EEPROM_XMC1_lPopulateNextBlock( uint8_t block_number ,
                                              uint8_t*  const user_data_buffer_ptr ,
                                              uint32_t block_size)
{
10006b44:	b580      	push	{r7, lr}
10006b46:	b088      	sub	sp, #32
10006b48:	af00      	add	r7, sp, #0
10006b4a:	60b9      	str	r1, [r7, #8]
10006b4c:	607a      	str	r2, [r7, #4]
10006b4e:	230f      	movs	r3, #15
10006b50:	18fb      	adds	r3, r7, r3
10006b52:	1c02      	adds	r2, r0, #0
10006b54:	701a      	strb	r2, [r3, #0]
  uint32_t  data_byte_count;
  uint8_t*  read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006b56:	4b26      	ldr	r3, [pc, #152]	; (10006bf0 <E_EEPROM_XMC1_lPopulateNextBlock+0xac>)
10006b58:	685b      	ldr	r3, [r3, #4]
10006b5a:	61bb      	str	r3, [r7, #24]
  
  read_write_buffer_ptr = data_ptr->read_write_buffer;
10006b5c:	69bb      	ldr	r3, [r7, #24]
10006b5e:	335c      	adds	r3, #92	; 0x5c
10006b60:	617b      	str	r3, [r7, #20]
  *(read_write_buffer_ptr) = block_number;
10006b62:	697b      	ldr	r3, [r7, #20]
10006b64:	220f      	movs	r2, #15
10006b66:	18ba      	adds	r2, r7, r2
10006b68:	7812      	ldrb	r2, [r2, #0]
10006b6a:	701a      	strb	r2, [r3, #0]
  *(read_write_buffer_ptr + 1U) = E_EEPROM_XMC1_VALID_BIT;
10006b6c:	697b      	ldr	r3, [r7, #20]
10006b6e:	3301      	adds	r3, #1
10006b70:	2240      	movs	r2, #64	; 0x40
10006b72:	701a      	strb	r2, [r3, #0]
  data_byte_count = E_EEPROM_XMC1_TWO_BYTES;
10006b74:	2302      	movs	r3, #2
10006b76:	61fb      	str	r3, [r7, #28]
  
  /* Add data to the write buffer from the user specified pointer */
  do
  {
    if (data_ptr->user_write_bytes_count < block_size )
10006b78:	69ba      	ldr	r2, [r7, #24]
10006b7a:	23b8      	movs	r3, #184	; 0xb8
10006b7c:	005b      	lsls	r3, r3, #1
10006b7e:	58d2      	ldr	r2, [r2, r3]
10006b80:	687b      	ldr	r3, [r7, #4]
10006b82:	429a      	cmp	r2, r3
10006b84:	d214      	bcs.n	10006bb0 <E_EEPROM_XMC1_lPopulateNextBlock+0x6c>
    {
      *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_bytes_count);
10006b86:	697a      	ldr	r2, [r7, #20]
10006b88:	69fb      	ldr	r3, [r7, #28]
10006b8a:	18d3      	adds	r3, r2, r3
10006b8c:	69b9      	ldr	r1, [r7, #24]
10006b8e:	22b8      	movs	r2, #184	; 0xb8
10006b90:	0052      	lsls	r2, r2, #1
10006b92:	588a      	ldr	r2, [r1, r2]
10006b94:	68b9      	ldr	r1, [r7, #8]
10006b96:	188a      	adds	r2, r1, r2
10006b98:	7812      	ldrb	r2, [r2, #0]
10006b9a:	701a      	strb	r2, [r3, #0]
      (data_ptr->user_write_bytes_count)++;
10006b9c:	69ba      	ldr	r2, [r7, #24]
10006b9e:	23b8      	movs	r3, #184	; 0xb8
10006ba0:	005b      	lsls	r3, r3, #1
10006ba2:	58d3      	ldr	r3, [r2, r3]
10006ba4:	1c59      	adds	r1, r3, #1
10006ba6:	69ba      	ldr	r2, [r7, #24]
10006ba8:	23b8      	movs	r3, #184	; 0xb8
10006baa:	005b      	lsls	r3, r3, #1
10006bac:	50d1      	str	r1, [r2, r3]
10006bae:	e009      	b.n	10006bc4 <E_EEPROM_XMC1_lPopulateNextBlock+0x80>
    }
    else
    {
      *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
10006bb0:	697a      	ldr	r2, [r7, #20]
10006bb2:	69fb      	ldr	r3, [r7, #28]
10006bb4:	18d3      	adds	r3, r2, r3
10006bb6:	22ff      	movs	r2, #255	; 0xff
10006bb8:	701a      	strb	r2, [r3, #0]
      data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
10006bba:	69ba      	ldr	r2, [r7, #24]
10006bbc:	23c4      	movs	r3, #196	; 0xc4
10006bbe:	005b      	lsls	r3, r3, #1
10006bc0:	2103      	movs	r1, #3
10006bc2:	50d1      	str	r1, [r2, r3]
    }
    data_byte_count++;
10006bc4:	69fb      	ldr	r3, [r7, #28]
10006bc6:	3301      	adds	r3, #1
10006bc8:	61fb      	str	r3, [r7, #28]

  } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
10006bca:	69fb      	ldr	r3, [r7, #28]
10006bcc:	2b10      	cmp	r3, #16
10006bce:	d1d3      	bne.n	10006b78 <E_EEPROM_XMC1_lPopulateNextBlock+0x34>

  if (data_ptr->user_write_bytes_count >= block_size)
10006bd0:	69ba      	ldr	r2, [r7, #24]
10006bd2:	23b8      	movs	r3, #184	; 0xb8
10006bd4:	005b      	lsls	r3, r3, #1
10006bd6:	58d2      	ldr	r2, [r2, r3]
10006bd8:	687b      	ldr	r3, [r7, #4]
10006bda:	429a      	cmp	r2, r3
10006bdc:	d304      	bcc.n	10006be8 <E_EEPROM_XMC1_lPopulateNextBlock+0xa4>
  {
    data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
10006bde:	69ba      	ldr	r2, [r7, #24]
10006be0:	23c4      	movs	r3, #196	; 0xc4
10006be2:	005b      	lsls	r3, r3, #1
10006be4:	2103      	movs	r1, #3
10006be6:	50d1      	str	r1, [r2, r3]
  }
}
10006be8:	46bd      	mov	sp, r7
10006bea:	b008      	add	sp, #32
10006bec:	bd80      	pop	{r7, pc}
10006bee:	46c0      	nop			; (mov r8, r8)
10006bf0:	20000718 	.word	0x20000718

10006bf4 <E_EEPROM_XMC1_lWriteDataBlock>:
 * Return value   : uint32_t - NVM_STATUS register value after read operation
 *
 * Description    : Writes single data block into flash
 */
static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void)
{
10006bf4:	b580      	push	{r7, lr}
10006bf6:	b084      	sub	sp, #16
10006bf8:	af00      	add	r7, sp, #0
  uint32_t status;
  uint32_t src_addr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006bfa:	4b10      	ldr	r3, [pc, #64]	; (10006c3c <E_EEPROM_XMC1_lWriteDataBlock+0x48>)
10006bfc:	685b      	ldr	r3, [r3, #4]
10006bfe:	60fb      	str	r3, [r7, #12]
  
  src_addr = (uint32_t)(data_ptr->next_free_block_addr +
10006c00:	68fb      	ldr	r3, [r7, #12]
10006c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
             (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
10006c04:	68fb      	ldr	r3, [r7, #12]
10006c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10006c08:	011b      	lsls	r3, r3, #4
  uint32_t src_addr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
  
  src_addr = (uint32_t)(data_ptr->next_free_block_addr +
10006c0a:	18d3      	adds	r3, r2, r3
10006c0c:	60bb      	str	r3, [r7, #8]
             (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
  (data_ptr->written_block_counter)++;
10006c0e:	68fb      	ldr	r3, [r7, #12]
10006c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10006c12:	1c5a      	adds	r2, r3, #1
10006c14:	68fb      	ldr	r3, [r7, #12]
10006c16:	659a      	str	r2, [r3, #88]	; 0x58

  XMC_FLASH_ClearStatus();
10006c18:	f7fb fe20 	bl	1000285c <XMC_FLASH_ClearStatus>
  E_EEPROM_XMC1_lWriteSingleBlock(src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
10006c1c:	68fb      	ldr	r3, [r7, #12]
10006c1e:	335c      	adds	r3, #92	; 0x5c
10006c20:	68ba      	ldr	r2, [r7, #8]
10006c22:	1c10      	adds	r0, r2, #0
10006c24:	1c19      	adds	r1, r3, #0
10006c26:	f000 f887 	bl	10006d38 <E_EEPROM_XMC1_lWriteSingleBlock>
  status = E_EEPROM_XMC1_lGetFlashStatus();
10006c2a:	f000 f8bf 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
10006c2e:	1c03      	adds	r3, r0, #0
10006c30:	607b      	str	r3, [r7, #4]
  
  return (status);
10006c32:	687b      	ldr	r3, [r7, #4]
}
10006c34:	1c18      	adds	r0, r3, #0
10006c36:	46bd      	mov	sp, r7
10006c38:	b004      	add	sp, #16
10006c3a:	bd80      	pop	{r7, pc}
10006c3c:	20000718 	.word	0x20000718

10006c40 <E_EEPROM_XMC1_lReadBlockContents>:
 *
 * Description     : Read data bytes starting from specified address (data_buffer_ptr + offset).
 *                   Read number of bytes as specified in the length parameter.
 */
static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *const data_buffer_ptr, uint32_t length, uint32_t offset)
{
10006c40:	b580      	push	{r7, lr}
10006c42:	b08c      	sub	sp, #48	; 0x30
10006c44:	af00      	add	r7, sp, #0
10006c46:	60f8      	str	r0, [r7, #12]
10006c48:	60b9      	str	r1, [r7, #8]
10006c4a:	607a      	str	r2, [r7, #4]
  uint32_t flash_address;
  uint32_t block_start_address;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  uint32_t remaining_bytes_in_curr_block;
  
  indx = 0U;
10006c4c:	2300      	movs	r3, #0
10006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  status = 0U;
10006c50:	2300      	movs	r3, #0
10006c52:	623b      	str	r3, [r7, #32]
  block_count = 0U;
10006c54:	2300      	movs	r3, #0
10006c56:	62bb      	str	r3, [r7, #40]	; 0x28

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006c58:	4b36      	ldr	r3, [pc, #216]	; (10006d34 <E_EEPROM_XMC1_lReadBlockContents+0xf4>)
10006c5a:	685b      	ldr	r3, [r3, #4]
10006c5c:	61fb      	str	r3, [r7, #28]
  block_start_address = data_ptr->read_start_address;
10006c5e:	69fa      	ldr	r2, [r7, #28]
10006c60:	23c6      	movs	r3, #198	; 0xc6
10006c62:	005b      	lsls	r3, r3, #1
10006c64:	58d3      	ldr	r3, [r2, r3]
10006c66:	61bb      	str	r3, [r7, #24]
  
  if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first data block.  */
10006c68:	687b      	ldr	r3, [r7, #4]
10006c6a:	2b0b      	cmp	r3, #11
10006c6c:	d913      	bls.n	10006c96 <E_EEPROM_XMC1_lReadBlockContents+0x56>
  {
    block_count++;                        /* If not then increment block counter*/
10006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006c70:	3301      	adds	r3, #1
10006c72:	62bb      	str	r3, [r7, #40]	; 0x28
    offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12 bytes)*/
10006c74:	687b      	ldr	r3, [r7, #4]
10006c76:	3b0c      	subs	r3, #12
10006c78:	607b      	str	r3, [r7, #4]
    while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fit inside  */
10006c7a:	e005      	b.n	10006c88 <E_EEPROM_XMC1_lReadBlockContents+0x48>
    {
      block_count++;                        /* If not then increment block counter*/
10006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006c7e:	3301      	adds	r3, #1
10006c80:	62bb      	str	r3, [r7, #40]	; 0x28
      offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14 bytes)*/
10006c82:	687b      	ldr	r3, [r7, #4]
10006c84:	3b0e      	subs	r3, #14
10006c86:	607b      	str	r3, [r7, #4]
  
  if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first data block.  */
  {
    block_count++;                        /* If not then increment block counter*/
    offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12 bytes)*/
    while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fit inside  */
10006c88:	687b      	ldr	r3, [r7, #4]
10006c8a:	2b0d      	cmp	r3, #13
10006c8c:	d8f6      	bhi.n	10006c7c <E_EEPROM_XMC1_lReadBlockContents+0x3c>
    {
      block_count++;                        /* If not then increment block counter*/
      offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14 bytes)*/
    }
    offset += E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;
10006c8e:	687b      	ldr	r3, [r7, #4]
10006c90:	3302      	adds	r3, #2
10006c92:	607b      	str	r3, [r7, #4]
10006c94:	e002      	b.n	10006c9c <E_EEPROM_XMC1_lReadBlockContents+0x5c>
  }
  else
  {
    offset += E_EEPROM_XMC1_BLOCK1_DATA_OFFSET;
10006c96:	687b      	ldr	r3, [r7, #4]
10006c98:	3304      	adds	r3, #4
10006c9a:	607b      	str	r3, [r7, #4]
  }
  /* Remaining bytes in the block where Read offset is pointing*/
  remaining_bytes_in_curr_block = E_EEPROM_XMC1_FLASH_BLOCK_SIZE - offset;
10006c9c:	687b      	ldr	r3, [r7, #4]
10006c9e:	2210      	movs	r2, #16
10006ca0:	1ad3      	subs	r3, r2, r3
10006ca2:	627b      	str	r3, [r7, #36]	; 0x24
  
  do
  {
    /* Calculate the Flash address of the block to be read*/
    flash_address = block_start_address + ((uint32_t)block_count * E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
10006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006ca6:	011a      	lsls	r2, r3, #4
10006ca8:	69bb      	ldr	r3, [r7, #24]
10006caa:	18d3      	adds	r3, r2, r3
10006cac:	617b      	str	r3, [r7, #20]

    XMC_FLASH_ClearStatus();
10006cae:	f7fb fdd5 	bl	1000285c <XMC_FLASH_ClearStatus>
    E_EEPROM_XMC1_lReadSingleBlock(flash_address,(uint32_t*)(void*)data_ptr->read_write_buffer);
10006cb2:	69fb      	ldr	r3, [r7, #28]
10006cb4:	335c      	adds	r3, #92	; 0x5c
10006cb6:	697a      	ldr	r2, [r7, #20]
10006cb8:	1c10      	adds	r0, r2, #0
10006cba:	1c19      	adds	r1, r3, #0
10006cbc:	f000 f84c 	bl	10006d58 <E_EEPROM_XMC1_lReadSingleBlock>
    status = E_EEPROM_XMC1_lGetFlashStatus();
10006cc0:	f000 f874 	bl	10006dac <E_EEPROM_XMC1_lGetFlashStatus>
10006cc4:	1c03      	adds	r3, r0, #0
10006cc6:	623b      	str	r3, [r7, #32]
    
    if (status != 0U)
10006cc8:	6a3b      	ldr	r3, [r7, #32]
10006cca:	2b00      	cmp	r3, #0
10006ccc:	d000      	beq.n	10006cd0 <E_EEPROM_XMC1_lReadBlockContents+0x90>
    {
      break;
10006cce:	e02b      	b.n	10006d28 <E_EEPROM_XMC1_lReadBlockContents+0xe8>
    }
    /* Extract the data read from flash byte by byte and load into the user buffer*/
    do{
      
      *(data_buffer_ptr + indx) = *(data_ptr->read_write_buffer + offset);
10006cd0:	68fa      	ldr	r2, [r7, #12]
10006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006cd4:	18d3      	adds	r3, r2, r3
10006cd6:	69f9      	ldr	r1, [r7, #28]
10006cd8:	2058      	movs	r0, #88	; 0x58
10006cda:	687a      	ldr	r2, [r7, #4]
10006cdc:	188a      	adds	r2, r1, r2
10006cde:	1812      	adds	r2, r2, r0
10006ce0:	7912      	ldrb	r2, [r2, #4]
10006ce2:	701a      	strb	r2, [r3, #0]
      indx++;
10006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006ce6:	3301      	adds	r3, #1
10006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset++;
10006cea:	687b      	ldr	r3, [r7, #4]
10006cec:	3301      	adds	r3, #1
10006cee:	607b      	str	r3, [r7, #4]
      length--;
10006cf0:	68bb      	ldr	r3, [r7, #8]
10006cf2:	3b01      	subs	r3, #1
10006cf4:	60bb      	str	r3, [r7, #8]
      remaining_bytes_in_curr_block--;
10006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006cf8:	3b01      	subs	r3, #1
10006cfa:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* check any of the length parameters reaches 0 */
    } while ( (remaining_bytes_in_curr_block) && (length) );
10006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006cfe:	2b00      	cmp	r3, #0
10006d00:	d002      	beq.n	10006d08 <E_EEPROM_XMC1_lReadBlockContents+0xc8>
10006d02:	68bb      	ldr	r3, [r7, #8]
10006d04:	2b00      	cmp	r3, #0
10006d06:	d1e3      	bne.n	10006cd0 <E_EEPROM_XMC1_lReadBlockContents+0x90>
    
    /* Check if the length of bytes pending to be read is within the range of available bytes in the block */
    if (length <= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
10006d08:	68bb      	ldr	r3, [r7, #8]
10006d0a:	2b0e      	cmp	r3, #14
10006d0c:	d802      	bhi.n	10006d14 <E_EEPROM_XMC1_lReadBlockContents+0xd4>
    {
      /* Force remaining bytes in current block to length remaining */
      remaining_bytes_in_curr_block = length;
10006d0e:	68bb      	ldr	r3, [r7, #8]
10006d10:	627b      	str	r3, [r7, #36]	; 0x24
10006d12:	e001      	b.n	10006d18 <E_EEPROM_XMC1_lReadBlockContents+0xd8>
    }
    else
    {
      /* Force remaining bytes to next block size(14)*/
      remaining_bytes_in_curr_block = E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
10006d14:	230e      	movs	r3, #14
10006d16:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    offset = E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;     /* Shift offset by 2 counts to avoid next block header */
10006d18:	2302      	movs	r3, #2
10006d1a:	607b      	str	r3, [r7, #4]
    block_count++;                        /* Increment the block count to read next block */
10006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006d1e:	3301      	adds	r3, #1
10006d20:	62bb      	str	r3, [r7, #40]	; 0x28
    
  } while (length != 0U);
10006d22:	68bb      	ldr	r3, [r7, #8]
10006d24:	2b00      	cmp	r3, #0
10006d26:	d1bd      	bne.n	10006ca4 <E_EEPROM_XMC1_lReadBlockContents+0x64>
  
  return (status);
10006d28:	6a3b      	ldr	r3, [r7, #32]
}
10006d2a:	1c18      	adds	r0, r3, #0
10006d2c:	46bd      	mov	sp, r7
10006d2e:	b00c      	add	sp, #48	; 0x30
10006d30:	bd80      	pop	{r7, pc}
10006d32:	46c0      	nop			; (mov r8, r8)
10006d34:	20000718 	.word	0x20000718

10006d38 <E_EEPROM_XMC1_lWriteSingleBlock>:
 * Return value    : void
 *
 * Description     : Performs single flash block(16 bytes) write operation
 */
static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data)
{
10006d38:	b580      	push	{r7, lr}
10006d3a:	b082      	sub	sp, #8
10006d3c:	af00      	add	r7, sp, #0
10006d3e:	6078      	str	r0, [r7, #4]
10006d40:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_WriteBlocks( (uint32_t*)address, (uint32_t*)data , 1U , 1U);
10006d42:	687a      	ldr	r2, [r7, #4]
10006d44:	683b      	ldr	r3, [r7, #0]
10006d46:	1c10      	adds	r0, r2, #0
10006d48:	1c19      	adds	r1, r3, #0
10006d4a:	2201      	movs	r2, #1
10006d4c:	2301      	movs	r3, #1
10006d4e:	f7fb fdaf 	bl	100028b0 <XMC_FLASH_WriteBlocks>
  }
}
10006d52:	46bd      	mov	sp, r7
10006d54:	b002      	add	sp, #8
10006d56:	bd80      	pop	{r7, pc}

10006d58 <E_EEPROM_XMC1_lReadSingleBlock>:
 * Return value    : void
 *
 * Description     : Performs single flash block(16 bytes) read operation
 */
static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data)
{
10006d58:	b580      	push	{r7, lr}
10006d5a:	b082      	sub	sp, #8
10006d5c:	af00      	add	r7, sp, #0
10006d5e:	6078      	str	r0, [r7, #4]
10006d60:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_ReadBlocks( (uint32_t*)address , (uint32_t*)data , 1U);
10006d62:	687a      	ldr	r2, [r7, #4]
10006d64:	683b      	ldr	r3, [r7, #0]
10006d66:	1c10      	adds	r0, r2, #0
10006d68:	1c19      	adds	r1, r3, #0
10006d6a:	2201      	movs	r2, #1
10006d6c:	f7fb fe20 	bl	100029b0 <XMC_FLASH_ReadBlocks>
  }
}
10006d70:	46bd      	mov	sp, r7
10006d72:	b002      	add	sp, #8
10006d74:	bd80      	pop	{r7, pc}
10006d76:	46c0      	nop			; (mov r8, r8)

10006d78 <E_EEPROM_XMC1_lWriteSinglePage>:
 * Return value    : void
 *
 * Description     : Performs single flash page(256 bytes) write operation
 */
static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data)
{
10006d78:	b580      	push	{r7, lr}
10006d7a:	b082      	sub	sp, #8
10006d7c:	af00      	add	r7, sp, #0
10006d7e:	6078      	str	r0, [r7, #4]
10006d80:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_ProgramPage( (uint32_t*)address , (uint32_t*)data);
10006d82:	687a      	ldr	r2, [r7, #4]
10006d84:	683b      	ldr	r3, [r7, #0]
10006d86:	1c10      	adds	r0, r2, #0
10006d88:	1c19      	adds	r1, r3, #0
10006d8a:	f7fb fe37 	bl	100029fc <XMC_FLASH_ProgramPage>
  }
}
10006d8e:	46bd      	mov	sp, r7
10006d90:	b002      	add	sp, #8
10006d92:	bd80      	pop	{r7, pc}

10006d94 <E_EEPROM_XMC1_lEraseSinglePage>:
 * Return value    : void
 *
 * Description     : Erases single flash page(256 bytes)
 */
static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address)
{
10006d94:	b580      	push	{r7, lr}
10006d96:	b082      	sub	sp, #8
10006d98:	af00      	add	r7, sp, #0
10006d9a:	6078      	str	r0, [r7, #4]
    E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(address);
  }
  else
  #endif
  {
    XMC_FLASH_ErasePages( (uint32_t*)address , 1U);
10006d9c:	687b      	ldr	r3, [r7, #4]
10006d9e:	1c18      	adds	r0, r3, #0
10006da0:	2101      	movs	r1, #1
10006da2:	f7fb fde3 	bl	1000296c <XMC_FLASH_ErasePages>
  }
}
10006da6:	46bd      	mov	sp, r7
10006da8:	b002      	add	sp, #8
10006daa:	bd80      	pop	{r7, pc}

10006dac <E_EEPROM_XMC1_lGetFlashStatus>:
 * Return value    : uint32_t  - Flash NVM_STATUS register value
 *
 * Description     : Reads the flash status from hardware to check whether any error exist or not.
 */
static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void)
{
10006dac:	b580      	push	{r7, lr}
10006dae:	b082      	sub	sp, #8
10006db0:	af00      	add	r7, sp, #0
    status = E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus();
  }
  else
  #endif
  {
    status = XMC_FLASH_GetStatus();
10006db2:	f7fb fd63 	bl	1000287c <XMC_FLASH_GetStatus>
10006db6:	1c03      	adds	r3, r0, #0
10006db8:	607b      	str	r3, [r7, #4]
  }
  return (status);
10006dba:	687b      	ldr	r3, [r7, #4]
}
10006dbc:	1c18      	adds	r0, r3, #0
10006dbe:	46bd      	mov	sp, r7
10006dc0:	b002      	add	sp, #8
10006dc2:	bd80      	pop	{r7, pc}

10006dc4 <XMC_BCCU_EnableDimmingEngine>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_BCCU_DisableDimmingEngine(), XMC_BCCU_ConcurrentEnableDimmingEngine()\n\n\n
 */
__STATIC_INLINE void XMC_BCCU_EnableDimmingEngine (XMC_BCCU_t *const bccu, uint32_t dim_no)
{
10006dc4:	b580      	push	{r7, lr}
10006dc6:	b082      	sub	sp, #8
10006dc8:	af00      	add	r7, sp, #0
10006dca:	6078      	str	r0, [r7, #4]
10006dcc:	6039      	str	r1, [r7, #0]
	  bccu->DEEN |= (uint32_t)(BCCU_DEEN_EDE0_Msk << dim_no);
10006dce:	687b      	ldr	r3, [r7, #4]
10006dd0:	6a1a      	ldr	r2, [r3, #32]
10006dd2:	683b      	ldr	r3, [r7, #0]
10006dd4:	2101      	movs	r1, #1
10006dd6:	4099      	lsls	r1, r3
10006dd8:	1c0b      	adds	r3, r1, #0
10006dda:	431a      	orrs	r2, r3
10006ddc:	687b      	ldr	r3, [r7, #4]
10006dde:	621a      	str	r2, [r3, #32]
}
10006de0:	46bd      	mov	sp, r7
10006de2:	b002      	add	sp, #8
10006de4:	bd80      	pop	{r7, pc}
10006de6:	46c0      	nop			; (mov r8, r8)

10006de8 <XMC_BCCU_StartDimming>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_BCCU_AbortDimming(), XMC_BCCU_ConcurrentStartDimming()\n\n\n
 */
__STATIC_INLINE void XMC_BCCU_StartDimming (XMC_BCCU_t *const bccu, uint32_t dim_no)
{
10006de8:	b580      	push	{r7, lr}
10006dea:	b082      	sub	sp, #8
10006dec:	af00      	add	r7, sp, #0
10006dee:	6078      	str	r0, [r7, #4]
10006df0:	6039      	str	r1, [r7, #0]
	bccu->DESTRCON = (uint32_t)(BCCU_DESTRCON_DE0S_Msk << dim_no);
10006df2:	683b      	ldr	r3, [r7, #0]
10006df4:	2201      	movs	r2, #1
10006df6:	409a      	lsls	r2, r3
10006df8:	687b      	ldr	r3, [r7, #4]
10006dfa:	625a      	str	r2, [r3, #36]	; 0x24
}
10006dfc:	46bd      	mov	sp, r7
10006dfe:	b002      	add	sp, #8
10006e00:	bd80      	pop	{r7, pc}
10006e02:	46c0      	nop			; (mov r8, r8)

10006e04 <DIM_BCCU_Init>:
/**
 * @brief   This function Initializes a DIM_BCCU APP instances based on
 *          user configuration.
 */
DIM_BCCU_STATUS_t DIM_BCCU_Init(DIM_BCCU_t *handle)
{
10006e04:	b590      	push	{r4, r7, lr}
10006e06:	b085      	sub	sp, #20
10006e08:	af00      	add	r7, sp, #0
10006e0a:	6078      	str	r0, [r7, #4]
      		(handle->bccu_de_regs != NULL)) &&((handle->config != NULL) && (handle->global_bccu_handleptr != NULL) &&
      	    (handle->enable_at_start <= 1) && (handle->dim_engine_num <= 2) && (handle->dim_lvl <= 4095U))));

  /* Checking for initialization state of the instance */
  /* GLOBAL_BCCU APP Initialization for XMC1000 devices */
  status = (DIM_BCCU_STATUS_t)GLOBAL_BCCU_Init(handle->global_bccu_handleptr);
10006e0c:	687b      	ldr	r3, [r7, #4]
10006e0e:	689b      	ldr	r3, [r3, #8]
10006e10:	220f      	movs	r2, #15
10006e12:	18bc      	adds	r4, r7, r2
10006e14:	1c18      	adds	r0, r3, #0
10006e16:	f7fe f9f1 	bl	100051fc <GLOBAL_BCCU_Init>
10006e1a:	1c03      	adds	r3, r0, #0
10006e1c:	7023      	strb	r3, [r4, #0]
  if (status != DIM_BCCU_STATUS_FAILURE)
10006e1e:	230f      	movs	r3, #15
10006e20:	18fb      	adds	r3, r7, r3
10006e22:	781b      	ldrb	r3, [r3, #0]
10006e24:	2b01      	cmp	r3, #1
10006e26:	d029      	beq.n	10006e7c <DIM_BCCU_Init+0x78>
  {
    /* DIM_BCCU APP Initialization for XMC1000 devices */
    XMC_BCCU_DIM_Init(handle->bccu_de_regs, handle->config);
10006e28:	687b      	ldr	r3, [r7, #4]
10006e2a:	681a      	ldr	r2, [r3, #0]
10006e2c:	687b      	ldr	r3, [r7, #4]
10006e2e:	685b      	ldr	r3, [r3, #4]
10006e30:	1c10      	adds	r0, r2, #0
10006e32:	1c19      	adds	r1, r3, #0
10006e34:	f7fc f8fa 	bl	1000302c <XMC_BCCU_DIM_Init>
    /* Initial Dimming Level configuration */
    XMC_BCCU_DIM_SetTargetDimmingLevel(handle->bccu_de_regs, handle->dim_lvl);
10006e38:	687b      	ldr	r3, [r7, #4]
10006e3a:	681a      	ldr	r2, [r3, #0]
10006e3c:	687b      	ldr	r3, [r7, #4]
10006e3e:	691b      	ldr	r3, [r3, #16]
10006e40:	1c10      	adds	r0, r2, #0
10006e42:	1c19      	adds	r1, r3, #0
10006e44:	f7fc f8fe 	bl	10003044 <XMC_BCCU_DIM_SetTargetDimmingLevel>
    if (DIM_BCCU_ENABLE_AT_INIT_TRUE == handle->enable_at_start)
10006e48:	687b      	ldr	r3, [r7, #4]
10006e4a:	7b1b      	ldrb	r3, [r3, #12]
10006e4c:	2b01      	cmp	r3, #1
10006e4e:	d111      	bne.n	10006e74 <DIM_BCCU_Init+0x70>
    {
      /* Dimming Engine Enable at Initialization for XMC1000 devices */
      XMC_BCCU_EnableDimmingEngine(handle->global_bccu_handleptr->bccuregs, (uint32_t)handle->dim_engine_num);
10006e50:	687b      	ldr	r3, [r7, #4]
10006e52:	689b      	ldr	r3, [r3, #8]
10006e54:	681a      	ldr	r2, [r3, #0]
10006e56:	687b      	ldr	r3, [r7, #4]
10006e58:	7b5b      	ldrb	r3, [r3, #13]
10006e5a:	1c10      	adds	r0, r2, #0
10006e5c:	1c19      	adds	r1, r3, #0
10006e5e:	f7ff ffb1 	bl	10006dc4 <XMC_BCCU_EnableDimmingEngine>

      /* Start Dimming Engine at Initialization for XMC1000 devices */
      XMC_BCCU_StartDimming(handle->global_bccu_handleptr->bccuregs, (uint32_t)handle->dim_engine_num);
10006e62:	687b      	ldr	r3, [r7, #4]
10006e64:	689b      	ldr	r3, [r3, #8]
10006e66:	681a      	ldr	r2, [r3, #0]
10006e68:	687b      	ldr	r3, [r7, #4]
10006e6a:	7b5b      	ldrb	r3, [r3, #13]
10006e6c:	1c10      	adds	r0, r2, #0
10006e6e:	1c19      	adds	r1, r3, #0
10006e70:	f7ff ffba 	bl	10006de8 <XMC_BCCU_StartDimming>
    }
    /* Return status after initialization */
    status = DIM_BCCU_STATUS_SUCCESS;
10006e74:	230f      	movs	r3, #15
10006e76:	18fb      	adds	r3, r7, r3
10006e78:	2200      	movs	r2, #0
10006e7a:	701a      	strb	r2, [r3, #0]
   }
  return (status);
10006e7c:	230f      	movs	r3, #15
10006e7e:	18fb      	adds	r3, r7, r3
10006e80:	781b      	ldrb	r3, [r3, #0]
}
10006e82:	1c18      	adds	r0, r3, #0
10006e84:	46bd      	mov	sp, r7
10006e86:	b005      	add	sp, #20
10006e88:	bd90      	pop	{r4, r7, pc}
10006e8a:	46c0      	nop			; (mov r8, r8)

10006e8c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10006e8c:	b580      	push	{r7, lr}
10006e8e:	b082      	sub	sp, #8
10006e90:	af00      	add	r7, sp, #0
10006e92:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10006e94:	687b      	ldr	r3, [r7, #4]
10006e96:	6819      	ldr	r1, [r3, #0]
10006e98:	687b      	ldr	r3, [r7, #4]
10006e9a:	7b1a      	ldrb	r2, [r3, #12]
10006e9c:	687b      	ldr	r3, [r7, #4]
10006e9e:	3304      	adds	r3, #4
10006ea0:	1c08      	adds	r0, r1, #0
10006ea2:	1c11      	adds	r1, r2, #0
10006ea4:	1c1a      	adds	r2, r3, #0
10006ea6:	f7fb fdb7 	bl	10002a18 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10006eaa:	687b      	ldr	r3, [r7, #4]
10006eac:	6819      	ldr	r1, [r3, #0]
10006eae:	687b      	ldr	r3, [r7, #4]
10006eb0:	7b1a      	ldrb	r2, [r3, #12]
10006eb2:	687b      	ldr	r3, [r7, #4]
10006eb4:	7b5b      	ldrb	r3, [r3, #13]
10006eb6:	1c08      	adds	r0, r1, #0
10006eb8:	1c11      	adds	r1, r2, #0
10006eba:	1c1a      	adds	r2, r3, #0
10006ebc:	f7fc f8e2 	bl	10003084 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10006ec0:	2300      	movs	r3, #0
}
10006ec2:	1c18      	adds	r0, r3, #0
10006ec4:	46bd      	mov	sp, r7
10006ec6:	b002      	add	sp, #8
10006ec8:	bd80      	pop	{r7, pc}
10006eca:	46c0      	nop			; (mov r8, r8)

10006ecc <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10006ecc:	b580      	push	{r7, lr}
10006ece:	af00      	add	r7, sp, #0

}
10006ed0:	46bd      	mov	sp, r7
10006ed2:	bd80      	pop	{r7, pc}

10006ed4 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10006ed4:	b580      	push	{r7, lr}
10006ed6:	b084      	sub	sp, #16
10006ed8:	af00      	add	r7, sp, #0
10006eda:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10006edc:	230f      	movs	r3, #15
10006ede:	18fb      	adds	r3, r7, r3
10006ee0:	2200      	movs	r2, #0
10006ee2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10006ee4:	230e      	movs	r3, #14
10006ee6:	18fb      	adds	r3, r7, r3
10006ee8:	2200      	movs	r2, #0
10006eea:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10006eec:	230d      	movs	r3, #13
10006eee:	18fb      	adds	r3, r7, r3
10006ef0:	2200      	movs	r2, #0
10006ef2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10006ef4:	230c      	movs	r3, #12
10006ef6:	18fb      	adds	r3, r7, r3
10006ef8:	2200      	movs	r2, #0
10006efa:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10006efc:	230b      	movs	r3, #11
10006efe:	18fb      	adds	r3, r7, r3
10006f00:	2200      	movs	r2, #0
10006f02:	701a      	strb	r2, [r3, #0]
  if (handle->init_status == false)
10006f04:	687b      	ldr	r3, [r7, #4]
10006f06:	781b      	ldrb	r3, [r3, #0]
10006f08:	2201      	movs	r2, #1
10006f0a:	4053      	eors	r3, r2
10006f0c:	b2db      	uxtb	r3, r3
10006f0e:	2b00      	cmp	r3, #0
10006f10:	d01b      	beq.n	10006f4a <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10006f12:	230e      	movs	r3, #14
10006f14:	18fa      	adds	r2, r7, r3
10006f16:	230d      	movs	r3, #13
10006f18:	18fb      	adds	r3, r7, r3
10006f1a:	7812      	ldrb	r2, [r2, #0]
10006f1c:	781b      	ldrb	r3, [r3, #0]
10006f1e:	4313      	orrs	r3, r2
10006f20:	b2da      	uxtb	r2, r3
10006f22:	230c      	movs	r3, #12
10006f24:	18fb      	adds	r3, r7, r3
10006f26:	781b      	ldrb	r3, [r3, #0]
10006f28:	4313      	orrs	r3, r2
10006f2a:	b2d9      	uxtb	r1, r3
10006f2c:	230f      	movs	r3, #15
10006f2e:	18fb      	adds	r3, r7, r3
10006f30:	220b      	movs	r2, #11
10006f32:	18ba      	adds	r2, r7, r2
10006f34:	7812      	ldrb	r2, [r2, #0]
10006f36:	430a      	orrs	r2, r1
10006f38:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10006f3a:	230f      	movs	r3, #15
10006f3c:	18fb      	adds	r3, r7, r3
10006f3e:	781b      	ldrb	r3, [r3, #0]
10006f40:	2b00      	cmp	r3, #0
10006f42:	d102      	bne.n	10006f4a <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10006f44:	687b      	ldr	r3, [r7, #4]
10006f46:	2201      	movs	r2, #1
10006f48:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10006f4a:	230f      	movs	r3, #15
10006f4c:	18fb      	adds	r3, r7, r3
10006f4e:	781b      	ldrb	r3, [r3, #0]
}
10006f50:	1c18      	adds	r0, r3, #0
10006f52:	46bd      	mov	sp, r7
10006f54:	b004      	add	sp, #16
10006f56:	bd80      	pop	{r7, pc}

10006f58 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10006f58:	b590      	push	{r4, r7, lr}
10006f5a:	b085      	sub	sp, #20
10006f5c:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10006f5e:	1d3b      	adds	r3, r7, #4
10006f60:	4a04      	ldr	r2, [pc, #16]	; (10006f74 <SystemCoreClockSetup+0x1c>)
10006f62:	ca13      	ldmia	r2!, {r0, r1, r4}
10006f64:	c313      	stmia	r3!, {r0, r1, r4}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10006f66:	1d3b      	adds	r3, r7, #4
10006f68:	1c18      	adds	r0, r3, #0
10006f6a:	f7fb fe27 	bl	10002bbc <XMC_SCU_CLOCK_Init>
}
10006f6e:	46bd      	mov	sp, r7
10006f70:	b005      	add	sp, #20
10006f72:	bd90      	pop	{r4, r7, pc}
10006f74:	100098fc 	.word	0x100098fc

10006f78 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10006f78:	b580      	push	{r7, lr}
10006f7a:	b082      	sub	sp, #8
10006f7c:	af00      	add	r7, sp, #0
10006f7e:	1c02      	adds	r2, r0, #0
10006f80:	1dfb      	adds	r3, r7, #7
10006f82:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10006f84:	4b06      	ldr	r3, [pc, #24]	; (10006fa0 <NVIC_EnableIRQ+0x28>)
10006f86:	1dfa      	adds	r2, r7, #7
10006f88:	7812      	ldrb	r2, [r2, #0]
10006f8a:	1c11      	adds	r1, r2, #0
10006f8c:	221f      	movs	r2, #31
10006f8e:	400a      	ands	r2, r1
10006f90:	2101      	movs	r1, #1
10006f92:	4091      	lsls	r1, r2
10006f94:	1c0a      	adds	r2, r1, #0
10006f96:	601a      	str	r2, [r3, #0]
}
10006f98:	46bd      	mov	sp, r7
10006f9a:	b002      	add	sp, #8
10006f9c:	bd80      	pop	{r7, pc}
10006f9e:	46c0      	nop			; (mov r8, r8)
10006fa0:	e000e100 	.word	0xe000e100

10006fa4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10006fa4:	b5b0      	push	{r4, r5, r7, lr}
10006fa6:	b082      	sub	sp, #8
10006fa8:	af00      	add	r7, sp, #0
10006faa:	1c02      	adds	r2, r0, #0
10006fac:	6039      	str	r1, [r7, #0]
10006fae:	1dfb      	adds	r3, r7, #7
10006fb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
10006fb2:	1dfb      	adds	r3, r7, #7
10006fb4:	781b      	ldrb	r3, [r3, #0]
10006fb6:	2b7f      	cmp	r3, #127	; 0x7f
10006fb8:	d92f      	bls.n	1000701a <NVIC_SetPriority+0x76>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10006fba:	4c2d      	ldr	r4, [pc, #180]	; (10007070 <NVIC_SetPriority+0xcc>)
10006fbc:	1dfb      	adds	r3, r7, #7
10006fbe:	781b      	ldrb	r3, [r3, #0]
10006fc0:	1c1a      	adds	r2, r3, #0
10006fc2:	230f      	movs	r3, #15
10006fc4:	4013      	ands	r3, r2
10006fc6:	3b08      	subs	r3, #8
10006fc8:	0899      	lsrs	r1, r3, #2
10006fca:	4a29      	ldr	r2, [pc, #164]	; (10007070 <NVIC_SetPriority+0xcc>)
10006fcc:	1dfb      	adds	r3, r7, #7
10006fce:	781b      	ldrb	r3, [r3, #0]
10006fd0:	1c18      	adds	r0, r3, #0
10006fd2:	230f      	movs	r3, #15
10006fd4:	4003      	ands	r3, r0
10006fd6:	3b08      	subs	r3, #8
10006fd8:	089b      	lsrs	r3, r3, #2
10006fda:	3306      	adds	r3, #6
10006fdc:	009b      	lsls	r3, r3, #2
10006fde:	18d3      	adds	r3, r2, r3
10006fe0:	685b      	ldr	r3, [r3, #4]
10006fe2:	1dfa      	adds	r2, r7, #7
10006fe4:	7812      	ldrb	r2, [r2, #0]
10006fe6:	1c10      	adds	r0, r2, #0
10006fe8:	2203      	movs	r2, #3
10006fea:	4002      	ands	r2, r0
10006fec:	00d2      	lsls	r2, r2, #3
10006fee:	1c10      	adds	r0, r2, #0
10006ff0:	22ff      	movs	r2, #255	; 0xff
10006ff2:	4082      	lsls	r2, r0
10006ff4:	43d2      	mvns	r2, r2
10006ff6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10006ff8:	683b      	ldr	r3, [r7, #0]
10006ffa:	019b      	lsls	r3, r3, #6
10006ffc:	20ff      	movs	r0, #255	; 0xff
10006ffe:	4003      	ands	r3, r0
10007000:	1df8      	adds	r0, r7, #7
10007002:	7800      	ldrb	r0, [r0, #0]
10007004:	1c05      	adds	r5, r0, #0
10007006:	2003      	movs	r0, #3
10007008:	4028      	ands	r0, r5
1000700a:	00c0      	lsls	r0, r0, #3
1000700c:	4083      	lsls	r3, r0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000700e:	431a      	orrs	r2, r3
10007010:	1d8b      	adds	r3, r1, #6
10007012:	009b      	lsls	r3, r3, #2
10007014:	18e3      	adds	r3, r4, r3
10007016:	605a      	str	r2, [r3, #4]
10007018:	e026      	b.n	10007068 <NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000701a:	4c16      	ldr	r4, [pc, #88]	; (10007074 <NVIC_SetPriority+0xd0>)
1000701c:	1dfb      	adds	r3, r7, #7
1000701e:	781b      	ldrb	r3, [r3, #0]
10007020:	b25b      	sxtb	r3, r3
10007022:	089b      	lsrs	r3, r3, #2
10007024:	4913      	ldr	r1, [pc, #76]	; (10007074 <NVIC_SetPriority+0xd0>)
10007026:	1dfa      	adds	r2, r7, #7
10007028:	7812      	ldrb	r2, [r2, #0]
1000702a:	b252      	sxtb	r2, r2
1000702c:	0892      	lsrs	r2, r2, #2
1000702e:	32c0      	adds	r2, #192	; 0xc0
10007030:	0092      	lsls	r2, r2, #2
10007032:	5852      	ldr	r2, [r2, r1]
10007034:	1df9      	adds	r1, r7, #7
10007036:	7809      	ldrb	r1, [r1, #0]
10007038:	1c08      	adds	r0, r1, #0
1000703a:	2103      	movs	r1, #3
1000703c:	4001      	ands	r1, r0
1000703e:	00c9      	lsls	r1, r1, #3
10007040:	1c08      	adds	r0, r1, #0
10007042:	21ff      	movs	r1, #255	; 0xff
10007044:	4081      	lsls	r1, r0
10007046:	43c9      	mvns	r1, r1
10007048:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000704a:	683a      	ldr	r2, [r7, #0]
1000704c:	0192      	lsls	r2, r2, #6
1000704e:	20ff      	movs	r0, #255	; 0xff
10007050:	4002      	ands	r2, r0
10007052:	1df8      	adds	r0, r7, #7
10007054:	7800      	ldrb	r0, [r0, #0]
10007056:	1c05      	adds	r5, r0, #0
10007058:	2003      	movs	r0, #3
1000705a:	4028      	ands	r0, r5
1000705c:	00c0      	lsls	r0, r0, #3
1000705e:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10007060:	430a      	orrs	r2, r1
10007062:	33c0      	adds	r3, #192	; 0xc0
10007064:	009b      	lsls	r3, r3, #2
10007066:	511a      	str	r2, [r3, r4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10007068:	46bd      	mov	sp, r7
1000706a:	b002      	add	sp, #8
1000706c:	bdb0      	pop	{r4, r5, r7, pc}
1000706e:	46c0      	nop			; (mov r8, r8)
10007070:	e000ed00 	.word	0xe000ed00
10007074:	e000e100 	.word	0xe000e100

10007078 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10007078:	b580      	push	{r7, lr}
1000707a:	b082      	sub	sp, #8
1000707c:	af00      	add	r7, sp, #0
1000707e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
10007080:	687b      	ldr	r3, [r7, #4]
10007082:	2284      	movs	r2, #132	; 0x84
10007084:	589b      	ldr	r3, [r3, r2]
10007086:	2280      	movs	r2, #128	; 0x80
10007088:	0452      	lsls	r2, r2, #17
1000708a:	431a      	orrs	r2, r3
1000708c:	687b      	ldr	r3, [r7, #4]
1000708e:	2184      	movs	r1, #132	; 0x84
10007090:	505a      	str	r2, [r3, r1]
}
10007092:	46bd      	mov	sp, r7
10007094:	b002      	add	sp, #8
10007096:	bd80      	pop	{r7, pc}

10007098 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10007098:	b580      	push	{r7, lr}
1000709a:	b082      	sub	sp, #8
1000709c:	af00      	add	r7, sp, #0
1000709e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
100070a0:	687b      	ldr	r3, [r7, #4]
100070a2:	2284      	movs	r2, #132	; 0x84
100070a4:	589b      	ldr	r3, [r3, r2]
100070a6:	4a04      	ldr	r2, [pc, #16]	; (100070b8 <XMC_VADC_GROUP_QueueDisableArbitrationSlot+0x20>)
100070a8:	401a      	ands	r2, r3
100070aa:	687b      	ldr	r3, [r7, #4]
100070ac:	2184      	movs	r1, #132	; 0x84
100070ae:	505a      	str	r2, [r3, r1]
}
100070b0:	46bd      	mov	sp, r7
100070b2:	b002      	add	sp, #8
100070b4:	bd80      	pop	{r7, pc}
100070b6:	46c0      	nop			; (mov r8, r8)
100070b8:	feffffff 	.word	0xfeffffff

100070bc <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
100070bc:	b580      	push	{r7, lr}
100070be:	b082      	sub	sp, #8
100070c0:	af00      	add	r7, sp, #0
100070c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
100070c4:	687b      	ldr	r3, [r7, #4]
100070c6:	2284      	movs	r2, #132	; 0x84
100070c8:	589a      	ldr	r2, [r3, r2]
100070ca:	2380      	movs	r3, #128	; 0x80
100070cc:	045b      	lsls	r3, r3, #17
100070ce:	4013      	ands	r3, r2
100070d0:	0e1b      	lsrs	r3, r3, #24
100070d2:	1e5a      	subs	r2, r3, #1
100070d4:	4193      	sbcs	r3, r2
100070d6:	b2db      	uxtb	r3, r3
}
100070d8:	1c18      	adds	r0, r3, #0
100070da:	46bd      	mov	sp, r7
100070dc:	b002      	add	sp, #8
100070de:	bd80      	pop	{r7, pc}

100070e0 <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
100070e0:	b580      	push	{r7, lr}
100070e2:	b082      	sub	sp, #8
100070e4:	af00      	add	r7, sp, #0
100070e6:	6078      	str	r0, [r7, #4]
100070e8:	1c0a      	adds	r2, r1, #0
100070ea:	1cfb      	adds	r3, r7, #3
100070ec:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
100070ee:	687a      	ldr	r2, [r7, #4]
100070f0:	2382      	movs	r3, #130	; 0x82
100070f2:	005b      	lsls	r3, r3, #1
100070f4:	58d3      	ldr	r3, [r2, r3]
100070f6:	2203      	movs	r2, #3
100070f8:	4393      	bics	r3, r2
100070fa:	1c19      	adds	r1, r3, #0
100070fc:	687a      	ldr	r2, [r7, #4]
100070fe:	2382      	movs	r3, #130	; 0x82
10007100:	005b      	lsls	r3, r3, #1
10007102:	50d1      	str	r1, [r2, r3]
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
10007104:	687a      	ldr	r2, [r7, #4]
10007106:	2382      	movs	r3, #130	; 0x82
10007108:	005b      	lsls	r3, r3, #1
1000710a:	58d2      	ldr	r2, [r2, r3]
1000710c:	1cfb      	adds	r3, r7, #3
1000710e:	781b      	ldrb	r3, [r3, #0]
10007110:	431a      	orrs	r2, r3
10007112:	1c11      	adds	r1, r2, #0
10007114:	687a      	ldr	r2, [r7, #4]
10007116:	2382      	movs	r3, #130	; 0x82
10007118:	005b      	lsls	r3, r3, #1
1000711a:	50d1      	str	r1, [r2, r3]
}
1000711c:	46bd      	mov	sp, r7
1000711e:	b002      	add	sp, #8
10007120:	bd80      	pop	{r7, pc}
10007122:	46c0      	nop			; (mov r8, r8)

10007124 <XMC_VADC_GROUP_QueueTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
{
10007124:	b580      	push	{r7, lr}
10007126:	b082      	sub	sp, #8
10007128:	af00      	add	r7, sp, #0
1000712a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
1000712c:	687a      	ldr	r2, [r7, #4]
1000712e:	2382      	movs	r3, #130	; 0x82
10007130:	005b      	lsls	r3, r3, #1
10007132:	58d3      	ldr	r3, [r2, r3]
10007134:	2280      	movs	r2, #128	; 0x80
10007136:	0092      	lsls	r2, r2, #2
10007138:	431a      	orrs	r2, r3
1000713a:	1c11      	adds	r1, r2, #0
1000713c:	687a      	ldr	r2, [r7, #4]
1000713e:	2382      	movs	r3, #130	; 0x82
10007140:	005b      	lsls	r3, r3, #1
10007142:	50d1      	str	r1, [r2, r3]
}
10007144:	46bd      	mov	sp, r7
10007146:	b002      	add	sp, #8
10007148:	bd80      	pop	{r7, pc}
1000714a:	46c0      	nop			; (mov r8, r8)

1000714c <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
1000714c:	b580      	push	{r7, lr}
1000714e:	b082      	sub	sp, #8
10007150:	af00      	add	r7, sp, #0
10007152:	6078      	str	r0, [r7, #4]
10007154:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
10007156:	6839      	ldr	r1, [r7, #0]
10007158:	687a      	ldr	r2, [r7, #4]
1000715a:	2388      	movs	r3, #136	; 0x88
1000715c:	005b      	lsls	r3, r3, #1
1000715e:	50d1      	str	r1, [r2, r3]
}
10007160:	46bd      	mov	sp, r7
10007162:	b002      	add	sp, #8
10007164:	bd80      	pop	{r7, pc}
10007166:	46c0      	nop			; (mov r8, r8)

10007168 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
10007168:	b580      	push	{r7, lr}
1000716a:	b084      	sub	sp, #16
1000716c:	af00      	add	r7, sp, #0
1000716e:	60f8      	str	r0, [r7, #12]
10007170:	60b9      	str	r1, [r7, #8]
10007172:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10007174:	687b      	ldr	r3, [r7, #4]
10007176:	6819      	ldr	r1, [r3, #0]
10007178:	68fb      	ldr	r3, [r7, #12]
1000717a:	68ba      	ldr	r2, [r7, #8]
1000717c:	32a0      	adds	r2, #160	; 0xa0
1000717e:	0092      	lsls	r2, r2, #2
10007180:	50d1      	str	r1, [r2, r3]

}
10007182:	46bd      	mov	sp, r7
10007184:	b004      	add	sp, #16
10007186:	bd80      	pop	{r7, pc}

10007188 <ADC_MEASUREMENT_ADV_lQueueInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lQueueInit(ADC_MEASUREMENT_ADV_QUEUE_t *const handle_ptr,
                                                           uint8_t group_index)
{
10007188:	b590      	push	{r4, r7, lr}
1000718a:	b085      	sub	sp, #20
1000718c:	af00      	add	r7, sp, #0
1000718e:	6078      	str	r0, [r7, #4]
10007190:	1c0a      	adds	r2, r1, #0
10007192:	1cfb      	adds	r3, r7, #3
10007194:	701a      	strb	r2, [r3, #0]
  ADC_MEASUREMENT_ADV_STATUS_t status;

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);
10007196:	230f      	movs	r3, #15
10007198:	18fc      	adds	r4, r7, r3
1000719a:	4b26      	ldr	r3, [pc, #152]	; (10007234 <ADC_MEASUREMENT_ADV_lQueueInit+0xac>)
1000719c:	1c18      	adds	r0, r3, #0
1000719e:	f7fe f883 	bl	100052a8 <GLOBAL_ADC_Init>
100071a2:	1c03      	adds	r3, r0, #0
100071a4:	7023      	strb	r3, [r4, #0]

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
100071a6:	1cfb      	adds	r3, r7, #3
100071a8:	781a      	ldrb	r2, [r3, #0]
100071aa:	4b23      	ldr	r3, [pc, #140]	; (10007238 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
100071ac:	0092      	lsls	r2, r2, #2
100071ae:	58d2      	ldr	r2, [r2, r3]
                                XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);
100071b0:	687b      	ldr	r3, [r7, #4]
100071b2:	7d9b      	ldrb	r3, [r3, #22]

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
100071b4:	1c1c      	adds	r4, r3, #0
100071b6:	687b      	ldr	r3, [r7, #4]
100071b8:	68db      	ldr	r3, [r3, #12]
100071ba:	1c10      	adds	r0, r2, #0
100071bc:	1c19      	adds	r1, r3, #0
100071be:	2200      	movs	r2, #0
100071c0:	1c23      	adds	r3, r4, #0
100071c2:	f7fc fb19 	bl	100037f8 <XMC_VADC_GROUP_InputClassInit>
                                XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);

  /* Initialize the Queue hardware */
  XMC_VADC_GROUP_QueueInit(group_ptrs[group_index],handle_ptr->queue_config_handle);
100071c6:	1cfb      	adds	r3, r7, #3
100071c8:	781a      	ldrb	r2, [r3, #0]
100071ca:	4b1b      	ldr	r3, [pc, #108]	; (10007238 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
100071cc:	0092      	lsls	r2, r2, #2
100071ce:	58d2      	ldr	r2, [r2, r3]
100071d0:	687b      	ldr	r3, [r7, #4]
100071d2:	691b      	ldr	r3, [r3, #16]
100071d4:	1c10      	adds	r0, r2, #0
100071d6:	1c19      	adds	r1, r3, #0
100071d8:	f7fc fbfc 	bl	100039d4 <XMC_VADC_GROUP_QueueInit>

  /* Configure the gating mode for queue*/
  XMC_VADC_GROUP_QueueSetGatingMode(group_ptrs[group_index], handle_ptr->gating_mode);
100071dc:	1cfb      	adds	r3, r7, #3
100071de:	781a      	ldrb	r2, [r3, #0]
100071e0:	4b15      	ldr	r3, [pc, #84]	; (10007238 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
100071e2:	0092      	lsls	r2, r2, #2
100071e4:	58d2      	ldr	r2, [r2, r3]
100071e6:	687b      	ldr	r3, [r7, #4]
100071e8:	7d1b      	ldrb	r3, [r3, #20]
100071ea:	1c10      	adds	r0, r2, #0
100071ec:	1c19      	adds	r1, r3, #0
100071ee:	f7ff ff77 	bl	100070e0 <XMC_VADC_GROUP_QueueSetGatingMode>

  /*Interrupt Configuration*/
  if ((bool)true == handle_ptr->rs_intr_handle.interrupt_enable)
100071f2:	687b      	ldr	r3, [r7, #4]
100071f4:	7a1b      	ldrb	r3, [r3, #8]
100071f6:	2b00      	cmp	r3, #0
100071f8:	d014      	beq.n	10007224 <ADC_MEASUREMENT_ADV_lQueueInit+0x9c>
  {
#if (UC_FAMILY == XMC1)
    NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle.node_id, handle_ptr->rs_intr_handle.priority);
100071fa:	687b      	ldr	r3, [r7, #4]
100071fc:	681b      	ldr	r3, [r3, #0]
100071fe:	b2da      	uxtb	r2, r3
10007200:	687b      	ldr	r3, [r7, #4]
10007202:	685b      	ldr	r3, [r3, #4]
10007204:	b252      	sxtb	r2, r2
10007206:	1c10      	adds	r0, r2, #0
10007208:	1c19      	adds	r1, r3, #0
1000720a:	f7ff fecb 	bl	10006fa4 <NVIC_SetPriority>
    XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle.node_id,
                                ((handle_ptr->rs_intr_handle.node_id << 8) | handle_ptr->rs_intr_handle.irqctrl));
#endif

    /* Connect RS Events to NVIC nodes */
    XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(group_ptrs[group_index], (XMC_VADC_SR_t)handle_ptr->srv_req_node);
1000720e:	1cfb      	adds	r3, r7, #3
10007210:	781a      	ldrb	r2, [r3, #0]
10007212:	4b09      	ldr	r3, [pc, #36]	; (10007238 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
10007214:	0092      	lsls	r2, r2, #2
10007216:	58d2      	ldr	r2, [r2, r3]
10007218:	687b      	ldr	r3, [r7, #4]
1000721a:	7d5b      	ldrb	r3, [r3, #21]
1000721c:	1c10      	adds	r0, r2, #0
1000721e:	1c19      	adds	r1, r3, #0
10007220:	f7fc fc30 	bl	10003a84 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
  }

  return (status);
10007224:	230f      	movs	r3, #15
10007226:	18fb      	adds	r3, r7, r3
10007228:	781b      	ldrb	r3, [r3, #0]
}
1000722a:	1c18      	adds	r0, r3, #0
1000722c:	46bd      	mov	sp, r7
1000722e:	b005      	add	sp, #20
10007230:	bd90      	pop	{r4, r7, pc}
10007232:	46c0      	nop			; (mov r8, r8)
10007234:	20000700 	.word	0x20000700
10007238:	10009908 	.word	0x10009908

1000723c <ADC_MEASUREMENT_ADV_lRequestSrcInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Local function to do the request source initialization.*/
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lRequestSrcInit(const ADC_MEASUREMENT_ADV_t
                                                                                 *const handle_ptr)
{
1000723c:	b590      	push	{r4, r7, lr}
1000723e:	b085      	sub	sp, #20
10007240:	af00      	add	r7, sp, #0
10007242:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE != handle_ptr->req_src)
  #endif
      {
        status = ADC_MEASUREMENT_ADV_lQueueInit(handle_ptr->local_queue_handle,handle_ptr->group_index);
10007244:	687b      	ldr	r3, [r7, #4]
10007246:	68da      	ldr	r2, [r3, #12]
10007248:	687b      	ldr	r3, [r7, #4]
1000724a:	7d5b      	ldrb	r3, [r3, #21]
1000724c:	210f      	movs	r1, #15
1000724e:	187c      	adds	r4, r7, r1
10007250:	1c10      	adds	r0, r2, #0
10007252:	1c19      	adds	r1, r3, #0
10007254:	f7ff ff98 	bl	10007188 <ADC_MEASUREMENT_ADV_lQueueInit>
10007258:	1c03      	adds	r3, r0, #0
1000725a:	7023      	strb	r3, [r4, #0]
        status = (ADC_MEASUREMENT_ADV_STATUS_t) ADC_QUEUE_Init(handle_ptr->queue_handle);
      }
#endif
    }
#endif
    return (status);
1000725c:	230f      	movs	r3, #15
1000725e:	18fb      	adds	r3, r7, r3
10007260:	781b      	ldrb	r3, [r3, #0]
}
10007262:	1c18      	adds	r0, r3, #0
10007264:	46bd      	mov	sp, r7
10007266:	b005      	add	sp, #20
10007268:	bd90      	pop	{r4, r7, pc}
1000726a:	46c0      	nop			; (mov r8, r8)

1000726c <ADC_MEASUREMENT_ADV_lQueueInsertEntries>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
/* Local function to insert the queue entries into the hardware.*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lQueueInsertEntries(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
1000726c:	b580      	push	{r7, lr}
1000726e:	b086      	sub	sp, #24
10007270:	af00      	add	r7, sp, #0
10007272:	6078      	str	r0, [r7, #4]
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
10007274:	687b      	ldr	r3, [r7, #4]
10007276:	7d5b      	ldrb	r3, [r3, #21]
10007278:	1c1a      	adds	r2, r3, #0
1000727a:	4b10      	ldr	r3, [pc, #64]	; (100072bc <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x50>)
1000727c:	0092      	lsls	r2, r2, #2
1000727e:	58d3      	ldr	r3, [r2, r3]
10007280:	613b      	str	r3, [r7, #16]
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;
10007282:	687b      	ldr	r3, [r7, #4]
10007284:	685b      	ldr	r3, [r3, #4]
10007286:	60fb      	str	r3, [r7, #12]

  for(entry_index = 0; entry_index < handle_ptr->total_number_of_entries; entry_index++)
10007288:	2300      	movs	r3, #0
1000728a:	617b      	str	r3, [r7, #20]
1000728c:	e00d      	b.n	100072aa <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x3e>
  {
    XMC_VADC_GROUP_QueueInsertChannel(queue_group_ptr, *entries_array[entry_index]);
1000728e:	697b      	ldr	r3, [r7, #20]
10007290:	009b      	lsls	r3, r3, #2
10007292:	68fa      	ldr	r2, [r7, #12]
10007294:	18d3      	adds	r3, r2, r3
10007296:	681b      	ldr	r3, [r3, #0]
10007298:	693a      	ldr	r2, [r7, #16]
1000729a:	681b      	ldr	r3, [r3, #0]
1000729c:	1c10      	adds	r0, r2, #0
1000729e:	1c19      	adds	r1, r3, #0
100072a0:	f7ff ff54 	bl	1000714c <XMC_VADC_GROUP_QueueInsertChannel>
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;

  for(entry_index = 0; entry_index < handle_ptr->total_number_of_entries; entry_index++)
100072a4:	697b      	ldr	r3, [r7, #20]
100072a6:	3301      	adds	r3, #1
100072a8:	617b      	str	r3, [r7, #20]
100072aa:	687b      	ldr	r3, [r7, #4]
100072ac:	7d9b      	ldrb	r3, [r3, #22]
100072ae:	1e1a      	subs	r2, r3, #0
100072b0:	697b      	ldr	r3, [r7, #20]
100072b2:	429a      	cmp	r2, r3
100072b4:	d8eb      	bhi.n	1000728e <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x22>
  {
    XMC_VADC_GROUP_QueueInsertChannel(queue_group_ptr, *entries_array[entry_index]);
  }
}
100072b6:	46bd      	mov	sp, r7
100072b8:	b006      	add	sp, #24
100072ba:	bd80      	pop	{r7, pc}
100072bc:	10009908 	.word	0x10009908

100072c0 <ADC_MEASUREMENT_ADV_lArbitrationStatus>:
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE bool ADC_MEASUREMENT_ADV_lArbitrationStatus(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
100072c0:	b590      	push	{r4, r7, lr}
100072c2:	b085      	sub	sp, #20
100072c4:	af00      	add	r7, sp, #0
100072c6:	6078      	str	r0, [r7, #4]
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
#endif
  arbitration_status = (bool)false;
100072c8:	230f      	movs	r3, #15
100072ca:	18fb      	adds	r3, r7, r3
100072cc:	2200      	movs	r2, #0
100072ce:	701a      	strb	r2, [r3, #0]

  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100072d0:	2001      	movs	r0, #1
100072d2:	f7fb fcb5 	bl	10002c40 <XMC_SCU_CLOCK_IsPeripheralClockGated>
100072d6:	1c03      	adds	r3, r0, #0
100072d8:	1e5a      	subs	r2, r3, #1
100072da:	4193      	sbcs	r3, r2
100072dc:	b2db      	uxtb	r3, r3
100072de:	2201      	movs	r2, #1
100072e0:	4053      	eors	r3, r2
100072e2:	b2db      	uxtb	r3, r3
100072e4:	1c1a      	adds	r2, r3, #0
100072e6:	230e      	movs	r3, #14
100072e8:	18fb      	adds	r3, r7, r3
100072ea:	701a      	strb	r2, [r3, #0]
100072ec:	781a      	ldrb	r2, [r3, #0]
100072ee:	2101      	movs	r1, #1
100072f0:	400a      	ands	r2, r1
100072f2:	701a      	strb	r2, [r3, #0]
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
#endif
  if(clock_reset_check != (bool)false)
100072f4:	230e      	movs	r3, #14
100072f6:	18fb      	adds	r3, r7, r3
100072f8:	781b      	ldrb	r3, [r3, #0]
100072fa:	2b00      	cmp	r3, #0
100072fc:	d00c      	beq.n	10007318 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x58>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
100072fe:	687b      	ldr	r3, [r7, #4]
10007300:	7d5b      	ldrb	r3, [r3, #21]
10007302:	1c1a      	adds	r2, r3, #0
10007304:	4b08      	ldr	r3, [pc, #32]	; (10007328 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x68>)
10007306:	0092      	lsls	r2, r2, #2
10007308:	58d3      	ldr	r3, [r2, r3]
1000730a:	220f      	movs	r2, #15
1000730c:	18bc      	adds	r4, r7, r2
1000730e:	1c18      	adds	r0, r3, #0
10007310:	f7ff fed4 	bl	100070bc <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>
10007314:	1c03      	adds	r3, r0, #0
10007316:	7023      	strb	r3, [r4, #0]
      }
#endif
  }
  return (arbitration_status);
10007318:	230f      	movs	r3, #15
1000731a:	18fb      	adds	r3, r7, r3
1000731c:	781b      	ldrb	r3, [r3, #0]
}
1000731e:	1c18      	adds	r0, r3, #0
10007320:	46bd      	mov	sp, r7
10007322:	b005      	add	sp, #20
10007324:	bd90      	pop	{r4, r7, pc}
10007326:	46c0      	nop			; (mov r8, r8)
10007328:	10009908 	.word	0x10009908

1000732c <ADC_MEASUREMENT_ADV_lDisableArbitration>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
1000732c:	b580      	push	{r7, lr}
1000732e:	b082      	sub	sp, #8
10007330:	af00      	add	r7, sp, #0
10007332:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
10007334:	687b      	ldr	r3, [r7, #4]
10007336:	7d5b      	ldrb	r3, [r3, #21]
10007338:	1c1a      	adds	r2, r3, #0
1000733a:	4b04      	ldr	r3, [pc, #16]	; (1000734c <ADC_MEASUREMENT_ADV_lDisableArbitration+0x20>)
1000733c:	0092      	lsls	r2, r2, #2
1000733e:	58d3      	ldr	r3, [r2, r3]
10007340:	1c18      	adds	r0, r3, #0
10007342:	f7ff fea9 	bl	10007098 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
      }
#endif
}
10007346:	46bd      	mov	sp, r7
10007348:	b002      	add	sp, #8
1000734a:	bd80      	pop	{r7, pc}
1000734c:	10009908 	.word	0x10009908

10007350 <ADC_MEASUREMENT_ADV_lInsertChannels>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Insert channels into the hardware*/
void ADC_MEASUREMENT_ADV_lInsertChannels(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
10007350:	b580      	push	{r7, lr}
10007352:	b082      	sub	sp, #8
10007354:	af00      	add	r7, sp, #0
10007356:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE != handle_ptr->req_src)
  #endif
      {
        ADC_MEASUREMENT_ADV_lQueueInsertEntries(handle_ptr);
10007358:	687b      	ldr	r3, [r7, #4]
1000735a:	1c18      	adds	r0, r3, #0
1000735c:	f7ff ff86 	bl	1000726c <ADC_MEASUREMENT_ADV_lQueueInsertEntries>
        ADC_QUEUE_AllEntriesInserted(handle_ptr->queue_handle);
      }
#endif
    }
#endif
}
10007360:	46bd      	mov	sp, r7
10007362:	b002      	add	sp, #8
10007364:	bd80      	pop	{r7, pc}
10007366:	46c0      	nop			; (mov r8, r8)

10007368 <ADC_MEASUREMENT_ADV_lSyncADCClocks>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifndef ADC_MEASUREMENT_ADV_SYNC_USED
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
10007368:	b580      	push	{r7, lr}
1000736a:	b082      	sub	sp, #8
1000736c:	af00      	add	r7, sp, #0
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
1000736e:	2301      	movs	r3, #1
10007370:	607b      	str	r3, [r7, #4]
10007372:	e00a      	b.n	1000738a <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x22>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
10007374:	4b19      	ldr	r3, [pc, #100]	; (100073dc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
10007376:	687a      	ldr	r2, [r7, #4]
10007378:	0092      	lsls	r2, r2, #2
1000737a:	58d3      	ldr	r3, [r2, r3]
1000737c:	1c18      	adds	r0, r3, #0
1000737e:	2100      	movs	r1, #0
10007380:	f7fc faa4 	bl	100038cc <XMC_VADC_GROUP_SetPowerMode>
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
10007384:	687b      	ldr	r3, [r7, #4]
10007386:	3b01      	subs	r3, #1
10007388:	607b      	str	r3, [r7, #4]
1000738a:	687b      	ldr	r3, [r7, #4]
1000738c:	2b00      	cmp	r3, #0
1000738e:	daf1      	bge.n	10007374 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0xc>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
10007390:	2301      	movs	r3, #1
10007392:	607b      	str	r3, [r7, #4]
10007394:	e012      	b.n	100073bc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x54>
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
10007396:	4b11      	ldr	r3, [pc, #68]	; (100073dc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
10007398:	687a      	ldr	r2, [r7, #4]
1000739a:	0092      	lsls	r2, r2, #2
1000739c:	58d2      	ldr	r2, [r2, r3]
1000739e:	687b      	ldr	r3, [r7, #4]
100073a0:	1c10      	adds	r0, r2, #0
100073a2:	2100      	movs	r1, #0
100073a4:	1c1a      	adds	r2, r3, #0
100073a6:	f7fc faad 	bl	10003904 <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
100073aa:	4a0d      	ldr	r2, [pc, #52]	; (100073e0 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
100073ac:	687b      	ldr	r3, [r7, #4]
100073ae:	1c10      	adds	r0, r2, #0
100073b0:	1c19      	adds	r1, r3, #0
100073b2:	f7fc fadb 	bl	1000396c <XMC_VADC_GROUP_CheckSlaveReadiness>
  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
100073b6:	687b      	ldr	r3, [r7, #4]
100073b8:	3b01      	subs	r3, #1
100073ba:	607b      	str	r3, [r7, #4]
100073bc:	687b      	ldr	r3, [r7, #4]
100073be:	2b00      	cmp	r3, #0
100073c0:	dce9      	bgt.n	10007396 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x2e>
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
100073c2:	4b07      	ldr	r3, [pc, #28]	; (100073e0 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
100073c4:	1c18      	adds	r0, r3, #0
100073c6:	f7fc fabd 	bl	10003944 <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
100073ca:	4b05      	ldr	r3, [pc, #20]	; (100073e0 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
100073cc:	1c18      	adds	r0, r3, #0
100073ce:	2103      	movs	r1, #3
100073d0:	f7fc fa7c 	bl	100038cc <XMC_VADC_GROUP_SetPowerMode>
}
100073d4:	46bd      	mov	sp, r7
100073d6:	b002      	add	sp, #8
100073d8:	bd80      	pop	{r7, pc}
100073da:	46c0      	nop			; (mov r8, r8)
100073dc:	10009908 	.word	0x10009908
100073e0:	48030400 	.word	0x48030400

100073e4 <ADC_MEASUREMENT_ADV_StartADC>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the arbiter of the selected request source*/
void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
100073e4:	b580      	push	{r7, lr}
100073e6:	b082      	sub	sp, #8
100073e8:	af00      	add	r7, sp, #0
100073ea:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
100073ec:	687b      	ldr	r3, [r7, #4]
100073ee:	7d5b      	ldrb	r3, [r3, #21]
100073f0:	1c1a      	adds	r2, r3, #0
100073f2:	4b04      	ldr	r3, [pc, #16]	; (10007404 <ADC_MEASUREMENT_ADV_StartADC+0x20>)
100073f4:	0092      	lsls	r2, r2, #2
100073f6:	58d3      	ldr	r3, [r2, r3]
100073f8:	1c18      	adds	r0, r3, #0
100073fa:	f7ff fe3d 	bl	10007078 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>
      }
#endif
}
100073fe:	46bd      	mov	sp, r7
10007400:	b002      	add	sp, #8
10007402:	bd80      	pop	{r7, pc}
10007404:	10009908 	.word	0x10009908

10007408 <ADC_MEASUREMENT_ADV_SoftwareTrigger>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Starts the ADC conversions by causing a software start of conversion*/
void ADC_MEASUREMENT_ADV_SoftwareTrigger(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
10007408:	b580      	push	{r7, lr}
1000740a:	b082      	sub	sp, #8
1000740c:	af00      	add	r7, sp, #0
1000740e:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
    else
  #endif
    {
      XMC_VADC_GROUP_QueueTriggerConversion(group_ptrs[handle_ptr->group_index]);
10007410:	687b      	ldr	r3, [r7, #4]
10007412:	7d5b      	ldrb	r3, [r3, #21]
10007414:	1c1a      	adds	r2, r3, #0
10007416:	4b04      	ldr	r3, [pc, #16]	; (10007428 <ADC_MEASUREMENT_ADV_SoftwareTrigger+0x20>)
10007418:	0092      	lsls	r2, r2, #2
1000741a:	58d3      	ldr	r3, [r2, r3]
1000741c:	1c18      	adds	r0, r3, #0
1000741e:	f7ff fe81 	bl	10007124 <XMC_VADC_GROUP_QueueTriggerConversion>
    }
#endif
}
10007422:	46bd      	mov	sp, r7
10007424:	b002      	add	sp, #8
10007426:	bd80      	pop	{r7, pc}
10007428:	10009908 	.word	0x10009908

1000742c <ADC_MEASUREMENT_ADC_lNvicEnable>:


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
1000742c:	b580      	push	{r7, lr}
1000742e:	b082      	sub	sp, #8
10007430:	af00      	add	r7, sp, #0
10007432:	6078      	str	r0, [r7, #4]
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
    }
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
10007434:	687b      	ldr	r3, [r7, #4]
10007436:	68db      	ldr	r3, [r3, #12]
10007438:	7a1b      	ldrb	r3, [r3, #8]
1000743a:	2b00      	cmp	r3, #0
1000743c:	d00b      	beq.n	10007456 <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
1000743e:	687b      	ldr	r3, [r7, #4]
10007440:	7d1b      	ldrb	r3, [r3, #20]
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
    }
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
10007442:	2b03      	cmp	r3, #3
10007444:	d107      	bne.n	10007456 <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
10007446:	687b      	ldr	r3, [r7, #4]
10007448:	68db      	ldr	r3, [r3, #12]
1000744a:	681b      	ldr	r3, [r3, #0]
1000744c:	b2db      	uxtb	r3, r3
1000744e:	b25b      	sxtb	r3, r3
10007450:	1c18      	adds	r0, r3, #0
10007452:	f7ff fd91 	bl	10006f78 <NVIC_EnableIRQ>
    }
#endif
}
10007456:	46bd      	mov	sp, r7
10007458:	b002      	add	sp, #8
1000745a:	bd80      	pop	{r7, pc}

1000745c <ADC_MEASUREMENT_ADV_Init>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
1000745c:	b590      	push	{r4, r7, lr}
1000745e:	b085      	sub	sp, #20
10007460:	af00      	add	r7, sp, #0
10007462:	6078      	str	r0, [r7, #4]
  uint8_t fifo_head;
#endif
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;
10007464:	230e      	movs	r3, #14
10007466:	18fb      	adds	r3, r7, r3
10007468:	2200      	movs	r2, #0
1000746a:	701a      	strb	r2, [r3, #0]

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
1000746c:	687b      	ldr	r3, [r7, #4]
1000746e:	691b      	ldr	r3, [r3, #16]
10007470:	781b      	ldrb	r3, [r3, #0]
10007472:	2b02      	cmp	r3, #2
10007474:	d176      	bne.n	10007564 <ADC_MEASUREMENT_ADV_Init+0x108>
  {

    arbitration_status = ADC_MEASUREMENT_ADV_lArbitrationStatus(handle_ptr);
10007476:	230e      	movs	r3, #14
10007478:	18fc      	adds	r4, r7, r3
1000747a:	687b      	ldr	r3, [r7, #4]
1000747c:	1c18      	adds	r0, r3, #0
1000747e:	f7ff ff1f 	bl	100072c0 <ADC_MEASUREMENT_ADV_lArbitrationStatus>
10007482:	1c03      	adds	r3, r0, #0
10007484:	7023      	strb	r3, [r4, #0]

   /* Initialize the scan/queue request source.*/
   status = ADC_MEASUREMENT_ADV_lRequestSrcInit(handle_ptr);
10007486:	230d      	movs	r3, #13
10007488:	18fc      	adds	r4, r7, r3
1000748a:	687b      	ldr	r3, [r7, #4]
1000748c:	1c18      	adds	r0, r3, #0
1000748e:	f7ff fed5 	bl	1000723c <ADC_MEASUREMENT_ADV_lRequestSrcInit>
10007492:	1c03      	adds	r3, r0, #0
10007494:	7023      	strb	r3, [r4, #0]

   if(arbitration_status == (bool)false)
10007496:	230e      	movs	r3, #14
10007498:	18fb      	adds	r3, r7, r3
1000749a:	781b      	ldrb	r3, [r3, #0]
1000749c:	2201      	movs	r2, #1
1000749e:	4053      	eors	r3, r2
100074a0:	b2db      	uxtb	r3, r3
100074a2:	2b00      	cmp	r3, #0
100074a4:	d003      	beq.n	100074ae <ADC_MEASUREMENT_ADV_Init+0x52>
   {
     ADC_MEASUREMENT_ADV_lDisableArbitration(handle_ptr);
100074a6:	687b      	ldr	r3, [r7, #4]
100074a8:	1c18      	adds	r0, r3, #0
100074aa:	f7ff ff3f 	bl	1000732c <ADC_MEASUREMENT_ADV_lDisableArbitration>
    {
      /*  Configure the Sync conversion operation */
      ADC_MEASUREMENT_ADV_lSyncInit(handle_ptr);
    }
#else
   ADC_MEASUREMENT_ADV_lSyncADCClocks();
100074ae:	f7ff ff5b 	bl	10007368 <ADC_MEASUREMENT_ADV_lSyncADCClocks>
#ifdef ADC_MEASUREMENT_ADV_MUX_USED
  #ifdef ADC_MEASUREMENT_ADV_MUX_NOT_ALL_USED
    if (handle_ptr->event_config != NULL)
  #endif
    {
      (handle_ptr->event_config)();
100074b2:	687b      	ldr	r3, [r7, #4]
100074b4:	689b      	ldr	r3, [r3, #8]
100074b6:	4798      	blx	r3
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
100074b8:	230c      	movs	r3, #12
100074ba:	18fb      	adds	r3, r7, r3
100074bc:	687a      	ldr	r2, [r7, #4]
100074be:	7dd2      	ldrb	r2, [r2, #23]
100074c0:	701a      	strb	r2, [r3, #0]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
100074c2:	230f      	movs	r3, #15
100074c4:	18fb      	adds	r3, r7, r3
100074c6:	2200      	movs	r2, #0
100074c8:	701a      	strb	r2, [r3, #0]
100074ca:	e031      	b.n	10007530 <ADC_MEASUREMENT_ADV_Init+0xd4>
    {
      indexed = handle_ptr->channel_array[ch_num];
100074cc:	687b      	ldr	r3, [r7, #4]
100074ce:	681a      	ldr	r2, [r3, #0]
100074d0:	230f      	movs	r3, #15
100074d2:	18fb      	adds	r3, r7, r3
100074d4:	781b      	ldrb	r3, [r3, #0]
100074d6:	009b      	lsls	r3, r3, #2
100074d8:	18d3      	adds	r3, r2, r3
100074da:	681b      	ldr	r3, [r3, #0]
100074dc:	60bb      	str	r3, [r7, #8]

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
100074de:	68bb      	ldr	r3, [r7, #8]
100074e0:	7a1b      	ldrb	r3, [r3, #8]
100074e2:	1c1a      	adds	r2, r3, #0
100074e4:	4b23      	ldr	r3, [pc, #140]	; (10007574 <ADC_MEASUREMENT_ADV_Init+0x118>)
100074e6:	0092      	lsls	r2, r2, #2
100074e8:	58d2      	ldr	r2, [r2, r3]
100074ea:	68bb      	ldr	r3, [r7, #8]
100074ec:	7a5b      	ldrb	r3, [r3, #9]
100074ee:	1c19      	adds	r1, r3, #0
100074f0:	68bb      	ldr	r3, [r7, #8]
100074f2:	681b      	ldr	r3, [r3, #0]
100074f4:	1c10      	adds	r0, r2, #0
100074f6:	1c1a      	adds	r2, r3, #0
100074f8:	f7fc fae2 	bl	10003ac0 <XMC_VADC_GROUP_ChannelInit>
          XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                    indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
      }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
100074fc:	68bb      	ldr	r3, [r7, #8]
100074fe:	7a1b      	ldrb	r3, [r3, #8]
10007500:	1c1a      	adds	r2, r3, #0
10007502:	4b1c      	ldr	r3, [pc, #112]	; (10007574 <ADC_MEASUREMENT_ADV_Init+0x118>)
10007504:	0092      	lsls	r2, r2, #2
10007506:	58d2      	ldr	r2, [r2, r3]
10007508:	68bb      	ldr	r3, [r7, #8]
1000750a:	681b      	ldr	r3, [r3, #0]
1000750c:	789b      	ldrb	r3, [r3, #2]
1000750e:	071b      	lsls	r3, r3, #28
10007510:	0f1b      	lsrs	r3, r3, #28
10007512:	b2db      	uxtb	r3, r3
10007514:	1c19      	adds	r1, r3, #0
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
10007516:	68bb      	ldr	r3, [r7, #8]
10007518:	685b      	ldr	r3, [r3, #4]
          XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                    indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
      }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
1000751a:	1c10      	adds	r0, r2, #0
1000751c:	1c1a      	adds	r2, r3, #0
1000751e:	f7ff fe23 	bl	10007168 <XMC_VADC_GROUP_ResultInit>
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
10007522:	230f      	movs	r3, #15
10007524:	18fb      	adds	r3, r7, r3
10007526:	781a      	ldrb	r2, [r3, #0]
10007528:	230f      	movs	r3, #15
1000752a:	18fb      	adds	r3, r7, r3
1000752c:	3201      	adds	r2, #1
1000752e:	701a      	strb	r2, [r3, #0]
10007530:	230f      	movs	r3, #15
10007532:	18fa      	adds	r2, r7, r3
10007534:	230c      	movs	r3, #12
10007536:	18fb      	adds	r3, r7, r3
10007538:	7812      	ldrb	r2, [r2, #0]
1000753a:	781b      	ldrb	r3, [r3, #0]
1000753c:	429a      	cmp	r2, r3
1000753e:	d3c5      	bcc.n	100074cc <ADC_MEASUREMENT_ADV_Init+0x70>
      }
    }
#endif

    /* Enables the NVIC node if NVIC node is consumed inside the APP*/
    ADC_MEASUREMENT_ADC_lNvicEnable(handle_ptr);
10007540:	687b      	ldr	r3, [r7, #4]
10007542:	1c18      	adds	r0, r3, #0
10007544:	f7ff ff72 	bl	1000742c <ADC_MEASUREMENT_ADC_lNvicEnable>

    /* Load the queue/scan entries into the hardware */
    ADC_MEASUREMENT_ADV_lInsertChannels(handle_ptr);
10007548:	687b      	ldr	r3, [r7, #4]
1000754a:	1c18      	adds	r0, r3, #0
1000754c:	f7ff ff00 	bl	10007350 <ADC_MEASUREMENT_ADV_lInsertChannels>
#ifdef ADC_MEASUREMENT_ADV_START_ADC
  #ifdef ADC_MEASUREMENT_ADV_NOT_ALL_REQ_START
    if ((bool)false  != handle_ptr->start_at_initialization)
  #endif
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
10007550:	687b      	ldr	r3, [r7, #4]
10007552:	1c18      	adds	r0, r3, #0
10007554:	f7ff ff46 	bl	100073e4 <ADC_MEASUREMENT_ADV_StartADC>
    }
#endif

    *handle_ptr->init_state = status;
10007558:	687b      	ldr	r3, [r7, #4]
1000755a:	691b      	ldr	r3, [r3, #16]
1000755c:	220d      	movs	r2, #13
1000755e:	18ba      	adds	r2, r7, r2
10007560:	7812      	ldrb	r2, [r2, #0]
10007562:	701a      	strb	r2, [r3, #0]
  }
  return (*handle_ptr->init_state);
10007564:	687b      	ldr	r3, [r7, #4]
10007566:	691b      	ldr	r3, [r3, #16]
10007568:	781b      	ldrb	r3, [r3, #0]
}
1000756a:	1c18      	adds	r0, r3, #0
1000756c:	46bd      	mov	sp, r7
1000756e:	b005      	add	sp, #20
10007570:	bd90      	pop	{r4, r7, pc}
10007572:	46c0      	nop			; (mov r8, r8)
10007574:	10009908 	.word	0x10009908

10007578 <ADC_MEASUREMENT_ADV_0_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_MEASUREMENT_ADV_0_event_config(void)
{
10007578:	b580      	push	{r7, lr}
1000757a:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for xmc_I_cw (Group-0 channel-4 Result_Register-10)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0, 10U, XMC_VADC_SR_SHARED_SR0);
1000757c:	4b03      	ldr	r3, [pc, #12]	; (1000758c <ADC_MEASUREMENT_ADV_0_event_config+0x14>)
1000757e:	1c18      	adds	r0, r3, #0
10007580:	210a      	movs	r1, #10
10007582:	2204      	movs	r2, #4
10007584:	f7fc fb0a 	bl	10003b9c <XMC_VADC_GROUP_SetResultInterruptNode>

}
10007588:	46bd      	mov	sp, r7
1000758a:	bd80      	pop	{r7, pc}
1000758c:	48030400 	.word	0x48030400

10007590 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10007590:	b590      	push	{r4, r7, lr}
10007592:	b083      	sub	sp, #12
10007594:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10007596:	1dfb      	adds	r3, r7, #7
10007598:	2200      	movs	r2, #0
1000759a:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
1000759c:	1dfc      	adds	r4, r7, #7
1000759e:	4b4d      	ldr	r3, [pc, #308]	; (100076d4 <DAVE_Init+0x144>)
100075a0:	1c18      	adds	r0, r3, #0
100075a2:	f7ff fc97 	bl	10006ed4 <CLOCK_XMC1_Init>
100075a6:	1c03      	adds	r3, r0, #0
100075a8:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
100075aa:	1dfb      	adds	r3, r7, #7
100075ac:	781b      	ldrb	r3, [r3, #0]
100075ae:	2b00      	cmp	r3, #0
100075b0:	d106      	bne.n	100075c0 <DAVE_Init+0x30>
  {
	 /**  Initialization of DIGITAL_IO APP instance xmc_int_tcs */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&xmc_int_tcs); 
100075b2:	1dfc      	adds	r4, r7, #7
100075b4:	4b48      	ldr	r3, [pc, #288]	; (100076d8 <DAVE_Init+0x148>)
100075b6:	1c18      	adds	r0, r3, #0
100075b8:	f7ff fc68 	bl	10006e8c <DIGITAL_IO_Init>
100075bc:	1c03      	adds	r3, r0, #0
100075be:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100075c0:	1dfb      	adds	r3, r7, #7
100075c2:	781b      	ldrb	r3, [r3, #0]
100075c4:	2b00      	cmp	r3, #0
100075c6:	d106      	bne.n	100075d6 <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance xmc_int_bmc */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&xmc_int_bmc); 
100075c8:	1dfc      	adds	r4, r7, #7
100075ca:	4b44      	ldr	r3, [pc, #272]	; (100076dc <DAVE_Init+0x14c>)
100075cc:	1c18      	adds	r0, r3, #0
100075ce:	f7ff fc5d 	bl	10006e8c <DIGITAL_IO_Init>
100075d2:	1c03      	adds	r3, r0, #0
100075d4:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100075d6:	1dfb      	adds	r3, r7, #7
100075d8:	781b      	ldrb	r3, [r3, #0]
100075da:	2b00      	cmp	r3, #0
100075dc:	d106      	bne.n	100075ec <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance xmc_lin_en */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&xmc_lin_en); 
100075de:	1dfc      	adds	r4, r7, #7
100075e0:	4b3f      	ldr	r3, [pc, #252]	; (100076e0 <DAVE_Init+0x150>)
100075e2:	1c18      	adds	r0, r3, #0
100075e4:	f7ff fc52 	bl	10006e8c <DIGITAL_IO_Init>
100075e8:	1c03      	adds	r3, r0, #0
100075ea:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100075ec:	1dfb      	adds	r3, r7, #7
100075ee:	781b      	ldrb	r3, [r3, #0]
100075f0:	2b00      	cmp	r3, #0
100075f2:	d106      	bne.n	10007602 <DAVE_Init+0x72>
  {
	 /**  Initialization of DIGITAL_IO APP instance xmc_sel_gain */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&xmc_sel_gain); 
100075f4:	1dfc      	adds	r4, r7, #7
100075f6:	4b3b      	ldr	r3, [pc, #236]	; (100076e4 <DAVE_Init+0x154>)
100075f8:	1c18      	adds	r0, r3, #0
100075fa:	f7ff fc47 	bl	10006e8c <DIGITAL_IO_Init>
100075fe:	1c03      	adds	r3, r0, #0
10007600:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10007602:	1dfb      	adds	r3, r7, #7
10007604:	781b      	ldrb	r3, [r3, #0]
10007606:	2b00      	cmp	r3, #0
10007608:	d106      	bne.n	10007618 <DAVE_Init+0x88>
  {
	 /**  Initialization of DIGITAL_IO APP instance VCC_LED_shtdwn */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VCC_LED_shtdwn); 
1000760a:	1dfc      	adds	r4, r7, #7
1000760c:	4b36      	ldr	r3, [pc, #216]	; (100076e8 <DAVE_Init+0x158>)
1000760e:	1c18      	adds	r0, r3, #0
10007610:	f7ff fc3c 	bl	10006e8c <DIGITAL_IO_Init>
10007614:	1c03      	adds	r3, r0, #0
10007616:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10007618:	1dfb      	adds	r3, r7, #7
1000761a:	781b      	ldrb	r3, [r3, #0]
1000761c:	2b00      	cmp	r3, #0
1000761e:	d106      	bne.n	1000762e <DAVE_Init+0x9e>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
10007620:	1dfc      	adds	r4, r7, #7
10007622:	4b32      	ldr	r3, [pc, #200]	; (100076ec <DAVE_Init+0x15c>)
10007624:	1c18      	adds	r0, r3, #0
10007626:	f7fc fbe5 	bl	10003df4 <UART_Init>
1000762a:	1c03      	adds	r3, r0, #0
1000762c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000762e:	1dfb      	adds	r3, r7, #7
10007630:	781b      	ldrb	r3, [r3, #0]
10007632:	2b00      	cmp	r3, #0
10007634:	d106      	bne.n	10007644 <DAVE_Init+0xb4>
  {
	 /**  Initialization of UART APP instance UART_1 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_1); 
10007636:	1dfc      	adds	r4, r7, #7
10007638:	4b2d      	ldr	r3, [pc, #180]	; (100076f0 <DAVE_Init+0x160>)
1000763a:	1c18      	adds	r0, r3, #0
1000763c:	f7fc fbda 	bl	10003df4 <UART_Init>
10007640:	1c03      	adds	r3, r0, #0
10007642:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10007644:	1dfb      	adds	r3, r7, #7
10007646:	781b      	ldrb	r3, [r3, #0]
10007648:	2b00      	cmp	r3, #0
1000764a:	d106      	bne.n	1000765a <DAVE_Init+0xca>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
1000764c:	1dfc      	adds	r4, r7, #7
1000764e:	4b29      	ldr	r3, [pc, #164]	; (100076f4 <DAVE_Init+0x164>)
10007650:	1c18      	adds	r0, r3, #0
10007652:	f7fd fa67 	bl	10004b24 <SYSTIMER_Init>
10007656:	1c03      	adds	r3, r0, #0
10007658:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000765a:	1dfb      	adds	r3, r7, #7
1000765c:	781b      	ldrb	r3, [r3, #0]
1000765e:	2b00      	cmp	r3, #0
10007660:	d106      	bne.n	10007670 <DAVE_Init+0xe0>
  {
	 /**  Initialization of E_EEPROM_XMC1 APP instance E_EEPROM_XMC1_0 */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC1_Init(&E_EEPROM_XMC1_0); 
10007662:	1dfc      	adds	r4, r7, #7
10007664:	4b24      	ldr	r3, [pc, #144]	; (100076f8 <DAVE_Init+0x168>)
10007666:	1c18      	adds	r0, r3, #0
10007668:	f7fd fea0 	bl	100053ac <E_EEPROM_XMC1_Init>
1000766c:	1c03      	adds	r3, r0, #0
1000766e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10007670:	1dfb      	adds	r3, r7, #7
10007672:	781b      	ldrb	r3, [r3, #0]
10007674:	2b00      	cmp	r3, #0
10007676:	d106      	bne.n	10007686 <DAVE_Init+0xf6>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_MEASUREMENT_ADV_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_MEASUREMENT_ADV_0); 
10007678:	1dfc      	adds	r4, r7, #7
1000767a:	4b20      	ldr	r3, [pc, #128]	; (100076fc <DAVE_Init+0x16c>)
1000767c:	1c18      	adds	r0, r3, #0
1000767e:	f7ff feed 	bl	1000745c <ADC_MEASUREMENT_ADV_Init>
10007682:	1c03      	adds	r3, r0, #0
10007684:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10007686:	1dfb      	adds	r3, r7, #7
10007688:	781b      	ldrb	r3, [r3, #0]
1000768a:	2b00      	cmp	r3, #0
1000768c:	d106      	bne.n	1000769c <DAVE_Init+0x10c>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
1000768e:	1dfc      	adds	r4, r7, #7
10007690:	4b1b      	ldr	r3, [pc, #108]	; (10007700 <DAVE_Init+0x170>)
10007692:	1c18      	adds	r0, r3, #0
10007694:	f7fd fd8a 	bl	100051ac <INTERRUPT_Init>
10007698:	1c03      	adds	r3, r0, #0
1000769a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000769c:	1dfb      	adds	r3, r7, #7
1000769e:	781b      	ldrb	r3, [r3, #0]
100076a0:	2b00      	cmp	r3, #0
100076a2:	d106      	bne.n	100076b2 <DAVE_Init+0x122>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_1); 
100076a4:	1dfc      	adds	r4, r7, #7
100076a6:	4b17      	ldr	r3, [pc, #92]	; (10007704 <DAVE_Init+0x174>)
100076a8:	1c18      	adds	r0, r3, #0
100076aa:	f7fd fd7f 	bl	100051ac <INTERRUPT_Init>
100076ae:	1c03      	adds	r3, r0, #0
100076b0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100076b2:	1dfb      	adds	r3, r7, #7
100076b4:	781b      	ldrb	r3, [r3, #0]
100076b6:	2b00      	cmp	r3, #0
100076b8:	d106      	bne.n	100076c8 <DAVE_Init+0x138>
  {
	 /**  Initialization of PDM_DIMMED_LED_LAMP APP instance PDM_DIMMED_LED_LAMP_0 */
	 init_status = (DAVE_STATUS_t)PDM_DIMMED_LED_LAMP_Init(&PDM_DIMMED_LED_LAMP_0); 
100076ba:	1dfc      	adds	r4, r7, #7
100076bc:	4b12      	ldr	r3, [pc, #72]	; (10007708 <DAVE_Init+0x178>)
100076be:	1c18      	adds	r0, r3, #0
100076c0:	f7fd fb60 	bl	10004d84 <PDM_DIMMED_LED_LAMP_Init>
100076c4:	1c03      	adds	r3, r0, #0
100076c6:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
100076c8:	1dfb      	adds	r3, r7, #7
100076ca:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
100076cc:	1c18      	adds	r0, r3, #0
100076ce:	46bd      	mov	sp, r7
100076d0:	b003      	add	sp, #12
100076d2:	bd90      	pop	{r4, r7, pc}
100076d4:	200007c0 	.word	0x200007c0
100076d8:	100098ac 	.word	0x100098ac
100076dc:	100098bc 	.word	0x100098bc
100076e0:	100098cc 	.word	0x100098cc
100076e4:	100098dc 	.word	0x100098dc
100076e8:	100098ec 	.word	0x100098ec
100076ec:	20000554 	.word	0x20000554
100076f0:	20000560 	.word	0x20000560
100076f4:	200007bc 	.word	0x200007bc
100076f8:	20000718 	.word	0x20000718
100076fc:	100099c4 	.word	0x100099c4
10007700:	10009810 	.word	0x10009810
10007704:	10009814 	.word	0x10009814
10007708:	20000580 	.word	0x20000580

1000770c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000770c:	b580      	push	{r7, lr}
1000770e:	b082      	sub	sp, #8
10007710:	af00      	add	r7, sp, #0
10007712:	6078      	str	r0, [r7, #4]
10007714:	1c0a      	adds	r2, r1, #0
10007716:	1cfb      	adds	r3, r7, #3
10007718:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
1000771a:	1cfb      	adds	r3, r7, #3
1000771c:	781b      	ldrb	r3, [r3, #0]
1000771e:	2201      	movs	r2, #1
10007720:	409a      	lsls	r2, r3
10007722:	687b      	ldr	r3, [r7, #4]
10007724:	605a      	str	r2, [r3, #4]
}
10007726:	46bd      	mov	sp, r7
10007728:	b002      	add	sp, #8
1000772a:	bd80      	pop	{r7, pc}

1000772c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000772c:	b580      	push	{r7, lr}
1000772e:	b082      	sub	sp, #8
10007730:	af00      	add	r7, sp, #0
10007732:	6078      	str	r0, [r7, #4]
10007734:	1c0a      	adds	r2, r1, #0
10007736:	1cfb      	adds	r3, r7, #3
10007738:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000773a:	1cfb      	adds	r3, r7, #3
1000773c:	781b      	ldrb	r3, [r3, #0]
1000773e:	2280      	movs	r2, #128	; 0x80
10007740:	0252      	lsls	r2, r2, #9
10007742:	409a      	lsls	r2, r3
10007744:	687b      	ldr	r3, [r7, #4]
10007746:	605a      	str	r2, [r3, #4]
}
10007748:	46bd      	mov	sp, r7
1000774a:	b002      	add	sp, #8
1000774c:	bd80      	pop	{r7, pc}
1000774e:	46c0      	nop			; (mov r8, r8)

10007750 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10007750:	b580      	push	{r7, lr}
10007752:	b082      	sub	sp, #8
10007754:	af00      	add	r7, sp, #0
10007756:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10007758:	687b      	ldr	r3, [r7, #4]
1000775a:	681a      	ldr	r2, [r3, #0]
1000775c:	687b      	ldr	r3, [r7, #4]
1000775e:	7b1b      	ldrb	r3, [r3, #12]
10007760:	1c10      	adds	r0, r2, #0
10007762:	1c19      	adds	r1, r3, #0
10007764:	f7ff ffd2 	bl	1000770c <XMC_GPIO_SetOutputHigh>
}
10007768:	46bd      	mov	sp, r7
1000776a:	b002      	add	sp, #8
1000776c:	bd80      	pop	{r7, pc}
1000776e:	46c0      	nop			; (mov r8, r8)

10007770 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10007770:	b580      	push	{r7, lr}
10007772:	b082      	sub	sp, #8
10007774:	af00      	add	r7, sp, #0
10007776:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10007778:	687b      	ldr	r3, [r7, #4]
1000777a:	681a      	ldr	r2, [r3, #0]
1000777c:	687b      	ldr	r3, [r7, #4]
1000777e:	7b1b      	ldrb	r3, [r3, #12]
10007780:	1c10      	adds	r0, r2, #0
10007782:	1c19      	adds	r1, r3, #0
10007784:	f7ff ffd2 	bl	1000772c <XMC_GPIO_SetOutputLow>
}
10007788:	46bd      	mov	sp, r7
1000778a:	b002      	add	sp, #8
1000778c:	bd80      	pop	{r7, pc}
1000778e:	46c0      	nop			; (mov r8, r8)

10007790 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
10007790:	b580      	push	{r7, lr}
10007792:	b082      	sub	sp, #8
10007794:	af00      	add	r7, sp, #0
10007796:	6078      	str	r0, [r7, #4]
10007798:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
1000779a:	687b      	ldr	r3, [r7, #4]
1000779c:	683a      	ldr	r2, [r7, #0]
1000779e:	32c0      	adds	r2, #192	; 0xc0
100077a0:	0092      	lsls	r2, r2, #2
100077a2:	58d3      	ldr	r3, [r2, r3]
100077a4:	b29b      	uxth	r3, r3
}
100077a6:	1c18      	adds	r0, r3, #0
100077a8:	46bd      	mov	sp, r7
100077aa:	b002      	add	sp, #8
100077ac:	bd80      	pop	{r7, pc}
100077ae:	46c0      	nop			; (mov r8, r8)

100077b0 <ADC_MEASUREMENT_ADV_GetResult>:
  }
}
 * @endcode
 */
__STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const handle_ptr)
{
100077b0:	b590      	push	{r4, r7, lr}
100077b2:	b085      	sub	sp, #20
100077b4:	af00      	add	r7, sp, #0
100077b6:	6078      	str	r0, [r7, #4]
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
100077b8:	687b      	ldr	r3, [r7, #4]
100077ba:	7a1b      	ldrb	r3, [r3, #8]
100077bc:	1c1a      	adds	r2, r3, #0
100077be:	4b0c      	ldr	r3, [pc, #48]	; (100077f0 <ADC_MEASUREMENT_ADV_GetResult+0x40>)
100077c0:	0092      	lsls	r2, r2, #2
100077c2:	58d2      	ldr	r2, [r2, r3]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
100077c4:	687b      	ldr	r3, [r7, #4]
100077c6:	681b      	ldr	r3, [r3, #0]
100077c8:	789b      	ldrb	r3, [r3, #2]
100077ca:	071b      	lsls	r3, r3, #28
100077cc:	0f1b      	lsrs	r3, r3, #28
100077ce:	b2db      	uxtb	r3, r3
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
100077d0:	210e      	movs	r1, #14
100077d2:	187c      	adds	r4, r7, r1
100077d4:	1c10      	adds	r0, r2, #0
100077d6:	1c19      	adds	r1, r3, #0
100077d8:	f7ff ffda 	bl	10007790 <XMC_VADC_GROUP_GetResult>
100077dc:	1c03      	adds	r3, r0, #0
100077de:	8023      	strh	r3, [r4, #0]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
  return(result);
100077e0:	230e      	movs	r3, #14
100077e2:	18fb      	adds	r3, r7, r3
100077e4:	881b      	ldrh	r3, [r3, #0]
}
100077e6:	1c18      	adds	r0, r3, #0
100077e8:	46bd      	mov	sp, r7
100077ea:	b005      	add	sp, #20
100077ec:	bd90      	pop	{r4, r7, pc}
100077ee:	46c0      	nop			; (mov r8, r8)
100077f0:	10009908 	.word	0x10009908

100077f4 <main>:

	 DAVE_STATUS_t Dstatus;


int main(void)
{
100077f4:	b590      	push	{r4, r7, lr}
100077f6:	b087      	sub	sp, #28
100077f8:	af00      	add	r7, sp, #0
	uint32_t TimerId,status;
	uint32_t Timer1M,status1M;
	uint32_t Timer20M,status20M;

   Dstatus = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_Init()
100077fa:	f7ff fec9 	bl	10007590 <DAVE_Init>
100077fe:	1c03      	adds	r3, r0, #0
10007800:	1c1a      	adds	r2, r3, #0
10007802:	4bf3      	ldr	r3, [pc, #972]	; (10007bd0 <main+0x3dc>)
10007804:	701a      	strb	r2, [r3, #0]
   if(Dstatus == DAVE_STATUS_SUCCESS)
10007806:	4bf2      	ldr	r3, [pc, #968]	; (10007bd0 <main+0x3dc>)
10007808:	781b      	ldrb	r3, [r3, #0]
1000780a:	2b00      	cmp	r3, #0
1000780c:	d000      	beq.n	10007810 <main+0x1c>
   else
   {
    XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", Dstatus));
    while(1U)
    {
    }
1000780e:	e7fe      	b.n	1000780e <main+0x1a>
   }
   // Initialisierung
   // Übergabe werte
	sysiniValueB1();
10007810:	f7fa fbf4 	bl	10001ffc <sysiniValueB1>
	sysiniValueB2();
10007814:	f7fa fc32 	bl	1000207c <sysiniValueB2>
	sysiniValueB4();
10007818:	f7fa fc6e 	bl	100020f8 <sysiniValueB4>
sysiniValueB5();
1000781c:	f7fa fce0 	bl	100021e0 <sysiniValueB5>
	//  tester4 = writeOff_light_B5_EEprom();
	  tester = readSerNrEEprom();
10007820:	f7fa fa3e 	bl	10001ca0 <readSerNrEEprom>
10007824:	1c03      	adds	r3, r0, #0
10007826:	1c1a      	adds	r2, r3, #0
10007828:	4bea      	ldr	r3, [pc, #936]	; (10007bd4 <main+0x3e0>)
1000782a:	601a      	str	r2, [r3, #0]
	if (tester == 0x03)
1000782c:	4be9      	ldr	r3, [pc, #932]	; (10007bd4 <main+0x3e0>)
1000782e:	681b      	ldr	r3, [r3, #0]
10007830:	2b03      	cmp	r3, #3
10007832:	d166      	bne.n	10007902 <main+0x10e>
	{
	Ser_NrH = ReadBuffer1[0] * 0x100 + ReadBuffer1[1];
10007834:	4be8      	ldr	r3, [pc, #928]	; (10007bd8 <main+0x3e4>)
10007836:	781b      	ldrb	r3, [r3, #0]
10007838:	b29b      	uxth	r3, r3
1000783a:	021b      	lsls	r3, r3, #8
1000783c:	b29a      	uxth	r2, r3
1000783e:	4be6      	ldr	r3, [pc, #920]	; (10007bd8 <main+0x3e4>)
10007840:	785b      	ldrb	r3, [r3, #1]
10007842:	b29b      	uxth	r3, r3
10007844:	18d3      	adds	r3, r2, r3
10007846:	b29a      	uxth	r2, r3
10007848:	4be4      	ldr	r3, [pc, #912]	; (10007bdc <main+0x3e8>)
1000784a:	801a      	strh	r2, [r3, #0]
	Ser_NrL = ReadBuffer1[2] * 0x100 + ReadBuffer1[3];
1000784c:	4be2      	ldr	r3, [pc, #904]	; (10007bd8 <main+0x3e4>)
1000784e:	789b      	ldrb	r3, [r3, #2]
10007850:	b29b      	uxth	r3, r3
10007852:	021b      	lsls	r3, r3, #8
10007854:	b29a      	uxth	r2, r3
10007856:	4be0      	ldr	r3, [pc, #896]	; (10007bd8 <main+0x3e4>)
10007858:	78db      	ldrb	r3, [r3, #3]
1000785a:	b29b      	uxth	r3, r3
1000785c:	18d3      	adds	r3, r2, r3
1000785e:	b29a      	uxth	r2, r3
10007860:	4bdf      	ldr	r3, [pc, #892]	; (10007be0 <main+0x3ec>)
10007862:	801a      	strh	r2, [r3, #0]
  Hard_Vers = ReadBuffer1[4] * 0x100 + ReadBuffer1[5];
10007864:	4bdc      	ldr	r3, [pc, #880]	; (10007bd8 <main+0x3e4>)
10007866:	791b      	ldrb	r3, [r3, #4]
10007868:	b29b      	uxth	r3, r3
1000786a:	021b      	lsls	r3, r3, #8
1000786c:	b29a      	uxth	r2, r3
1000786e:	4bda      	ldr	r3, [pc, #872]	; (10007bd8 <main+0x3e4>)
10007870:	795b      	ldrb	r3, [r3, #5]
10007872:	b29b      	uxth	r3, r3
10007874:	18d3      	adds	r3, r2, r3
10007876:	b29a      	uxth	r2, r3
10007878:	4bda      	ldr	r3, [pc, #872]	; (10007be4 <main+0x3f0>)
1000787a:	801a      	strh	r2, [r3, #0]
  Soft_Vers = ReadBuffer1[6] * 0x100 + ReadBuffer1[7];
1000787c:	4bd6      	ldr	r3, [pc, #856]	; (10007bd8 <main+0x3e4>)
1000787e:	799b      	ldrb	r3, [r3, #6]
10007880:	b29b      	uxth	r3, r3
10007882:	021b      	lsls	r3, r3, #8
10007884:	b29a      	uxth	r2, r3
10007886:	4bd4      	ldr	r3, [pc, #848]	; (10007bd8 <main+0x3e4>)
10007888:	79db      	ldrb	r3, [r3, #7]
1000788a:	b29b      	uxth	r3, r3
1000788c:	18d3      	adds	r3, r2, r3
1000788e:	b29a      	uxth	r2, r3
10007890:	4bd5      	ldr	r3, [pc, #852]	; (10007be8 <main+0x3f4>)
10007892:	801a      	strh	r2, [r3, #0]
  GEH_Vers = ReadBuffer1[8] * 0x100 + ReadBuffer1[9];
10007894:	4bd0      	ldr	r3, [pc, #832]	; (10007bd8 <main+0x3e4>)
10007896:	7a1b      	ldrb	r3, [r3, #8]
10007898:	b29b      	uxth	r3, r3
1000789a:	021b      	lsls	r3, r3, #8
1000789c:	b29a      	uxth	r2, r3
1000789e:	4bce      	ldr	r3, [pc, #824]	; (10007bd8 <main+0x3e4>)
100078a0:	7a5b      	ldrb	r3, [r3, #9]
100078a2:	b29b      	uxth	r3, r3
100078a4:	18d3      	adds	r3, r2, r3
100078a6:	b29a      	uxth	r2, r3
100078a8:	4bd0      	ldr	r3, [pc, #832]	; (10007bec <main+0x3f8>)
100078aa:	801a      	strh	r2, [r3, #0]
  Mon_Vers = ReadBuffer1[10] * 0x100 + ReadBuffer1[11];
100078ac:	4bca      	ldr	r3, [pc, #808]	; (10007bd8 <main+0x3e4>)
100078ae:	7a9b      	ldrb	r3, [r3, #10]
100078b0:	b29b      	uxth	r3, r3
100078b2:	021b      	lsls	r3, r3, #8
100078b4:	b29a      	uxth	r2, r3
100078b6:	4bc8      	ldr	r3, [pc, #800]	; (10007bd8 <main+0x3e4>)
100078b8:	7adb      	ldrb	r3, [r3, #11]
100078ba:	b29b      	uxth	r3, r3
100078bc:	18d3      	adds	r3, r2, r3
100078be:	b29a      	uxth	r2, r3
100078c0:	4bcb      	ldr	r3, [pc, #812]	; (10007bf0 <main+0x3fc>)
100078c2:	801a      	strh	r2, [r3, #0]
  LED_WW_Vers = ReadBuffer1[12] * 0x100 + ReadBuffer1[13];
100078c4:	4bc4      	ldr	r3, [pc, #784]	; (10007bd8 <main+0x3e4>)
100078c6:	7b1b      	ldrb	r3, [r3, #12]
100078c8:	b29b      	uxth	r3, r3
100078ca:	021b      	lsls	r3, r3, #8
100078cc:	b29a      	uxth	r2, r3
100078ce:	4bc2      	ldr	r3, [pc, #776]	; (10007bd8 <main+0x3e4>)
100078d0:	7b5b      	ldrb	r3, [r3, #13]
100078d2:	b29b      	uxth	r3, r3
100078d4:	18d3      	adds	r3, r2, r3
100078d6:	b29a      	uxth	r2, r3
100078d8:	4bc6      	ldr	r3, [pc, #792]	; (10007bf4 <main+0x400>)
100078da:	801a      	strh	r2, [r3, #0]
  LED_CW_Vers = ReadBuffer1[14] * 0x100 + ReadBuffer1[15];
100078dc:	4bbe      	ldr	r3, [pc, #760]	; (10007bd8 <main+0x3e4>)
100078de:	7b9b      	ldrb	r3, [r3, #14]
100078e0:	b29b      	uxth	r3, r3
100078e2:	021b      	lsls	r3, r3, #8
100078e4:	b29a      	uxth	r2, r3
100078e6:	4bbc      	ldr	r3, [pc, #752]	; (10007bd8 <main+0x3e4>)
100078e8:	7bdb      	ldrb	r3, [r3, #15]
100078ea:	b29b      	uxth	r3, r3
100078ec:	18d3      	adds	r3, r2, r3
100078ee:	b29a      	uxth	r2, r3
100078f0:	4bc1      	ldr	r3, [pc, #772]	; (10007bf8 <main+0x404>)
100078f2:	801a      	strh	r2, [r3, #0]

  neu_Ser_NrH = 0 ;
100078f4:	4bc1      	ldr	r3, [pc, #772]	; (10007bfc <main+0x408>)
100078f6:	2200      	movs	r2, #0
100078f8:	801a      	strh	r2, [r3, #0]
  neu_Ser_NrL = 0 ;
100078fa:	4bc1      	ldr	r3, [pc, #772]	; (10007c00 <main+0x40c>)
100078fc:	2200      	movs	r2, #0
100078fe:	801a      	strh	r2, [r3, #0]
10007900:	e001      	b.n	10007906 <main+0x112>

	}
	else
	{
	sysiniValueB1();
10007902:	f7fa fb7b 	bl	10001ffc <sysiniValueB1>
	}

tester = readNodeIdEEprom();
10007906:	f7fa f9f3 	bl	10001cf0 <readNodeIdEEprom>
1000790a:	1c03      	adds	r3, r0, #0
1000790c:	1c1a      	adds	r2, r3, #0
1000790e:	4bb1      	ldr	r3, [pc, #708]	; (10007bd4 <main+0x3e0>)
10007910:	601a      	str	r2, [r3, #0]
	if (tester == 0x03)
10007912:	4bb0      	ldr	r3, [pc, #704]	; (10007bd4 <main+0x3e0>)
10007914:	681b      	ldr	r3, [r3, #0]
10007916:	2b03      	cmp	r3, #3
10007918:	d15f      	bne.n	100079da <main+0x1e6>
	{
		node_id_alt = ReadBuffer2[0] ;
1000791a:	4bba      	ldr	r3, [pc, #744]	; (10007c04 <main+0x410>)
1000791c:	781a      	ldrb	r2, [r3, #0]
1000791e:	4bba      	ldr	r3, [pc, #744]	; (10007c08 <main+0x414>)
10007920:	701a      	strb	r2, [r3, #0]
		node_id = ReadBuffer2[1];
10007922:	4bb8      	ldr	r3, [pc, #736]	; (10007c04 <main+0x410>)
10007924:	785a      	ldrb	r2, [r3, #1]
10007926:	4bb9      	ldr	r3, [pc, #740]	; (10007c0c <main+0x418>)
10007928:	701a      	strb	r2, [r3, #0]
		node_id_16bit = ReadBuffer2[2] * 0x100 + ReadBuffer2[3];
1000792a:	4bb6      	ldr	r3, [pc, #728]	; (10007c04 <main+0x410>)
1000792c:	789b      	ldrb	r3, [r3, #2]
1000792e:	b29b      	uxth	r3, r3
10007930:	021b      	lsls	r3, r3, #8
10007932:	b29a      	uxth	r2, r3
10007934:	4bb3      	ldr	r3, [pc, #716]	; (10007c04 <main+0x410>)
10007936:	78db      	ldrb	r3, [r3, #3]
10007938:	b29b      	uxth	r3, r3
1000793a:	18d3      	adds	r3, r2, r3
1000793c:	b29a      	uxth	r2, r3
1000793e:	4bb4      	ldr	r3, [pc, #720]	; (10007c10 <main+0x41c>)
10007940:	801a      	strh	r2, [r3, #0]
		val_Pow_Nom = ReadBuffer2[4] * 0x100 + ReadBuffer2[5];
10007942:	4bb0      	ldr	r3, [pc, #704]	; (10007c04 <main+0x410>)
10007944:	791b      	ldrb	r3, [r3, #4]
10007946:	b29b      	uxth	r3, r3
10007948:	021b      	lsls	r3, r3, #8
1000794a:	b29a      	uxth	r2, r3
1000794c:	4bad      	ldr	r3, [pc, #692]	; (10007c04 <main+0x410>)
1000794e:	795b      	ldrb	r3, [r3, #5]
10007950:	b29b      	uxth	r3, r3
10007952:	18d3      	adds	r3, r2, r3
10007954:	b29a      	uxth	r2, r3
10007956:	4baf      	ldr	r3, [pc, #700]	; (10007c14 <main+0x420>)
10007958:	801a      	strh	r2, [r3, #0]
		val_Pow_max = ReadBuffer2[6] * 0x100 + ReadBuffer2[7];
1000795a:	4baa      	ldr	r3, [pc, #680]	; (10007c04 <main+0x410>)
1000795c:	799b      	ldrb	r3, [r3, #6]
1000795e:	b29b      	uxth	r3, r3
10007960:	021b      	lsls	r3, r3, #8
10007962:	b29a      	uxth	r2, r3
10007964:	4ba7      	ldr	r3, [pc, #668]	; (10007c04 <main+0x410>)
10007966:	79db      	ldrb	r3, [r3, #7]
10007968:	b29b      	uxth	r3, r3
1000796a:	18d3      	adds	r3, r2, r3
1000796c:	b29a      	uxth	r2, r3
1000796e:	4baa      	ldr	r3, [pc, #680]	; (10007c18 <main+0x424>)
10007970:	801a      	strh	r2, [r3, #0]
		val_Spannung_min = ReadBuffer2[8] * 0x100 + ReadBuffer2[9];
10007972:	4ba4      	ldr	r3, [pc, #656]	; (10007c04 <main+0x410>)
10007974:	7a1b      	ldrb	r3, [r3, #8]
10007976:	b29b      	uxth	r3, r3
10007978:	021b      	lsls	r3, r3, #8
1000797a:	b29a      	uxth	r2, r3
1000797c:	4ba1      	ldr	r3, [pc, #644]	; (10007c04 <main+0x410>)
1000797e:	7a5b      	ldrb	r3, [r3, #9]
10007980:	b29b      	uxth	r3, r3
10007982:	18d3      	adds	r3, r2, r3
10007984:	b29a      	uxth	r2, r3
10007986:	4ba5      	ldr	r3, [pc, #660]	; (10007c1c <main+0x428>)
10007988:	801a      	strh	r2, [r3, #0]
		val_Spannung_max = ReadBuffer2[10] * 0x100 + ReadBuffer2[11];
1000798a:	4b9e      	ldr	r3, [pc, #632]	; (10007c04 <main+0x410>)
1000798c:	7a9b      	ldrb	r3, [r3, #10]
1000798e:	b29b      	uxth	r3, r3
10007990:	021b      	lsls	r3, r3, #8
10007992:	b29a      	uxth	r2, r3
10007994:	4b9b      	ldr	r3, [pc, #620]	; (10007c04 <main+0x410>)
10007996:	7adb      	ldrb	r3, [r3, #11]
10007998:	b29b      	uxth	r3, r3
1000799a:	18d3      	adds	r3, r2, r3
1000799c:	b29a      	uxth	r2, r3
1000799e:	4ba0      	ldr	r3, [pc, #640]	; (10007c20 <main+0x42c>)
100079a0:	801a      	strh	r2, [r3, #0]
		led_grupp = ReadBuffer2[12] * 0x100 + ReadBuffer2[13];
100079a2:	4b98      	ldr	r3, [pc, #608]	; (10007c04 <main+0x410>)
100079a4:	7b1b      	ldrb	r3, [r3, #12]
100079a6:	b29b      	uxth	r3, r3
100079a8:	021b      	lsls	r3, r3, #8
100079aa:	b29a      	uxth	r2, r3
100079ac:	4b95      	ldr	r3, [pc, #596]	; (10007c04 <main+0x410>)
100079ae:	7b5b      	ldrb	r3, [r3, #13]
100079b0:	b29b      	uxth	r3, r3
100079b2:	18d3      	adds	r3, r2, r3
100079b4:	b29a      	uxth	r2, r3
100079b6:	4b9b      	ldr	r3, [pc, #620]	; (10007c24 <main+0x430>)
100079b8:	801a      	strh	r2, [r3, #0]
		led_Strom = ReadBuffer2[14] * 0x100 + ReadBuffer2[15];
100079ba:	4b92      	ldr	r3, [pc, #584]	; (10007c04 <main+0x410>)
100079bc:	7b9b      	ldrb	r3, [r3, #14]
100079be:	b29b      	uxth	r3, r3
100079c0:	021b      	lsls	r3, r3, #8
100079c2:	b29a      	uxth	r2, r3
100079c4:	4b8f      	ldr	r3, [pc, #572]	; (10007c04 <main+0x410>)
100079c6:	7bdb      	ldrb	r3, [r3, #15]
100079c8:	b29b      	uxth	r3, r3
100079ca:	18d3      	adds	r3, r2, r3
100079cc:	b29a      	uxth	r2, r3
100079ce:	4b96      	ldr	r3, [pc, #600]	; (10007c28 <main+0x434>)
100079d0:	801a      	strh	r2, [r3, #0]

  	   node_id_neu = 1;
100079d2:	4b96      	ldr	r3, [pc, #600]	; (10007c2c <main+0x438>)
100079d4:	2201      	movs	r2, #1
100079d6:	701a      	strb	r2, [r3, #0]
100079d8:	e001      	b.n	100079de <main+0x1ea>
	}
	else
	{
   sysiniValueB2();
100079da:	f7fa fb4f 	bl	1000207c <sysiniValueB2>
	}

tester = read_akt_light_EEprom();
100079de:	f7fa f9af 	bl	10001d40 <read_akt_light_EEprom>
100079e2:	1c03      	adds	r3, r0, #0
100079e4:	1c1a      	adds	r2, r3, #0
100079e6:	4b7b      	ldr	r3, [pc, #492]	; (10007bd4 <main+0x3e0>)
100079e8:	601a      	str	r2, [r3, #0]
	if (tester == 0x03)
100079ea:	4b7a      	ldr	r3, [pc, #488]	; (10007bd4 <main+0x3e0>)
100079ec:	681b      	ldr	r3, [r3, #0]
100079ee:	2b03      	cmp	r3, #3
100079f0:	d000      	beq.n	100079f4 <main+0x200>
100079f2:	e082      	b.n	10007afa <main+0x306>
	{

		Dimm_Gamma = ReadBuffer2[0] ;
100079f4:	4b83      	ldr	r3, [pc, #524]	; (10007c04 <main+0x410>)
100079f6:	781a      	ldrb	r2, [r3, #0]
100079f8:	4b8d      	ldr	r3, [pc, #564]	; (10007c30 <main+0x43c>)
100079fa:	701a      	strb	r2, [r3, #0]
		Dimm_Stufen = ReadBuffer2[1];
100079fc:	4b81      	ldr	r3, [pc, #516]	; (10007c04 <main+0x410>)
100079fe:	785a      	ldrb	r2, [r3, #1]
10007a00:	4b8c      	ldr	r3, [pc, #560]	; (10007c34 <main+0x440>)
10007a02:	701a      	strb	r2, [r3, #0]
		Dimm_StufenGR = ReadBuffer2[2] ;
10007a04:	4b7f      	ldr	r3, [pc, #508]	; (10007c04 <main+0x410>)
10007a06:	789a      	ldrb	r2, [r3, #2]
10007a08:	4b8b      	ldr	r3, [pc, #556]	; (10007c38 <main+0x444>)
10007a0a:	701a      	strb	r2, [r3, #0]
		Dimm_Valu = ReadBuffer2[3];
10007a0c:	4b7d      	ldr	r3, [pc, #500]	; (10007c04 <main+0x410>)
10007a0e:	78da      	ldrb	r2, [r3, #3]
10007a10:	4b8a      	ldr	r3, [pc, #552]	; (10007c3c <main+0x448>)
10007a12:	701a      	strb	r2, [r3, #0]
		Smooth_Value = ReadBuffer2[4] * 0x100 + ReadBuffer2[5];
10007a14:	4b7b      	ldr	r3, [pc, #492]	; (10007c04 <main+0x410>)
10007a16:	791b      	ldrb	r3, [r3, #4]
10007a18:	b29b      	uxth	r3, r3
10007a1a:	021b      	lsls	r3, r3, #8
10007a1c:	b29a      	uxth	r2, r3
10007a1e:	4b79      	ldr	r3, [pc, #484]	; (10007c04 <main+0x410>)
10007a20:	795b      	ldrb	r3, [r3, #5]
10007a22:	b29b      	uxth	r3, r3
10007a24:	18d3      	adds	r3, r2, r3
10007a26:	b29a      	uxth	r2, r3
10007a28:	4b85      	ldr	r3, [pc, #532]	; (10007c40 <main+0x44c>)
10007a2a:	801a      	strh	r2, [r3, #0]
		linearwalk_gen = ReadBuffer2[6] * 0x100 + ReadBuffer2[7];
10007a2c:	4b75      	ldr	r3, [pc, #468]	; (10007c04 <main+0x410>)
10007a2e:	799b      	ldrb	r3, [r3, #6]
10007a30:	b29b      	uxth	r3, r3
10007a32:	021b      	lsls	r3, r3, #8
10007a34:	b29a      	uxth	r2, r3
10007a36:	4b73      	ldr	r3, [pc, #460]	; (10007c04 <main+0x410>)
10007a38:	79db      	ldrb	r3, [r3, #7]
10007a3a:	b29b      	uxth	r3, r3
10007a3c:	18d3      	adds	r3, r2, r3
10007a3e:	b29a      	uxth	r2, r3
10007a40:	4b80      	ldr	r3, [pc, #512]	; (10007c44 <main+0x450>)
10007a42:	801a      	strh	r2, [r3, #0]
		Farbe_wwcw_Quot_gen = ReadBuffer2[8] * 0x100 + ReadBuffer2[9];
10007a44:	4b6f      	ldr	r3, [pc, #444]	; (10007c04 <main+0x410>)
10007a46:	7a1b      	ldrb	r3, [r3, #8]
10007a48:	b29b      	uxth	r3, r3
10007a4a:	021b      	lsls	r3, r3, #8
10007a4c:	b29a      	uxth	r2, r3
10007a4e:	4b6d      	ldr	r3, [pc, #436]	; (10007c04 <main+0x410>)
10007a50:	7a5b      	ldrb	r3, [r3, #9]
10007a52:	b29b      	uxth	r3, r3
10007a54:	18d3      	adds	r3, r2, r3
10007a56:	b29a      	uxth	r2, r3
10007a58:	4b7b      	ldr	r3, [pc, #492]	; (10007c48 <main+0x454>)
10007a5a:	801a      	strh	r2, [r3, #0]
		Reserve_1 = ReadBuffer2[10] * 0x100 + ReadBuffer2[11];
10007a5c:	4b69      	ldr	r3, [pc, #420]	; (10007c04 <main+0x410>)
10007a5e:	7a9b      	ldrb	r3, [r3, #10]
10007a60:	b29b      	uxth	r3, r3
10007a62:	021b      	lsls	r3, r3, #8
10007a64:	b29a      	uxth	r2, r3
10007a66:	4b67      	ldr	r3, [pc, #412]	; (10007c04 <main+0x410>)
10007a68:	7adb      	ldrb	r3, [r3, #11]
10007a6a:	b29b      	uxth	r3, r3
10007a6c:	18d3      	adds	r3, r2, r3
10007a6e:	b29a      	uxth	r2, r3
10007a70:	4b76      	ldr	r3, [pc, #472]	; (10007c4c <main+0x458>)
10007a72:	801a      	strh	r2, [r3, #0]
		Dimm_Max_WW = ReadBuffer2[12] * 0x100 + ReadBuffer2[13];
10007a74:	4b63      	ldr	r3, [pc, #396]	; (10007c04 <main+0x410>)
10007a76:	7b1b      	ldrb	r3, [r3, #12]
10007a78:	b29b      	uxth	r3, r3
10007a7a:	021b      	lsls	r3, r3, #8
10007a7c:	b29a      	uxth	r2, r3
10007a7e:	4b61      	ldr	r3, [pc, #388]	; (10007c04 <main+0x410>)
10007a80:	7b5b      	ldrb	r3, [r3, #13]
10007a82:	b29b      	uxth	r3, r3
10007a84:	18d3      	adds	r3, r2, r3
10007a86:	b29a      	uxth	r2, r3
10007a88:	4b71      	ldr	r3, [pc, #452]	; (10007c50 <main+0x45c>)
10007a8a:	801a      	strh	r2, [r3, #0]
		Dimm_Max_CW = ReadBuffer2[14] * 0x100 + ReadBuffer2[15];
10007a8c:	4b5d      	ldr	r3, [pc, #372]	; (10007c04 <main+0x410>)
10007a8e:	7b9b      	ldrb	r3, [r3, #14]
10007a90:	b29b      	uxth	r3, r3
10007a92:	021b      	lsls	r3, r3, #8
10007a94:	b29a      	uxth	r2, r3
10007a96:	4b5b      	ldr	r3, [pc, #364]	; (10007c04 <main+0x410>)
10007a98:	7bdb      	ldrb	r3, [r3, #15]
10007a9a:	b29b      	uxth	r3, r3
10007a9c:	18d3      	adds	r3, r2, r3
10007a9e:	b29a      	uxth	r2, r3
10007aa0:	4b6c      	ldr	r3, [pc, #432]	; (10007c54 <main+0x460>)
10007aa2:	801a      	strh	r2, [r3, #0]

	      linearwalk_ww1 = linearwalk_gen;
10007aa4:	4b67      	ldr	r3, [pc, #412]	; (10007c44 <main+0x450>)
10007aa6:	881a      	ldrh	r2, [r3, #0]
10007aa8:	4b6b      	ldr	r3, [pc, #428]	; (10007c58 <main+0x464>)
10007aaa:	801a      	strh	r2, [r3, #0]
	      linearwalk_ww2 = linearwalk_gen;
10007aac:	4b65      	ldr	r3, [pc, #404]	; (10007c44 <main+0x450>)
10007aae:	881a      	ldrh	r2, [r3, #0]
10007ab0:	4b6a      	ldr	r3, [pc, #424]	; (10007c5c <main+0x468>)
10007ab2:	801a      	strh	r2, [r3, #0]
	      linearwalk_cw1 = linearwalk_gen;
10007ab4:	4b63      	ldr	r3, [pc, #396]	; (10007c44 <main+0x450>)
10007ab6:	881a      	ldrh	r2, [r3, #0]
10007ab8:	4b69      	ldr	r3, [pc, #420]	; (10007c60 <main+0x46c>)
10007aba:	801a      	strh	r2, [r3, #0]
	      linearwalk_cw2 = linearwalk_gen;
10007abc:	4b61      	ldr	r3, [pc, #388]	; (10007c44 <main+0x450>)
10007abe:	881a      	ldrh	r2, [r3, #0]
10007ac0:	4b68      	ldr	r3, [pc, #416]	; (10007c64 <main+0x470>)
10007ac2:	801a      	strh	r2, [r3, #0]

	      Farbe_ww1_Quot = Farbe_wwcw_Quot_gen>>8;
10007ac4:	4b60      	ldr	r3, [pc, #384]	; (10007c48 <main+0x454>)
10007ac6:	881b      	ldrh	r3, [r3, #0]
10007ac8:	0a1b      	lsrs	r3, r3, #8
10007aca:	b29a      	uxth	r2, r3
10007acc:	4b66      	ldr	r3, [pc, #408]	; (10007c68 <main+0x474>)
10007ace:	801a      	strh	r2, [r3, #0]
	      Farbe_cw1_Quot = Farbe_wwcw_Quot_gen>>8;
10007ad0:	4b5d      	ldr	r3, [pc, #372]	; (10007c48 <main+0x454>)
10007ad2:	881b      	ldrh	r3, [r3, #0]
10007ad4:	0a1b      	lsrs	r3, r3, #8
10007ad6:	b29a      	uxth	r2, r3
10007ad8:	4b64      	ldr	r3, [pc, #400]	; (10007c6c <main+0x478>)
10007ada:	801a      	strh	r2, [r3, #0]
	      Farbe_ww2_Quot = Farbe_wwcw_Quot_gen & 0xff;
10007adc:	4b5a      	ldr	r3, [pc, #360]	; (10007c48 <main+0x454>)
10007ade:	881b      	ldrh	r3, [r3, #0]
10007ae0:	22ff      	movs	r2, #255	; 0xff
10007ae2:	4013      	ands	r3, r2
10007ae4:	b29a      	uxth	r2, r3
10007ae6:	4b62      	ldr	r3, [pc, #392]	; (10007c70 <main+0x47c>)
10007ae8:	801a      	strh	r2, [r3, #0]
	      Farbe_cw2_Quot = Farbe_wwcw_Quot_gen & 0xff;
10007aea:	4b57      	ldr	r3, [pc, #348]	; (10007c48 <main+0x454>)
10007aec:	881b      	ldrh	r3, [r3, #0]
10007aee:	22ff      	movs	r2, #255	; 0xff
10007af0:	4013      	ands	r3, r2
10007af2:	b29a      	uxth	r2, r3
10007af4:	4b5f      	ldr	r3, [pc, #380]	; (10007c74 <main+0x480>)
10007af6:	801a      	strh	r2, [r3, #0]
10007af8:	e001      	b.n	10007afe <main+0x30a>

	}
	else
	{
	sysiniValueB4();
10007afa:	f7fa fafd 	bl	100020f8 <sysiniValueB4>
	}

tester = read_off_light_EEprom();
10007afe:	f7fa f947 	bl	10001d90 <read_off_light_EEprom>
10007b02:	1c03      	adds	r3, r0, #0
10007b04:	1c1a      	adds	r2, r3, #0
10007b06:	4b33      	ldr	r3, [pc, #204]	; (10007bd4 <main+0x3e0>)
10007b08:	601a      	str	r2, [r3, #0]
	if (tester == 0x03)
10007b0a:	4b32      	ldr	r3, [pc, #200]	; (10007bd4 <main+0x3e0>)
10007b0c:	681b      	ldr	r3, [r3, #0]
10007b0e:	2b03      	cmp	r3, #3
10007b10:	d000      	beq.n	10007b14 <main+0x320>
10007b12:	e0c3      	b.n	10007c9c <main+0x4a8>
	{

		RegOnOff = ReadBuffer2[0] ;
10007b14:	4b3b      	ldr	r3, [pc, #236]	; (10007c04 <main+0x410>)
10007b16:	781a      	ldrb	r2, [r3, #0]
10007b18:	4b57      	ldr	r3, [pc, #348]	; (10007c78 <main+0x484>)
10007b1a:	701a      	strb	r2, [r3, #0]
		RegOnOff2 = ReadBuffer2[1];
10007b1c:	4b39      	ldr	r3, [pc, #228]	; (10007c04 <main+0x410>)
10007b1e:	785a      	ldrb	r2, [r3, #1]
10007b20:	4b56      	ldr	r3, [pc, #344]	; (10007c7c <main+0x488>)
10007b22:	701a      	strb	r2, [r3, #0]
		Reserve_2  = ReadBuffer2[2] * 0x100 + ReadBuffer2[3];
10007b24:	4b37      	ldr	r3, [pc, #220]	; (10007c04 <main+0x410>)
10007b26:	789b      	ldrb	r3, [r3, #2]
10007b28:	b29b      	uxth	r3, r3
10007b2a:	021b      	lsls	r3, r3, #8
10007b2c:	b29a      	uxth	r2, r3
10007b2e:	4b35      	ldr	r3, [pc, #212]	; (10007c04 <main+0x410>)
10007b30:	78db      	ldrb	r3, [r3, #3]
10007b32:	b29b      	uxth	r3, r3
10007b34:	18d3      	adds	r3, r2, r3
10007b36:	b29a      	uxth	r2, r3
10007b38:	4b51      	ldr	r3, [pc, #324]	; (10007c80 <main+0x48c>)
10007b3a:	801a      	strh	r2, [r3, #0]
		dimOff_Ww = ReadBuffer2[4] * 0x100 + ReadBuffer2[5];
10007b3c:	4b31      	ldr	r3, [pc, #196]	; (10007c04 <main+0x410>)
10007b3e:	791b      	ldrb	r3, [r3, #4]
10007b40:	b29b      	uxth	r3, r3
10007b42:	021b      	lsls	r3, r3, #8
10007b44:	b29a      	uxth	r2, r3
10007b46:	4b2f      	ldr	r3, [pc, #188]	; (10007c04 <main+0x410>)
10007b48:	795b      	ldrb	r3, [r3, #5]
10007b4a:	b29b      	uxth	r3, r3
10007b4c:	18d3      	adds	r3, r2, r3
10007b4e:	b29a      	uxth	r2, r3
10007b50:	4b4c      	ldr	r3, [pc, #304]	; (10007c84 <main+0x490>)
10007b52:	801a      	strh	r2, [r3, #0]
		dimOff_Cw = ReadBuffer2[6] * 0x100 + ReadBuffer2[7];
10007b54:	4b2b      	ldr	r3, [pc, #172]	; (10007c04 <main+0x410>)
10007b56:	799b      	ldrb	r3, [r3, #6]
10007b58:	b29b      	uxth	r3, r3
10007b5a:	021b      	lsls	r3, r3, #8
10007b5c:	b29a      	uxth	r2, r3
10007b5e:	4b29      	ldr	r3, [pc, #164]	; (10007c04 <main+0x410>)
10007b60:	79db      	ldrb	r3, [r3, #7]
10007b62:	b29b      	uxth	r3, r3
10007b64:	18d3      	adds	r3, r2, r3
10007b66:	b29a      	uxth	r2, r3
10007b68:	4b47      	ldr	r3, [pc, #284]	; (10007c88 <main+0x494>)
10007b6a:	801a      	strh	r2, [r3, #0]
		dimNorm1_Ww  = ReadBuffer2[8] * 0x100 + ReadBuffer2[9];
10007b6c:	4b25      	ldr	r3, [pc, #148]	; (10007c04 <main+0x410>)
10007b6e:	7a1b      	ldrb	r3, [r3, #8]
10007b70:	b29b      	uxth	r3, r3
10007b72:	021b      	lsls	r3, r3, #8
10007b74:	b29a      	uxth	r2, r3
10007b76:	4b23      	ldr	r3, [pc, #140]	; (10007c04 <main+0x410>)
10007b78:	7a5b      	ldrb	r3, [r3, #9]
10007b7a:	b29b      	uxth	r3, r3
10007b7c:	18d3      	adds	r3, r2, r3
10007b7e:	b29a      	uxth	r2, r3
10007b80:	4b42      	ldr	r3, [pc, #264]	; (10007c8c <main+0x498>)
10007b82:	801a      	strh	r2, [r3, #0]
		dimNorm1_Cw = ReadBuffer2[10] * 0x100 + ReadBuffer2[11];
10007b84:	4b1f      	ldr	r3, [pc, #124]	; (10007c04 <main+0x410>)
10007b86:	7a9b      	ldrb	r3, [r3, #10]
10007b88:	b29b      	uxth	r3, r3
10007b8a:	021b      	lsls	r3, r3, #8
10007b8c:	b29a      	uxth	r2, r3
10007b8e:	4b1d      	ldr	r3, [pc, #116]	; (10007c04 <main+0x410>)
10007b90:	7adb      	ldrb	r3, [r3, #11]
10007b92:	b29b      	uxth	r3, r3
10007b94:	18d3      	adds	r3, r2, r3
10007b96:	b29a      	uxth	r2, r3
10007b98:	4b3d      	ldr	r3, [pc, #244]	; (10007c90 <main+0x49c>)
10007b9a:	801a      	strh	r2, [r3, #0]
		dimNorm2_Ww = ReadBuffer2[12] * 0x100 + ReadBuffer2[13];
10007b9c:	4b19      	ldr	r3, [pc, #100]	; (10007c04 <main+0x410>)
10007b9e:	7b1b      	ldrb	r3, [r3, #12]
10007ba0:	b29b      	uxth	r3, r3
10007ba2:	021b      	lsls	r3, r3, #8
10007ba4:	b29a      	uxth	r2, r3
10007ba6:	4b17      	ldr	r3, [pc, #92]	; (10007c04 <main+0x410>)
10007ba8:	7b5b      	ldrb	r3, [r3, #13]
10007baa:	b29b      	uxth	r3, r3
10007bac:	18d3      	adds	r3, r2, r3
10007bae:	b29a      	uxth	r2, r3
10007bb0:	4b38      	ldr	r3, [pc, #224]	; (10007c94 <main+0x4a0>)
10007bb2:	801a      	strh	r2, [r3, #0]
		dimNorm2_Cw = ReadBuffer2[14] * 0x100 + ReadBuffer2[15];
10007bb4:	4b13      	ldr	r3, [pc, #76]	; (10007c04 <main+0x410>)
10007bb6:	7b9b      	ldrb	r3, [r3, #14]
10007bb8:	b29b      	uxth	r3, r3
10007bba:	021b      	lsls	r3, r3, #8
10007bbc:	b29a      	uxth	r2, r3
10007bbe:	4b11      	ldr	r3, [pc, #68]	; (10007c04 <main+0x410>)
10007bc0:	7bdb      	ldrb	r3, [r3, #15]
10007bc2:	b29b      	uxth	r3, r3
10007bc4:	18d3      	adds	r3, r2, r3
10007bc6:	b29a      	uxth	r2, r3
10007bc8:	4b33      	ldr	r3, [pc, #204]	; (10007c98 <main+0x4a4>)
10007bca:	801a      	strh	r2, [r3, #0]
10007bcc:	e068      	b.n	10007ca0 <main+0x4ac>
10007bce:	46c0      	nop			; (mov r8, r8)
10007bd0:	20000c2c 	.word	0x20000c2c
10007bd4:	20000c28 	.word	0x20000c28
10007bd8:	20000890 	.word	0x20000890
10007bdc:	20000830 	.word	0x20000830
10007be0:	200008a8 	.word	0x200008a8
10007be4:	200007f0 	.word	0x200007f0
10007be8:	200008b4 	.word	0x200008b4
10007bec:	2000083c 	.word	0x2000083c
10007bf0:	200007fc 	.word	0x200007fc
10007bf4:	200007f2 	.word	0x200007f2
10007bf8:	2000082e 	.word	0x2000082e
10007bfc:	20000816 	.word	0x20000816
10007c00:	20000904 	.word	0x20000904
10007c04:	20000848 	.word	0x20000848
10007c08:	20000844 	.word	0x20000844
10007c0c:	20000836 	.word	0x20000836
10007c10:	20000860 	.word	0x20000860
10007c14:	2000085c 	.word	0x2000085c
10007c18:	200008f6 	.word	0x200008f6
10007c1c:	2000083a 	.word	0x2000083a
10007c20:	200008be 	.word	0x200008be
10007c24:	20000834 	.word	0x20000834
10007c28:	20000858 	.word	0x20000858
10007c2c:	200007ca 	.word	0x200007ca
10007c30:	20000862 	.word	0x20000862
10007c34:	20000840 	.word	0x20000840
10007c38:	2000088a 	.word	0x2000088a
10007c3c:	20000814 	.word	0x20000814
10007c40:	200008aa 	.word	0x200008aa
10007c44:	2000054a 	.word	0x2000054a
10007c48:	200008a0 	.word	0x200008a0
10007c4c:	200008b8 	.word	0x200008b8
10007c50:	20000838 	.word	0x20000838
10007c54:	2000088c 	.word	0x2000088c
10007c58:	200007ec 	.word	0x200007ec
10007c5c:	20000842 	.word	0x20000842
10007c60:	20000908 	.word	0x20000908
10007c64:	2000083e 	.word	0x2000083e
10007c68:	20000832 	.word	0x20000832
10007c6c:	200008f4 	.word	0x200008f4
10007c70:	2000081c 	.word	0x2000081c
10007c74:	200008a6 	.word	0x200008a6
10007c78:	2000085a 	.word	0x2000085a
10007c7c:	20000818 	.word	0x20000818
10007c80:	200007f4 	.word	0x200007f4
10007c84:	20000900 	.word	0x20000900
10007c88:	20000864 	.word	0x20000864
10007c8c:	200008a4 	.word	0x200008a4
10007c90:	200008b2 	.word	0x200008b2
10007c94:	200007c8 	.word	0x200007c8
10007c98:	20000970 	.word	0x20000970


	}
	else
	{
	sysiniValueB5();
10007c9c:	f7fa faa0 	bl	100021e0 <sysiniValueB5>
	}



		// Übergabe Variablen
	    new_data_fill();
10007ca0:	f7f9 fbf8 	bl	10001494 <new_data_fill>

		// Start Farbberechnungen

		  bcuInit();
10007ca4:	f7fa fad4 	bl	10002250 <bcuInit>
		  linearwalk_gen = 100;
10007ca8:	4bce      	ldr	r3, [pc, #824]	; (10007fe4 <main+0x7f0>)
10007caa:	2264      	movs	r2, #100	; 0x64
10007cac:	801a      	strh	r2, [r3, #0]
	      linearwalk_ww1 = linearwalk_gen;//n+l
10007cae:	4bcd      	ldr	r3, [pc, #820]	; (10007fe4 <main+0x7f0>)
10007cb0:	881a      	ldrh	r2, [r3, #0]
10007cb2:	4bcd      	ldr	r3, [pc, #820]	; (10007fe8 <main+0x7f4>)
10007cb4:	801a      	strh	r2, [r3, #0]
	      linearwalk_ww2 = linearwalk_gen;//n+l
10007cb6:	4bcb      	ldr	r3, [pc, #812]	; (10007fe4 <main+0x7f0>)
10007cb8:	881a      	ldrh	r2, [r3, #0]
10007cba:	4bcc      	ldr	r3, [pc, #816]	; (10007fec <main+0x7f8>)
10007cbc:	801a      	strh	r2, [r3, #0]
	      linearwalk_cw1 = linearwalk_gen;//n+l
10007cbe:	4bc9      	ldr	r3, [pc, #804]	; (10007fe4 <main+0x7f0>)
10007cc0:	881a      	ldrh	r2, [r3, #0]
10007cc2:	4bcb      	ldr	r3, [pc, #812]	; (10007ff0 <main+0x7fc>)
10007cc4:	801a      	strh	r2, [r3, #0]
	      linearwalk_cw2 = linearwalk_gen;  //n+l
10007cc6:	4bc7      	ldr	r3, [pc, #796]	; (10007fe4 <main+0x7f0>)
10007cc8:	881a      	ldrh	r2, [r3, #0]
10007cca:	4bca      	ldr	r3, [pc, #808]	; (10007ff4 <main+0x800>)
10007ccc:	801a      	strh	r2, [r3, #0]

			 dimAkt_Ww =  0x07ff;//n+l
10007cce:	4bca      	ldr	r3, [pc, #808]	; (10007ff8 <main+0x804>)
10007cd0:	4aca      	ldr	r2, [pc, #808]	; (10007ffc <main+0x808>)
10007cd2:	801a      	strh	r2, [r3, #0]
			 dimAkt_Cw =  0x07ff;//n+l
10007cd4:	4bca      	ldr	r3, [pc, #808]	; (10008000 <main+0x80c>)
10007cd6:	4ac9      	ldr	r2, [pc, #804]	; (10007ffc <main+0x808>)
10007cd8:	801a      	strh	r2, [r3, #0]
	//	  bcudirAktBerechnung();//n+l
	//	  bcuUebergabe();


   //Placeholder for user application code. The while loop below can be replaced with user application code.
   TimerId = SYSTIMER_CreateTimer(ONESEC,SYSTIMER_MODE_PERIODIC,(void*)LED_Toggle_EverySec,NULL);
10007cda:	4aca      	ldr	r2, [pc, #808]	; (10008004 <main+0x810>)
10007cdc:	4bca      	ldr	r3, [pc, #808]	; (10008008 <main+0x814>)
10007cde:	1c10      	adds	r0, r2, #0
10007ce0:	2101      	movs	r1, #1
10007ce2:	1c1a      	adds	r2, r3, #0
10007ce4:	2300      	movs	r3, #0
10007ce6:	f7fc ff59 	bl	10004b9c <SYSTIMER_CreateTimer>
10007cea:	1c03      	adds	r3, r0, #0
10007cec:	617b      	str	r3, [r7, #20]
    if(TimerId != 0U)
10007cee:	697b      	ldr	r3, [r7, #20]
10007cf0:	2b00      	cmp	r3, #0
10007cf2:	d005      	beq.n	10007d00 <main+0x50c>
    {
      status = SYSTIMER_StartTimer(TimerId);
10007cf4:	697b      	ldr	r3, [r7, #20]
10007cf6:	1c18      	adds	r0, r3, #0
10007cf8:	f7fc fff0 	bl	10004cdc <SYSTIMER_StartTimer>
10007cfc:	1c03      	adds	r3, r0, #0
10007cfe:	613b      	str	r3, [r7, #16]
    {
      // Timer ID Can not be zero
    }
    //____________________________________________

    Timer1M = SYSTIMER_CreateTimer(T1milliSEC,SYSTIMER_MODE_PERIODIC,(void*)Time1msec,NULL);
10007d00:	23fa      	movs	r3, #250	; 0xfa
10007d02:	009a      	lsls	r2, r3, #2
10007d04:	4bc1      	ldr	r3, [pc, #772]	; (1000800c <main+0x818>)
10007d06:	1c10      	adds	r0, r2, #0
10007d08:	2101      	movs	r1, #1
10007d0a:	1c1a      	adds	r2, r3, #0
10007d0c:	2300      	movs	r3, #0
10007d0e:	f7fc ff45 	bl	10004b9c <SYSTIMER_CreateTimer>
10007d12:	1c03      	adds	r3, r0, #0
10007d14:	60fb      	str	r3, [r7, #12]
     if(Timer1M != 0U)
10007d16:	68fb      	ldr	r3, [r7, #12]
10007d18:	2b00      	cmp	r3, #0
10007d1a:	d005      	beq.n	10007d28 <main+0x534>
     {
       status1M = SYSTIMER_StartTimer(Timer1M);
10007d1c:	68fb      	ldr	r3, [r7, #12]
10007d1e:	1c18      	adds	r0, r3, #0
10007d20:	f7fc ffdc 	bl	10004cdc <SYSTIMER_StartTimer>
10007d24:	1c03      	adds	r3, r0, #0
10007d26:	60bb      	str	r3, [r7, #8]
     else
     {
     }
    //____________________________________________

     Timer20M = SYSTIMER_CreateTimer(T20milliSEC,SYSTIMER_MODE_PERIODIC,(void*)Time20msec,NULL);
10007d28:	4ab9      	ldr	r2, [pc, #740]	; (10008010 <main+0x81c>)
10007d2a:	4bba      	ldr	r3, [pc, #744]	; (10008014 <main+0x820>)
10007d2c:	1c10      	adds	r0, r2, #0
10007d2e:	2101      	movs	r1, #1
10007d30:	1c1a      	adds	r2, r3, #0
10007d32:	2300      	movs	r3, #0
10007d34:	f7fc ff32 	bl	10004b9c <SYSTIMER_CreateTimer>
10007d38:	1c03      	adds	r3, r0, #0
10007d3a:	607b      	str	r3, [r7, #4]
      if(Timer20M != 0U)
10007d3c:	687b      	ldr	r3, [r7, #4]
10007d3e:	2b00      	cmp	r3, #0
10007d40:	d005      	beq.n	10007d4e <main+0x55a>
      {
        status20M = SYSTIMER_StartTimer(Timer20M);
10007d42:	687b      	ldr	r3, [r7, #4]
10007d44:	1c18      	adds	r0, r3, #0
10007d46:	f7fc ffc9 	bl	10004cdc <SYSTIMER_StartTimer>
10007d4a:	1c03      	adds	r3, r0, #0
10007d4c:	603b      	str	r3, [r7, #0]
      }

	//START hardware ###################################################################################


    DIGITAL_IO_SetOutputHigh(&xmc_lin_en);
10007d4e:	4bb2      	ldr	r3, [pc, #712]	; (10008018 <main+0x824>)
10007d50:	1c18      	adds	r0, r3, #0
10007d52:	f7ff fcfd 	bl	10007750 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&VCC_LED_shtdwn);
10007d56:	4bb1      	ldr	r3, [pc, #708]	; (1000801c <main+0x828>)
10007d58:	1c18      	adds	r0, r3, #0
10007d5a:	f7ff fcf9 	bl	10007750 <DIGITAL_IO_SetOutputHigh>
   // analog_start () ;
    ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
10007d5e:	4bb0      	ldr	r3, [pc, #704]	; (10008020 <main+0x82c>)
10007d60:	1c18      	adds	r0, r3, #0
10007d62:	f7ff fb51 	bl	10007408 <ADC_MEASUREMENT_ADV_SoftwareTrigger>
	//#############################################

	while(1U)
	{

		if(   UART_Receive(&UART_1, ReadData, 1) == UART_STATUS_SUCCESS)
10007d66:	4aaf      	ldr	r2, [pc, #700]	; (10008024 <main+0x830>)
10007d68:	4baf      	ldr	r3, [pc, #700]	; (10008028 <main+0x834>)
10007d6a:	1c10      	adds	r0, r2, #0
10007d6c:	1c19      	adds	r1, r3, #0
10007d6e:	2201      	movs	r2, #1
10007d70:	f7fc f87e 	bl	10003e70 <UART_Receive>
10007d74:	1e03      	subs	r3, r0, #0
10007d76:	d001      	beq.n	10007d7c <main+0x588>
10007d78:	f001 fc05 	bl	10009586 <main+0x1d92>
		{
			while(UART_1.runtime->rx_busy)
10007d7c:	46c0      	nop			; (mov r8, r8)
10007d7e:	4ba9      	ldr	r3, [pc, #676]	; (10008024 <main+0x830>)
10007d80:	689b      	ldr	r3, [r3, #8]
10007d82:	7e5b      	ldrb	r3, [r3, #25]
10007d84:	b2db      	uxtb	r3, r3
10007d86:	2b00      	cmp	r3, #0
10007d88:	d1f9      	bne.n	10007d7e <main+0x58a>
		 	}



			 //START UART ###################################################################################
			 if ( charcount == 0 && synclevel == 0 && ReadData[0] == 0x4C )
10007d8a:	4ba8      	ldr	r3, [pc, #672]	; (1000802c <main+0x838>)
10007d8c:	781b      	ldrb	r3, [r3, #0]
10007d8e:	2b00      	cmp	r3, #0
10007d90:	d10e      	bne.n	10007db0 <main+0x5bc>
10007d92:	4ba7      	ldr	r3, [pc, #668]	; (10008030 <main+0x83c>)
10007d94:	781b      	ldrb	r3, [r3, #0]
10007d96:	2b00      	cmp	r3, #0
10007d98:	d10a      	bne.n	10007db0 <main+0x5bc>
10007d9a:	4ba3      	ldr	r3, [pc, #652]	; (10008028 <main+0x834>)
10007d9c:	781b      	ldrb	r3, [r3, #0]
10007d9e:	2b4c      	cmp	r3, #76	; 0x4c
10007da0:	d106      	bne.n	10007db0 <main+0x5bc>
			 {
			 	charcount = 1;
10007da2:	4ba2      	ldr	r3, [pc, #648]	; (1000802c <main+0x838>)
10007da4:	2201      	movs	r2, #1
10007da6:	701a      	strb	r2, [r3, #0]
			 	synclevel = 1;
10007da8:	4ba1      	ldr	r3, [pc, #644]	; (10008030 <main+0x83c>)
10007daa:	2201      	movs	r2, #1
10007dac:	701a      	strb	r2, [r3, #0]
10007dae:	e0b4      	b.n	10007f1a <main+0x726>
			 }
			 else if (  charcount == 1 && synclevel == 1 && ReadData[0] == 0x49 )
10007db0:	4b9e      	ldr	r3, [pc, #632]	; (1000802c <main+0x838>)
10007db2:	781b      	ldrb	r3, [r3, #0]
10007db4:	2b01      	cmp	r3, #1
10007db6:	d10e      	bne.n	10007dd6 <main+0x5e2>
10007db8:	4b9d      	ldr	r3, [pc, #628]	; (10008030 <main+0x83c>)
10007dba:	781b      	ldrb	r3, [r3, #0]
10007dbc:	2b01      	cmp	r3, #1
10007dbe:	d10a      	bne.n	10007dd6 <main+0x5e2>
10007dc0:	4b99      	ldr	r3, [pc, #612]	; (10008028 <main+0x834>)
10007dc2:	781b      	ldrb	r3, [r3, #0]
10007dc4:	2b49      	cmp	r3, #73	; 0x49
10007dc6:	d106      	bne.n	10007dd6 <main+0x5e2>
			 {
			 	charcount = 2;
10007dc8:	4b98      	ldr	r3, [pc, #608]	; (1000802c <main+0x838>)
10007dca:	2202      	movs	r2, #2
10007dcc:	701a      	strb	r2, [r3, #0]
			 	synclevel = 2;
10007dce:	4b98      	ldr	r3, [pc, #608]	; (10008030 <main+0x83c>)
10007dd0:	2202      	movs	r2, #2
10007dd2:	701a      	strb	r2, [r3, #0]
10007dd4:	e0a1      	b.n	10007f1a <main+0x726>
			 }
			 else if (  charcount ==2 && synclevel == 2 && ReadData[0] == 0x4E )
10007dd6:	4b95      	ldr	r3, [pc, #596]	; (1000802c <main+0x838>)
10007dd8:	781b      	ldrb	r3, [r3, #0]
10007dda:	2b02      	cmp	r3, #2
10007ddc:	d10e      	bne.n	10007dfc <main+0x608>
10007dde:	4b94      	ldr	r3, [pc, #592]	; (10008030 <main+0x83c>)
10007de0:	781b      	ldrb	r3, [r3, #0]
10007de2:	2b02      	cmp	r3, #2
10007de4:	d10a      	bne.n	10007dfc <main+0x608>
10007de6:	4b90      	ldr	r3, [pc, #576]	; (10008028 <main+0x834>)
10007de8:	781b      	ldrb	r3, [r3, #0]
10007dea:	2b4e      	cmp	r3, #78	; 0x4e
10007dec:	d106      	bne.n	10007dfc <main+0x608>
			 {
			 	charcount = 3;
10007dee:	4b8f      	ldr	r3, [pc, #572]	; (1000802c <main+0x838>)
10007df0:	2203      	movs	r2, #3
10007df2:	701a      	strb	r2, [r3, #0]
			 	synclevel = 3;
10007df4:	4b8e      	ldr	r3, [pc, #568]	; (10008030 <main+0x83c>)
10007df6:	2203      	movs	r2, #3
10007df8:	701a      	strb	r2, [r3, #0]
10007dfa:	e08e      	b.n	10007f1a <main+0x726>
			 }
			 else if (  charcount == 3 && synclevel == 3 )
10007dfc:	4b8b      	ldr	r3, [pc, #556]	; (1000802c <main+0x838>)
10007dfe:	781b      	ldrb	r3, [r3, #0]
10007e00:	2b03      	cmp	r3, #3
10007e02:	d10b      	bne.n	10007e1c <main+0x628>
10007e04:	4b8a      	ldr	r3, [pc, #552]	; (10008030 <main+0x83c>)
10007e06:	781b      	ldrb	r3, [r3, #0]
10007e08:	2b03      	cmp	r3, #3
10007e0a:	d107      	bne.n	10007e1c <main+0x628>
			 {
			 	charcount = 4;
10007e0c:	4b87      	ldr	r3, [pc, #540]	; (1000802c <main+0x838>)
10007e0e:	2204      	movs	r2, #4
10007e10:	701a      	strb	r2, [r3, #0]
			 	node_id_resi = ReadData[0];
10007e12:	4b85      	ldr	r3, [pc, #532]	; (10008028 <main+0x834>)
10007e14:	781a      	ldrb	r2, [r3, #0]
10007e16:	4b87      	ldr	r3, [pc, #540]	; (10008034 <main+0x840>)
10007e18:	701a      	strb	r2, [r3, #0]
10007e1a:	e07e      	b.n	10007f1a <main+0x726>
			 }
			 else if (  charcount == 4 && synclevel == 3 )
10007e1c:	4b83      	ldr	r3, [pc, #524]	; (1000802c <main+0x838>)
10007e1e:	781b      	ldrb	r3, [r3, #0]
10007e20:	2b04      	cmp	r3, #4
10007e22:	d10b      	bne.n	10007e3c <main+0x648>
10007e24:	4b82      	ldr	r3, [pc, #520]	; (10008030 <main+0x83c>)
10007e26:	781b      	ldrb	r3, [r3, #0]
10007e28:	2b03      	cmp	r3, #3
10007e2a:	d107      	bne.n	10007e3c <main+0x648>
			 {
			 	charcount = 5;
10007e2c:	4b7f      	ldr	r3, [pc, #508]	; (1000802c <main+0x838>)
10007e2e:	2205      	movs	r2, #5
10007e30:	701a      	strb	r2, [r3, #0]
			 	framelength = ReadData[0];
10007e32:	4b7d      	ldr	r3, [pc, #500]	; (10008028 <main+0x834>)
10007e34:	781a      	ldrb	r2, [r3, #0]
10007e36:	4b80      	ldr	r3, [pc, #512]	; (10008038 <main+0x844>)
10007e38:	701a      	strb	r2, [r3, #0]
10007e3a:	e06e      	b.n	10007f1a <main+0x726>
			 }
			 else if ( charcount == 5 && synclevel == 3 )
10007e3c:	4b7b      	ldr	r3, [pc, #492]	; (1000802c <main+0x838>)
10007e3e:	781b      	ldrb	r3, [r3, #0]
10007e40:	2b05      	cmp	r3, #5
10007e42:	d10b      	bne.n	10007e5c <main+0x668>
10007e44:	4b7a      	ldr	r3, [pc, #488]	; (10008030 <main+0x83c>)
10007e46:	781b      	ldrb	r3, [r3, #0]
10007e48:	2b03      	cmp	r3, #3
10007e4a:	d107      	bne.n	10007e5c <main+0x668>
			 {
			 	charcount = 6;
10007e4c:	4b77      	ldr	r3, [pc, #476]	; (1000802c <main+0x838>)
10007e4e:	2206      	movs	r2, #6
10007e50:	701a      	strb	r2, [r3, #0]
		 		command = ReadData[0];
10007e52:	4b75      	ldr	r3, [pc, #468]	; (10008028 <main+0x834>)
10007e54:	781a      	ldrb	r2, [r3, #0]
10007e56:	4b79      	ldr	r3, [pc, #484]	; (1000803c <main+0x848>)
10007e58:	701a      	strb	r2, [r3, #0]
10007e5a:	e05e      	b.n	10007f1a <main+0x726>
			 }
			 else if ( charcount == 6 && synclevel == 3 )
10007e5c:	4b73      	ldr	r3, [pc, #460]	; (1000802c <main+0x838>)
10007e5e:	781b      	ldrb	r3, [r3, #0]
10007e60:	2b06      	cmp	r3, #6
10007e62:	d10b      	bne.n	10007e7c <main+0x688>
10007e64:	4b72      	ldr	r3, [pc, #456]	; (10008030 <main+0x83c>)
10007e66:	781b      	ldrb	r3, [r3, #0]
10007e68:	2b03      	cmp	r3, #3
10007e6a:	d107      	bne.n	10007e7c <main+0x688>
			 {
			 	charcount = 7;
10007e6c:	4b6f      	ldr	r3, [pc, #444]	; (1000802c <main+0x838>)
10007e6e:	2207      	movs	r2, #7
10007e70:	701a      	strb	r2, [r3, #0]
			 	ReadData[1] = ReadData[0];
10007e72:	4b6d      	ldr	r3, [pc, #436]	; (10008028 <main+0x834>)
10007e74:	781a      	ldrb	r2, [r3, #0]
10007e76:	4b6c      	ldr	r3, [pc, #432]	; (10008028 <main+0x834>)
10007e78:	705a      	strb	r2, [r3, #1]
10007e7a:	e04e      	b.n	10007f1a <main+0x726>
			 }
			 else if ( charcount == 7 && synclevel == 3 )
10007e7c:	4b6b      	ldr	r3, [pc, #428]	; (1000802c <main+0x838>)
10007e7e:	781b      	ldrb	r3, [r3, #0]
10007e80:	2b07      	cmp	r3, #7
10007e82:	d10b      	bne.n	10007e9c <main+0x6a8>
10007e84:	4b6a      	ldr	r3, [pc, #424]	; (10008030 <main+0x83c>)
10007e86:	781b      	ldrb	r3, [r3, #0]
10007e88:	2b03      	cmp	r3, #3
10007e8a:	d107      	bne.n	10007e9c <main+0x6a8>
			 {
			 	charcount = 8;
10007e8c:	4b67      	ldr	r3, [pc, #412]	; (1000802c <main+0x838>)
10007e8e:	2208      	movs	r2, #8
10007e90:	701a      	strb	r2, [r3, #0]
			 	ReadData[2] = ReadData[0];
10007e92:	4b65      	ldr	r3, [pc, #404]	; (10008028 <main+0x834>)
10007e94:	781a      	ldrb	r2, [r3, #0]
10007e96:	4b64      	ldr	r3, [pc, #400]	; (10008028 <main+0x834>)
10007e98:	709a      	strb	r2, [r3, #2]
10007e9a:	e03e      	b.n	10007f1a <main+0x726>
			 }
			 else if ( charcount == 8 && synclevel == 3 )
10007e9c:	4b63      	ldr	r3, [pc, #396]	; (1000802c <main+0x838>)
10007e9e:	781b      	ldrb	r3, [r3, #0]
10007ea0:	2b08      	cmp	r3, #8
10007ea2:	d10b      	bne.n	10007ebc <main+0x6c8>
10007ea4:	4b62      	ldr	r3, [pc, #392]	; (10008030 <main+0x83c>)
10007ea6:	781b      	ldrb	r3, [r3, #0]
10007ea8:	2b03      	cmp	r3, #3
10007eaa:	d107      	bne.n	10007ebc <main+0x6c8>
			 {
			 	charcount = 9;
10007eac:	4b5f      	ldr	r3, [pc, #380]	; (1000802c <main+0x838>)
10007eae:	2209      	movs	r2, #9
10007eb0:	701a      	strb	r2, [r3, #0]
			 	ReadData[3] = ReadData[0];
10007eb2:	4b5d      	ldr	r3, [pc, #372]	; (10008028 <main+0x834>)
10007eb4:	781a      	ldrb	r2, [r3, #0]
10007eb6:	4b5c      	ldr	r3, [pc, #368]	; (10008028 <main+0x834>)
10007eb8:	70da      	strb	r2, [r3, #3]
10007eba:	e02e      	b.n	10007f1a <main+0x726>
			 }
			 else if ( charcount == 9 && synclevel == 3 )
10007ebc:	4b5b      	ldr	r3, [pc, #364]	; (1000802c <main+0x838>)
10007ebe:	781b      	ldrb	r3, [r3, #0]
10007ec0:	2b09      	cmp	r3, #9
10007ec2:	d10b      	bne.n	10007edc <main+0x6e8>
10007ec4:	4b5a      	ldr	r3, [pc, #360]	; (10008030 <main+0x83c>)
10007ec6:	781b      	ldrb	r3, [r3, #0]
10007ec8:	2b03      	cmp	r3, #3
10007eca:	d107      	bne.n	10007edc <main+0x6e8>
			 {
			 	charcount = 10;
10007ecc:	4b57      	ldr	r3, [pc, #348]	; (1000802c <main+0x838>)
10007ece:	220a      	movs	r2, #10
10007ed0:	701a      	strb	r2, [r3, #0]
			 	ReadData[4] = ReadData[0];
10007ed2:	4b55      	ldr	r3, [pc, #340]	; (10008028 <main+0x834>)
10007ed4:	781a      	ldrb	r2, [r3, #0]
10007ed6:	4b54      	ldr	r3, [pc, #336]	; (10008028 <main+0x834>)
10007ed8:	711a      	strb	r2, [r3, #4]
10007eda:	e01e      	b.n	10007f1a <main+0x726>
			 }
			 else if ( charcount == 10 && synclevel == 3 && ReadData[0] == 0xFF )
10007edc:	4b53      	ldr	r3, [pc, #332]	; (1000802c <main+0x838>)
10007ede:	781b      	ldrb	r3, [r3, #0]
10007ee0:	2b0a      	cmp	r3, #10
10007ee2:	d111      	bne.n	10007f08 <main+0x714>
10007ee4:	4b52      	ldr	r3, [pc, #328]	; (10008030 <main+0x83c>)
10007ee6:	781b      	ldrb	r3, [r3, #0]
10007ee8:	2b03      	cmp	r3, #3
10007eea:	d10d      	bne.n	10007f08 <main+0x714>
10007eec:	4b4e      	ldr	r3, [pc, #312]	; (10008028 <main+0x834>)
10007eee:	781b      	ldrb	r3, [r3, #0]
10007ef0:	2bff      	cmp	r3, #255	; 0xff
10007ef2:	d109      	bne.n	10007f08 <main+0x714>
			 {
			 	charcount = 0;
10007ef4:	4b4d      	ldr	r3, [pc, #308]	; (1000802c <main+0x838>)
10007ef6:	2200      	movs	r2, #0
10007ef8:	701a      	strb	r2, [r3, #0]
			 	synclevel = 0;
10007efa:	4b4d      	ldr	r3, [pc, #308]	; (10008030 <main+0x83c>)
10007efc:	2200      	movs	r2, #0
10007efe:	701a      	strb	r2, [r3, #0]
			 	execute = 1;
10007f00:	4b4f      	ldr	r3, [pc, #316]	; (10008040 <main+0x84c>)
10007f02:	2201      	movs	r2, #1
10007f04:	701a      	strb	r2, [r3, #0]
10007f06:	e008      	b.n	10007f1a <main+0x726>
			 }
			 else
			 {
			 	charcount = 0;
10007f08:	4b48      	ldr	r3, [pc, #288]	; (1000802c <main+0x838>)
10007f0a:	2200      	movs	r2, #0
10007f0c:	701a      	strb	r2, [r3, #0]
			 	synclevel = 0;
10007f0e:	4b48      	ldr	r3, [pc, #288]	; (10008030 <main+0x83c>)
10007f10:	2200      	movs	r2, #0
10007f12:	701a      	strb	r2, [r3, #0]
			 	execute = 0;
10007f14:	4b4a      	ldr	r3, [pc, #296]	; (10008040 <main+0x84c>)
10007f16:	2200      	movs	r2, #0
10007f18:	701a      	strb	r2, [r3, #0]
			 }
			 // END UART ###################################################################################
			 if ( execute == 1 )
10007f1a:	4b49      	ldr	r3, [pc, #292]	; (10008040 <main+0x84c>)
10007f1c:	781b      	ldrb	r3, [r3, #0]
10007f1e:	2b01      	cmp	r3, #1
10007f20:	d001      	beq.n	10007f26 <main+0x732>
10007f22:	f001 fb30 	bl	10009586 <main+0x1d92>
		{
			 	if (node_id_resi != node_id)
10007f26:	4b43      	ldr	r3, [pc, #268]	; (10008034 <main+0x840>)
10007f28:	781a      	ldrb	r2, [r3, #0]
10007f2a:	4b46      	ldr	r3, [pc, #280]	; (10008044 <main+0x850>)
10007f2c:	781b      	ldrb	r3, [r3, #0]
10007f2e:	429a      	cmp	r2, r3
10007f30:	d100      	bne.n	10007f34 <main+0x740>
10007f32:	e0da      	b.n	100080ea <main+0x8f6>
			 {
				// ohne Node übereinstimmung
				switch  (command) {
10007f34:	4b41      	ldr	r3, [pc, #260]	; (1000803c <main+0x848>)
10007f36:	781b      	ldrb	r3, [r3, #0]
10007f38:	2b54      	cmp	r3, #84	; 0x54
10007f3a:	d012      	beq.n	10007f62 <main+0x76e>
10007f3c:	2b55      	cmp	r3, #85	; 0x55
10007f3e:	d100      	bne.n	10007f42 <main+0x74e>
10007f40:	e08d      	b.n	1000805e <main+0x86a>
10007f42:	2b4f      	cmp	r3, #79	; 0x4f
10007f44:	d000      	beq.n	10007f48 <main+0x754>
10007f46:	e0ca      	b.n	100080de <main+0x8ea>
				case command_BroadcastResi : 	new_data_BroadcastBack();
10007f48:	f7f9 fad0 	bl	100014ec <new_data_BroadcastBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10007f4c:	4b3e      	ldr	r3, [pc, #248]	; (10008048 <main+0x854>)
10007f4e:	781b      	ldrb	r3, [r3, #0]
10007f50:	1c1c      	adds	r4, r3, #0
10007f52:	4a34      	ldr	r2, [pc, #208]	; (10008024 <main+0x830>)
10007f54:	4b3d      	ldr	r3, [pc, #244]	; (1000804c <main+0x858>)
10007f56:	1c10      	adds	r0, r2, #0
10007f58:	1c19      	adds	r1, r3, #0
10007f5a:	1c22      	adds	r2, r4, #0
10007f5c:	f7fb ff62 	bl	10003e24 <UART_Transmit>
											break;
10007f60:	e0c1      	b.n	100080e6 <main+0x8f2>
				case command_all_ledOff_Resi :
											if (ReadData[1] == 5 && ReadData[2] == 5 &&   ReadData[3] ==  secure_all_ledOffH_Resi  &&  ReadData[4] == secure_all_ledOffL_Resi )
10007f62:	4b31      	ldr	r3, [pc, #196]	; (10008028 <main+0x834>)
10007f64:	785b      	ldrb	r3, [r3, #1]
10007f66:	2b05      	cmp	r3, #5
10007f68:	d000      	beq.n	10007f6c <main+0x778>
10007f6a:	e077      	b.n	1000805c <main+0x868>
10007f6c:	4b2e      	ldr	r3, [pc, #184]	; (10008028 <main+0x834>)
10007f6e:	789b      	ldrb	r3, [r3, #2]
10007f70:	2b05      	cmp	r3, #5
10007f72:	d173      	bne.n	1000805c <main+0x868>
10007f74:	4b2c      	ldr	r3, [pc, #176]	; (10008028 <main+0x834>)
10007f76:	78db      	ldrb	r3, [r3, #3]
10007f78:	2b34      	cmp	r3, #52	; 0x34
10007f7a:	d16f      	bne.n	1000805c <main+0x868>
10007f7c:	4b2a      	ldr	r3, [pc, #168]	; (10008028 <main+0x834>)
10007f7e:	791b      	ldrb	r3, [r3, #4]
10007f80:	2b78      	cmp	r3, #120	; 0x78
10007f82:	d16b      	bne.n	1000805c <main+0x868>
												{new_data_HalloBack();
10007f84:	f7f9 fc7e 	bl	10001884 <new_data_HalloBack>
	 	 	 	 	 							B_nextLedOff=1;   // schaltet on led beim spannnungsvergleich aus
10007f88:	4b31      	ldr	r3, [pc, #196]	; (10008050 <main+0x85c>)
10007f8a:	2201      	movs	r2, #1
10007f8c:	701a      	strb	r2, [r3, #0]
												DIGITAL_IO_SetOutputLow(&VCC_LED_shtdwn);
10007f8e:	4b23      	ldr	r3, [pc, #140]	; (1000801c <main+0x828>)
10007f90:	1c18      	adds	r0, r3, #0
10007f92:	f7ff fbed 	bl	10007770 <DIGITAL_IO_SetOutputLow>
												new_data[5]= command_all_ledOffBack ;
10007f96:	4b2d      	ldr	r3, [pc, #180]	; (1000804c <main+0x858>)
10007f98:	2274      	movs	r2, #116	; 0x74
10007f9a:	715a      	strb	r2, [r3, #5]
												new_data[6]= Ser_NrH  / 0x100 ;
10007f9c:	4b2d      	ldr	r3, [pc, #180]	; (10008054 <main+0x860>)
10007f9e:	881b      	ldrh	r3, [r3, #0]
10007fa0:	0a1b      	lsrs	r3, r3, #8
10007fa2:	b29b      	uxth	r3, r3
10007fa4:	b2da      	uxtb	r2, r3
10007fa6:	4b29      	ldr	r3, [pc, #164]	; (1000804c <main+0x858>)
10007fa8:	719a      	strb	r2, [r3, #6]
												new_data[7]= Ser_NrH  & 0xff ;
10007faa:	4b2a      	ldr	r3, [pc, #168]	; (10008054 <main+0x860>)
10007fac:	881b      	ldrh	r3, [r3, #0]
10007fae:	b2da      	uxtb	r2, r3
10007fb0:	4b26      	ldr	r3, [pc, #152]	; (1000804c <main+0x858>)
10007fb2:	71da      	strb	r2, [r3, #7]
												new_data[8]= Ser_NrL  / 0x100 ;
10007fb4:	4b28      	ldr	r3, [pc, #160]	; (10008058 <main+0x864>)
10007fb6:	881b      	ldrh	r3, [r3, #0]
10007fb8:	0a1b      	lsrs	r3, r3, #8
10007fba:	b29b      	uxth	r3, r3
10007fbc:	b2da      	uxtb	r2, r3
10007fbe:	4b23      	ldr	r3, [pc, #140]	; (1000804c <main+0x858>)
10007fc0:	721a      	strb	r2, [r3, #8]
												new_data[9]= Ser_NrL  & 0xff ;
10007fc2:	4b25      	ldr	r3, [pc, #148]	; (10008058 <main+0x864>)
10007fc4:	881b      	ldrh	r3, [r3, #0]
10007fc6:	b2da      	uxtb	r2, r3
10007fc8:	4b20      	ldr	r3, [pc, #128]	; (1000804c <main+0x858>)
10007fca:	725a      	strb	r2, [r3, #9]

												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10007fcc:	4b1e      	ldr	r3, [pc, #120]	; (10008048 <main+0x854>)
10007fce:	781b      	ldrb	r3, [r3, #0]
10007fd0:	1c1c      	adds	r4, r3, #0
10007fd2:	4a14      	ldr	r2, [pc, #80]	; (10008024 <main+0x830>)
10007fd4:	4b1d      	ldr	r3, [pc, #116]	; (1000804c <main+0x858>)
10007fd6:	1c10      	adds	r0, r2, #0
10007fd8:	1c19      	adds	r1, r3, #0
10007fda:	1c22      	adds	r2, r4, #0
10007fdc:	f7fb ff22 	bl	10003e24 <UART_Transmit>
												}
											break;
10007fe0:	e081      	b.n	100080e6 <main+0x8f2>
10007fe2:	46c0      	nop			; (mov r8, r8)
10007fe4:	2000054a 	.word	0x2000054a
10007fe8:	200007ec 	.word	0x200007ec
10007fec:	20000842 	.word	0x20000842
10007ff0:	20000908 	.word	0x20000908
10007ff4:	2000083e 	.word	0x2000083e
10007ff8:	200008ac 	.word	0x200008ac
10007ffc:	000007ff 	.word	0x000007ff
10008000:	200008c0 	.word	0x200008c0
10008004:	000f4240 	.word	0x000f4240
10008008:	10001121 	.word	0x10001121
1000800c:	10002629 	.word	0x10002629
10008010:	00004e20 	.word	0x00004e20
10008014:	1000263d 	.word	0x1000263d
10008018:	100098cc 	.word	0x100098cc
1000801c:	100098ec 	.word	0x100098ec
10008020:	100099c4 	.word	0x100099c4
10008024:	20000560 	.word	0x20000560
10008028:	20000824 	.word	0x20000824
1000802c:	200007c6 	.word	0x200007c6
10008030:	2000081e 	.word	0x2000081e
10008034:	200008f8 	.word	0x200008f8
10008038:	20000815 	.word	0x20000815
1000803c:	2000082c 	.word	0x2000082c
10008040:	200008b0 	.word	0x200008b0
10008044:	20000836 	.word	0x20000836
10008048:	20000550 	.word	0x20000550
1000804c:	20000804 	.word	0x20000804
10008050:	2000076d 	.word	0x2000076d
10008054:	20000830 	.word	0x20000830
10008058:	200008a8 	.word	0x200008a8
1000805c:	e043      	b.n	100080e6 <main+0x8f2>
				case command_all_ledOn_Resi :
											if (ReadData[1] == 3 && ReadData[2] == 3 &&   ReadData[3] ==  secure_all_ledOnH_Resi  &&  ReadData[4] == secure_all_ledOnL_Resi )
1000805e:	4bed      	ldr	r3, [pc, #948]	; (10008414 <main+0xc20>)
10008060:	785b      	ldrb	r3, [r3, #1]
10008062:	2b03      	cmp	r3, #3
10008064:	d13a      	bne.n	100080dc <main+0x8e8>
10008066:	4beb      	ldr	r3, [pc, #940]	; (10008414 <main+0xc20>)
10008068:	789b      	ldrb	r3, [r3, #2]
1000806a:	2b03      	cmp	r3, #3
1000806c:	d136      	bne.n	100080dc <main+0x8e8>
1000806e:	4be9      	ldr	r3, [pc, #932]	; (10008414 <main+0xc20>)
10008070:	78db      	ldrb	r3, [r3, #3]
10008072:	2bf5      	cmp	r3, #245	; 0xf5
10008074:	d132      	bne.n	100080dc <main+0x8e8>
10008076:	4be7      	ldr	r3, [pc, #924]	; (10008414 <main+0xc20>)
10008078:	791b      	ldrb	r3, [r3, #4]
1000807a:	2bc5      	cmp	r3, #197	; 0xc5
1000807c:	d12e      	bne.n	100080dc <main+0x8e8>
												{new_data_HalloBack();
1000807e:	f7f9 fc01 	bl	10001884 <new_data_HalloBack>

			  	 	 	 	 	 	 	 	 	B_nextLedOff=0;
10008082:	4be5      	ldr	r3, [pc, #916]	; (10008418 <main+0xc24>)
10008084:	2200      	movs	r2, #0
10008086:	701a      	strb	r2, [r3, #0]
												DIGITAL_IO_SetOutputHigh(&VCC_LED_shtdwn);
10008088:	4be4      	ldr	r3, [pc, #912]	; (1000841c <main+0xc28>)
1000808a:	1c18      	adds	r0, r3, #0
1000808c:	f7ff fb60 	bl	10007750 <DIGITAL_IO_SetOutputHigh>
												new_data[5]= command_all_ledOnBack ;
10008090:	4be3      	ldr	r3, [pc, #908]	; (10008420 <main+0xc2c>)
10008092:	2275      	movs	r2, #117	; 0x75
10008094:	715a      	strb	r2, [r3, #5]
												new_data[6]= Ser_NrH  / 0x100 ;
10008096:	4be3      	ldr	r3, [pc, #908]	; (10008424 <main+0xc30>)
10008098:	881b      	ldrh	r3, [r3, #0]
1000809a:	0a1b      	lsrs	r3, r3, #8
1000809c:	b29b      	uxth	r3, r3
1000809e:	b2da      	uxtb	r2, r3
100080a0:	4bdf      	ldr	r3, [pc, #892]	; (10008420 <main+0xc2c>)
100080a2:	719a      	strb	r2, [r3, #6]
												new_data[7]= Ser_NrH  & 0xff ;
100080a4:	4bdf      	ldr	r3, [pc, #892]	; (10008424 <main+0xc30>)
100080a6:	881b      	ldrh	r3, [r3, #0]
100080a8:	b2da      	uxtb	r2, r3
100080aa:	4bdd      	ldr	r3, [pc, #884]	; (10008420 <main+0xc2c>)
100080ac:	71da      	strb	r2, [r3, #7]
												new_data[8]= Ser_NrL  / 0x100 ;
100080ae:	4bde      	ldr	r3, [pc, #888]	; (10008428 <main+0xc34>)
100080b0:	881b      	ldrh	r3, [r3, #0]
100080b2:	0a1b      	lsrs	r3, r3, #8
100080b4:	b29b      	uxth	r3, r3
100080b6:	b2da      	uxtb	r2, r3
100080b8:	4bd9      	ldr	r3, [pc, #868]	; (10008420 <main+0xc2c>)
100080ba:	721a      	strb	r2, [r3, #8]
												new_data[9]= Ser_NrL  & 0xff ;
100080bc:	4bda      	ldr	r3, [pc, #872]	; (10008428 <main+0xc34>)
100080be:	881b      	ldrh	r3, [r3, #0]
100080c0:	b2da      	uxtb	r2, r3
100080c2:	4bd7      	ldr	r3, [pc, #860]	; (10008420 <main+0xc2c>)
100080c4:	725a      	strb	r2, [r3, #9]

												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100080c6:	4bd9      	ldr	r3, [pc, #868]	; (1000842c <main+0xc38>)
100080c8:	781b      	ldrb	r3, [r3, #0]
100080ca:	1c1c      	adds	r4, r3, #0
100080cc:	4ad8      	ldr	r2, [pc, #864]	; (10008430 <main+0xc3c>)
100080ce:	4bd4      	ldr	r3, [pc, #848]	; (10008420 <main+0xc2c>)
100080d0:	1c10      	adds	r0, r2, #0
100080d2:	1c19      	adds	r1, r3, #0
100080d4:	1c22      	adds	r2, r4, #0
100080d6:	f7fb fea5 	bl	10003e24 <UART_Transmit>
												}
											break;
100080da:	e004      	b.n	100080e6 <main+0x8f2>
100080dc:	e003      	b.n	100080e6 <main+0x8f2>


				default: 						execute = 0;
100080de:	4bd5      	ldr	r3, [pc, #852]	; (10008434 <main+0xc40>)
100080e0:	2200      	movs	r2, #0
100080e2:	701a      	strb	r2, [r3, #0]
				break;
100080e4:	46c0      	nop			; (mov r8, r8)
100080e6:	f001 fa4b 	bl	10009580 <main+0x1d8c>
				}
			 }
			 	else //node_id_resi = node_id)
			 {

				switch  (command) {
100080ea:	4bd3      	ldr	r3, [pc, #844]	; (10008438 <main+0xc44>)
100080ec:	781b      	ldrb	r3, [r3, #0]
100080ee:	3b33      	subs	r3, #51	; 0x33
100080f0:	2b20      	cmp	r3, #32
100080f2:	d901      	bls.n	100080f8 <main+0x904>
100080f4:	f001 fa43 	bl	1000957e <main+0x1d8a>
100080f8:	009a      	lsls	r2, r3, #2
100080fa:	4bd0      	ldr	r3, [pc, #832]	; (1000843c <main+0xc48>)
100080fc:	18d3      	adds	r3, r2, r3
100080fe:	681b      	ldr	r3, [r3, #0]
10008100:	469f      	mov	pc, r3

				case command_BroadcastResi : 	new_data_BroadcastBack();
10008102:	f7f9 f9f3 	bl	100014ec <new_data_BroadcastBack>
											UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008106:	4bc9      	ldr	r3, [pc, #804]	; (1000842c <main+0xc38>)
10008108:	781b      	ldrb	r3, [r3, #0]
1000810a:	1c1c      	adds	r4, r3, #0
1000810c:	4ac8      	ldr	r2, [pc, #800]	; (10008430 <main+0xc3c>)
1000810e:	4bc4      	ldr	r3, [pc, #784]	; (10008420 <main+0xc2c>)
10008110:	1c10      	adds	r0, r2, #0
10008112:	1c19      	adds	r1, r3, #0
10008114:	1c22      	adds	r2, r4, #0
10008116:	f7fb fe85 	bl	10003e24 <UART_Transmit>
											break;
1000811a:	f001 fa31 	bl	10009580 <main+0x1d8c>
				case command_ana1Resi  :
												new_data_analog1Back();
1000811e:	f7f9 fa25 	bl	1000156c <new_data_analog1Back>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008122:	4bc2      	ldr	r3, [pc, #776]	; (1000842c <main+0xc38>)
10008124:	781b      	ldrb	r3, [r3, #0]
10008126:	1c1c      	adds	r4, r3, #0
10008128:	4ac1      	ldr	r2, [pc, #772]	; (10008430 <main+0xc3c>)
1000812a:	4bbd      	ldr	r3, [pc, #756]	; (10008420 <main+0xc2c>)
1000812c:	1c10      	adds	r0, r2, #0
1000812e:	1c19      	adds	r1, r3, #0
10008130:	1c22      	adds	r2, r4, #0
10008132:	f7fb fe77 	bl	10003e24 <UART_Transmit>
											break;
10008136:	f001 fa23 	bl	10009580 <main+0x1d8c>
				case command_ana2Resi  :
												new_data_analog2Back();
1000813a:	f7f9 fa57 	bl	100015ec <new_data_analog2Back>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
1000813e:	4bbb      	ldr	r3, [pc, #748]	; (1000842c <main+0xc38>)
10008140:	781b      	ldrb	r3, [r3, #0]
10008142:	1c1c      	adds	r4, r3, #0
10008144:	4aba      	ldr	r2, [pc, #744]	; (10008430 <main+0xc3c>)
10008146:	4bb6      	ldr	r3, [pc, #728]	; (10008420 <main+0xc2c>)
10008148:	1c10      	adds	r0, r2, #0
1000814a:	1c19      	adds	r1, r3, #0
1000814c:	1c22      	adds	r2, r4, #0
1000814e:	f7fb fe69 	bl	10003e24 <UART_Transmit>
											break;
10008152:	f001 fa15 	bl	10009580 <main+0x1d8c>
				case command_aktLichtResi : 	dimAkt_Ww=ReadData[1]*0x100+ReadData[2];
10008156:	4baf      	ldr	r3, [pc, #700]	; (10008414 <main+0xc20>)
10008158:	785b      	ldrb	r3, [r3, #1]
1000815a:	b29b      	uxth	r3, r3
1000815c:	021b      	lsls	r3, r3, #8
1000815e:	b29a      	uxth	r2, r3
10008160:	4bac      	ldr	r3, [pc, #688]	; (10008414 <main+0xc20>)
10008162:	789b      	ldrb	r3, [r3, #2]
10008164:	b29b      	uxth	r3, r3
10008166:	18d3      	adds	r3, r2, r3
10008168:	b29a      	uxth	r2, r3
1000816a:	4bb5      	ldr	r3, [pc, #724]	; (10008440 <main+0xc4c>)
1000816c:	801a      	strh	r2, [r3, #0]
												dimAkt_Cw=ReadData[3]*0x100+ReadData[4];
1000816e:	4ba9      	ldr	r3, [pc, #676]	; (10008414 <main+0xc20>)
10008170:	78db      	ldrb	r3, [r3, #3]
10008172:	b29b      	uxth	r3, r3
10008174:	021b      	lsls	r3, r3, #8
10008176:	b29a      	uxth	r2, r3
10008178:	4ba6      	ldr	r3, [pc, #664]	; (10008414 <main+0xc20>)
1000817a:	791b      	ldrb	r3, [r3, #4]
1000817c:	b29b      	uxth	r3, r3
1000817e:	18d3      	adds	r3, r2, r3
10008180:	b29a      	uxth	r2, r3
10008182:	4bb0      	ldr	r3, [pc, #704]	; (10008444 <main+0xc50>)
10008184:	801a      	strh	r2, [r3, #0]

												bcuAktBerechnung();
10008186:	f7fa f90b 	bl	100023a0 <bcuAktBerechnung>
											    bcuUebergabe();
1000818a:	f7fa f8ad 	bl	100022e8 <bcuUebergabe>

												new_data_aktLichtBack();
1000818e:	f7f9 fa6d 	bl	1000166c <new_data_aktLichtBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008192:	4ba6      	ldr	r3, [pc, #664]	; (1000842c <main+0xc38>)
10008194:	781b      	ldrb	r3, [r3, #0]
10008196:	1c1c      	adds	r4, r3, #0
10008198:	4aa5      	ldr	r2, [pc, #660]	; (10008430 <main+0xc3c>)
1000819a:	4ba1      	ldr	r3, [pc, #644]	; (10008420 <main+0xc2c>)
1000819c:	1c10      	adds	r0, r2, #0
1000819e:	1c19      	adds	r1, r3, #0
100081a0:	1c22      	adds	r2, r4, #0
100081a2:	f7fb fe3f 	bl	10003e24 <UART_Transmit>
											break;
100081a6:	f001 f9eb 	bl	10009580 <main+0x1d8c>
				case command_offLichtResi :
											dimOff_Ww=ReadData[1]*0x100+ReadData[2];
100081aa:	4b9a      	ldr	r3, [pc, #616]	; (10008414 <main+0xc20>)
100081ac:	785b      	ldrb	r3, [r3, #1]
100081ae:	b29b      	uxth	r3, r3
100081b0:	021b      	lsls	r3, r3, #8
100081b2:	b29a      	uxth	r2, r3
100081b4:	4b97      	ldr	r3, [pc, #604]	; (10008414 <main+0xc20>)
100081b6:	789b      	ldrb	r3, [r3, #2]
100081b8:	b29b      	uxth	r3, r3
100081ba:	18d3      	adds	r3, r2, r3
100081bc:	b29a      	uxth	r2, r3
100081be:	4ba2      	ldr	r3, [pc, #648]	; (10008448 <main+0xc54>)
100081c0:	801a      	strh	r2, [r3, #0]
											dimOff_Cw=ReadData[3]*0x100+ReadData[4];
100081c2:	4b94      	ldr	r3, [pc, #592]	; (10008414 <main+0xc20>)
100081c4:	78db      	ldrb	r3, [r3, #3]
100081c6:	b29b      	uxth	r3, r3
100081c8:	021b      	lsls	r3, r3, #8
100081ca:	b29a      	uxth	r2, r3
100081cc:	4b91      	ldr	r3, [pc, #580]	; (10008414 <main+0xc20>)
100081ce:	791b      	ldrb	r3, [r3, #4]
100081d0:	b29b      	uxth	r3, r3
100081d2:	18d3      	adds	r3, r2, r3
100081d4:	b29a      	uxth	r2, r3
100081d6:	4b9d      	ldr	r3, [pc, #628]	; (1000844c <main+0xc58>)
100081d8:	801a      	strh	r2, [r3, #0]

												new_data_offLichtBack();
100081da:	f7f9 fa87 	bl	100016ec <new_data_offLichtBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100081de:	4b93      	ldr	r3, [pc, #588]	; (1000842c <main+0xc38>)
100081e0:	781b      	ldrb	r3, [r3, #0]
100081e2:	1c1c      	adds	r4, r3, #0
100081e4:	4a92      	ldr	r2, [pc, #584]	; (10008430 <main+0xc3c>)
100081e6:	4b8e      	ldr	r3, [pc, #568]	; (10008420 <main+0xc2c>)
100081e8:	1c10      	adds	r0, r2, #0
100081ea:	1c19      	adds	r1, r3, #0
100081ec:	1c22      	adds	r2, r4, #0
100081ee:	f7fb fe19 	bl	10003e24 <UART_Transmit>
											break;
100081f2:	f001 f9c5 	bl	10009580 <main+0x1d8c>
				case command_HalloResi : 		new_data_HalloBack();
100081f6:	f7f9 fb45 	bl	10001884 <new_data_HalloBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100081fa:	4b8c      	ldr	r3, [pc, #560]	; (1000842c <main+0xc38>)
100081fc:	781b      	ldrb	r3, [r3, #0]
100081fe:	1c1c      	adds	r4, r3, #0
10008200:	4a8b      	ldr	r2, [pc, #556]	; (10008430 <main+0xc3c>)
10008202:	4b87      	ldr	r3, [pc, #540]	; (10008420 <main+0xc2c>)
10008204:	1c10      	adds	r0, r2, #0
10008206:	1c19      	adds	r1, r3, #0
10008208:	1c22      	adds	r2, r4, #0
1000820a:	f7fb fe0b 	bl	10003e24 <UART_Transmit>
											break;
1000820e:	f001 f9b7 	bl	10009580 <main+0x1d8c>
				case command_nextledOff_Resi : 		new_data_HalloBack();
10008212:	f7f9 fb37 	bl	10001884 <new_data_HalloBack>
	 	 	 	 	 							B_nextLedOff=1;   // schaltet on led beim spannnungsvergleich aus
10008216:	4b80      	ldr	r3, [pc, #512]	; (10008418 <main+0xc24>)
10008218:	2201      	movs	r2, #1
1000821a:	701a      	strb	r2, [r3, #0]
												DIGITAL_IO_SetOutputLow(&VCC_LED_shtdwn);
1000821c:	4b7f      	ldr	r3, [pc, #508]	; (1000841c <main+0xc28>)
1000821e:	1c18      	adds	r0, r3, #0
10008220:	f7ff faa6 	bl	10007770 <DIGITAL_IO_SetOutputLow>
												new_data[5]= command_nextledOffBack ;
10008224:	4b7e      	ldr	r3, [pc, #504]	; (10008420 <main+0xc2c>)
10008226:	2272      	movs	r2, #114	; 0x72
10008228:	715a      	strb	r2, [r3, #5]
												new_data[6]= Ser_NrH  / 0x100 ;
1000822a:	4b7e      	ldr	r3, [pc, #504]	; (10008424 <main+0xc30>)
1000822c:	881b      	ldrh	r3, [r3, #0]
1000822e:	0a1b      	lsrs	r3, r3, #8
10008230:	b29b      	uxth	r3, r3
10008232:	b2da      	uxtb	r2, r3
10008234:	4b7a      	ldr	r3, [pc, #488]	; (10008420 <main+0xc2c>)
10008236:	719a      	strb	r2, [r3, #6]
												new_data[7]= Ser_NrH  & 0xff ;
10008238:	4b7a      	ldr	r3, [pc, #488]	; (10008424 <main+0xc30>)
1000823a:	881b      	ldrh	r3, [r3, #0]
1000823c:	b2da      	uxtb	r2, r3
1000823e:	4b78      	ldr	r3, [pc, #480]	; (10008420 <main+0xc2c>)
10008240:	71da      	strb	r2, [r3, #7]
												new_data[8]= Ser_NrL  / 0x100 ;
10008242:	4b79      	ldr	r3, [pc, #484]	; (10008428 <main+0xc34>)
10008244:	881b      	ldrh	r3, [r3, #0]
10008246:	0a1b      	lsrs	r3, r3, #8
10008248:	b29b      	uxth	r3, r3
1000824a:	b2da      	uxtb	r2, r3
1000824c:	4b74      	ldr	r3, [pc, #464]	; (10008420 <main+0xc2c>)
1000824e:	721a      	strb	r2, [r3, #8]
												new_data[9]= Ser_NrL  & 0xff ;
10008250:	4b75      	ldr	r3, [pc, #468]	; (10008428 <main+0xc34>)
10008252:	881b      	ldrh	r3, [r3, #0]
10008254:	b2da      	uxtb	r2, r3
10008256:	4b72      	ldr	r3, [pc, #456]	; (10008420 <main+0xc2c>)
10008258:	725a      	strb	r2, [r3, #9]

												UART_Transmit(&UART_1, new_data,transmit_buf_size);
1000825a:	4b74      	ldr	r3, [pc, #464]	; (1000842c <main+0xc38>)
1000825c:	781b      	ldrb	r3, [r3, #0]
1000825e:	1c1c      	adds	r4, r3, #0
10008260:	4a73      	ldr	r2, [pc, #460]	; (10008430 <main+0xc3c>)
10008262:	4b6f      	ldr	r3, [pc, #444]	; (10008420 <main+0xc2c>)
10008264:	1c10      	adds	r0, r2, #0
10008266:	1c19      	adds	r1, r3, #0
10008268:	1c22      	adds	r2, r4, #0
1000826a:	f7fb fddb 	bl	10003e24 <UART_Transmit>
											break;
1000826e:	f001 f987 	bl	10009580 <main+0x1d8c>
				case command_nextledOn_Resi : 		new_data_HalloBack();
10008272:	f7f9 fb07 	bl	10001884 <new_data_HalloBack>

			  	 	 	 	 	 	 	 	 	B_nextLedOff=0;
10008276:	4b68      	ldr	r3, [pc, #416]	; (10008418 <main+0xc24>)
10008278:	2200      	movs	r2, #0
1000827a:	701a      	strb	r2, [r3, #0]
												DIGITAL_IO_SetOutputHigh(&VCC_LED_shtdwn);
1000827c:	4b67      	ldr	r3, [pc, #412]	; (1000841c <main+0xc28>)
1000827e:	1c18      	adds	r0, r3, #0
10008280:	f7ff fa66 	bl	10007750 <DIGITAL_IO_SetOutputHigh>
												new_data[5]= command_nextledOnBack ;
10008284:	4b66      	ldr	r3, [pc, #408]	; (10008420 <main+0xc2c>)
10008286:	2273      	movs	r2, #115	; 0x73
10008288:	715a      	strb	r2, [r3, #5]
												new_data[6]= Ser_NrH  / 0x100 ;
1000828a:	4b66      	ldr	r3, [pc, #408]	; (10008424 <main+0xc30>)
1000828c:	881b      	ldrh	r3, [r3, #0]
1000828e:	0a1b      	lsrs	r3, r3, #8
10008290:	b29b      	uxth	r3, r3
10008292:	b2da      	uxtb	r2, r3
10008294:	4b62      	ldr	r3, [pc, #392]	; (10008420 <main+0xc2c>)
10008296:	719a      	strb	r2, [r3, #6]
												new_data[7]= Ser_NrH  & 0xff ;
10008298:	4b62      	ldr	r3, [pc, #392]	; (10008424 <main+0xc30>)
1000829a:	881b      	ldrh	r3, [r3, #0]
1000829c:	b2da      	uxtb	r2, r3
1000829e:	4b60      	ldr	r3, [pc, #384]	; (10008420 <main+0xc2c>)
100082a0:	71da      	strb	r2, [r3, #7]
												new_data[8]= Ser_NrL  / 0x100 ;
100082a2:	4b61      	ldr	r3, [pc, #388]	; (10008428 <main+0xc34>)
100082a4:	881b      	ldrh	r3, [r3, #0]
100082a6:	0a1b      	lsrs	r3, r3, #8
100082a8:	b29b      	uxth	r3, r3
100082aa:	b2da      	uxtb	r2, r3
100082ac:	4b5c      	ldr	r3, [pc, #368]	; (10008420 <main+0xc2c>)
100082ae:	721a      	strb	r2, [r3, #8]
												new_data[9]= Ser_NrL  & 0xff ;
100082b0:	4b5d      	ldr	r3, [pc, #372]	; (10008428 <main+0xc34>)
100082b2:	881b      	ldrh	r3, [r3, #0]
100082b4:	b2da      	uxtb	r2, r3
100082b6:	4b5a      	ldr	r3, [pc, #360]	; (10008420 <main+0xc2c>)
100082b8:	725a      	strb	r2, [r3, #9]

												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100082ba:	4b5c      	ldr	r3, [pc, #368]	; (1000842c <main+0xc38>)
100082bc:	781b      	ldrb	r3, [r3, #0]
100082be:	1c1c      	adds	r4, r3, #0
100082c0:	4a5b      	ldr	r2, [pc, #364]	; (10008430 <main+0xc3c>)
100082c2:	4b57      	ldr	r3, [pc, #348]	; (10008420 <main+0xc2c>)
100082c4:	1c10      	adds	r0, r2, #0
100082c6:	1c19      	adds	r1, r3, #0
100082c8:	1c22      	adds	r2, r4, #0
100082ca:	f7fb fdab 	bl	10003e24 <UART_Transmit>
											break;
100082ce:	f001 f957 	bl	10009580 <main+0x1d8c>

				case command_Bright_Color_Resi :	Brightness_Gen=ReadData[1]*0x100+ReadData[2];
100082d2:	4b50      	ldr	r3, [pc, #320]	; (10008414 <main+0xc20>)
100082d4:	785b      	ldrb	r3, [r3, #1]
100082d6:	b29b      	uxth	r3, r3
100082d8:	021b      	lsls	r3, r3, #8
100082da:	b29a      	uxth	r2, r3
100082dc:	4b4d      	ldr	r3, [pc, #308]	; (10008414 <main+0xc20>)
100082de:	789b      	ldrb	r3, [r3, #2]
100082e0:	b29b      	uxth	r3, r3
100082e2:	18d3      	adds	r3, r2, r3
100082e4:	b29a      	uxth	r2, r3
100082e6:	4b5a      	ldr	r3, [pc, #360]	; (10008450 <main+0xc5c>)
100082e8:	801a      	strh	r2, [r3, #0]
													ColorQuot_Gen=ReadData[3]*0x100+ReadData[4];
100082ea:	4b4a      	ldr	r3, [pc, #296]	; (10008414 <main+0xc20>)
100082ec:	78db      	ldrb	r3, [r3, #3]
100082ee:	b29b      	uxth	r3, r3
100082f0:	021b      	lsls	r3, r3, #8
100082f2:	b29a      	uxth	r2, r3
100082f4:	4b47      	ldr	r3, [pc, #284]	; (10008414 <main+0xc20>)
100082f6:	791b      	ldrb	r3, [r3, #4]
100082f8:	b29b      	uxth	r3, r3
100082fa:	18d3      	adds	r3, r2, r3
100082fc:	b29a      	uxth	r2, r3
100082fe:	4b55      	ldr	r3, [pc, #340]	; (10008454 <main+0xc60>)
10008300:	801a      	strh	r2, [r3, #0]


													bcuColorBerechnung();
10008302:	f7fa f8b7 	bl	10002474 <bcuColorBerechnung>
													bcuAktBerechnung();
10008306:	f7fa f84b 	bl	100023a0 <bcuAktBerechnung>
													  bcuUebergabe();
1000830a:	f7f9 ffed 	bl	100022e8 <bcuUebergabe>
													  //DimmUebergabe();

													new_data_Bright_Color_Back();
1000830e:	f7f9 fa39 	bl	10001784 <new_data_Bright_Color_Back>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008312:	4b46      	ldr	r3, [pc, #280]	; (1000842c <main+0xc38>)
10008314:	781b      	ldrb	r3, [r3, #0]
10008316:	1c1c      	adds	r4, r3, #0
10008318:	4a45      	ldr	r2, [pc, #276]	; (10008430 <main+0xc3c>)
1000831a:	4b41      	ldr	r3, [pc, #260]	; (10008420 <main+0xc2c>)
1000831c:	1c10      	adds	r0, r2, #0
1000831e:	1c19      	adds	r1, r3, #0
10008320:	1c22      	adds	r2, r4, #0
10008322:	f7fb fd7f 	bl	10003e24 <UART_Transmit>
											break;
10008326:	f001 f92b 	bl	10009580 <main+0x1d8c>

				case command_Quot_Walk_Resi :	linearwalk_gen = ReadData[1]*0x100+ReadData[2];
1000832a:	4b3a      	ldr	r3, [pc, #232]	; (10008414 <main+0xc20>)
1000832c:	785b      	ldrb	r3, [r3, #1]
1000832e:	b29b      	uxth	r3, r3
10008330:	021b      	lsls	r3, r3, #8
10008332:	b29a      	uxth	r2, r3
10008334:	4b37      	ldr	r3, [pc, #220]	; (10008414 <main+0xc20>)
10008336:	789b      	ldrb	r3, [r3, #2]
10008338:	b29b      	uxth	r3, r3
1000833a:	18d3      	adds	r3, r2, r3
1000833c:	b29a      	uxth	r2, r3
1000833e:	4b46      	ldr	r3, [pc, #280]	; (10008458 <main+0xc64>)
10008340:	801a      	strh	r2, [r3, #0]
												linearwalk_ww1 = linearwalk_gen;
10008342:	4b45      	ldr	r3, [pc, #276]	; (10008458 <main+0xc64>)
10008344:	881a      	ldrh	r2, [r3, #0]
10008346:	4b45      	ldr	r3, [pc, #276]	; (1000845c <main+0xc68>)
10008348:	801a      	strh	r2, [r3, #0]
												linearwalk_ww2 = linearwalk_gen;
1000834a:	4b43      	ldr	r3, [pc, #268]	; (10008458 <main+0xc64>)
1000834c:	881a      	ldrh	r2, [r3, #0]
1000834e:	4b44      	ldr	r3, [pc, #272]	; (10008460 <main+0xc6c>)
10008350:	801a      	strh	r2, [r3, #0]
												linearwalk_cw1 = linearwalk_gen;
10008352:	4b41      	ldr	r3, [pc, #260]	; (10008458 <main+0xc64>)
10008354:	881a      	ldrh	r2, [r3, #0]
10008356:	4b43      	ldr	r3, [pc, #268]	; (10008464 <main+0xc70>)
10008358:	801a      	strh	r2, [r3, #0]
												linearwalk_cw2 = linearwalk_gen;
1000835a:	4b3f      	ldr	r3, [pc, #252]	; (10008458 <main+0xc64>)
1000835c:	881a      	ldrh	r2, [r3, #0]
1000835e:	4b42      	ldr	r3, [pc, #264]	; (10008468 <main+0xc74>)
10008360:	801a      	strh	r2, [r3, #0]

												Farbe_wwcw_Quot_gen=ReadData[3]*0x100+ReadData[4];
10008362:	4b2c      	ldr	r3, [pc, #176]	; (10008414 <main+0xc20>)
10008364:	78db      	ldrb	r3, [r3, #3]
10008366:	b29b      	uxth	r3, r3
10008368:	021b      	lsls	r3, r3, #8
1000836a:	b29a      	uxth	r2, r3
1000836c:	4b29      	ldr	r3, [pc, #164]	; (10008414 <main+0xc20>)
1000836e:	791b      	ldrb	r3, [r3, #4]
10008370:	b29b      	uxth	r3, r3
10008372:	18d3      	adds	r3, r2, r3
10008374:	b29a      	uxth	r2, r3
10008376:	4b3d      	ldr	r3, [pc, #244]	; (1000846c <main+0xc78>)
10008378:	801a      	strh	r2, [r3, #0]
												Farbe_ww1_Quot = ReadData[3];
1000837a:	4b26      	ldr	r3, [pc, #152]	; (10008414 <main+0xc20>)
1000837c:	78db      	ldrb	r3, [r3, #3]
1000837e:	b29a      	uxth	r2, r3
10008380:	4b3b      	ldr	r3, [pc, #236]	; (10008470 <main+0xc7c>)
10008382:	801a      	strh	r2, [r3, #0]
												Farbe_cw1_Quot = ReadData[3];
10008384:	4b23      	ldr	r3, [pc, #140]	; (10008414 <main+0xc20>)
10008386:	78db      	ldrb	r3, [r3, #3]
10008388:	b29a      	uxth	r2, r3
1000838a:	4b3a      	ldr	r3, [pc, #232]	; (10008474 <main+0xc80>)
1000838c:	801a      	strh	r2, [r3, #0]
												Farbe_ww2_Quot = ReadData[4];
1000838e:	4b21      	ldr	r3, [pc, #132]	; (10008414 <main+0xc20>)
10008390:	791b      	ldrb	r3, [r3, #4]
10008392:	b29a      	uxth	r2, r3
10008394:	4b38      	ldr	r3, [pc, #224]	; (10008478 <main+0xc84>)
10008396:	801a      	strh	r2, [r3, #0]
												Farbe_cw2_Quot = ReadData[4];
10008398:	4b1e      	ldr	r3, [pc, #120]	; (10008414 <main+0xc20>)
1000839a:	791b      	ldrb	r3, [r3, #4]
1000839c:	b29a      	uxth	r2, r3
1000839e:	4b37      	ldr	r3, [pc, #220]	; (1000847c <main+0xc88>)
100083a0:	801a      	strh	r2, [r3, #0]

												bcuAktBerechnung();
100083a2:	f7f9 fffd 	bl	100023a0 <bcuAktBerechnung>
												  bcuUebergabe();
100083a6:	f7f9 ff9f 	bl	100022e8 <bcuUebergabe>
												 // DimmUebergabe();

													new_data_Quot_Walk_Back();
100083aa:	f7f9 fa2b 	bl	10001804 <new_data_Quot_Walk_Back>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100083ae:	4b1f      	ldr	r3, [pc, #124]	; (1000842c <main+0xc38>)
100083b0:	781b      	ldrb	r3, [r3, #0]
100083b2:	1c1c      	adds	r4, r3, #0
100083b4:	4a1e      	ldr	r2, [pc, #120]	; (10008430 <main+0xc3c>)
100083b6:	4b1a      	ldr	r3, [pc, #104]	; (10008420 <main+0xc2c>)
100083b8:	1c10      	adds	r0, r2, #0
100083ba:	1c19      	adds	r1, r3, #0
100083bc:	1c22      	adds	r2, r4, #0
100083be:	f7fb fd31 	bl	10003e24 <UART_Transmit>
											break;
100083c2:	f001 f8dd 	bl	10009580 <main+0x1d8c>





				case command_neuNodeIdResi :	if (ReadData[1] == ReadData[2] &&  Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]))
100083c6:	4b13      	ldr	r3, [pc, #76]	; (10008414 <main+0xc20>)
100083c8:	785a      	ldrb	r2, [r3, #1]
100083ca:	4b12      	ldr	r3, [pc, #72]	; (10008414 <main+0xc20>)
100083cc:	789b      	ldrb	r3, [r3, #2]
100083ce:	429a      	cmp	r2, r3
100083d0:	d15a      	bne.n	10008488 <main+0xc94>
100083d2:	4b15      	ldr	r3, [pc, #84]	; (10008428 <main+0xc34>)
100083d4:	881b      	ldrh	r3, [r3, #0]
100083d6:	1c19      	adds	r1, r3, #0
100083d8:	4b0e      	ldr	r3, [pc, #56]	; (10008414 <main+0xc20>)
100083da:	78db      	ldrb	r3, [r3, #3]
100083dc:	021b      	lsls	r3, r3, #8
100083de:	4a0d      	ldr	r2, [pc, #52]	; (10008414 <main+0xc20>)
100083e0:	7912      	ldrb	r2, [r2, #4]
100083e2:	189b      	adds	r3, r3, r2
100083e4:	4299      	cmp	r1, r3
100083e6:	d14f      	bne.n	10008488 <main+0xc94>
												{
												node_id_neu = ReadData[1];
100083e8:	4b0a      	ldr	r3, [pc, #40]	; (10008414 <main+0xc20>)
100083ea:	785a      	ldrb	r2, [r3, #1]
100083ec:	4b24      	ldr	r3, [pc, #144]	; (10008480 <main+0xc8c>)
100083ee:	701a      	strb	r2, [r3, #0]
												command_nr=0x30;
100083f0:	4b24      	ldr	r3, [pc, #144]	; (10008484 <main+0xc90>)
100083f2:	2230      	movs	r2, #48	; 0x30
100083f4:	801a      	strh	r2, [r3, #0]
												new_data_neuNodeIdBack();
100083f6:	f7f9 fa75 	bl	100018e4 <new_data_neuNodeIdBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100083fa:	4b0c      	ldr	r3, [pc, #48]	; (1000842c <main+0xc38>)
100083fc:	781b      	ldrb	r3, [r3, #0]
100083fe:	1c1c      	adds	r4, r3, #0
10008400:	4a0b      	ldr	r2, [pc, #44]	; (10008430 <main+0xc3c>)
10008402:	4b07      	ldr	r3, [pc, #28]	; (10008420 <main+0xc2c>)
10008404:	1c10      	adds	r0, r2, #0
10008406:	1c19      	adds	r1, r3, #0
10008408:	1c22      	adds	r2, r4, #0
1000840a:	f7fb fd0b 	bl	10003e24 <UART_Transmit>
												 new_data[8]= Ser_NrL  / 0x100 ;
												 new_data[9]= Ser_NrL  & 0xff ;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}

											break;
1000840e:	f001 f8b7 	bl	10009580 <main+0x1d8c>
10008412:	46c0      	nop			; (mov r8, r8)
10008414:	20000824 	.word	0x20000824
10008418:	2000076d 	.word	0x2000076d
1000841c:	100098ec 	.word	0x100098ec
10008420:	20000804 	.word	0x20000804
10008424:	20000830 	.word	0x20000830
10008428:	200008a8 	.word	0x200008a8
1000842c:	20000550 	.word	0x20000550
10008430:	20000560 	.word	0x20000560
10008434:	200008b0 	.word	0x200008b0
10008438:	2000082c 	.word	0x2000082c
1000843c:	100099e0 	.word	0x100099e0
10008440:	200008ac 	.word	0x200008ac
10008444:	200008c0 	.word	0x200008c0
10008448:	20000900 	.word	0x20000900
1000844c:	20000864 	.word	0x20000864
10008450:	2000054c 	.word	0x2000054c
10008454:	2000054e 	.word	0x2000054e
10008458:	2000054a 	.word	0x2000054a
1000845c:	200007ec 	.word	0x200007ec
10008460:	20000842 	.word	0x20000842
10008464:	20000908 	.word	0x20000908
10008468:	2000083e 	.word	0x2000083e
1000846c:	200008a0 	.word	0x200008a0
10008470:	20000832 	.word	0x20000832
10008474:	200008f4 	.word	0x200008f4
10008478:	2000081c 	.word	0x2000081c
1000847c:	200008a6 	.word	0x200008a6
10008480:	200007ca 	.word	0x200007ca
10008484:	20000c2e 	.word	0x20000c2e
												command_nr=0x30;
												new_data_neuNodeIdBack();
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
												else {
												node_id_neu = node_id;
10008488:	4bf0      	ldr	r3, [pc, #960]	; (1000884c <main+0x1058>)
1000848a:	781a      	ldrb	r2, [r3, #0]
1000848c:	4bf0      	ldr	r3, [pc, #960]	; (10008850 <main+0x105c>)
1000848e:	701a      	strb	r2, [r3, #0]
												command_nr=0x0;
10008490:	4bf0      	ldr	r3, [pc, #960]	; (10008854 <main+0x1060>)
10008492:	2200      	movs	r2, #0
10008494:	801a      	strh	r2, [r3, #0]
												 new_data_HalloBack();
10008496:	f7f9 f9f5 	bl	10001884 <new_data_HalloBack>
												 new_data[6]='e';
1000849a:	4bef      	ldr	r3, [pc, #956]	; (10008858 <main+0x1064>)
1000849c:	2265      	movs	r2, #101	; 0x65
1000849e:	719a      	strb	r2, [r3, #6]
												 new_data[7]= 4;
100084a0:	4bed      	ldr	r3, [pc, #948]	; (10008858 <main+0x1064>)
100084a2:	2204      	movs	r2, #4
100084a4:	71da      	strb	r2, [r3, #7]
												 new_data[8]= Ser_NrL  / 0x100 ;
100084a6:	4bed      	ldr	r3, [pc, #948]	; (1000885c <main+0x1068>)
100084a8:	881b      	ldrh	r3, [r3, #0]
100084aa:	0a1b      	lsrs	r3, r3, #8
100084ac:	b29b      	uxth	r3, r3
100084ae:	b2da      	uxtb	r2, r3
100084b0:	4be9      	ldr	r3, [pc, #932]	; (10008858 <main+0x1064>)
100084b2:	721a      	strb	r2, [r3, #8]
												 new_data[9]= Ser_NrL  & 0xff ;
100084b4:	4be9      	ldr	r3, [pc, #932]	; (1000885c <main+0x1068>)
100084b6:	881b      	ldrh	r3, [r3, #0]
100084b8:	b2da      	uxtb	r2, r3
100084ba:	4be7      	ldr	r3, [pc, #924]	; (10008858 <main+0x1064>)
100084bc:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100084be:	4be8      	ldr	r3, [pc, #928]	; (10008860 <main+0x106c>)
100084c0:	781b      	ldrb	r3, [r3, #0]
100084c2:	1c1c      	adds	r4, r3, #0
100084c4:	4ae7      	ldr	r2, [pc, #924]	; (10008864 <main+0x1070>)
100084c6:	4be4      	ldr	r3, [pc, #912]	; (10008858 <main+0x1064>)
100084c8:	1c10      	adds	r0, r2, #0
100084ca:	1c19      	adds	r1, r3, #0
100084cc:	1c22      	adds	r2, r4, #0
100084ce:	f7fb fca9 	bl	10003e24 <UART_Transmit>
												}

											break;
100084d2:	f001 f855 	bl	10009580 <main+0x1d8c>

				case command_neuSerNrResi :
												command_nr = 0x45;
100084d6:	4bdf      	ldr	r3, [pc, #892]	; (10008854 <main+0x1060>)
100084d8:	2245      	movs	r2, #69	; 0x45
100084da:	801a      	strh	r2, [r3, #0]
												neu_Ser_NrH  = ReadData[1] * 0x100 + ReadData[2];
100084dc:	4be2      	ldr	r3, [pc, #904]	; (10008868 <main+0x1074>)
100084de:	785b      	ldrb	r3, [r3, #1]
100084e0:	b29b      	uxth	r3, r3
100084e2:	021b      	lsls	r3, r3, #8
100084e4:	b29a      	uxth	r2, r3
100084e6:	4be0      	ldr	r3, [pc, #896]	; (10008868 <main+0x1074>)
100084e8:	789b      	ldrb	r3, [r3, #2]
100084ea:	b29b      	uxth	r3, r3
100084ec:	18d3      	adds	r3, r2, r3
100084ee:	b29a      	uxth	r2, r3
100084f0:	4bde      	ldr	r3, [pc, #888]	; (1000886c <main+0x1078>)
100084f2:	801a      	strh	r2, [r3, #0]
												neu_Ser_NrL  = ReadData[3] * 0x100 + ReadData[4];
100084f4:	4bdc      	ldr	r3, [pc, #880]	; (10008868 <main+0x1074>)
100084f6:	78db      	ldrb	r3, [r3, #3]
100084f8:	b29b      	uxth	r3, r3
100084fa:	021b      	lsls	r3, r3, #8
100084fc:	b29a      	uxth	r2, r3
100084fe:	4bda      	ldr	r3, [pc, #872]	; (10008868 <main+0x1074>)
10008500:	791b      	ldrb	r3, [r3, #4]
10008502:	b29b      	uxth	r3, r3
10008504:	18d3      	adds	r3, r2, r3
10008506:	b29a      	uxth	r2, r3
10008508:	4bd9      	ldr	r3, [pc, #868]	; (10008870 <main+0x107c>)
1000850a:	801a      	strh	r2, [r3, #0]
												new_data_neuSerNrBack();
1000850c:	f7f9 fa30 	bl	10001970 <new_data_neuSerNrBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008510:	4bd3      	ldr	r3, [pc, #844]	; (10008860 <main+0x106c>)
10008512:	781b      	ldrb	r3, [r3, #0]
10008514:	1c1c      	adds	r4, r3, #0
10008516:	4ad3      	ldr	r2, [pc, #844]	; (10008864 <main+0x1070>)
10008518:	4bcf      	ldr	r3, [pc, #828]	; (10008858 <main+0x1064>)
1000851a:	1c10      	adds	r0, r2, #0
1000851c:	1c19      	adds	r1, r3, #0
1000851e:	1c22      	adds	r2, r4, #0
10008520:	f7fb fc80 	bl	10003e24 <UART_Transmit>
											break;
10008524:	f001 f82c 	bl	10009580 <main+0x1d8c>
				case command_SerNrResi :		tester = readSerNrEEprom();
10008528:	f7f9 fbba 	bl	10001ca0 <readSerNrEEprom>
1000852c:	1c03      	adds	r3, r0, #0
1000852e:	1c1a      	adds	r2, r3, #0
10008530:	4bd0      	ldr	r3, [pc, #832]	; (10008874 <main+0x1080>)
10008532:	601a      	str	r2, [r3, #0]
												if (tester == 0x03)
10008534:	4bcf      	ldr	r3, [pc, #828]	; (10008874 <main+0x1080>)
10008536:	681b      	ldr	r3, [r3, #0]
10008538:	2b03      	cmp	r3, #3
1000853a:	d125      	bne.n	10008588 <main+0xd94>
												{
												Ser_NrH = ReadBuffer1[0] * 0x100 + ReadBuffer1[1];
1000853c:	4bce      	ldr	r3, [pc, #824]	; (10008878 <main+0x1084>)
1000853e:	781b      	ldrb	r3, [r3, #0]
10008540:	b29b      	uxth	r3, r3
10008542:	021b      	lsls	r3, r3, #8
10008544:	b29a      	uxth	r2, r3
10008546:	4bcc      	ldr	r3, [pc, #816]	; (10008878 <main+0x1084>)
10008548:	785b      	ldrb	r3, [r3, #1]
1000854a:	b29b      	uxth	r3, r3
1000854c:	18d3      	adds	r3, r2, r3
1000854e:	b29a      	uxth	r2, r3
10008550:	4bca      	ldr	r3, [pc, #808]	; (1000887c <main+0x1088>)
10008552:	801a      	strh	r2, [r3, #0]
												Ser_NrL = ReadBuffer1[2] * 0x100 + ReadBuffer1[3];
10008554:	4bc8      	ldr	r3, [pc, #800]	; (10008878 <main+0x1084>)
10008556:	789b      	ldrb	r3, [r3, #2]
10008558:	b29b      	uxth	r3, r3
1000855a:	021b      	lsls	r3, r3, #8
1000855c:	b29a      	uxth	r2, r3
1000855e:	4bc6      	ldr	r3, [pc, #792]	; (10008878 <main+0x1084>)
10008560:	78db      	ldrb	r3, [r3, #3]
10008562:	b29b      	uxth	r3, r3
10008564:	18d3      	adds	r3, r2, r3
10008566:	b29a      	uxth	r2, r3
10008568:	4bbc      	ldr	r3, [pc, #752]	; (1000885c <main+0x1068>)
1000856a:	801a      	strh	r2, [r3, #0]
												new_data_SerNrBack();
1000856c:	f7f9 faa6 	bl	10001abc <new_data_SerNrBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008570:	4bbb      	ldr	r3, [pc, #748]	; (10008860 <main+0x106c>)
10008572:	781b      	ldrb	r3, [r3, #0]
10008574:	1c1c      	adds	r4, r3, #0
10008576:	4abb      	ldr	r2, [pc, #748]	; (10008864 <main+0x1070>)
10008578:	4bb7      	ldr	r3, [pc, #732]	; (10008858 <main+0x1064>)
1000857a:	1c10      	adds	r0, r2, #0
1000857c:	1c19      	adds	r1, r3, #0
1000857e:	1c22      	adds	r2, r4, #0
10008580:	f7fb fc50 	bl	10003e24 <UART_Transmit>
												new_data[8]=tester;
												new_data[9]=0;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}

											break;
10008584:	f000 fffc 	bl	10009580 <main+0x1d8c>
												new_data_SerNrBack();
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
												else
												{
											    new_data_HalloBack();
10008588:	f7f9 f97c 	bl	10001884 <new_data_HalloBack>
												new_data[6]='e';
1000858c:	4bb2      	ldr	r3, [pc, #712]	; (10008858 <main+0x1064>)
1000858e:	2265      	movs	r2, #101	; 0x65
10008590:	719a      	strb	r2, [r3, #6]
												new_data[7]=10;
10008592:	4bb1      	ldr	r3, [pc, #708]	; (10008858 <main+0x1064>)
10008594:	220a      	movs	r2, #10
10008596:	71da      	strb	r2, [r3, #7]
												new_data[8]=tester;
10008598:	4bb6      	ldr	r3, [pc, #728]	; (10008874 <main+0x1080>)
1000859a:	681b      	ldr	r3, [r3, #0]
1000859c:	b2da      	uxtb	r2, r3
1000859e:	4bae      	ldr	r3, [pc, #696]	; (10008858 <main+0x1064>)
100085a0:	721a      	strb	r2, [r3, #8]
												new_data[9]=0;
100085a2:	4bad      	ldr	r3, [pc, #692]	; (10008858 <main+0x1064>)
100085a4:	2200      	movs	r2, #0
100085a6:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100085a8:	4bad      	ldr	r3, [pc, #692]	; (10008860 <main+0x106c>)
100085aa:	781b      	ldrb	r3, [r3, #0]
100085ac:	1c1c      	adds	r4, r3, #0
100085ae:	4aad      	ldr	r2, [pc, #692]	; (10008864 <main+0x1070>)
100085b0:	4ba9      	ldr	r3, [pc, #676]	; (10008858 <main+0x1064>)
100085b2:	1c10      	adds	r0, r2, #0
100085b4:	1c19      	adds	r1, r3, #0
100085b6:	1c22      	adds	r2, r4, #0
100085b8:	f7fb fc34 	bl	10003e24 <UART_Transmit>
												}

											break;
100085bc:	f000 ffe0 	bl	10009580 <main+0x1d8c>
				case command_NodeIdResi :		tester = readNodeIdEEprom();
100085c0:	f7f9 fb96 	bl	10001cf0 <readNodeIdEEprom>
100085c4:	1c03      	adds	r3, r0, #0
100085c6:	1c1a      	adds	r2, r3, #0
100085c8:	4baa      	ldr	r3, [pc, #680]	; (10008874 <main+0x1080>)
100085ca:	601a      	str	r2, [r3, #0]
												if (tester == 0x03)
100085cc:	4ba9      	ldr	r3, [pc, #676]	; (10008874 <main+0x1080>)
100085ce:	681b      	ldr	r3, [r3, #0]
100085d0:	2b03      	cmp	r3, #3
100085d2:	d123      	bne.n	1000861c <main+0xe28>
												{
												node_id_alt = ReadBuffer2[0];
100085d4:	4baa      	ldr	r3, [pc, #680]	; (10008880 <main+0x108c>)
100085d6:	781a      	ldrb	r2, [r3, #0]
100085d8:	4baa      	ldr	r3, [pc, #680]	; (10008884 <main+0x1090>)
100085da:	701a      	strb	r2, [r3, #0]
												node_id  = ReadBuffer2[1];
100085dc:	4ba8      	ldr	r3, [pc, #672]	; (10008880 <main+0x108c>)
100085de:	785a      	ldrb	r2, [r3, #1]
100085e0:	4b9a      	ldr	r3, [pc, #616]	; (1000884c <main+0x1058>)
100085e2:	701a      	strb	r2, [r3, #0]
												node_id_16bit = ReadBuffer2[2] * 0xFF + ReadBuffer2[3];
100085e4:	4ba6      	ldr	r3, [pc, #664]	; (10008880 <main+0x108c>)
100085e6:	789b      	ldrb	r3, [r3, #2]
100085e8:	b29b      	uxth	r3, r3
100085ea:	1c1a      	adds	r2, r3, #0
100085ec:	0212      	lsls	r2, r2, #8
100085ee:	1ad3      	subs	r3, r2, r3
100085f0:	b29a      	uxth	r2, r3
100085f2:	4ba3      	ldr	r3, [pc, #652]	; (10008880 <main+0x108c>)
100085f4:	78db      	ldrb	r3, [r3, #3]
100085f6:	b29b      	uxth	r3, r3
100085f8:	18d3      	adds	r3, r2, r3
100085fa:	b29a      	uxth	r2, r3
100085fc:	4ba2      	ldr	r3, [pc, #648]	; (10008888 <main+0x1094>)
100085fe:	801a      	strh	r2, [r3, #0]
												new_data_NodeIdBack();
10008600:	f7f9 fa12 	bl	10001a28 <new_data_NodeIdBack>
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008604:	4b96      	ldr	r3, [pc, #600]	; (10008860 <main+0x106c>)
10008606:	781b      	ldrb	r3, [r3, #0]
10008608:	1c1c      	adds	r4, r3, #0
1000860a:	4a96      	ldr	r2, [pc, #600]	; (10008864 <main+0x1070>)
1000860c:	4b92      	ldr	r3, [pc, #584]	; (10008858 <main+0x1064>)
1000860e:	1c10      	adds	r0, r2, #0
10008610:	1c19      	adds	r1, r3, #0
10008612:	1c22      	adds	r2, r4, #0
10008614:	f7fb fc06 	bl	10003e24 <UART_Transmit>
												new_data[7]=11;
												new_data[8]=tester;
												new_data[9]=0;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
											break;
10008618:	f000 ffb2 	bl	10009580 <main+0x1d8c>
												new_data_NodeIdBack();
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
												else
												{
											    new_data_HalloBack();
1000861c:	f7f9 f932 	bl	10001884 <new_data_HalloBack>
												new_data[6]='e';
10008620:	4b8d      	ldr	r3, [pc, #564]	; (10008858 <main+0x1064>)
10008622:	2265      	movs	r2, #101	; 0x65
10008624:	719a      	strb	r2, [r3, #6]
												new_data[7]=11;
10008626:	4b8c      	ldr	r3, [pc, #560]	; (10008858 <main+0x1064>)
10008628:	220b      	movs	r2, #11
1000862a:	71da      	strb	r2, [r3, #7]
												new_data[8]=tester;
1000862c:	4b91      	ldr	r3, [pc, #580]	; (10008874 <main+0x1080>)
1000862e:	681b      	ldr	r3, [r3, #0]
10008630:	b2da      	uxtb	r2, r3
10008632:	4b89      	ldr	r3, [pc, #548]	; (10008858 <main+0x1064>)
10008634:	721a      	strb	r2, [r3, #8]
												new_data[9]=0;
10008636:	4b88      	ldr	r3, [pc, #544]	; (10008858 <main+0x1064>)
10008638:	2200      	movs	r2, #0
1000863a:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
1000863c:	4b88      	ldr	r3, [pc, #544]	; (10008860 <main+0x106c>)
1000863e:	781b      	ldrb	r3, [r3, #0]
10008640:	1c1c      	adds	r4, r3, #0
10008642:	4a88      	ldr	r2, [pc, #544]	; (10008864 <main+0x1070>)
10008644:	4b84      	ldr	r3, [pc, #528]	; (10008858 <main+0x1064>)
10008646:	1c10      	adds	r0, r2, #0
10008648:	1c19      	adds	r1, r3, #0
1000864a:	1c22      	adds	r2, r4, #0
1000864c:	f7fb fbea 	bl	10003e24 <UART_Transmit>
												}
											break;
10008650:	f000 ff96 	bl	10009580 <main+0x1d8c>

				case command_akt_lightEEResi :		tester = read_akt_light_EEprom();
10008654:	f7f9 fb74 	bl	10001d40 <read_akt_light_EEprom>
10008658:	1c03      	adds	r3, r0, #0
1000865a:	1c1a      	adds	r2, r3, #0
1000865c:	4b85      	ldr	r3, [pc, #532]	; (10008874 <main+0x1080>)
1000865e:	601a      	str	r2, [r3, #0]
												if (tester == 0x03)
10008660:	4b84      	ldr	r3, [pc, #528]	; (10008874 <main+0x1080>)
10008662:	681b      	ldr	r3, [r3, #0]
10008664:	2b03      	cmp	r3, #3
10008666:	d110      	bne.n	1000868a <main+0xe96>
												{
													new_data_readbuff2Back();
10008668:	f7f9 fa68 	bl	10001b3c <new_data_readbuff2Back>
  		  											 new_data[6]=4;  // 4= akt_light buffertyp
1000866c:	4b7a      	ldr	r3, [pc, #488]	; (10008858 <main+0x1064>)
1000866e:	2204      	movs	r2, #4
10008670:	719a      	strb	r2, [r3, #6]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008672:	4b7b      	ldr	r3, [pc, #492]	; (10008860 <main+0x106c>)
10008674:	781b      	ldrb	r3, [r3, #0]
10008676:	1c1c      	adds	r4, r3, #0
10008678:	4a7a      	ldr	r2, [pc, #488]	; (10008864 <main+0x1070>)
1000867a:	4b77      	ldr	r3, [pc, #476]	; (10008858 <main+0x1064>)
1000867c:	1c10      	adds	r0, r2, #0
1000867e:	1c19      	adds	r1, r3, #0
10008680:	1c22      	adds	r2, r4, #0
10008682:	f7fb fbcf 	bl	10003e24 <UART_Transmit>
												new_data[7]=45;
												new_data[8]=tester;
												new_data[9]=0;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
											break;
10008686:	f000 ff7b 	bl	10009580 <main+0x1d8c>
  		  											 new_data[6]=4;  // 4= akt_light buffertyp
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
												else
												{
											    new_data_HalloBack();
1000868a:	f7f9 f8fb 	bl	10001884 <new_data_HalloBack>
												new_data[6]='e';
1000868e:	4b72      	ldr	r3, [pc, #456]	; (10008858 <main+0x1064>)
10008690:	2265      	movs	r2, #101	; 0x65
10008692:	719a      	strb	r2, [r3, #6]
												new_data[7]=45;
10008694:	4b70      	ldr	r3, [pc, #448]	; (10008858 <main+0x1064>)
10008696:	222d      	movs	r2, #45	; 0x2d
10008698:	71da      	strb	r2, [r3, #7]
												new_data[8]=tester;
1000869a:	4b76      	ldr	r3, [pc, #472]	; (10008874 <main+0x1080>)
1000869c:	681b      	ldr	r3, [r3, #0]
1000869e:	b2da      	uxtb	r2, r3
100086a0:	4b6d      	ldr	r3, [pc, #436]	; (10008858 <main+0x1064>)
100086a2:	721a      	strb	r2, [r3, #8]
												new_data[9]=0;
100086a4:	4b6c      	ldr	r3, [pc, #432]	; (10008858 <main+0x1064>)
100086a6:	2200      	movs	r2, #0
100086a8:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100086aa:	4b6d      	ldr	r3, [pc, #436]	; (10008860 <main+0x106c>)
100086ac:	781b      	ldrb	r3, [r3, #0]
100086ae:	1c1c      	adds	r4, r3, #0
100086b0:	4a6c      	ldr	r2, [pc, #432]	; (10008864 <main+0x1070>)
100086b2:	4b69      	ldr	r3, [pc, #420]	; (10008858 <main+0x1064>)
100086b4:	1c10      	adds	r0, r2, #0
100086b6:	1c19      	adds	r1, r3, #0
100086b8:	1c22      	adds	r2, r4, #0
100086ba:	f7fb fbb3 	bl	10003e24 <UART_Transmit>
												}
											break;
100086be:	f000 ff5f 	bl	10009580 <main+0x1d8c>
				case command_offlightEEResi :		tester = read_off_light_EEprom();
100086c2:	f7f9 fb65 	bl	10001d90 <read_off_light_EEprom>
100086c6:	1c03      	adds	r3, r0, #0
100086c8:	1c1a      	adds	r2, r3, #0
100086ca:	4b6a      	ldr	r3, [pc, #424]	; (10008874 <main+0x1080>)
100086cc:	601a      	str	r2, [r3, #0]
												if (tester == 0x03)
100086ce:	4b69      	ldr	r3, [pc, #420]	; (10008874 <main+0x1080>)
100086d0:	681b      	ldr	r3, [r3, #0]
100086d2:	2b03      	cmp	r3, #3
100086d4:	d110      	bne.n	100086f8 <main+0xf04>
												{
													new_data_readbuff2Back();
100086d6:	f7f9 fa31 	bl	10001b3c <new_data_readbuff2Back>
  		  											 new_data[6]=5;  // 5= offlight buffertyp
100086da:	4b5f      	ldr	r3, [pc, #380]	; (10008858 <main+0x1064>)
100086dc:	2205      	movs	r2, #5
100086de:	719a      	strb	r2, [r3, #6]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100086e0:	4b5f      	ldr	r3, [pc, #380]	; (10008860 <main+0x106c>)
100086e2:	781b      	ldrb	r3, [r3, #0]
100086e4:	1c1c      	adds	r4, r3, #0
100086e6:	4a5f      	ldr	r2, [pc, #380]	; (10008864 <main+0x1070>)
100086e8:	4b5b      	ldr	r3, [pc, #364]	; (10008858 <main+0x1064>)
100086ea:	1c10      	adds	r0, r2, #0
100086ec:	1c19      	adds	r1, r3, #0
100086ee:	1c22      	adds	r2, r4, #0
100086f0:	f7fb fb98 	bl	10003e24 <UART_Transmit>
												new_data[7]=21;
												new_data[8]=tester;
												new_data[9]=0;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
											break;
100086f4:	f000 ff44 	bl	10009580 <main+0x1d8c>
  		  											 new_data[6]=5;  // 5= offlight buffertyp
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
												else
												{
											    new_data_HalloBack();
100086f8:	f7f9 f8c4 	bl	10001884 <new_data_HalloBack>
												new_data[6]='e';
100086fc:	4b56      	ldr	r3, [pc, #344]	; (10008858 <main+0x1064>)
100086fe:	2265      	movs	r2, #101	; 0x65
10008700:	719a      	strb	r2, [r3, #6]
												new_data[7]=21;
10008702:	4b55      	ldr	r3, [pc, #340]	; (10008858 <main+0x1064>)
10008704:	2215      	movs	r2, #21
10008706:	71da      	strb	r2, [r3, #7]
												new_data[8]=tester;
10008708:	4b5a      	ldr	r3, [pc, #360]	; (10008874 <main+0x1080>)
1000870a:	681b      	ldr	r3, [r3, #0]
1000870c:	b2da      	uxtb	r2, r3
1000870e:	4b52      	ldr	r3, [pc, #328]	; (10008858 <main+0x1064>)
10008710:	721a      	strb	r2, [r3, #8]
												new_data[9]=0;
10008712:	4b51      	ldr	r3, [pc, #324]	; (10008858 <main+0x1064>)
10008714:	2200      	movs	r2, #0
10008716:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008718:	4b51      	ldr	r3, [pc, #324]	; (10008860 <main+0x106c>)
1000871a:	781b      	ldrb	r3, [r3, #0]
1000871c:	1c1c      	adds	r4, r3, #0
1000871e:	4a51      	ldr	r2, [pc, #324]	; (10008864 <main+0x1070>)
10008720:	4b4d      	ldr	r3, [pc, #308]	; (10008858 <main+0x1064>)
10008722:	1c10      	adds	r0, r2, #0
10008724:	1c19      	adds	r1, r3, #0
10008726:	1c22      	adds	r2, r4, #0
10008728:	f7fb fb7c 	bl	10003e24 <UART_Transmit>
												}
											break;
1000872c:	f000 ff28 	bl	10009580 <main+0x1d8c>

				case command_neuNodeIdWriteResi:
											if (command_nr == 0x47 && Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
10008730:	4b48      	ldr	r3, [pc, #288]	; (10008854 <main+0x1060>)
10008732:	881b      	ldrh	r3, [r3, #0]
10008734:	2b47      	cmp	r3, #71	; 0x47
10008736:	d000      	beq.n	1000873a <main+0xf46>
10008738:	e0aa      	b.n	10008890 <main+0x109c>
1000873a:	4b50      	ldr	r3, [pc, #320]	; (1000887c <main+0x1088>)
1000873c:	881b      	ldrh	r3, [r3, #0]
1000873e:	1c19      	adds	r1, r3, #0
10008740:	4b49      	ldr	r3, [pc, #292]	; (10008868 <main+0x1074>)
10008742:	785b      	ldrb	r3, [r3, #1]
10008744:	021b      	lsls	r3, r3, #8
10008746:	4a48      	ldr	r2, [pc, #288]	; (10008868 <main+0x1074>)
10008748:	7892      	ldrb	r2, [r2, #2]
1000874a:	189b      	adds	r3, r3, r2
1000874c:	4299      	cmp	r1, r3
1000874e:	d000      	beq.n	10008752 <main+0xf5e>
10008750:	e09e      	b.n	10008890 <main+0x109c>
10008752:	4b42      	ldr	r3, [pc, #264]	; (1000885c <main+0x1068>)
10008754:	881b      	ldrh	r3, [r3, #0]
10008756:	1c19      	adds	r1, r3, #0
10008758:	4b43      	ldr	r3, [pc, #268]	; (10008868 <main+0x1074>)
1000875a:	78db      	ldrb	r3, [r3, #3]
1000875c:	021b      	lsls	r3, r3, #8
1000875e:	4a42      	ldr	r2, [pc, #264]	; (10008868 <main+0x1074>)
10008760:	7912      	ldrb	r2, [r2, #4]
10008762:	189b      	adds	r3, r3, r2
10008764:	4299      	cmp	r1, r3
10008766:	d000      	beq.n	1000876a <main+0xf76>
10008768:	e092      	b.n	10008890 <main+0x109c>
												{
												tester = readNodeIdEEprom();
1000876a:	f7f9 fac1 	bl	10001cf0 <readNodeIdEEprom>
1000876e:	1c03      	adds	r3, r0, #0
10008770:	1c1a      	adds	r2, r3, #0
10008772:	4b40      	ldr	r3, [pc, #256]	; (10008874 <main+0x1080>)
10008774:	601a      	str	r2, [r3, #0]
												  if (tester == 0x03)
10008776:	4b3f      	ldr	r3, [pc, #252]	; (10008874 <main+0x1080>)
10008778:	681b      	ldr	r3, [r3, #0]
1000877a:	2b03      	cmp	r3, #3
1000877c:	d14b      	bne.n	10008816 <main+0x1022>
											      {
												  ReadBuffer2[0]= 	node_id; //highbyte
1000877e:	4b33      	ldr	r3, [pc, #204]	; (1000884c <main+0x1058>)
10008780:	781a      	ldrb	r2, [r3, #0]
10008782:	4b3f      	ldr	r3, [pc, #252]	; (10008880 <main+0x108c>)
10008784:	701a      	strb	r2, [r3, #0]
												  ReadBuffer2[1]= 	node_id_neu; //lowbyte
10008786:	4b32      	ldr	r3, [pc, #200]	; (10008850 <main+0x105c>)
10008788:	781a      	ldrb	r2, [r3, #0]
1000878a:	4b3d      	ldr	r3, [pc, #244]	; (10008880 <main+0x108c>)
1000878c:	705a      	strb	r2, [r3, #1]
												  tester2 = writeNodeid_B2_EEprom();
1000878e:	f7f9 fb5d 	bl	10001e4c <writeNodeid_B2_EEprom>
10008792:	1c03      	adds	r3, r0, #0
10008794:	b29a      	uxth	r2, r3
10008796:	4b3d      	ldr	r3, [pc, #244]	; (1000888c <main+0x1098>)
10008798:	801a      	strh	r2, [r3, #0]
												    if( tester2  == 0x03 )
1000879a:	4b3c      	ldr	r3, [pc, #240]	; (1000888c <main+0x1098>)
1000879c:	881b      	ldrh	r3, [r3, #0]
1000879e:	2b03      	cmp	r3, #3
100087a0:	d11c      	bne.n	100087dc <main+0xfe8>
											        {
														new_data_HalloBack();
100087a2:	f7f9 f86f 	bl	10001884 <new_data_HalloBack>
														 new_data[6]='i';
100087a6:	4b2c      	ldr	r3, [pc, #176]	; (10008858 <main+0x1064>)
100087a8:	2269      	movs	r2, #105	; 0x69
100087aa:	719a      	strb	r2, [r3, #6]
														 new_data[7]='n';
100087ac:	4b2a      	ldr	r3, [pc, #168]	; (10008858 <main+0x1064>)
100087ae:	226e      	movs	r2, #110	; 0x6e
100087b0:	71da      	strb	r2, [r3, #7]
														 new_data[8]=tester;
100087b2:	4b30      	ldr	r3, [pc, #192]	; (10008874 <main+0x1080>)
100087b4:	681b      	ldr	r3, [r3, #0]
100087b6:	b2da      	uxtb	r2, r3
100087b8:	4b27      	ldr	r3, [pc, #156]	; (10008858 <main+0x1064>)
100087ba:	721a      	strb	r2, [r3, #8]
														 new_data[9]=tester2;
100087bc:	4b33      	ldr	r3, [pc, #204]	; (1000888c <main+0x1098>)
100087be:	881b      	ldrh	r3, [r3, #0]
100087c0:	b2da      	uxtb	r2, r3
100087c2:	4b25      	ldr	r3, [pc, #148]	; (10008858 <main+0x1064>)
100087c4:	725a      	strb	r2, [r3, #9]
														UART_Transmit(&UART_1, new_data,transmit_buf_size);
100087c6:	4b26      	ldr	r3, [pc, #152]	; (10008860 <main+0x106c>)
100087c8:	781b      	ldrb	r3, [r3, #0]
100087ca:	1c1c      	adds	r4, r3, #0
100087cc:	4a25      	ldr	r2, [pc, #148]	; (10008864 <main+0x1070>)
100087ce:	4b22      	ldr	r3, [pc, #136]	; (10008858 <main+0x1064>)
100087d0:	1c10      	adds	r0, r2, #0
100087d2:	1c19      	adds	r1, r3, #0
100087d4:	1c22      	adds	r2, r4, #0
100087d6:	f7fb fb25 	bl	10003e24 <UART_Transmit>

				case command_neuNodeIdWriteResi:
											if (command_nr == 0x47 && Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
												{
												tester = readNodeIdEEprom();
												  if (tester == 0x03)
100087da:	e075      	b.n	100088c8 <main+0x10d4>
														 new_data[9]=tester2;
														UART_Transmit(&UART_1, new_data,transmit_buf_size);
											        }
												    else
												    {
													new_data_HalloBack();
100087dc:	f7f9 f852 	bl	10001884 <new_data_HalloBack>
														 new_data[6]='e';
100087e0:	4b1d      	ldr	r3, [pc, #116]	; (10008858 <main+0x1064>)
100087e2:	2265      	movs	r2, #101	; 0x65
100087e4:	719a      	strb	r2, [r3, #6]
														 new_data[7]=7;
100087e6:	4b1c      	ldr	r3, [pc, #112]	; (10008858 <main+0x1064>)
100087e8:	2207      	movs	r2, #7
100087ea:	71da      	strb	r2, [r3, #7]
														 new_data[8]=tester;
100087ec:	4b21      	ldr	r3, [pc, #132]	; (10008874 <main+0x1080>)
100087ee:	681b      	ldr	r3, [r3, #0]
100087f0:	b2da      	uxtb	r2, r3
100087f2:	4b19      	ldr	r3, [pc, #100]	; (10008858 <main+0x1064>)
100087f4:	721a      	strb	r2, [r3, #8]
														 new_data[9]=tester2;
100087f6:	4b25      	ldr	r3, [pc, #148]	; (1000888c <main+0x1098>)
100087f8:	881b      	ldrh	r3, [r3, #0]
100087fa:	b2da      	uxtb	r2, r3
100087fc:	4b16      	ldr	r3, [pc, #88]	; (10008858 <main+0x1064>)
100087fe:	725a      	strb	r2, [r3, #9]
														UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008800:	4b17      	ldr	r3, [pc, #92]	; (10008860 <main+0x106c>)
10008802:	781b      	ldrb	r3, [r3, #0]
10008804:	1c1c      	adds	r4, r3, #0
10008806:	4a17      	ldr	r2, [pc, #92]	; (10008864 <main+0x1070>)
10008808:	4b13      	ldr	r3, [pc, #76]	; (10008858 <main+0x1064>)
1000880a:	1c10      	adds	r0, r2, #0
1000880c:	1c19      	adds	r1, r3, #0
1000880e:	1c22      	adds	r2, r4, #0
10008810:	f7fb fb08 	bl	10003e24 <UART_Transmit>

				case command_neuNodeIdWriteResi:
											if (command_nr == 0x47 && Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
												{
												tester = readNodeIdEEprom();
												  if (tester == 0x03)
10008814:	e058      	b.n	100088c8 <main+0x10d4>
														UART_Transmit(&UART_1, new_data,transmit_buf_size);
												    }
											      }
												    else
												  {
												  new_data_HalloBack();
10008816:	f7f9 f835 	bl	10001884 <new_data_HalloBack>
												  new_data[6]='e';
1000881a:	4b0f      	ldr	r3, [pc, #60]	; (10008858 <main+0x1064>)
1000881c:	2265      	movs	r2, #101	; 0x65
1000881e:	719a      	strb	r2, [r3, #6]
												  new_data[7]=8;
10008820:	4b0d      	ldr	r3, [pc, #52]	; (10008858 <main+0x1064>)
10008822:	2208      	movs	r2, #8
10008824:	71da      	strb	r2, [r3, #7]
												  new_data[8]=tester;
10008826:	4b13      	ldr	r3, [pc, #76]	; (10008874 <main+0x1080>)
10008828:	681b      	ldr	r3, [r3, #0]
1000882a:	b2da      	uxtb	r2, r3
1000882c:	4b0a      	ldr	r3, [pc, #40]	; (10008858 <main+0x1064>)
1000882e:	721a      	strb	r2, [r3, #8]
												  new_data[9]=0;
10008830:	4b09      	ldr	r3, [pc, #36]	; (10008858 <main+0x1064>)
10008832:	2200      	movs	r2, #0
10008834:	725a      	strb	r2, [r3, #9]
												  UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008836:	4b0a      	ldr	r3, [pc, #40]	; (10008860 <main+0x106c>)
10008838:	781b      	ldrb	r3, [r3, #0]
1000883a:	1c1c      	adds	r4, r3, #0
1000883c:	4a09      	ldr	r2, [pc, #36]	; (10008864 <main+0x1070>)
1000883e:	4b06      	ldr	r3, [pc, #24]	; (10008858 <main+0x1064>)
10008840:	1c10      	adds	r0, r2, #0
10008842:	1c19      	adds	r1, r3, #0
10008844:	1c22      	adds	r2, r4, #0
10008846:	f7fb faed 	bl	10003e24 <UART_Transmit>

				case command_neuNodeIdWriteResi:
											if (command_nr == 0x47 && Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
												{
												tester = readNodeIdEEprom();
												  if (tester == 0x03)
1000884a:	e03d      	b.n	100088c8 <main+0x10d4>
1000884c:	20000836 	.word	0x20000836
10008850:	200007ca 	.word	0x200007ca
10008854:	20000c2e 	.word	0x20000c2e
10008858:	20000804 	.word	0x20000804
1000885c:	200008a8 	.word	0x200008a8
10008860:	20000550 	.word	0x20000550
10008864:	20000560 	.word	0x20000560
10008868:	20000824 	.word	0x20000824
1000886c:	20000816 	.word	0x20000816
10008870:	20000904 	.word	0x20000904
10008874:	20000c28 	.word	0x20000c28
10008878:	20000890 	.word	0x20000890
1000887c:	20000830 	.word	0x20000830
10008880:	20000848 	.word	0x20000848
10008884:	20000844 	.word	0x20000844
10008888:	20000860 	.word	0x20000860
1000888c:	20000c34 	.word	0x20000c34
												  UART_Transmit(&UART_1, new_data,transmit_buf_size);
												  }
												}
										        else
										        {
										         new_data_HalloBack();
10008890:	f7f8 fff8 	bl	10001884 <new_data_HalloBack>
										         new_data[6]='e';
10008894:	4bc5      	ldr	r3, [pc, #788]	; (10008bac <main+0x13b8>)
10008896:	2265      	movs	r2, #101	; 0x65
10008898:	719a      	strb	r2, [r3, #6]
										         new_data[7]=9;
1000889a:	4bc4      	ldr	r3, [pc, #784]	; (10008bac <main+0x13b8>)
1000889c:	2209      	movs	r2, #9
1000889e:	71da      	strb	r2, [r3, #7]
										         new_data[8]=command_nr;
100088a0:	4bc3      	ldr	r3, [pc, #780]	; (10008bb0 <main+0x13bc>)
100088a2:	881b      	ldrh	r3, [r3, #0]
100088a4:	b2da      	uxtb	r2, r3
100088a6:	4bc1      	ldr	r3, [pc, #772]	; (10008bac <main+0x13b8>)
100088a8:	721a      	strb	r2, [r3, #8]
										         new_data[9]=0;
100088aa:	4bc0      	ldr	r3, [pc, #768]	; (10008bac <main+0x13b8>)
100088ac:	2200      	movs	r2, #0
100088ae:	725a      	strb	r2, [r3, #9]
										         UART_Transmit(&UART_1, new_data,transmit_buf_size);
100088b0:	4bc0      	ldr	r3, [pc, #768]	; (10008bb4 <main+0x13c0>)
100088b2:	781b      	ldrb	r3, [r3, #0]
100088b4:	1c1c      	adds	r4, r3, #0
100088b6:	4ac0      	ldr	r2, [pc, #768]	; (10008bb8 <main+0x13c4>)
100088b8:	4bbc      	ldr	r3, [pc, #752]	; (10008bac <main+0x13b8>)
100088ba:	1c10      	adds	r0, r2, #0
100088bc:	1c19      	adds	r1, r3, #0
100088be:	1c22      	adds	r2, r4, #0
100088c0:	f7fb fab0 	bl	10003e24 <UART_Transmit>
										         }

											break;
100088c4:	f000 fe5c 	bl	10009580 <main+0x1d8c>
100088c8:	f000 fe5a 	bl	10009580 <main+0x1d8c>

				case command_neuSerNrWriteResi:
											if (command_nr == 0x66 && Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
100088cc:	4bb8      	ldr	r3, [pc, #736]	; (10008bb0 <main+0x13bc>)
100088ce:	881b      	ldrh	r3, [r3, #0]
100088d0:	2b66      	cmp	r3, #102	; 0x66
100088d2:	d000      	beq.n	100088d6 <main+0x10e2>
100088d4:	e07a      	b.n	100089cc <main+0x11d8>
100088d6:	4bb9      	ldr	r3, [pc, #740]	; (10008bbc <main+0x13c8>)
100088d8:	881b      	ldrh	r3, [r3, #0]
100088da:	1c19      	adds	r1, r3, #0
100088dc:	4bb8      	ldr	r3, [pc, #736]	; (10008bc0 <main+0x13cc>)
100088de:	785b      	ldrb	r3, [r3, #1]
100088e0:	021b      	lsls	r3, r3, #8
100088e2:	4ab7      	ldr	r2, [pc, #732]	; (10008bc0 <main+0x13cc>)
100088e4:	7892      	ldrb	r2, [r2, #2]
100088e6:	189b      	adds	r3, r3, r2
100088e8:	4299      	cmp	r1, r3
100088ea:	d16f      	bne.n	100089cc <main+0x11d8>
100088ec:	4bb5      	ldr	r3, [pc, #724]	; (10008bc4 <main+0x13d0>)
100088ee:	881b      	ldrh	r3, [r3, #0]
100088f0:	1c19      	adds	r1, r3, #0
100088f2:	4bb3      	ldr	r3, [pc, #716]	; (10008bc0 <main+0x13cc>)
100088f4:	78db      	ldrb	r3, [r3, #3]
100088f6:	021b      	lsls	r3, r3, #8
100088f8:	4ab1      	ldr	r2, [pc, #708]	; (10008bc0 <main+0x13cc>)
100088fa:	7912      	ldrb	r2, [r2, #4]
100088fc:	189b      	adds	r3, r3, r2
100088fe:	4299      	cmp	r1, r3
10008900:	d164      	bne.n	100089cc <main+0x11d8>
											{
												tester2=0xff;
10008902:	4bb1      	ldr	r3, [pc, #708]	; (10008bc8 <main+0x13d4>)
10008904:	22ff      	movs	r2, #255	; 0xff
10008906:	801a      	strh	r2, [r3, #0]
												tester = readSerNrEEprom();
10008908:	f7f9 f9ca 	bl	10001ca0 <readSerNrEEprom>
1000890c:	1c03      	adds	r3, r0, #0
1000890e:	1c1a      	adds	r2, r3, #0
10008910:	4bae      	ldr	r3, [pc, #696]	; (10008bcc <main+0x13d8>)
10008912:	601a      	str	r2, [r3, #0]
											    if( tester  == 0x03 )
10008914:	4bad      	ldr	r3, [pc, #692]	; (10008bcc <main+0x13d8>)
10008916:	681b      	ldr	r3, [r3, #0]
10008918:	2b03      	cmp	r3, #3
1000891a:	d13a      	bne.n	10008992 <main+0x119e>

											    {
												 ReadBuffer1[0]= 	Ser_NrH  / 0x100; //highbyte
1000891c:	4ba7      	ldr	r3, [pc, #668]	; (10008bbc <main+0x13c8>)
1000891e:	881b      	ldrh	r3, [r3, #0]
10008920:	0a1b      	lsrs	r3, r3, #8
10008922:	b29b      	uxth	r3, r3
10008924:	b2da      	uxtb	r2, r3
10008926:	4baa      	ldr	r3, [pc, #680]	; (10008bd0 <main+0x13dc>)
10008928:	701a      	strb	r2, [r3, #0]
												 ReadBuffer1[1]= 	Ser_NrH  & 0xff; //lowbyte
1000892a:	4ba4      	ldr	r3, [pc, #656]	; (10008bbc <main+0x13c8>)
1000892c:	881b      	ldrh	r3, [r3, #0]
1000892e:	b2da      	uxtb	r2, r3
10008930:	4ba7      	ldr	r3, [pc, #668]	; (10008bd0 <main+0x13dc>)
10008932:	705a      	strb	r2, [r3, #1]
												 ReadBuffer1[2]= 	Ser_NrL  / 0x100; //highbyte
10008934:	4ba3      	ldr	r3, [pc, #652]	; (10008bc4 <main+0x13d0>)
10008936:	881b      	ldrh	r3, [r3, #0]
10008938:	0a1b      	lsrs	r3, r3, #8
1000893a:	b29b      	uxth	r3, r3
1000893c:	b2da      	uxtb	r2, r3
1000893e:	4ba4      	ldr	r3, [pc, #656]	; (10008bd0 <main+0x13dc>)
10008940:	709a      	strb	r2, [r3, #2]
												 ReadBuffer1[3]= 	Ser_NrL  & 0xff; //lowbyte
10008942:	4ba0      	ldr	r3, [pc, #640]	; (10008bc4 <main+0x13d0>)
10008944:	881b      	ldrh	r3, [r3, #0]
10008946:	b2da      	uxtb	r2, r3
10008948:	4ba1      	ldr	r3, [pc, #644]	; (10008bd0 <main+0x13dc>)
1000894a:	70da      	strb	r2, [r3, #3]
												 tester2 = writeSernr_B1_EEprom() ;
1000894c:	f7f9 fa48 	bl	10001de0 <writeSernr_B1_EEprom>
10008950:	1c03      	adds	r3, r0, #0
10008952:	b29a      	uxth	r2, r3
10008954:	4b9c      	ldr	r3, [pc, #624]	; (10008bc8 <main+0x13d4>)
10008956:	801a      	strh	r2, [r3, #0]
												new_data_HalloBack();
10008958:	f7f8 ff94 	bl	10001884 <new_data_HalloBack>
												new_data[6]='i';
1000895c:	4b93      	ldr	r3, [pc, #588]	; (10008bac <main+0x13b8>)
1000895e:	2269      	movs	r2, #105	; 0x69
10008960:	719a      	strb	r2, [r3, #6]
												new_data[7]='n';
10008962:	4b92      	ldr	r3, [pc, #584]	; (10008bac <main+0x13b8>)
10008964:	226e      	movs	r2, #110	; 0x6e
10008966:	71da      	strb	r2, [r3, #7]
												new_data[8]=tester;
10008968:	4b98      	ldr	r3, [pc, #608]	; (10008bcc <main+0x13d8>)
1000896a:	681b      	ldr	r3, [r3, #0]
1000896c:	b2da      	uxtb	r2, r3
1000896e:	4b8f      	ldr	r3, [pc, #572]	; (10008bac <main+0x13b8>)
10008970:	721a      	strb	r2, [r3, #8]
												new_data[9]=tester2;
10008972:	4b95      	ldr	r3, [pc, #596]	; (10008bc8 <main+0x13d4>)
10008974:	881b      	ldrh	r3, [r3, #0]
10008976:	b2da      	uxtb	r2, r3
10008978:	4b8c      	ldr	r3, [pc, #560]	; (10008bac <main+0x13b8>)
1000897a:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
1000897c:	4b8d      	ldr	r3, [pc, #564]	; (10008bb4 <main+0x13c0>)
1000897e:	781b      	ldrb	r3, [r3, #0]
10008980:	1c1c      	adds	r4, r3, #0
10008982:	4a8d      	ldr	r2, [pc, #564]	; (10008bb8 <main+0x13c4>)
10008984:	4b89      	ldr	r3, [pc, #548]	; (10008bac <main+0x13b8>)
10008986:	1c10      	adds	r0, r2, #0
10008988:	1c19      	adds	r1, r3, #0
1000898a:	1c22      	adds	r2, r4, #0
1000898c:	f7fb fa4a 	bl	10003e24 <UART_Transmit>
				case command_neuSerNrWriteResi:
											if (command_nr == 0x66 && Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
											{
												tester2=0xff;
												tester = readSerNrEEprom();
											    if( tester  == 0x03 )
10008990:	e03a      	b.n	10008a08 <main+0x1214>
												new_data[8]=tester;
												new_data[9]=tester2;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
											    }
											    else {
												new_data_HalloBack();
10008992:	f7f8 ff77 	bl	10001884 <new_data_HalloBack>
												 new_data[6]='e';
10008996:	4b85      	ldr	r3, [pc, #532]	; (10008bac <main+0x13b8>)
10008998:	2265      	movs	r2, #101	; 0x65
1000899a:	719a      	strb	r2, [r3, #6]
												 new_data[7]=17;
1000899c:	4b83      	ldr	r3, [pc, #524]	; (10008bac <main+0x13b8>)
1000899e:	2211      	movs	r2, #17
100089a0:	71da      	strb	r2, [r3, #7]
												 new_data[8]=tester;
100089a2:	4b8a      	ldr	r3, [pc, #552]	; (10008bcc <main+0x13d8>)
100089a4:	681b      	ldr	r3, [r3, #0]
100089a6:	b2da      	uxtb	r2, r3
100089a8:	4b80      	ldr	r3, [pc, #512]	; (10008bac <main+0x13b8>)
100089aa:	721a      	strb	r2, [r3, #8]
												 new_data[9]=tester2;
100089ac:	4b86      	ldr	r3, [pc, #536]	; (10008bc8 <main+0x13d4>)
100089ae:	881b      	ldrh	r3, [r3, #0]
100089b0:	b2da      	uxtb	r2, r3
100089b2:	4b7e      	ldr	r3, [pc, #504]	; (10008bac <main+0x13b8>)
100089b4:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
100089b6:	4b7f      	ldr	r3, [pc, #508]	; (10008bb4 <main+0x13c0>)
100089b8:	781b      	ldrb	r3, [r3, #0]
100089ba:	1c1c      	adds	r4, r3, #0
100089bc:	4a7e      	ldr	r2, [pc, #504]	; (10008bb8 <main+0x13c4>)
100089be:	4b7b      	ldr	r3, [pc, #492]	; (10008bac <main+0x13b8>)
100089c0:	1c10      	adds	r0, r2, #0
100089c2:	1c19      	adds	r1, r3, #0
100089c4:	1c22      	adds	r2, r4, #0
100089c6:	f7fb fa2d 	bl	10003e24 <UART_Transmit>
				case command_neuSerNrWriteResi:
											if (command_nr == 0x66 && Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
											{
												tester2=0xff;
												tester = readSerNrEEprom();
											    if( tester  == 0x03 )
100089ca:	e01d      	b.n	10008a08 <main+0x1214>
												 new_data[9]=tester2;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
											    }
											}
											 else {
											new_data_HalloBack();
100089cc:	f7f8 ff5a 	bl	10001884 <new_data_HalloBack>
											new_data[6]='e';
100089d0:	4b76      	ldr	r3, [pc, #472]	; (10008bac <main+0x13b8>)
100089d2:	2265      	movs	r2, #101	; 0x65
100089d4:	719a      	strb	r2, [r3, #6]
											new_data[7]=18;
100089d6:	4b75      	ldr	r3, [pc, #468]	; (10008bac <main+0x13b8>)
100089d8:	2212      	movs	r2, #18
100089da:	71da      	strb	r2, [r3, #7]
											new_data[8]=tester;
100089dc:	4b7b      	ldr	r3, [pc, #492]	; (10008bcc <main+0x13d8>)
100089de:	681b      	ldr	r3, [r3, #0]
100089e0:	b2da      	uxtb	r2, r3
100089e2:	4b72      	ldr	r3, [pc, #456]	; (10008bac <main+0x13b8>)
100089e4:	721a      	strb	r2, [r3, #8]
											new_data[9]=tester2;
100089e6:	4b78      	ldr	r3, [pc, #480]	; (10008bc8 <main+0x13d4>)
100089e8:	881b      	ldrh	r3, [r3, #0]
100089ea:	b2da      	uxtb	r2, r3
100089ec:	4b6f      	ldr	r3, [pc, #444]	; (10008bac <main+0x13b8>)
100089ee:	725a      	strb	r2, [r3, #9]
											UART_Transmit(&UART_1, new_data,transmit_buf_size);
100089f0:	4b70      	ldr	r3, [pc, #448]	; (10008bb4 <main+0x13c0>)
100089f2:	781b      	ldrb	r3, [r3, #0]
100089f4:	1c1c      	adds	r4, r3, #0
100089f6:	4a70      	ldr	r2, [pc, #448]	; (10008bb8 <main+0x13c4>)
100089f8:	4b6c      	ldr	r3, [pc, #432]	; (10008bac <main+0x13b8>)
100089fa:	1c10      	adds	r0, r2, #0
100089fc:	1c19      	adds	r1, r3, #0
100089fe:	1c22      	adds	r2, r4, #0
10008a00:	f7fb fa10 	bl	10003e24 <UART_Transmit>
											 }
											break;
10008a04:	f000 fdbc 	bl	10009580 <main+0x1d8c>
10008a08:	f000 fdba 	bl	10009580 <main+0x1d8c>
				case command_neuakt_lightWriteResi:
												if (Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
10008a0c:	4b6b      	ldr	r3, [pc, #428]	; (10008bbc <main+0x13c8>)
10008a0e:	881b      	ldrh	r3, [r3, #0]
10008a10:	1c19      	adds	r1, r3, #0
10008a12:	4b6b      	ldr	r3, [pc, #428]	; (10008bc0 <main+0x13cc>)
10008a14:	785b      	ldrb	r3, [r3, #1]
10008a16:	021b      	lsls	r3, r3, #8
10008a18:	4a69      	ldr	r2, [pc, #420]	; (10008bc0 <main+0x13cc>)
10008a1a:	7892      	ldrb	r2, [r2, #2]
10008a1c:	189b      	adds	r3, r3, r2
10008a1e:	4299      	cmp	r1, r3
10008a20:	d000      	beq.n	10008a24 <main+0x1230>
10008a22:	e0a5      	b.n	10008b70 <main+0x137c>
10008a24:	4b67      	ldr	r3, [pc, #412]	; (10008bc4 <main+0x13d0>)
10008a26:	881b      	ldrh	r3, [r3, #0]
10008a28:	1c19      	adds	r1, r3, #0
10008a2a:	4b65      	ldr	r3, [pc, #404]	; (10008bc0 <main+0x13cc>)
10008a2c:	78db      	ldrb	r3, [r3, #3]
10008a2e:	021b      	lsls	r3, r3, #8
10008a30:	4a63      	ldr	r2, [pc, #396]	; (10008bc0 <main+0x13cc>)
10008a32:	7912      	ldrb	r2, [r2, #4]
10008a34:	189b      	adds	r3, r3, r2
10008a36:	4299      	cmp	r1, r3
10008a38:	d000      	beq.n	10008a3c <main+0x1248>
10008a3a:	e099      	b.n	10008b70 <main+0x137c>
												{
													    ReadBuffer2[0]=Dimm_Gamma;
10008a3c:	4b65      	ldr	r3, [pc, #404]	; (10008bd4 <main+0x13e0>)
10008a3e:	781a      	ldrb	r2, [r3, #0]
10008a40:	4b65      	ldr	r3, [pc, #404]	; (10008bd8 <main+0x13e4>)
10008a42:	701a      	strb	r2, [r3, #0]
													    ReadBuffer2[1]=Dimm_Stufen;
10008a44:	4b65      	ldr	r3, [pc, #404]	; (10008bdc <main+0x13e8>)
10008a46:	781a      	ldrb	r2, [r3, #0]
10008a48:	4b63      	ldr	r3, [pc, #396]	; (10008bd8 <main+0x13e4>)
10008a4a:	705a      	strb	r2, [r3, #1]
													    ReadBuffer2[2] = Dimm_StufenGR;
10008a4c:	4b64      	ldr	r3, [pc, #400]	; (10008be0 <main+0x13ec>)
10008a4e:	781a      	ldrb	r2, [r3, #0]
10008a50:	4b61      	ldr	r3, [pc, #388]	; (10008bd8 <main+0x13e4>)
10008a52:	709a      	strb	r2, [r3, #2]
													    ReadBuffer2[3] = Dimm_Valu;
10008a54:	4b63      	ldr	r3, [pc, #396]	; (10008be4 <main+0x13f0>)
10008a56:	781a      	ldrb	r2, [r3, #0]
10008a58:	4b5f      	ldr	r3, [pc, #380]	; (10008bd8 <main+0x13e4>)
10008a5a:	70da      	strb	r2, [r3, #3]
													    ReadBuffer2[4] = Smooth_Value / 0x100;
10008a5c:	4b62      	ldr	r3, [pc, #392]	; (10008be8 <main+0x13f4>)
10008a5e:	881b      	ldrh	r3, [r3, #0]
10008a60:	0a1b      	lsrs	r3, r3, #8
10008a62:	b29b      	uxth	r3, r3
10008a64:	b2da      	uxtb	r2, r3
10008a66:	4b5c      	ldr	r3, [pc, #368]	; (10008bd8 <main+0x13e4>)
10008a68:	711a      	strb	r2, [r3, #4]
													    ReadBuffer2[5] = Smooth_Value & 0xff;
10008a6a:	4b5f      	ldr	r3, [pc, #380]	; (10008be8 <main+0x13f4>)
10008a6c:	881b      	ldrh	r3, [r3, #0]
10008a6e:	b2da      	uxtb	r2, r3
10008a70:	4b59      	ldr	r3, [pc, #356]	; (10008bd8 <main+0x13e4>)
10008a72:	715a      	strb	r2, [r3, #5]
													    ReadBuffer2[6] = linearwalk_gen /0x100;
10008a74:	4b5d      	ldr	r3, [pc, #372]	; (10008bec <main+0x13f8>)
10008a76:	881b      	ldrh	r3, [r3, #0]
10008a78:	0a1b      	lsrs	r3, r3, #8
10008a7a:	b29b      	uxth	r3, r3
10008a7c:	b2da      	uxtb	r2, r3
10008a7e:	4b56      	ldr	r3, [pc, #344]	; (10008bd8 <main+0x13e4>)
10008a80:	719a      	strb	r2, [r3, #6]
													    ReadBuffer2[7] = linearwalk_gen & 0xff;
10008a82:	4b5a      	ldr	r3, [pc, #360]	; (10008bec <main+0x13f8>)
10008a84:	881b      	ldrh	r3, [r3, #0]
10008a86:	b2da      	uxtb	r2, r3
10008a88:	4b53      	ldr	r3, [pc, #332]	; (10008bd8 <main+0x13e4>)
10008a8a:	71da      	strb	r2, [r3, #7]
													    ReadBuffer2[8] = Farbe_wwcw_Quot_gen / 0x100;
10008a8c:	4b58      	ldr	r3, [pc, #352]	; (10008bf0 <main+0x13fc>)
10008a8e:	881b      	ldrh	r3, [r3, #0]
10008a90:	0a1b      	lsrs	r3, r3, #8
10008a92:	b29b      	uxth	r3, r3
10008a94:	b2da      	uxtb	r2, r3
10008a96:	4b50      	ldr	r3, [pc, #320]	; (10008bd8 <main+0x13e4>)
10008a98:	721a      	strb	r2, [r3, #8]
													    ReadBuffer2[9] = Farbe_wwcw_Quot_gen & 0xff;
10008a9a:	4b55      	ldr	r3, [pc, #340]	; (10008bf0 <main+0x13fc>)
10008a9c:	881b      	ldrh	r3, [r3, #0]
10008a9e:	b2da      	uxtb	r2, r3
10008aa0:	4b4d      	ldr	r3, [pc, #308]	; (10008bd8 <main+0x13e4>)
10008aa2:	725a      	strb	r2, [r3, #9]
													    ReadBuffer2[10] = Reserve_1 /0x100;
10008aa4:	4b53      	ldr	r3, [pc, #332]	; (10008bf4 <main+0x1400>)
10008aa6:	881b      	ldrh	r3, [r3, #0]
10008aa8:	0a1b      	lsrs	r3, r3, #8
10008aaa:	b29b      	uxth	r3, r3
10008aac:	b2da      	uxtb	r2, r3
10008aae:	4b4a      	ldr	r3, [pc, #296]	; (10008bd8 <main+0x13e4>)
10008ab0:	729a      	strb	r2, [r3, #10]
													    ReadBuffer2[11] = Reserve_1 & 0xff;
10008ab2:	4b50      	ldr	r3, [pc, #320]	; (10008bf4 <main+0x1400>)
10008ab4:	881b      	ldrh	r3, [r3, #0]
10008ab6:	b2da      	uxtb	r2, r3
10008ab8:	4b47      	ldr	r3, [pc, #284]	; (10008bd8 <main+0x13e4>)
10008aba:	72da      	strb	r2, [r3, #11]
													    ReadBuffer2[12] = Dimm_Max_WW /0x100;
10008abc:	4b4e      	ldr	r3, [pc, #312]	; (10008bf8 <main+0x1404>)
10008abe:	881b      	ldrh	r3, [r3, #0]
10008ac0:	0a1b      	lsrs	r3, r3, #8
10008ac2:	b29b      	uxth	r3, r3
10008ac4:	b2da      	uxtb	r2, r3
10008ac6:	4b44      	ldr	r3, [pc, #272]	; (10008bd8 <main+0x13e4>)
10008ac8:	731a      	strb	r2, [r3, #12]
													    ReadBuffer2[13] = Dimm_Max_WW & 0xff;
10008aca:	4b4b      	ldr	r3, [pc, #300]	; (10008bf8 <main+0x1404>)
10008acc:	881b      	ldrh	r3, [r3, #0]
10008ace:	b2da      	uxtb	r2, r3
10008ad0:	4b41      	ldr	r3, [pc, #260]	; (10008bd8 <main+0x13e4>)
10008ad2:	735a      	strb	r2, [r3, #13]
													    ReadBuffer2[14] = Dimm_Max_CW /0x100;
10008ad4:	4b49      	ldr	r3, [pc, #292]	; (10008bfc <main+0x1408>)
10008ad6:	881b      	ldrh	r3, [r3, #0]
10008ad8:	0a1b      	lsrs	r3, r3, #8
10008ada:	b29b      	uxth	r3, r3
10008adc:	b2da      	uxtb	r2, r3
10008ade:	4b3e      	ldr	r3, [pc, #248]	; (10008bd8 <main+0x13e4>)
10008ae0:	739a      	strb	r2, [r3, #14]
													    ReadBuffer2[15] = Dimm_Max_CW & 0xff;
10008ae2:	4b46      	ldr	r3, [pc, #280]	; (10008bfc <main+0x1408>)
10008ae4:	881b      	ldrh	r3, [r3, #0]
10008ae6:	b2da      	uxtb	r2, r3
10008ae8:	4b3b      	ldr	r3, [pc, #236]	; (10008bd8 <main+0x13e4>)
10008aea:	73da      	strb	r2, [r3, #15]

												   if (resultB2 > min_EEP_Voltage_Uin)
10008aec:	4b44      	ldr	r3, [pc, #272]	; (10008c00 <main+0x140c>)
10008aee:	881a      	ldrh	r2, [r3, #0]
10008af0:	23ba      	movs	r3, #186	; 0xba
10008af2:	011b      	lsls	r3, r3, #4
10008af4:	429a      	cmp	r2, r3
10008af6:	d920      	bls.n	10008b3a <main+0x1346>
												   {
											        tester2 = writeakt_light_data_B4_EEprom();
10008af8:	f7f9 fa14 	bl	10001f24 <writeakt_light_data_B4_EEprom>
10008afc:	1c03      	adds	r3, r0, #0
10008afe:	b29a      	uxth	r2, r3
10008b00:	4b31      	ldr	r3, [pc, #196]	; (10008bc8 <main+0x13d4>)
10008b02:	801a      	strh	r2, [r3, #0]
													new_data_HalloBack();
10008b04:	f7f8 febe 	bl	10001884 <new_data_HalloBack>
													new_data[6]='i';
10008b08:	4b28      	ldr	r3, [pc, #160]	; (10008bac <main+0x13b8>)
10008b0a:	2269      	movs	r2, #105	; 0x69
10008b0c:	719a      	strb	r2, [r3, #6]
													new_data[7]='n';
10008b0e:	4b27      	ldr	r3, [pc, #156]	; (10008bac <main+0x13b8>)
10008b10:	226e      	movs	r2, #110	; 0x6e
10008b12:	71da      	strb	r2, [r3, #7]
													new_data[8]=0;
10008b14:	4b25      	ldr	r3, [pc, #148]	; (10008bac <main+0x13b8>)
10008b16:	2200      	movs	r2, #0
10008b18:	721a      	strb	r2, [r3, #8]
													new_data[9]=tester2;
10008b1a:	4b2b      	ldr	r3, [pc, #172]	; (10008bc8 <main+0x13d4>)
10008b1c:	881b      	ldrh	r3, [r3, #0]
10008b1e:	b2da      	uxtb	r2, r3
10008b20:	4b22      	ldr	r3, [pc, #136]	; (10008bac <main+0x13b8>)
10008b22:	725a      	strb	r2, [r3, #9]
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008b24:	4b23      	ldr	r3, [pc, #140]	; (10008bb4 <main+0x13c0>)
10008b26:	781b      	ldrb	r3, [r3, #0]
10008b28:	1c1c      	adds	r4, r3, #0
10008b2a:	4a23      	ldr	r2, [pc, #140]	; (10008bb8 <main+0x13c4>)
10008b2c:	4b1f      	ldr	r3, [pc, #124]	; (10008bac <main+0x13b8>)
10008b2e:	1c10      	adds	r0, r2, #0
10008b30:	1c19      	adds	r1, r3, #0
10008b32:	1c22      	adds	r2, r4, #0
10008b34:	f7fb f976 	bl	10003e24 <UART_Transmit>
													    ReadBuffer2[12] = Dimm_Max_WW /0x100;
													    ReadBuffer2[13] = Dimm_Max_WW & 0xff;
													    ReadBuffer2[14] = Dimm_Max_CW /0x100;
													    ReadBuffer2[15] = Dimm_Max_CW & 0xff;

												   if (resultB2 > min_EEP_Voltage_Uin)
10008b38:	e036      	b.n	10008ba8 <main+0x13b4>
													new_data[8]=0;
													new_data[9]=tester2;
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
												   }
												    else {
													new_data_HalloBack();
10008b3a:	f7f8 fea3 	bl	10001884 <new_data_HalloBack>
													 new_data[6]='e';
10008b3e:	4b1b      	ldr	r3, [pc, #108]	; (10008bac <main+0x13b8>)
10008b40:	2265      	movs	r2, #101	; 0x65
10008b42:	719a      	strb	r2, [r3, #6]
													 new_data[7]=75;
10008b44:	4b19      	ldr	r3, [pc, #100]	; (10008bac <main+0x13b8>)
10008b46:	224b      	movs	r2, #75	; 0x4b
10008b48:	71da      	strb	r2, [r3, #7]
													 new_data[8]=0;
10008b4a:	4b18      	ldr	r3, [pc, #96]	; (10008bac <main+0x13b8>)
10008b4c:	2200      	movs	r2, #0
10008b4e:	721a      	strb	r2, [r3, #8]
													 new_data[9]=tester2;
10008b50:	4b1d      	ldr	r3, [pc, #116]	; (10008bc8 <main+0x13d4>)
10008b52:	881b      	ldrh	r3, [r3, #0]
10008b54:	b2da      	uxtb	r2, r3
10008b56:	4b15      	ldr	r3, [pc, #84]	; (10008bac <main+0x13b8>)
10008b58:	725a      	strb	r2, [r3, #9]
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008b5a:	4b16      	ldr	r3, [pc, #88]	; (10008bb4 <main+0x13c0>)
10008b5c:	781b      	ldrb	r3, [r3, #0]
10008b5e:	1c1c      	adds	r4, r3, #0
10008b60:	4a15      	ldr	r2, [pc, #84]	; (10008bb8 <main+0x13c4>)
10008b62:	4b12      	ldr	r3, [pc, #72]	; (10008bac <main+0x13b8>)
10008b64:	1c10      	adds	r0, r2, #0
10008b66:	1c19      	adds	r1, r3, #0
10008b68:	1c22      	adds	r2, r4, #0
10008b6a:	f7fb f95b 	bl	10003e24 <UART_Transmit>
													    ReadBuffer2[12] = Dimm_Max_WW /0x100;
													    ReadBuffer2[13] = Dimm_Max_WW & 0xff;
													    ReadBuffer2[14] = Dimm_Max_CW /0x100;
													    ReadBuffer2[15] = Dimm_Max_CW & 0xff;

												   if (resultB2 > min_EEP_Voltage_Uin)
10008b6e:	e01b      	b.n	10008ba8 <main+0x13b4>
													 new_data[9]=tester2;
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
												    }
												}
												 else {
												new_data_HalloBack();
10008b70:	f7f8 fe88 	bl	10001884 <new_data_HalloBack>
												new_data[6]='e';
10008b74:	4b0d      	ldr	r3, [pc, #52]	; (10008bac <main+0x13b8>)
10008b76:	2265      	movs	r2, #101	; 0x65
10008b78:	719a      	strb	r2, [r3, #6]
												new_data[7]=28;
10008b7a:	4b0c      	ldr	r3, [pc, #48]	; (10008bac <main+0x13b8>)
10008b7c:	221c      	movs	r2, #28
10008b7e:	71da      	strb	r2, [r3, #7]
												new_data[8]=0;
10008b80:	4b0a      	ldr	r3, [pc, #40]	; (10008bac <main+0x13b8>)
10008b82:	2200      	movs	r2, #0
10008b84:	721a      	strb	r2, [r3, #8]
												new_data[9]=tester2;
10008b86:	4b10      	ldr	r3, [pc, #64]	; (10008bc8 <main+0x13d4>)
10008b88:	881b      	ldrh	r3, [r3, #0]
10008b8a:	b2da      	uxtb	r2, r3
10008b8c:	4b07      	ldr	r3, [pc, #28]	; (10008bac <main+0x13b8>)
10008b8e:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008b90:	4b08      	ldr	r3, [pc, #32]	; (10008bb4 <main+0x13c0>)
10008b92:	781b      	ldrb	r3, [r3, #0]
10008b94:	1c1c      	adds	r4, r3, #0
10008b96:	4a08      	ldr	r2, [pc, #32]	; (10008bb8 <main+0x13c4>)
10008b98:	4b04      	ldr	r3, [pc, #16]	; (10008bac <main+0x13b8>)
10008b9a:	1c10      	adds	r0, r2, #0
10008b9c:	1c19      	adds	r1, r3, #0
10008b9e:	1c22      	adds	r2, r4, #0
10008ba0:	f7fb f940 	bl	10003e24 <UART_Transmit>
												 }
												break;
10008ba4:	f000 fcec 	bl	10009580 <main+0x1d8c>
10008ba8:	f000 fcea 	bl	10009580 <main+0x1d8c>
10008bac:	20000804 	.word	0x20000804
10008bb0:	20000c2e 	.word	0x20000c2e
10008bb4:	20000550 	.word	0x20000550
10008bb8:	20000560 	.word	0x20000560
10008bbc:	20000830 	.word	0x20000830
10008bc0:	20000824 	.word	0x20000824
10008bc4:	200008a8 	.word	0x200008a8
10008bc8:	20000c34 	.word	0x20000c34
10008bcc:	20000c28 	.word	0x20000c28
10008bd0:	20000890 	.word	0x20000890
10008bd4:	20000862 	.word	0x20000862
10008bd8:	20000848 	.word	0x20000848
10008bdc:	20000840 	.word	0x20000840
10008be0:	2000088a 	.word	0x2000088a
10008be4:	20000814 	.word	0x20000814
10008be8:	200008aa 	.word	0x200008aa
10008bec:	2000054a 	.word	0x2000054a
10008bf0:	200008a0 	.word	0x200008a0
10008bf4:	200008b8 	.word	0x200008b8
10008bf8:	20000838 	.word	0x20000838
10008bfc:	2000088c 	.word	0x2000088c
10008c00:	200007fe 	.word	0x200007fe
				case command_neuofflightWriteResi:
												if (Ser_NrH == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
10008c04:	4bd2      	ldr	r3, [pc, #840]	; (10008f50 <main+0x175c>)
10008c06:	881b      	ldrh	r3, [r3, #0]
10008c08:	1c19      	adds	r1, r3, #0
10008c0a:	4bd2      	ldr	r3, [pc, #840]	; (10008f54 <main+0x1760>)
10008c0c:	785b      	ldrb	r3, [r3, #1]
10008c0e:	021b      	lsls	r3, r3, #8
10008c10:	4ad0      	ldr	r2, [pc, #832]	; (10008f54 <main+0x1760>)
10008c12:	7892      	ldrb	r2, [r2, #2]
10008c14:	189b      	adds	r3, r3, r2
10008c16:	4299      	cmp	r1, r3
10008c18:	d000      	beq.n	10008c1c <main+0x1428>
10008c1a:	e0a9      	b.n	10008d70 <main+0x157c>
10008c1c:	4bce      	ldr	r3, [pc, #824]	; (10008f58 <main+0x1764>)
10008c1e:	881b      	ldrh	r3, [r3, #0]
10008c20:	1c19      	adds	r1, r3, #0
10008c22:	4bcc      	ldr	r3, [pc, #816]	; (10008f54 <main+0x1760>)
10008c24:	78db      	ldrb	r3, [r3, #3]
10008c26:	021b      	lsls	r3, r3, #8
10008c28:	4aca      	ldr	r2, [pc, #808]	; (10008f54 <main+0x1760>)
10008c2a:	7912      	ldrb	r2, [r2, #4]
10008c2c:	189b      	adds	r3, r3, r2
10008c2e:	4299      	cmp	r1, r3
10008c30:	d000      	beq.n	10008c34 <main+0x1440>
10008c32:	e09d      	b.n	10008d70 <main+0x157c>
												{
													    ReadBuffer2[0]=RegOnOff;
10008c34:	4bc9      	ldr	r3, [pc, #804]	; (10008f5c <main+0x1768>)
10008c36:	781a      	ldrb	r2, [r3, #0]
10008c38:	4bc9      	ldr	r3, [pc, #804]	; (10008f60 <main+0x176c>)
10008c3a:	701a      	strb	r2, [r3, #0]
													    ReadBuffer2[1]=RegOnOff2;
10008c3c:	4bc9      	ldr	r3, [pc, #804]	; (10008f64 <main+0x1770>)
10008c3e:	781a      	ldrb	r2, [r3, #0]
10008c40:	4bc7      	ldr	r3, [pc, #796]	; (10008f60 <main+0x176c>)
10008c42:	705a      	strb	r2, [r3, #1]
													    ReadBuffer2[2] = Reserve_2 / 0x100;
10008c44:	4bc8      	ldr	r3, [pc, #800]	; (10008f68 <main+0x1774>)
10008c46:	881b      	ldrh	r3, [r3, #0]
10008c48:	0a1b      	lsrs	r3, r3, #8
10008c4a:	b29b      	uxth	r3, r3
10008c4c:	b2da      	uxtb	r2, r3
10008c4e:	4bc4      	ldr	r3, [pc, #784]	; (10008f60 <main+0x176c>)
10008c50:	709a      	strb	r2, [r3, #2]
													    ReadBuffer2[3] = Reserve_2 & 0xff;
10008c52:	4bc5      	ldr	r3, [pc, #788]	; (10008f68 <main+0x1774>)
10008c54:	881b      	ldrh	r3, [r3, #0]
10008c56:	b2da      	uxtb	r2, r3
10008c58:	4bc1      	ldr	r3, [pc, #772]	; (10008f60 <main+0x176c>)
10008c5a:	70da      	strb	r2, [r3, #3]
													    ReadBuffer2[4] = dimOff_Ww / 0x100;
10008c5c:	4bc3      	ldr	r3, [pc, #780]	; (10008f6c <main+0x1778>)
10008c5e:	881b      	ldrh	r3, [r3, #0]
10008c60:	0a1b      	lsrs	r3, r3, #8
10008c62:	b29b      	uxth	r3, r3
10008c64:	b2da      	uxtb	r2, r3
10008c66:	4bbe      	ldr	r3, [pc, #760]	; (10008f60 <main+0x176c>)
10008c68:	711a      	strb	r2, [r3, #4]
													    ReadBuffer2[5] = dimOff_Ww & 0xff;
10008c6a:	4bc0      	ldr	r3, [pc, #768]	; (10008f6c <main+0x1778>)
10008c6c:	881b      	ldrh	r3, [r3, #0]
10008c6e:	b2da      	uxtb	r2, r3
10008c70:	4bbb      	ldr	r3, [pc, #748]	; (10008f60 <main+0x176c>)
10008c72:	715a      	strb	r2, [r3, #5]
													    ReadBuffer2[6] = dimOff_Cw / 0x100;
10008c74:	4bbe      	ldr	r3, [pc, #760]	; (10008f70 <main+0x177c>)
10008c76:	881b      	ldrh	r3, [r3, #0]
10008c78:	0a1b      	lsrs	r3, r3, #8
10008c7a:	b29b      	uxth	r3, r3
10008c7c:	b2da      	uxtb	r2, r3
10008c7e:	4bb8      	ldr	r3, [pc, #736]	; (10008f60 <main+0x176c>)
10008c80:	719a      	strb	r2, [r3, #6]
													    ReadBuffer2[7] = dimOff_Cw & 0xff;
10008c82:	4bbb      	ldr	r3, [pc, #748]	; (10008f70 <main+0x177c>)
10008c84:	881b      	ldrh	r3, [r3, #0]
10008c86:	b2da      	uxtb	r2, r3
10008c88:	4bb5      	ldr	r3, [pc, #724]	; (10008f60 <main+0x176c>)
10008c8a:	71da      	strb	r2, [r3, #7]
													    ReadBuffer2[8] = dimNorm1_Ww / 0x100;
10008c8c:	4bb9      	ldr	r3, [pc, #740]	; (10008f74 <main+0x1780>)
10008c8e:	881b      	ldrh	r3, [r3, #0]
10008c90:	0a1b      	lsrs	r3, r3, #8
10008c92:	b29b      	uxth	r3, r3
10008c94:	b2da      	uxtb	r2, r3
10008c96:	4bb2      	ldr	r3, [pc, #712]	; (10008f60 <main+0x176c>)
10008c98:	721a      	strb	r2, [r3, #8]
													    ReadBuffer2[9] = dimNorm1_Ww & 0xff;
10008c9a:	4bb6      	ldr	r3, [pc, #728]	; (10008f74 <main+0x1780>)
10008c9c:	881b      	ldrh	r3, [r3, #0]
10008c9e:	b2da      	uxtb	r2, r3
10008ca0:	4baf      	ldr	r3, [pc, #700]	; (10008f60 <main+0x176c>)
10008ca2:	725a      	strb	r2, [r3, #9]
													    ReadBuffer2[10] = dimNorm1_Cw / 0x100;
10008ca4:	4bb4      	ldr	r3, [pc, #720]	; (10008f78 <main+0x1784>)
10008ca6:	881b      	ldrh	r3, [r3, #0]
10008ca8:	0a1b      	lsrs	r3, r3, #8
10008caa:	b29b      	uxth	r3, r3
10008cac:	b2da      	uxtb	r2, r3
10008cae:	4bac      	ldr	r3, [pc, #688]	; (10008f60 <main+0x176c>)
10008cb0:	729a      	strb	r2, [r3, #10]
													    ReadBuffer2[11] = dimNorm1_Cw & 0xff;
10008cb2:	4bb1      	ldr	r3, [pc, #708]	; (10008f78 <main+0x1784>)
10008cb4:	881b      	ldrh	r3, [r3, #0]
10008cb6:	b2da      	uxtb	r2, r3
10008cb8:	4ba9      	ldr	r3, [pc, #676]	; (10008f60 <main+0x176c>)
10008cba:	72da      	strb	r2, [r3, #11]
													    ReadBuffer2[12] = dimNorm2_Ww / 0x100;
10008cbc:	4baf      	ldr	r3, [pc, #700]	; (10008f7c <main+0x1788>)
10008cbe:	881b      	ldrh	r3, [r3, #0]
10008cc0:	0a1b      	lsrs	r3, r3, #8
10008cc2:	b29b      	uxth	r3, r3
10008cc4:	b2da      	uxtb	r2, r3
10008cc6:	4ba6      	ldr	r3, [pc, #664]	; (10008f60 <main+0x176c>)
10008cc8:	731a      	strb	r2, [r3, #12]
													    ReadBuffer2[13] = dimNorm2_Ww & 0xff;
10008cca:	4bac      	ldr	r3, [pc, #688]	; (10008f7c <main+0x1788>)
10008ccc:	881b      	ldrh	r3, [r3, #0]
10008cce:	b2da      	uxtb	r2, r3
10008cd0:	4ba3      	ldr	r3, [pc, #652]	; (10008f60 <main+0x176c>)
10008cd2:	735a      	strb	r2, [r3, #13]
													    ReadBuffer2[14] = dimNorm2_Cw / 0x100;;
10008cd4:	4baa      	ldr	r3, [pc, #680]	; (10008f80 <main+0x178c>)
10008cd6:	881b      	ldrh	r3, [r3, #0]
10008cd8:	0a1b      	lsrs	r3, r3, #8
10008cda:	b29b      	uxth	r3, r3
10008cdc:	b2da      	uxtb	r2, r3
10008cde:	4ba0      	ldr	r3, [pc, #640]	; (10008f60 <main+0x176c>)
10008ce0:	739a      	strb	r2, [r3, #14]
													    ReadBuffer2[15] = dimNorm2_Cw & 0xff;
10008ce2:	4ba7      	ldr	r3, [pc, #668]	; (10008f80 <main+0x178c>)
10008ce4:	881b      	ldrh	r3, [r3, #0]
10008ce6:	b2da      	uxtb	r2, r3
10008ce8:	4b9d      	ldr	r3, [pc, #628]	; (10008f60 <main+0x176c>)
10008cea:	73da      	strb	r2, [r3, #15]

												   if (resultB2 > min_EEP_Voltage_Uin)
10008cec:	4ba5      	ldr	r3, [pc, #660]	; (10008f84 <main+0x1790>)
10008cee:	881a      	ldrh	r2, [r3, #0]
10008cf0:	23ba      	movs	r3, #186	; 0xba
10008cf2:	011b      	lsls	r3, r3, #4
10008cf4:	429a      	cmp	r2, r3
10008cf6:	d920      	bls.n	10008d3a <main+0x1546>
												   {
											        tester2 = writeOff_light_B5_EEprom();
10008cf8:	f7f9 f94a 	bl	10001f90 <writeOff_light_B5_EEprom>
10008cfc:	1c03      	adds	r3, r0, #0
10008cfe:	b29a      	uxth	r2, r3
10008d00:	4ba1      	ldr	r3, [pc, #644]	; (10008f88 <main+0x1794>)
10008d02:	801a      	strh	r2, [r3, #0]
													new_data_HalloBack();
10008d04:	f7f8 fdbe 	bl	10001884 <new_data_HalloBack>
													new_data[6]='i';
10008d08:	4ba0      	ldr	r3, [pc, #640]	; (10008f8c <main+0x1798>)
10008d0a:	2269      	movs	r2, #105	; 0x69
10008d0c:	719a      	strb	r2, [r3, #6]
													new_data[7]='n';
10008d0e:	4b9f      	ldr	r3, [pc, #636]	; (10008f8c <main+0x1798>)
10008d10:	226e      	movs	r2, #110	; 0x6e
10008d12:	71da      	strb	r2, [r3, #7]
													new_data[8]=0;
10008d14:	4b9d      	ldr	r3, [pc, #628]	; (10008f8c <main+0x1798>)
10008d16:	2200      	movs	r2, #0
10008d18:	721a      	strb	r2, [r3, #8]
													new_data[9]=tester2;
10008d1a:	4b9b      	ldr	r3, [pc, #620]	; (10008f88 <main+0x1794>)
10008d1c:	881b      	ldrh	r3, [r3, #0]
10008d1e:	b2da      	uxtb	r2, r3
10008d20:	4b9a      	ldr	r3, [pc, #616]	; (10008f8c <main+0x1798>)
10008d22:	725a      	strb	r2, [r3, #9]
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008d24:	4b9a      	ldr	r3, [pc, #616]	; (10008f90 <main+0x179c>)
10008d26:	781b      	ldrb	r3, [r3, #0]
10008d28:	1c1c      	adds	r4, r3, #0
10008d2a:	4a9a      	ldr	r2, [pc, #616]	; (10008f94 <main+0x17a0>)
10008d2c:	4b97      	ldr	r3, [pc, #604]	; (10008f8c <main+0x1798>)
10008d2e:	1c10      	adds	r0, r2, #0
10008d30:	1c19      	adds	r1, r3, #0
10008d32:	1c22      	adds	r2, r4, #0
10008d34:	f7fb f876 	bl	10003e24 <UART_Transmit>
													    ReadBuffer2[12] = dimNorm2_Ww / 0x100;
													    ReadBuffer2[13] = dimNorm2_Ww & 0xff;
													    ReadBuffer2[14] = dimNorm2_Cw / 0x100;;
													    ReadBuffer2[15] = dimNorm2_Cw & 0xff;

												   if (resultB2 > min_EEP_Voltage_Uin)
10008d38:	e036      	b.n	10008da8 <main+0x15b4>
													new_data[8]=0;
													new_data[9]=tester2;
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
												   }
												    else {
													new_data_HalloBack();
10008d3a:	f7f8 fda3 	bl	10001884 <new_data_HalloBack>
													 new_data[6]='e';
10008d3e:	4b93      	ldr	r3, [pc, #588]	; (10008f8c <main+0x1798>)
10008d40:	2265      	movs	r2, #101	; 0x65
10008d42:	719a      	strb	r2, [r3, #6]
													 new_data[7]=27;
10008d44:	4b91      	ldr	r3, [pc, #580]	; (10008f8c <main+0x1798>)
10008d46:	221b      	movs	r2, #27
10008d48:	71da      	strb	r2, [r3, #7]
													 new_data[8]=0;
10008d4a:	4b90      	ldr	r3, [pc, #576]	; (10008f8c <main+0x1798>)
10008d4c:	2200      	movs	r2, #0
10008d4e:	721a      	strb	r2, [r3, #8]
													 new_data[9]=tester2;
10008d50:	4b8d      	ldr	r3, [pc, #564]	; (10008f88 <main+0x1794>)
10008d52:	881b      	ldrh	r3, [r3, #0]
10008d54:	b2da      	uxtb	r2, r3
10008d56:	4b8d      	ldr	r3, [pc, #564]	; (10008f8c <main+0x1798>)
10008d58:	725a      	strb	r2, [r3, #9]
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008d5a:	4b8d      	ldr	r3, [pc, #564]	; (10008f90 <main+0x179c>)
10008d5c:	781b      	ldrb	r3, [r3, #0]
10008d5e:	1c1c      	adds	r4, r3, #0
10008d60:	4a8c      	ldr	r2, [pc, #560]	; (10008f94 <main+0x17a0>)
10008d62:	4b8a      	ldr	r3, [pc, #552]	; (10008f8c <main+0x1798>)
10008d64:	1c10      	adds	r0, r2, #0
10008d66:	1c19      	adds	r1, r3, #0
10008d68:	1c22      	adds	r2, r4, #0
10008d6a:	f7fb f85b 	bl	10003e24 <UART_Transmit>
													    ReadBuffer2[12] = dimNorm2_Ww / 0x100;
													    ReadBuffer2[13] = dimNorm2_Ww & 0xff;
													    ReadBuffer2[14] = dimNorm2_Cw / 0x100;;
													    ReadBuffer2[15] = dimNorm2_Cw & 0xff;

												   if (resultB2 > min_EEP_Voltage_Uin)
10008d6e:	e01b      	b.n	10008da8 <main+0x15b4>
													 new_data[9]=tester2;
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
												    }
												}
												 else {
												new_data_HalloBack();
10008d70:	f7f8 fd88 	bl	10001884 <new_data_HalloBack>
												new_data[6]='e';
10008d74:	4b85      	ldr	r3, [pc, #532]	; (10008f8c <main+0x1798>)
10008d76:	2265      	movs	r2, #101	; 0x65
10008d78:	719a      	strb	r2, [r3, #6]
												new_data[7]=28;
10008d7a:	4b84      	ldr	r3, [pc, #528]	; (10008f8c <main+0x1798>)
10008d7c:	221c      	movs	r2, #28
10008d7e:	71da      	strb	r2, [r3, #7]
												new_data[8]=0;
10008d80:	4b82      	ldr	r3, [pc, #520]	; (10008f8c <main+0x1798>)
10008d82:	2200      	movs	r2, #0
10008d84:	721a      	strb	r2, [r3, #8]
												new_data[9]=tester2;
10008d86:	4b80      	ldr	r3, [pc, #512]	; (10008f88 <main+0x1794>)
10008d88:	881b      	ldrh	r3, [r3, #0]
10008d8a:	b2da      	uxtb	r2, r3
10008d8c:	4b7f      	ldr	r3, [pc, #508]	; (10008f8c <main+0x1798>)
10008d8e:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008d90:	4b7f      	ldr	r3, [pc, #508]	; (10008f90 <main+0x179c>)
10008d92:	781b      	ldrb	r3, [r3, #0]
10008d94:	1c1c      	adds	r4, r3, #0
10008d96:	4a7f      	ldr	r2, [pc, #508]	; (10008f94 <main+0x17a0>)
10008d98:	4b7c      	ldr	r3, [pc, #496]	; (10008f8c <main+0x1798>)
10008d9a:	1c10      	adds	r0, r2, #0
10008d9c:	1c19      	adds	r1, r3, #0
10008d9e:	1c22      	adds	r2, r4, #0
10008da0:	f7fb f840 	bl	10003e24 <UART_Transmit>
												 }
												break;
10008da4:	f000 fbec 	bl	10009580 <main+0x1d8c>
10008da8:	f000 fbea 	bl	10009580 <main+0x1d8c>


				case command_neuNodeConResi:
												if (command_nr == 0x30 &&  Ser_NrH  == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
10008dac:	4b7a      	ldr	r3, [pc, #488]	; (10008f98 <main+0x17a4>)
10008dae:	881b      	ldrh	r3, [r3, #0]
10008db0:	2b30      	cmp	r3, #48	; 0x30
10008db2:	d141      	bne.n	10008e38 <main+0x1644>
10008db4:	4b66      	ldr	r3, [pc, #408]	; (10008f50 <main+0x175c>)
10008db6:	881b      	ldrh	r3, [r3, #0]
10008db8:	1c19      	adds	r1, r3, #0
10008dba:	4b66      	ldr	r3, [pc, #408]	; (10008f54 <main+0x1760>)
10008dbc:	785b      	ldrb	r3, [r3, #1]
10008dbe:	021b      	lsls	r3, r3, #8
10008dc0:	4a64      	ldr	r2, [pc, #400]	; (10008f54 <main+0x1760>)
10008dc2:	7892      	ldrb	r2, [r2, #2]
10008dc4:	189b      	adds	r3, r3, r2
10008dc6:	4299      	cmp	r1, r3
10008dc8:	d136      	bne.n	10008e38 <main+0x1644>
10008dca:	4b63      	ldr	r3, [pc, #396]	; (10008f58 <main+0x1764>)
10008dcc:	881b      	ldrh	r3, [r3, #0]
10008dce:	1c19      	adds	r1, r3, #0
10008dd0:	4b60      	ldr	r3, [pc, #384]	; (10008f54 <main+0x1760>)
10008dd2:	78db      	ldrb	r3, [r3, #3]
10008dd4:	021b      	lsls	r3, r3, #8
10008dd6:	4a5f      	ldr	r2, [pc, #380]	; (10008f54 <main+0x1760>)
10008dd8:	7912      	ldrb	r2, [r2, #4]
10008dda:	189b      	adds	r3, r3, r2
10008ddc:	4299      	cmp	r1, r3
10008dde:	d12b      	bne.n	10008e38 <main+0x1644>
				                                { command_nr = command_nr + 0x17;
10008de0:	4b6d      	ldr	r3, [pc, #436]	; (10008f98 <main+0x17a4>)
10008de2:	881b      	ldrh	r3, [r3, #0]
10008de4:	3317      	adds	r3, #23
10008de6:	b29a      	uxth	r2, r3
10008de8:	4b6b      	ldr	r3, [pc, #428]	; (10008f98 <main+0x17a4>)
10008dea:	801a      	strh	r2, [r3, #0]
				                                node_id = node_id_neu;
10008dec:	4b6b      	ldr	r3, [pc, #428]	; (10008f9c <main+0x17a8>)
10008dee:	781a      	ldrb	r2, [r3, #0]
10008df0:	4b6b      	ldr	r3, [pc, #428]	; (10008fa0 <main+0x17ac>)
10008df2:	701a      	strb	r2, [r3, #0]

												new_data_HalloBack();
10008df4:	f7f8 fd46 	bl	10001884 <new_data_HalloBack>
												 new_data[6]='i';
10008df8:	4b64      	ldr	r3, [pc, #400]	; (10008f8c <main+0x1798>)
10008dfa:	2269      	movs	r2, #105	; 0x69
10008dfc:	719a      	strb	r2, [r3, #6]
												 new_data[7]= command_nr;
10008dfe:	4b66      	ldr	r3, [pc, #408]	; (10008f98 <main+0x17a4>)
10008e00:	881b      	ldrh	r3, [r3, #0]
10008e02:	b2da      	uxtb	r2, r3
10008e04:	4b61      	ldr	r3, [pc, #388]	; (10008f8c <main+0x1798>)
10008e06:	71da      	strb	r2, [r3, #7]
												 new_data[8]= Ser_NrL  / 0x100 ;
10008e08:	4b53      	ldr	r3, [pc, #332]	; (10008f58 <main+0x1764>)
10008e0a:	881b      	ldrh	r3, [r3, #0]
10008e0c:	0a1b      	lsrs	r3, r3, #8
10008e0e:	b29b      	uxth	r3, r3
10008e10:	b2da      	uxtb	r2, r3
10008e12:	4b5e      	ldr	r3, [pc, #376]	; (10008f8c <main+0x1798>)
10008e14:	721a      	strb	r2, [r3, #8]
												 new_data[9]= Ser_NrL  & 0xff ;
10008e16:	4b50      	ldr	r3, [pc, #320]	; (10008f58 <main+0x1764>)
10008e18:	881b      	ldrh	r3, [r3, #0]
10008e1a:	b2da      	uxtb	r2, r3
10008e1c:	4b5b      	ldr	r3, [pc, #364]	; (10008f8c <main+0x1798>)
10008e1e:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008e20:	4b5b      	ldr	r3, [pc, #364]	; (10008f90 <main+0x179c>)
10008e22:	781b      	ldrb	r3, [r3, #0]
10008e24:	1c1c      	adds	r4, r3, #0
10008e26:	4a5b      	ldr	r2, [pc, #364]	; (10008f94 <main+0x17a0>)
10008e28:	4b58      	ldr	r3, [pc, #352]	; (10008f8c <main+0x1798>)
10008e2a:	1c10      	adds	r0, r2, #0
10008e2c:	1c19      	adds	r1, r3, #0
10008e2e:	1c22      	adds	r2, r4, #0
10008e30:	f7fa fff8 	bl	10003e24 <UART_Transmit>
												 new_data[7]= command_nr;
												 new_data[8]= Ser_NrL  / 0x100 ;
												 new_data[9]= Ser_NrL  & 0xff ;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
											break;
10008e34:	f000 fba4 	bl	10009580 <main+0x1d8c>
												 new_data[9]= Ser_NrL  & 0xff ;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
				                                }
												else
												{
												 new_data_HalloBack();
10008e38:	f7f8 fd24 	bl	10001884 <new_data_HalloBack>
												 new_data[6]='e';
10008e3c:	4b53      	ldr	r3, [pc, #332]	; (10008f8c <main+0x1798>)
10008e3e:	2265      	movs	r2, #101	; 0x65
10008e40:	719a      	strb	r2, [r3, #6]
												 new_data[7]= command_nr;
10008e42:	4b55      	ldr	r3, [pc, #340]	; (10008f98 <main+0x17a4>)
10008e44:	881b      	ldrh	r3, [r3, #0]
10008e46:	b2da      	uxtb	r2, r3
10008e48:	4b50      	ldr	r3, [pc, #320]	; (10008f8c <main+0x1798>)
10008e4a:	71da      	strb	r2, [r3, #7]
												 new_data[8]= Ser_NrL  / 0x100 ;
10008e4c:	4b42      	ldr	r3, [pc, #264]	; (10008f58 <main+0x1764>)
10008e4e:	881b      	ldrh	r3, [r3, #0]
10008e50:	0a1b      	lsrs	r3, r3, #8
10008e52:	b29b      	uxth	r3, r3
10008e54:	b2da      	uxtb	r2, r3
10008e56:	4b4d      	ldr	r3, [pc, #308]	; (10008f8c <main+0x1798>)
10008e58:	721a      	strb	r2, [r3, #8]
												 new_data[9]= Ser_NrL  & 0xff ;
10008e5a:	4b3f      	ldr	r3, [pc, #252]	; (10008f58 <main+0x1764>)
10008e5c:	881b      	ldrh	r3, [r3, #0]
10008e5e:	b2da      	uxtb	r2, r3
10008e60:	4b4a      	ldr	r3, [pc, #296]	; (10008f8c <main+0x1798>)
10008e62:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008e64:	4b4a      	ldr	r3, [pc, #296]	; (10008f90 <main+0x179c>)
10008e66:	781b      	ldrb	r3, [r3, #0]
10008e68:	1c1c      	adds	r4, r3, #0
10008e6a:	4a4a      	ldr	r2, [pc, #296]	; (10008f94 <main+0x17a0>)
10008e6c:	4b47      	ldr	r3, [pc, #284]	; (10008f8c <main+0x1798>)
10008e6e:	1c10      	adds	r0, r2, #0
10008e70:	1c19      	adds	r1, r3, #0
10008e72:	1c22      	adds	r2, r4, #0
10008e74:	f7fa ffd6 	bl	10003e24 <UART_Transmit>
												}
											break;
10008e78:	e382      	b.n	10009580 <main+0x1d8c>
				case command_neuSerNrConResi:
												if (command_nr == 0x45 &&  Ser_NrH  == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
10008e7a:	4b47      	ldr	r3, [pc, #284]	; (10008f98 <main+0x17a4>)
10008e7c:	881b      	ldrh	r3, [r3, #0]
10008e7e:	2b45      	cmp	r3, #69	; 0x45
10008e80:	d144      	bne.n	10008f0c <main+0x1718>
10008e82:	4b33      	ldr	r3, [pc, #204]	; (10008f50 <main+0x175c>)
10008e84:	881b      	ldrh	r3, [r3, #0]
10008e86:	1c19      	adds	r1, r3, #0
10008e88:	4b32      	ldr	r3, [pc, #200]	; (10008f54 <main+0x1760>)
10008e8a:	785b      	ldrb	r3, [r3, #1]
10008e8c:	021b      	lsls	r3, r3, #8
10008e8e:	4a31      	ldr	r2, [pc, #196]	; (10008f54 <main+0x1760>)
10008e90:	7892      	ldrb	r2, [r2, #2]
10008e92:	189b      	adds	r3, r3, r2
10008e94:	4299      	cmp	r1, r3
10008e96:	d139      	bne.n	10008f0c <main+0x1718>
10008e98:	4b2f      	ldr	r3, [pc, #188]	; (10008f58 <main+0x1764>)
10008e9a:	881b      	ldrh	r3, [r3, #0]
10008e9c:	1c19      	adds	r1, r3, #0
10008e9e:	4b2d      	ldr	r3, [pc, #180]	; (10008f54 <main+0x1760>)
10008ea0:	78db      	ldrb	r3, [r3, #3]
10008ea2:	021b      	lsls	r3, r3, #8
10008ea4:	4a2b      	ldr	r2, [pc, #172]	; (10008f54 <main+0x1760>)
10008ea6:	7912      	ldrb	r2, [r2, #4]
10008ea8:	189b      	adds	r3, r3, r2
10008eaa:	4299      	cmp	r1, r3
10008eac:	d12e      	bne.n	10008f0c <main+0x1718>
				                                { command_nr = command_nr + 0x21;
10008eae:	4b3a      	ldr	r3, [pc, #232]	; (10008f98 <main+0x17a4>)
10008eb0:	881b      	ldrh	r3, [r3, #0]
10008eb2:	3321      	adds	r3, #33	; 0x21
10008eb4:	b29a      	uxth	r2, r3
10008eb6:	4b38      	ldr	r3, [pc, #224]	; (10008f98 <main+0x17a4>)
10008eb8:	801a      	strh	r2, [r3, #0]
				                                Ser_NrH=neu_Ser_NrH;
10008eba:	4b3a      	ldr	r3, [pc, #232]	; (10008fa4 <main+0x17b0>)
10008ebc:	881a      	ldrh	r2, [r3, #0]
10008ebe:	4b24      	ldr	r3, [pc, #144]	; (10008f50 <main+0x175c>)
10008ec0:	801a      	strh	r2, [r3, #0]
				                                Ser_NrL=neu_Ser_NrL;
10008ec2:	4b39      	ldr	r3, [pc, #228]	; (10008fa8 <main+0x17b4>)
10008ec4:	881a      	ldrh	r2, [r3, #0]
10008ec6:	4b24      	ldr	r3, [pc, #144]	; (10008f58 <main+0x1764>)
10008ec8:	801a      	strh	r2, [r3, #0]

												new_data_HalloBack();
10008eca:	f7f8 fcdb 	bl	10001884 <new_data_HalloBack>
												 new_data[6]='i';
10008ece:	4b2f      	ldr	r3, [pc, #188]	; (10008f8c <main+0x1798>)
10008ed0:	2269      	movs	r2, #105	; 0x69
10008ed2:	719a      	strb	r2, [r3, #6]
												 new_data[7]= command_nr;
10008ed4:	4b30      	ldr	r3, [pc, #192]	; (10008f98 <main+0x17a4>)
10008ed6:	881b      	ldrh	r3, [r3, #0]
10008ed8:	b2da      	uxtb	r2, r3
10008eda:	4b2c      	ldr	r3, [pc, #176]	; (10008f8c <main+0x1798>)
10008edc:	71da      	strb	r2, [r3, #7]
												 new_data[8]= Ser_NrL  / 0x100 ;
10008ede:	4b1e      	ldr	r3, [pc, #120]	; (10008f58 <main+0x1764>)
10008ee0:	881b      	ldrh	r3, [r3, #0]
10008ee2:	0a1b      	lsrs	r3, r3, #8
10008ee4:	b29b      	uxth	r3, r3
10008ee6:	b2da      	uxtb	r2, r3
10008ee8:	4b28      	ldr	r3, [pc, #160]	; (10008f8c <main+0x1798>)
10008eea:	721a      	strb	r2, [r3, #8]
												 new_data[9]= Ser_NrL  & 0xff ;
10008eec:	4b1a      	ldr	r3, [pc, #104]	; (10008f58 <main+0x1764>)
10008eee:	881b      	ldrh	r3, [r3, #0]
10008ef0:	b2da      	uxtb	r2, r3
10008ef2:	4b26      	ldr	r3, [pc, #152]	; (10008f8c <main+0x1798>)
10008ef4:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008ef6:	4b26      	ldr	r3, [pc, #152]	; (10008f90 <main+0x179c>)
10008ef8:	781b      	ldrb	r3, [r3, #0]
10008efa:	1c1c      	adds	r4, r3, #0
10008efc:	4a25      	ldr	r2, [pc, #148]	; (10008f94 <main+0x17a0>)
10008efe:	4b23      	ldr	r3, [pc, #140]	; (10008f8c <main+0x1798>)
10008f00:	1c10      	adds	r0, r2, #0
10008f02:	1c19      	adds	r1, r3, #0
10008f04:	1c22      	adds	r2, r4, #0
10008f06:	f7fa ff8d 	bl	10003e24 <UART_Transmit>
												 new_data[7]= command_nr;
												 new_data[8]= Ser_NrL  / 0x100 ;
												 new_data[9]= Ser_NrL  & 0xff ;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
												}
											break;
10008f0a:	e339      	b.n	10009580 <main+0x1d8c>
												 new_data[9]= Ser_NrL  & 0xff ;
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
				                                }
												else
												{
												 new_data_HalloBack();
10008f0c:	f7f8 fcba 	bl	10001884 <new_data_HalloBack>
												 new_data[6]='e';
10008f10:	4b1e      	ldr	r3, [pc, #120]	; (10008f8c <main+0x1798>)
10008f12:	2265      	movs	r2, #101	; 0x65
10008f14:	719a      	strb	r2, [r3, #6]
												 new_data[7]= command_nr;
10008f16:	4b20      	ldr	r3, [pc, #128]	; (10008f98 <main+0x17a4>)
10008f18:	881b      	ldrh	r3, [r3, #0]
10008f1a:	b2da      	uxtb	r2, r3
10008f1c:	4b1b      	ldr	r3, [pc, #108]	; (10008f8c <main+0x1798>)
10008f1e:	71da      	strb	r2, [r3, #7]
												 new_data[8]= Ser_NrL  / 0x100 ;
10008f20:	4b0d      	ldr	r3, [pc, #52]	; (10008f58 <main+0x1764>)
10008f22:	881b      	ldrh	r3, [r3, #0]
10008f24:	0a1b      	lsrs	r3, r3, #8
10008f26:	b29b      	uxth	r3, r3
10008f28:	b2da      	uxtb	r2, r3
10008f2a:	4b18      	ldr	r3, [pc, #96]	; (10008f8c <main+0x1798>)
10008f2c:	721a      	strb	r2, [r3, #8]
												 new_data[9]= Ser_NrL  & 0xff ;
10008f2e:	4b0a      	ldr	r3, [pc, #40]	; (10008f58 <main+0x1764>)
10008f30:	881b      	ldrh	r3, [r3, #0]
10008f32:	b2da      	uxtb	r2, r3
10008f34:	4b15      	ldr	r3, [pc, #84]	; (10008f8c <main+0x1798>)
10008f36:	725a      	strb	r2, [r3, #9]
												UART_Transmit(&UART_1, new_data,transmit_buf_size);
10008f38:	4b15      	ldr	r3, [pc, #84]	; (10008f90 <main+0x179c>)
10008f3a:	781b      	ldrb	r3, [r3, #0]
10008f3c:	1c1c      	adds	r4, r3, #0
10008f3e:	4a15      	ldr	r2, [pc, #84]	; (10008f94 <main+0x17a0>)
10008f40:	4b12      	ldr	r3, [pc, #72]	; (10008f8c <main+0x1798>)
10008f42:	1c10      	adds	r0, r2, #0
10008f44:	1c19      	adds	r1, r3, #0
10008f46:	1c22      	adds	r2, r4, #0
10008f48:	f7fa ff6c 	bl	10003e24 <UART_Transmit>
												}
											break;
10008f4c:	e318      	b.n	10009580 <main+0x1d8c>
10008f4e:	46c0      	nop			; (mov r8, r8)
10008f50:	20000830 	.word	0x20000830
10008f54:	20000824 	.word	0x20000824
10008f58:	200008a8 	.word	0x200008a8
10008f5c:	2000085a 	.word	0x2000085a
10008f60:	20000848 	.word	0x20000848
10008f64:	20000818 	.word	0x20000818
10008f68:	200007f4 	.word	0x200007f4
10008f6c:	20000900 	.word	0x20000900
10008f70:	20000864 	.word	0x20000864
10008f74:	200008a4 	.word	0x200008a4
10008f78:	200008b2 	.word	0x200008b2
10008f7c:	200007c8 	.word	0x200007c8
10008f80:	20000970 	.word	0x20000970
10008f84:	200007fe 	.word	0x200007fe
10008f88:	20000c34 	.word	0x20000c34
10008f8c:	20000804 	.word	0x20000804
10008f90:	20000550 	.word	0x20000550
10008f94:	20000560 	.word	0x20000560
10008f98:	20000c2e 	.word	0x20000c2e
10008f9c:	200007ca 	.word	0x200007ca
10008fa0:	20000836 	.word	0x20000836
10008fa4:	20000816 	.word	0x20000816
10008fa8:	20000904 	.word	0x20000904
				case command_eprommInitResi :
										if (node_id_neu == 254 &&  Ser_NrH == 0x7b7a && Ser_NrH  == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL == 0x5859 && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
10008fac:	4bda      	ldr	r3, [pc, #872]	; (10009318 <main+0x1b24>)
10008fae:	781b      	ldrb	r3, [r3, #0]
10008fb0:	2bfe      	cmp	r3, #254	; 0xfe
10008fb2:	d000      	beq.n	10008fb6 <main+0x17c2>
10008fb4:	e2c9      	b.n	1000954a <main+0x1d56>
10008fb6:	4bd9      	ldr	r3, [pc, #868]	; (1000931c <main+0x1b28>)
10008fb8:	881b      	ldrh	r3, [r3, #0]
10008fba:	4ad9      	ldr	r2, [pc, #868]	; (10009320 <main+0x1b2c>)
10008fbc:	4293      	cmp	r3, r2
10008fbe:	d000      	beq.n	10008fc2 <main+0x17ce>
10008fc0:	e2c3      	b.n	1000954a <main+0x1d56>
10008fc2:	4bd6      	ldr	r3, [pc, #856]	; (1000931c <main+0x1b28>)
10008fc4:	881b      	ldrh	r3, [r3, #0]
10008fc6:	1c19      	adds	r1, r3, #0
10008fc8:	4bd6      	ldr	r3, [pc, #856]	; (10009324 <main+0x1b30>)
10008fca:	785b      	ldrb	r3, [r3, #1]
10008fcc:	021b      	lsls	r3, r3, #8
10008fce:	4ad5      	ldr	r2, [pc, #852]	; (10009324 <main+0x1b30>)
10008fd0:	7892      	ldrb	r2, [r2, #2]
10008fd2:	189b      	adds	r3, r3, r2
10008fd4:	4299      	cmp	r1, r3
10008fd6:	d000      	beq.n	10008fda <main+0x17e6>
10008fd8:	e2b7      	b.n	1000954a <main+0x1d56>
10008fda:	4bd3      	ldr	r3, [pc, #844]	; (10009328 <main+0x1b34>)
10008fdc:	881b      	ldrh	r3, [r3, #0]
10008fde:	4ad3      	ldr	r2, [pc, #844]	; (1000932c <main+0x1b38>)
10008fe0:	4293      	cmp	r3, r2
10008fe2:	d000      	beq.n	10008fe6 <main+0x17f2>
10008fe4:	e2b1      	b.n	1000954a <main+0x1d56>
10008fe6:	4bd0      	ldr	r3, [pc, #832]	; (10009328 <main+0x1b34>)
10008fe8:	881b      	ldrh	r3, [r3, #0]
10008fea:	1c19      	adds	r1, r3, #0
10008fec:	4bcd      	ldr	r3, [pc, #820]	; (10009324 <main+0x1b30>)
10008fee:	78db      	ldrb	r3, [r3, #3]
10008ff0:	021b      	lsls	r3, r3, #8
10008ff2:	4acc      	ldr	r2, [pc, #816]	; (10009324 <main+0x1b30>)
10008ff4:	7912      	ldrb	r2, [r2, #4]
10008ff6:	189b      	adds	r3, r3, r2
10008ff8:	4299      	cmp	r1, r3
10008ffa:	d000      	beq.n	10008ffe <main+0x180a>
10008ffc:	e2a5      	b.n	1000954a <main+0x1d56>
										{
											 if(Dstatus == DAVE_STATUS_SUCCESS)
10008ffe:	4bcc      	ldr	r3, [pc, #816]	; (10009330 <main+0x1b3c>)
10009000:	781b      	ldrb	r3, [r3, #0]
10009002:	2b00      	cmp	r3, #0
10009004:	d000      	beq.n	10009008 <main+0x1814>
10009006:	e286      	b.n	10009516 <main+0x1d22>
											 {
												 if (resultB2 > min_EEP_Voltage_Uin)
10009008:	4bca      	ldr	r3, [pc, #808]	; (10009334 <main+0x1b40>)
1000900a:	881a      	ldrh	r2, [r3, #0]
1000900c:	23ba      	movs	r3, #186	; 0xba
1000900e:	011b      	lsls	r3, r3, #4
10009010:	429a      	cmp	r2, r3
10009012:	d800      	bhi.n	10009016 <main+0x1822>
10009014:	e266      	b.n	100094e4 <main+0x1cf0>
												 {
											//    	XMC_FLASH_ErasePages( (uint32_t*)E_EEPROM_XMC1_FLASH_BANK0_BASE,16);
													clearEpromBuffer();
10009016:	f7f8 fdfb 	bl	10001c10 <clearEpromBuffer>
													sysiniValueB1();
1000901a:	f7f8 ffef 	bl	10001ffc <sysiniValueB1>

													 ReadBuffer1[0]= 	Ser_NrH  / 0x100; //highbyte
1000901e:	4bbf      	ldr	r3, [pc, #764]	; (1000931c <main+0x1b28>)
10009020:	881b      	ldrh	r3, [r3, #0]
10009022:	0a1b      	lsrs	r3, r3, #8
10009024:	b29b      	uxth	r3, r3
10009026:	b2da      	uxtb	r2, r3
10009028:	4bc3      	ldr	r3, [pc, #780]	; (10009338 <main+0x1b44>)
1000902a:	701a      	strb	r2, [r3, #0]
													 ReadBuffer1[1]= 	Ser_NrH  & 0xff; //lowbyte
1000902c:	4bbb      	ldr	r3, [pc, #748]	; (1000931c <main+0x1b28>)
1000902e:	881b      	ldrh	r3, [r3, #0]
10009030:	b2da      	uxtb	r2, r3
10009032:	4bc1      	ldr	r3, [pc, #772]	; (10009338 <main+0x1b44>)
10009034:	705a      	strb	r2, [r3, #1]
													 ReadBuffer1[2]= 	Ser_NrL  / 0x100; //highbyte
10009036:	4bbc      	ldr	r3, [pc, #752]	; (10009328 <main+0x1b34>)
10009038:	881b      	ldrh	r3, [r3, #0]
1000903a:	0a1b      	lsrs	r3, r3, #8
1000903c:	b29b      	uxth	r3, r3
1000903e:	b2da      	uxtb	r2, r3
10009040:	4bbd      	ldr	r3, [pc, #756]	; (10009338 <main+0x1b44>)
10009042:	709a      	strb	r2, [r3, #2]
													 ReadBuffer1[3]= 	Ser_NrL  & 0xff; //lowbyte
10009044:	4bb8      	ldr	r3, [pc, #736]	; (10009328 <main+0x1b34>)
10009046:	881b      	ldrh	r3, [r3, #0]
10009048:	b2da      	uxtb	r2, r3
1000904a:	4bbb      	ldr	r3, [pc, #748]	; (10009338 <main+0x1b44>)
1000904c:	70da      	strb	r2, [r3, #3]
													 ReadBuffer1[4]= 	Hard_Vers  / 0x100; //highbyte
1000904e:	4bbb      	ldr	r3, [pc, #748]	; (1000933c <main+0x1b48>)
10009050:	881b      	ldrh	r3, [r3, #0]
10009052:	0a1b      	lsrs	r3, r3, #8
10009054:	b29b      	uxth	r3, r3
10009056:	b2da      	uxtb	r2, r3
10009058:	4bb7      	ldr	r3, [pc, #732]	; (10009338 <main+0x1b44>)
1000905a:	711a      	strb	r2, [r3, #4]
													 ReadBuffer1[5]= 	Hard_Vers  & 0xff; //lowbyte
1000905c:	4bb7      	ldr	r3, [pc, #732]	; (1000933c <main+0x1b48>)
1000905e:	881b      	ldrh	r3, [r3, #0]
10009060:	b2da      	uxtb	r2, r3
10009062:	4bb5      	ldr	r3, [pc, #724]	; (10009338 <main+0x1b44>)
10009064:	715a      	strb	r2, [r3, #5]
													 ReadBuffer1[6]= 	Soft_Vers  / 0x100; //highbyte
10009066:	4bb6      	ldr	r3, [pc, #728]	; (10009340 <main+0x1b4c>)
10009068:	881b      	ldrh	r3, [r3, #0]
1000906a:	0a1b      	lsrs	r3, r3, #8
1000906c:	b29b      	uxth	r3, r3
1000906e:	b2da      	uxtb	r2, r3
10009070:	4bb1      	ldr	r3, [pc, #708]	; (10009338 <main+0x1b44>)
10009072:	719a      	strb	r2, [r3, #6]
													 ReadBuffer1[7]= 	Soft_Vers  & 0xff; //lowbyte
10009074:	4bb2      	ldr	r3, [pc, #712]	; (10009340 <main+0x1b4c>)
10009076:	881b      	ldrh	r3, [r3, #0]
10009078:	b2da      	uxtb	r2, r3
1000907a:	4baf      	ldr	r3, [pc, #700]	; (10009338 <main+0x1b44>)
1000907c:	71da      	strb	r2, [r3, #7]
													 ReadBuffer1[8]= 	GEH_Vers  / 0x100; //highbyte
1000907e:	4bb1      	ldr	r3, [pc, #708]	; (10009344 <main+0x1b50>)
10009080:	881b      	ldrh	r3, [r3, #0]
10009082:	0a1b      	lsrs	r3, r3, #8
10009084:	b29b      	uxth	r3, r3
10009086:	b2da      	uxtb	r2, r3
10009088:	4bab      	ldr	r3, [pc, #684]	; (10009338 <main+0x1b44>)
1000908a:	721a      	strb	r2, [r3, #8]
													 ReadBuffer1[9]= 	GEH_Vers  & 0xff; //lowbyte
1000908c:	4bad      	ldr	r3, [pc, #692]	; (10009344 <main+0x1b50>)
1000908e:	881b      	ldrh	r3, [r3, #0]
10009090:	b2da      	uxtb	r2, r3
10009092:	4ba9      	ldr	r3, [pc, #676]	; (10009338 <main+0x1b44>)
10009094:	725a      	strb	r2, [r3, #9]
													 ReadBuffer1[10]= 	Mon_Vers  / 0x100; //highbyte
10009096:	4bac      	ldr	r3, [pc, #688]	; (10009348 <main+0x1b54>)
10009098:	881b      	ldrh	r3, [r3, #0]
1000909a:	0a1b      	lsrs	r3, r3, #8
1000909c:	b29b      	uxth	r3, r3
1000909e:	b2da      	uxtb	r2, r3
100090a0:	4ba5      	ldr	r3, [pc, #660]	; (10009338 <main+0x1b44>)
100090a2:	729a      	strb	r2, [r3, #10]
													 ReadBuffer1[11]= 	Mon_Vers  & 0xff; //lowbyte
100090a4:	4ba8      	ldr	r3, [pc, #672]	; (10009348 <main+0x1b54>)
100090a6:	881b      	ldrh	r3, [r3, #0]
100090a8:	b2da      	uxtb	r2, r3
100090aa:	4ba3      	ldr	r3, [pc, #652]	; (10009338 <main+0x1b44>)
100090ac:	72da      	strb	r2, [r3, #11]
													 ReadBuffer1[12]= 	LED_WW_Vers  / 0x100; //highbyte
100090ae:	4ba7      	ldr	r3, [pc, #668]	; (1000934c <main+0x1b58>)
100090b0:	881b      	ldrh	r3, [r3, #0]
100090b2:	0a1b      	lsrs	r3, r3, #8
100090b4:	b29b      	uxth	r3, r3
100090b6:	b2da      	uxtb	r2, r3
100090b8:	4b9f      	ldr	r3, [pc, #636]	; (10009338 <main+0x1b44>)
100090ba:	731a      	strb	r2, [r3, #12]
													 ReadBuffer1[13]= 	LED_WW_Vers  & 0xff; //lowbyte
100090bc:	4ba3      	ldr	r3, [pc, #652]	; (1000934c <main+0x1b58>)
100090be:	881b      	ldrh	r3, [r3, #0]
100090c0:	b2da      	uxtb	r2, r3
100090c2:	4b9d      	ldr	r3, [pc, #628]	; (10009338 <main+0x1b44>)
100090c4:	735a      	strb	r2, [r3, #13]
													 ReadBuffer1[14]= 	LED_CW_Vers  / 0x100; //highbyte
100090c6:	4ba2      	ldr	r3, [pc, #648]	; (10009350 <main+0x1b5c>)
100090c8:	881b      	ldrh	r3, [r3, #0]
100090ca:	0a1b      	lsrs	r3, r3, #8
100090cc:	b29b      	uxth	r3, r3
100090ce:	b2da      	uxtb	r2, r3
100090d0:	4b99      	ldr	r3, [pc, #612]	; (10009338 <main+0x1b44>)
100090d2:	739a      	strb	r2, [r3, #14]
													 ReadBuffer1[15]= 	LED_CW_Vers  & 0xff; //lowbyte
100090d4:	4b9e      	ldr	r3, [pc, #632]	; (10009350 <main+0x1b5c>)
100090d6:	881b      	ldrh	r3, [r3, #0]
100090d8:	b2da      	uxtb	r2, r3
100090da:	4b97      	ldr	r3, [pc, #604]	; (10009338 <main+0x1b44>)
100090dc:	73da      	strb	r2, [r3, #15]

													 if (resultB2 > min_EEP_Voltage_Uin)
100090de:	4b95      	ldr	r3, [pc, #596]	; (10009334 <main+0x1b40>)
100090e0:	881a      	ldrh	r2, [r3, #0]
100090e2:	23ba      	movs	r3, #186	; 0xba
100090e4:	011b      	lsls	r3, r3, #4
100090e6:	429a      	cmp	r2, r3
100090e8:	d905      	bls.n	100090f6 <main+0x1902>
													 {	tester1 = writeSernr_B1_EEprom();
100090ea:	f7f8 fe79 	bl	10001de0 <writeSernr_B1_EEprom>
100090ee:	1c03      	adds	r3, r0, #0
100090f0:	b29a      	uxth	r2, r3
100090f2:	4b98      	ldr	r3, [pc, #608]	; (10009354 <main+0x1b60>)
100090f4:	801a      	strh	r2, [r3, #0]
													 }
														sysiniValueB2();
100090f6:	f7f8 ffc1 	bl	1000207c <sysiniValueB2>
													 ReadBuffer2[0]= 	node_id_alt; //highbyte
100090fa:	4b97      	ldr	r3, [pc, #604]	; (10009358 <main+0x1b64>)
100090fc:	781a      	ldrb	r2, [r3, #0]
100090fe:	4b97      	ldr	r3, [pc, #604]	; (1000935c <main+0x1b68>)
10009100:	701a      	strb	r2, [r3, #0]
													 ReadBuffer2[1]= 	node_id; //lowbyte
10009102:	4b97      	ldr	r3, [pc, #604]	; (10009360 <main+0x1b6c>)
10009104:	781a      	ldrb	r2, [r3, #0]
10009106:	4b95      	ldr	r3, [pc, #596]	; (1000935c <main+0x1b68>)
10009108:	705a      	strb	r2, [r3, #1]
													 ReadBuffer2[2]= 	node_id_16bit  / 0x100; //highbyte
1000910a:	4b96      	ldr	r3, [pc, #600]	; (10009364 <main+0x1b70>)
1000910c:	881b      	ldrh	r3, [r3, #0]
1000910e:	0a1b      	lsrs	r3, r3, #8
10009110:	b29b      	uxth	r3, r3
10009112:	b2da      	uxtb	r2, r3
10009114:	4b91      	ldr	r3, [pc, #580]	; (1000935c <main+0x1b68>)
10009116:	709a      	strb	r2, [r3, #2]
													 ReadBuffer2[3]= 	node_id_16bit   & 0xff; //highbyte
10009118:	4b92      	ldr	r3, [pc, #584]	; (10009364 <main+0x1b70>)
1000911a:	881b      	ldrh	r3, [r3, #0]
1000911c:	b2da      	uxtb	r2, r3
1000911e:	4b8f      	ldr	r3, [pc, #572]	; (1000935c <main+0x1b68>)
10009120:	70da      	strb	r2, [r3, #3]
													 ReadBuffer2[4]= 	val_Pow_Nom  / 0x100; //highbyte
10009122:	4b91      	ldr	r3, [pc, #580]	; (10009368 <main+0x1b74>)
10009124:	881b      	ldrh	r3, [r3, #0]
10009126:	0a1b      	lsrs	r3, r3, #8
10009128:	b29b      	uxth	r3, r3
1000912a:	b2da      	uxtb	r2, r3
1000912c:	4b8b      	ldr	r3, [pc, #556]	; (1000935c <main+0x1b68>)
1000912e:	711a      	strb	r2, [r3, #4]
													 ReadBuffer2[5]= 	val_Pow_Nom  & 0xff; //lowbyte
10009130:	4b8d      	ldr	r3, [pc, #564]	; (10009368 <main+0x1b74>)
10009132:	881b      	ldrh	r3, [r3, #0]
10009134:	b2da      	uxtb	r2, r3
10009136:	4b89      	ldr	r3, [pc, #548]	; (1000935c <main+0x1b68>)
10009138:	715a      	strb	r2, [r3, #5]
													 ReadBuffer2[6]= 	val_Pow_max  / 0x100; //highbyte
1000913a:	4b8c      	ldr	r3, [pc, #560]	; (1000936c <main+0x1b78>)
1000913c:	881b      	ldrh	r3, [r3, #0]
1000913e:	0a1b      	lsrs	r3, r3, #8
10009140:	b29b      	uxth	r3, r3
10009142:	b2da      	uxtb	r2, r3
10009144:	4b85      	ldr	r3, [pc, #532]	; (1000935c <main+0x1b68>)
10009146:	719a      	strb	r2, [r3, #6]
													 ReadBuffer2[7]= 	val_Pow_max  & 0xff; //lowbyte
10009148:	4b88      	ldr	r3, [pc, #544]	; (1000936c <main+0x1b78>)
1000914a:	881b      	ldrh	r3, [r3, #0]
1000914c:	b2da      	uxtb	r2, r3
1000914e:	4b83      	ldr	r3, [pc, #524]	; (1000935c <main+0x1b68>)
10009150:	71da      	strb	r2, [r3, #7]
													 ReadBuffer2[8]= 	val_Spannung_min / 0x100; //highbyte
10009152:	4b87      	ldr	r3, [pc, #540]	; (10009370 <main+0x1b7c>)
10009154:	881b      	ldrh	r3, [r3, #0]
10009156:	0a1b      	lsrs	r3, r3, #8
10009158:	b29b      	uxth	r3, r3
1000915a:	b2da      	uxtb	r2, r3
1000915c:	4b7f      	ldr	r3, [pc, #508]	; (1000935c <main+0x1b68>)
1000915e:	721a      	strb	r2, [r3, #8]
													 ReadBuffer2[9]= 	val_Spannung_min  & 0xff; //lowbyte
10009160:	4b83      	ldr	r3, [pc, #524]	; (10009370 <main+0x1b7c>)
10009162:	881b      	ldrh	r3, [r3, #0]
10009164:	b2da      	uxtb	r2, r3
10009166:	4b7d      	ldr	r3, [pc, #500]	; (1000935c <main+0x1b68>)
10009168:	725a      	strb	r2, [r3, #9]
													 ReadBuffer2[10]= 	val_Spannung_max  / 0x100; //highbyte
1000916a:	4b82      	ldr	r3, [pc, #520]	; (10009374 <main+0x1b80>)
1000916c:	881b      	ldrh	r3, [r3, #0]
1000916e:	0a1b      	lsrs	r3, r3, #8
10009170:	b29b      	uxth	r3, r3
10009172:	b2da      	uxtb	r2, r3
10009174:	4b79      	ldr	r3, [pc, #484]	; (1000935c <main+0x1b68>)
10009176:	729a      	strb	r2, [r3, #10]
													 ReadBuffer2[11]= 	val_Spannung_max  & 0xff; //lowbyte
10009178:	4b7e      	ldr	r3, [pc, #504]	; (10009374 <main+0x1b80>)
1000917a:	881b      	ldrh	r3, [r3, #0]
1000917c:	b2da      	uxtb	r2, r3
1000917e:	4b77      	ldr	r3, [pc, #476]	; (1000935c <main+0x1b68>)
10009180:	72da      	strb	r2, [r3, #11]
													 ReadBuffer2[12]= 	led_grupp  / 0x100; //highbyte
10009182:	4b7d      	ldr	r3, [pc, #500]	; (10009378 <main+0x1b84>)
10009184:	881b      	ldrh	r3, [r3, #0]
10009186:	0a1b      	lsrs	r3, r3, #8
10009188:	b29b      	uxth	r3, r3
1000918a:	b2da      	uxtb	r2, r3
1000918c:	4b73      	ldr	r3, [pc, #460]	; (1000935c <main+0x1b68>)
1000918e:	731a      	strb	r2, [r3, #12]
													 ReadBuffer2[13]= 	led_grupp  & 0xff; //lowbyte
10009190:	4b79      	ldr	r3, [pc, #484]	; (10009378 <main+0x1b84>)
10009192:	881b      	ldrh	r3, [r3, #0]
10009194:	b2da      	uxtb	r2, r3
10009196:	4b71      	ldr	r3, [pc, #452]	; (1000935c <main+0x1b68>)
10009198:	735a      	strb	r2, [r3, #13]
													 ReadBuffer2[14]= 	led_Strom  / 0x100; //highbyte
1000919a:	4b78      	ldr	r3, [pc, #480]	; (1000937c <main+0x1b88>)
1000919c:	881b      	ldrh	r3, [r3, #0]
1000919e:	0a1b      	lsrs	r3, r3, #8
100091a0:	b29b      	uxth	r3, r3
100091a2:	b2da      	uxtb	r2, r3
100091a4:	4b6d      	ldr	r3, [pc, #436]	; (1000935c <main+0x1b68>)
100091a6:	739a      	strb	r2, [r3, #14]
													 ReadBuffer2[15]= 	led_Strom  & 0xff; //lowbyte
100091a8:	4b74      	ldr	r3, [pc, #464]	; (1000937c <main+0x1b88>)
100091aa:	881b      	ldrh	r3, [r3, #0]
100091ac:	b2da      	uxtb	r2, r3
100091ae:	4b6b      	ldr	r3, [pc, #428]	; (1000935c <main+0x1b68>)
100091b0:	73da      	strb	r2, [r3, #15]

													 if (resultB2 > min_EEP_Voltage_Uin)
100091b2:	4b60      	ldr	r3, [pc, #384]	; (10009334 <main+0x1b40>)
100091b4:	881a      	ldrh	r2, [r3, #0]
100091b6:	23ba      	movs	r3, #186	; 0xba
100091b8:	011b      	lsls	r3, r3, #4
100091ba:	429a      	cmp	r2, r3
100091bc:	d905      	bls.n	100091ca <main+0x19d6>
													 {
													 tester2 = writeNodeid_B2_EEprom();
100091be:	f7f8 fe45 	bl	10001e4c <writeNodeid_B2_EEprom>
100091c2:	1c03      	adds	r3, r0, #0
100091c4:	b29a      	uxth	r2, r3
100091c6:	4b6e      	ldr	r3, [pc, #440]	; (10009380 <main+0x1b8c>)
100091c8:	801a      	strh	r2, [r3, #0]
													 }
														sysiniValueB4();
100091ca:	f7f8 ff95 	bl	100020f8 <sysiniValueB4>
													ReadBuffer2[0]= 	Dimm_Gamma; //highbyte
100091ce:	4b6d      	ldr	r3, [pc, #436]	; (10009384 <main+0x1b90>)
100091d0:	781a      	ldrb	r2, [r3, #0]
100091d2:	4b62      	ldr	r3, [pc, #392]	; (1000935c <main+0x1b68>)
100091d4:	701a      	strb	r2, [r3, #0]
													ReadBuffer2[1]= 	Dimm_Stufen; //lowbyte
100091d6:	4b6c      	ldr	r3, [pc, #432]	; (10009388 <main+0x1b94>)
100091d8:	781a      	ldrb	r2, [r3, #0]
100091da:	4b60      	ldr	r3, [pc, #384]	; (1000935c <main+0x1b68>)
100091dc:	705a      	strb	r2, [r3, #1]
													ReadBuffer2[2]= 	Dimm_StufenGR  ; //highbyte
100091de:	4b6b      	ldr	r3, [pc, #428]	; (1000938c <main+0x1b98>)
100091e0:	781a      	ldrb	r2, [r3, #0]
100091e2:	4b5e      	ldr	r3, [pc, #376]	; (1000935c <main+0x1b68>)
100091e4:	709a      	strb	r2, [r3, #2]
													ReadBuffer2[3]= 	Dimm_Valu   ; //highbyte
100091e6:	4b6a      	ldr	r3, [pc, #424]	; (10009390 <main+0x1b9c>)
100091e8:	781a      	ldrb	r2, [r3, #0]
100091ea:	4b5c      	ldr	r3, [pc, #368]	; (1000935c <main+0x1b68>)
100091ec:	70da      	strb	r2, [r3, #3]
													ReadBuffer2[4]= 	Smooth_Value  / 0x100; //highbyte
100091ee:	4b69      	ldr	r3, [pc, #420]	; (10009394 <main+0x1ba0>)
100091f0:	881b      	ldrh	r3, [r3, #0]
100091f2:	0a1b      	lsrs	r3, r3, #8
100091f4:	b29b      	uxth	r3, r3
100091f6:	b2da      	uxtb	r2, r3
100091f8:	4b58      	ldr	r3, [pc, #352]	; (1000935c <main+0x1b68>)
100091fa:	711a      	strb	r2, [r3, #4]
													ReadBuffer2[5]= 	Smooth_Value  & 0xff; //lowbyte
100091fc:	4b65      	ldr	r3, [pc, #404]	; (10009394 <main+0x1ba0>)
100091fe:	881b      	ldrh	r3, [r3, #0]
10009200:	b2da      	uxtb	r2, r3
10009202:	4b56      	ldr	r3, [pc, #344]	; (1000935c <main+0x1b68>)
10009204:	715a      	strb	r2, [r3, #5]
													ReadBuffer2[6]= 	linearwalk_gen  / 0x100; //highbyte
10009206:	4b64      	ldr	r3, [pc, #400]	; (10009398 <main+0x1ba4>)
10009208:	881b      	ldrh	r3, [r3, #0]
1000920a:	0a1b      	lsrs	r3, r3, #8
1000920c:	b29b      	uxth	r3, r3
1000920e:	b2da      	uxtb	r2, r3
10009210:	4b52      	ldr	r3, [pc, #328]	; (1000935c <main+0x1b68>)
10009212:	719a      	strb	r2, [r3, #6]
													ReadBuffer2[7]= 	linearwalk_gen  & 0xff; //lowbyte
10009214:	4b60      	ldr	r3, [pc, #384]	; (10009398 <main+0x1ba4>)
10009216:	881b      	ldrh	r3, [r3, #0]
10009218:	b2da      	uxtb	r2, r3
1000921a:	4b50      	ldr	r3, [pc, #320]	; (1000935c <main+0x1b68>)
1000921c:	71da      	strb	r2, [r3, #7]
													ReadBuffer2[8]= 	Farbe_wwcw_Quot_gen / 0x100; //highbyte
1000921e:	4b5f      	ldr	r3, [pc, #380]	; (1000939c <main+0x1ba8>)
10009220:	881b      	ldrh	r3, [r3, #0]
10009222:	0a1b      	lsrs	r3, r3, #8
10009224:	b29b      	uxth	r3, r3
10009226:	b2da      	uxtb	r2, r3
10009228:	4b4c      	ldr	r3, [pc, #304]	; (1000935c <main+0x1b68>)
1000922a:	721a      	strb	r2, [r3, #8]
													ReadBuffer2[9]= 	Farbe_wwcw_Quot_gen  & 0xff; //lowbyte
1000922c:	4b5b      	ldr	r3, [pc, #364]	; (1000939c <main+0x1ba8>)
1000922e:	881b      	ldrh	r3, [r3, #0]
10009230:	b2da      	uxtb	r2, r3
10009232:	4b4a      	ldr	r3, [pc, #296]	; (1000935c <main+0x1b68>)
10009234:	725a      	strb	r2, [r3, #9]
													ReadBuffer2[10]= 	Reserve_1  / 0x100; //highbyte
10009236:	4b5a      	ldr	r3, [pc, #360]	; (100093a0 <main+0x1bac>)
10009238:	881b      	ldrh	r3, [r3, #0]
1000923a:	0a1b      	lsrs	r3, r3, #8
1000923c:	b29b      	uxth	r3, r3
1000923e:	b2da      	uxtb	r2, r3
10009240:	4b46      	ldr	r3, [pc, #280]	; (1000935c <main+0x1b68>)
10009242:	729a      	strb	r2, [r3, #10]
													ReadBuffer2[11]= 	Reserve_1  & 0xff; //lowbyte
10009244:	4b56      	ldr	r3, [pc, #344]	; (100093a0 <main+0x1bac>)
10009246:	881b      	ldrh	r3, [r3, #0]
10009248:	b2da      	uxtb	r2, r3
1000924a:	4b44      	ldr	r3, [pc, #272]	; (1000935c <main+0x1b68>)
1000924c:	72da      	strb	r2, [r3, #11]
													ReadBuffer2[12]= 	Dimm_Max_WW  / 0x100; //highbyte
1000924e:	4b55      	ldr	r3, [pc, #340]	; (100093a4 <main+0x1bb0>)
10009250:	881b      	ldrh	r3, [r3, #0]
10009252:	0a1b      	lsrs	r3, r3, #8
10009254:	b29b      	uxth	r3, r3
10009256:	b2da      	uxtb	r2, r3
10009258:	4b40      	ldr	r3, [pc, #256]	; (1000935c <main+0x1b68>)
1000925a:	731a      	strb	r2, [r3, #12]
													ReadBuffer2[13]= 	Dimm_Max_WW  & 0xff; //lowbyte
1000925c:	4b51      	ldr	r3, [pc, #324]	; (100093a4 <main+0x1bb0>)
1000925e:	881b      	ldrh	r3, [r3, #0]
10009260:	b2da      	uxtb	r2, r3
10009262:	4b3e      	ldr	r3, [pc, #248]	; (1000935c <main+0x1b68>)
10009264:	735a      	strb	r2, [r3, #13]
													ReadBuffer2[14]= 	Dimm_Max_CW  / 0x100; //highbyte
10009266:	4b50      	ldr	r3, [pc, #320]	; (100093a8 <main+0x1bb4>)
10009268:	881b      	ldrh	r3, [r3, #0]
1000926a:	0a1b      	lsrs	r3, r3, #8
1000926c:	b29b      	uxth	r3, r3
1000926e:	b2da      	uxtb	r2, r3
10009270:	4b3a      	ldr	r3, [pc, #232]	; (1000935c <main+0x1b68>)
10009272:	739a      	strb	r2, [r3, #14]
													ReadBuffer2[15]= 	Dimm_Max_CW & 0xff; //lowbyte
10009274:	4b4c      	ldr	r3, [pc, #304]	; (100093a8 <main+0x1bb4>)
10009276:	881b      	ldrh	r3, [r3, #0]
10009278:	b2da      	uxtb	r2, r3
1000927a:	4b38      	ldr	r3, [pc, #224]	; (1000935c <main+0x1b68>)
1000927c:	73da      	strb	r2, [r3, #15]

											       if (resultB2 > min_EEP_Voltage_Uin)
1000927e:	4b2d      	ldr	r3, [pc, #180]	; (10009334 <main+0x1b40>)
10009280:	881a      	ldrh	r2, [r3, #0]
10009282:	23ba      	movs	r3, #186	; 0xba
10009284:	011b      	lsls	r3, r3, #4
10009286:	429a      	cmp	r2, r3
10009288:	d905      	bls.n	10009296 <main+0x1aa2>
													 {
													tester3 = writeakt_light_data_B4_EEprom();
1000928a:	f7f8 fe4b 	bl	10001f24 <writeakt_light_data_B4_EEprom>
1000928e:	1c03      	adds	r3, r0, #0
10009290:	b29a      	uxth	r2, r3
10009292:	4b46      	ldr	r3, [pc, #280]	; (100093ac <main+0x1bb8>)
10009294:	801a      	strh	r2, [r3, #0]
													 }
													sysiniValueB5();
10009296:	f7f8 ffa3 	bl	100021e0 <sysiniValueB5>
													    ReadBuffer2[0]=RegOnOff;
1000929a:	4b45      	ldr	r3, [pc, #276]	; (100093b0 <main+0x1bbc>)
1000929c:	781a      	ldrb	r2, [r3, #0]
1000929e:	4b2f      	ldr	r3, [pc, #188]	; (1000935c <main+0x1b68>)
100092a0:	701a      	strb	r2, [r3, #0]
													    ReadBuffer2[1]=RegOnOff2;
100092a2:	4b44      	ldr	r3, [pc, #272]	; (100093b4 <main+0x1bc0>)
100092a4:	781a      	ldrb	r2, [r3, #0]
100092a6:	4b2d      	ldr	r3, [pc, #180]	; (1000935c <main+0x1b68>)
100092a8:	705a      	strb	r2, [r3, #1]
													    ReadBuffer2[2] = Reserve_2 / 0x100;
100092aa:	4b43      	ldr	r3, [pc, #268]	; (100093b8 <main+0x1bc4>)
100092ac:	881b      	ldrh	r3, [r3, #0]
100092ae:	0a1b      	lsrs	r3, r3, #8
100092b0:	b29b      	uxth	r3, r3
100092b2:	b2da      	uxtb	r2, r3
100092b4:	4b29      	ldr	r3, [pc, #164]	; (1000935c <main+0x1b68>)
100092b6:	709a      	strb	r2, [r3, #2]
													    ReadBuffer2[3] = Reserve_2 & 0xff;
100092b8:	4b3f      	ldr	r3, [pc, #252]	; (100093b8 <main+0x1bc4>)
100092ba:	881b      	ldrh	r3, [r3, #0]
100092bc:	b2da      	uxtb	r2, r3
100092be:	4b27      	ldr	r3, [pc, #156]	; (1000935c <main+0x1b68>)
100092c0:	70da      	strb	r2, [r3, #3]
													    ReadBuffer2[4] = dimOff_Ww / 0x100;
100092c2:	4b3e      	ldr	r3, [pc, #248]	; (100093bc <main+0x1bc8>)
100092c4:	881b      	ldrh	r3, [r3, #0]
100092c6:	0a1b      	lsrs	r3, r3, #8
100092c8:	b29b      	uxth	r3, r3
100092ca:	b2da      	uxtb	r2, r3
100092cc:	4b23      	ldr	r3, [pc, #140]	; (1000935c <main+0x1b68>)
100092ce:	711a      	strb	r2, [r3, #4]
													    ReadBuffer2[5] = dimOff_Ww & 0xff;
100092d0:	4b3a      	ldr	r3, [pc, #232]	; (100093bc <main+0x1bc8>)
100092d2:	881b      	ldrh	r3, [r3, #0]
100092d4:	b2da      	uxtb	r2, r3
100092d6:	4b21      	ldr	r3, [pc, #132]	; (1000935c <main+0x1b68>)
100092d8:	715a      	strb	r2, [r3, #5]
													    ReadBuffer2[6] = dimOff_Cw / 0x100;
100092da:	4b39      	ldr	r3, [pc, #228]	; (100093c0 <main+0x1bcc>)
100092dc:	881b      	ldrh	r3, [r3, #0]
100092de:	0a1b      	lsrs	r3, r3, #8
100092e0:	b29b      	uxth	r3, r3
100092e2:	b2da      	uxtb	r2, r3
100092e4:	4b1d      	ldr	r3, [pc, #116]	; (1000935c <main+0x1b68>)
100092e6:	719a      	strb	r2, [r3, #6]
													    ReadBuffer2[7] = dimOff_Ww & 0xff;
100092e8:	4b34      	ldr	r3, [pc, #208]	; (100093bc <main+0x1bc8>)
100092ea:	881b      	ldrh	r3, [r3, #0]
100092ec:	b2da      	uxtb	r2, r3
100092ee:	4b1b      	ldr	r3, [pc, #108]	; (1000935c <main+0x1b68>)
100092f0:	71da      	strb	r2, [r3, #7]
													    ReadBuffer2[8] = dimNorm1_Ww /0x100;
100092f2:	4b34      	ldr	r3, [pc, #208]	; (100093c4 <main+0x1bd0>)
100092f4:	881b      	ldrh	r3, [r3, #0]
100092f6:	0a1b      	lsrs	r3, r3, #8
100092f8:	b29b      	uxth	r3, r3
100092fa:	b2da      	uxtb	r2, r3
100092fc:	4b17      	ldr	r3, [pc, #92]	; (1000935c <main+0x1b68>)
100092fe:	721a      	strb	r2, [r3, #8]
													    ReadBuffer2[9] = dimNorm1_Ww & 0xff;
10009300:	4b30      	ldr	r3, [pc, #192]	; (100093c4 <main+0x1bd0>)
10009302:	881b      	ldrh	r3, [r3, #0]
10009304:	b2da      	uxtb	r2, r3
10009306:	4b15      	ldr	r3, [pc, #84]	; (1000935c <main+0x1b68>)
10009308:	725a      	strb	r2, [r3, #9]
													    ReadBuffer2[10] = dimNorm1_Cw /0x100;
1000930a:	4b2f      	ldr	r3, [pc, #188]	; (100093c8 <main+0x1bd4>)
1000930c:	881b      	ldrh	r3, [r3, #0]
1000930e:	0a1b      	lsrs	r3, r3, #8
10009310:	b29b      	uxth	r3, r3
10009312:	b2da      	uxtb	r2, r3
10009314:	e05a      	b.n	100093cc <main+0x1bd8>
10009316:	46c0      	nop			; (mov r8, r8)
10009318:	200007ca 	.word	0x200007ca
1000931c:	20000830 	.word	0x20000830
10009320:	00007b7a 	.word	0x00007b7a
10009324:	20000824 	.word	0x20000824
10009328:	200008a8 	.word	0x200008a8
1000932c:	00005859 	.word	0x00005859
10009330:	20000c2c 	.word	0x20000c2c
10009334:	200007fe 	.word	0x200007fe
10009338:	20000890 	.word	0x20000890
1000933c:	200007f0 	.word	0x200007f0
10009340:	200008b4 	.word	0x200008b4
10009344:	2000083c 	.word	0x2000083c
10009348:	200007fc 	.word	0x200007fc
1000934c:	200007f2 	.word	0x200007f2
10009350:	2000082e 	.word	0x2000082e
10009354:	20000c36 	.word	0x20000c36
10009358:	20000844 	.word	0x20000844
1000935c:	20000848 	.word	0x20000848
10009360:	20000836 	.word	0x20000836
10009364:	20000860 	.word	0x20000860
10009368:	2000085c 	.word	0x2000085c
1000936c:	200008f6 	.word	0x200008f6
10009370:	2000083a 	.word	0x2000083a
10009374:	200008be 	.word	0x200008be
10009378:	20000834 	.word	0x20000834
1000937c:	20000858 	.word	0x20000858
10009380:	20000c34 	.word	0x20000c34
10009384:	20000862 	.word	0x20000862
10009388:	20000840 	.word	0x20000840
1000938c:	2000088a 	.word	0x2000088a
10009390:	20000814 	.word	0x20000814
10009394:	200008aa 	.word	0x200008aa
10009398:	2000054a 	.word	0x2000054a
1000939c:	200008a0 	.word	0x200008a0
100093a0:	200008b8 	.word	0x200008b8
100093a4:	20000838 	.word	0x20000838
100093a8:	2000088c 	.word	0x2000088c
100093ac:	20000c24 	.word	0x20000c24
100093b0:	2000085a 	.word	0x2000085a
100093b4:	20000818 	.word	0x20000818
100093b8:	200007f4 	.word	0x200007f4
100093bc:	20000900 	.word	0x20000900
100093c0:	20000864 	.word	0x20000864
100093c4:	200008a4 	.word	0x200008a4
100093c8:	200008b2 	.word	0x200008b2
100093cc:	4b6f      	ldr	r3, [pc, #444]	; (1000958c <main+0x1d98>)
100093ce:	729a      	strb	r2, [r3, #10]
													    ReadBuffer2[11] = dimNorm1_Cw & 0xff;
100093d0:	4b6f      	ldr	r3, [pc, #444]	; (10009590 <main+0x1d9c>)
100093d2:	881b      	ldrh	r3, [r3, #0]
100093d4:	b2da      	uxtb	r2, r3
100093d6:	4b6d      	ldr	r3, [pc, #436]	; (1000958c <main+0x1d98>)
100093d8:	72da      	strb	r2, [r3, #11]
													    ReadBuffer2[12] = dimNorm2_Ww / 0x100;
100093da:	4b6e      	ldr	r3, [pc, #440]	; (10009594 <main+0x1da0>)
100093dc:	881b      	ldrh	r3, [r3, #0]
100093de:	0a1b      	lsrs	r3, r3, #8
100093e0:	b29b      	uxth	r3, r3
100093e2:	b2da      	uxtb	r2, r3
100093e4:	4b69      	ldr	r3, [pc, #420]	; (1000958c <main+0x1d98>)
100093e6:	731a      	strb	r2, [r3, #12]
													    ReadBuffer2[13] = dimNorm2_Ww & 0xff;
100093e8:	4b6a      	ldr	r3, [pc, #424]	; (10009594 <main+0x1da0>)
100093ea:	881b      	ldrh	r3, [r3, #0]
100093ec:	b2da      	uxtb	r2, r3
100093ee:	4b67      	ldr	r3, [pc, #412]	; (1000958c <main+0x1d98>)
100093f0:	735a      	strb	r2, [r3, #13]
													    ReadBuffer2[14] = dimNorm2_Cw /0x100;
100093f2:	4b69      	ldr	r3, [pc, #420]	; (10009598 <main+0x1da4>)
100093f4:	881b      	ldrh	r3, [r3, #0]
100093f6:	0a1b      	lsrs	r3, r3, #8
100093f8:	b29b      	uxth	r3, r3
100093fa:	b2da      	uxtb	r2, r3
100093fc:	4b63      	ldr	r3, [pc, #396]	; (1000958c <main+0x1d98>)
100093fe:	739a      	strb	r2, [r3, #14]
													    ReadBuffer2[15] = dimNorm2_Cw & 0xff;
10009400:	4b65      	ldr	r3, [pc, #404]	; (10009598 <main+0x1da4>)
10009402:	881b      	ldrh	r3, [r3, #0]
10009404:	b2da      	uxtb	r2, r3
10009406:	4b61      	ldr	r3, [pc, #388]	; (1000958c <main+0x1d98>)
10009408:	73da      	strb	r2, [r3, #15]

												 if (resultB2 > min_EEP_Voltage_Uin)
1000940a:	4b64      	ldr	r3, [pc, #400]	; (1000959c <main+0x1da8>)
1000940c:	881a      	ldrh	r2, [r3, #0]
1000940e:	23ba      	movs	r3, #186	; 0xba
10009410:	011b      	lsls	r3, r3, #4
10009412:	429a      	cmp	r2, r3
10009414:	d905      	bls.n	10009422 <main+0x1c2e>
												 {
											      tester4 = writeOff_light_B5_EEprom();
10009416:	f7f8 fdbb 	bl	10001f90 <writeOff_light_B5_EEprom>
1000941a:	1c03      	adds	r3, r0, #0
1000941c:	b29a      	uxth	r2, r3
1000941e:	4b60      	ldr	r3, [pc, #384]	; (100095a0 <main+0x1dac>)
10009420:	801a      	strh	r2, [r3, #0]
												 }
												 tester = writeLamp_data_B3_EEprom();
10009422:	f7f8 fd49 	bl	10001eb8 <writeLamp_data_B3_EEprom>
10009426:	1c03      	adds	r3, r0, #0
10009428:	1c1a      	adds	r2, r3, #0
1000942a:	4b5e      	ldr	r3, [pc, #376]	; (100095a4 <main+0x1db0>)
1000942c:	601a      	str	r2, [r3, #0]
												 if (tester1==0x03)
1000942e:	4b5e      	ldr	r3, [pc, #376]	; (100095a8 <main+0x1db4>)
10009430:	881b      	ldrh	r3, [r3, #0]
10009432:	2b03      	cmp	r3, #3
10009434:	d129      	bne.n	1000948a <main+0x1c96>
											 	 {
													new_data_HalloBack();
10009436:	f7f8 fa25 	bl	10001884 <new_data_HalloBack>
												  	 transmit_buf_size=12;
1000943a:	4b5c      	ldr	r3, [pc, #368]	; (100095ac <main+0x1db8>)
1000943c:	220c      	movs	r2, #12
1000943e:	701a      	strb	r2, [r3, #0]
													 new_data[6]='i';
10009440:	4b5b      	ldr	r3, [pc, #364]	; (100095b0 <main+0x1dbc>)
10009442:	2269      	movs	r2, #105	; 0x69
10009444:	719a      	strb	r2, [r3, #6]
													 new_data[7]=tester1;
10009446:	4b58      	ldr	r3, [pc, #352]	; (100095a8 <main+0x1db4>)
10009448:	881b      	ldrh	r3, [r3, #0]
1000944a:	b2da      	uxtb	r2, r3
1000944c:	4b58      	ldr	r3, [pc, #352]	; (100095b0 <main+0x1dbc>)
1000944e:	71da      	strb	r2, [r3, #7]
													 new_data[8]=tester2;
10009450:	4b58      	ldr	r3, [pc, #352]	; (100095b4 <main+0x1dc0>)
10009452:	881b      	ldrh	r3, [r3, #0]
10009454:	b2da      	uxtb	r2, r3
10009456:	4b56      	ldr	r3, [pc, #344]	; (100095b0 <main+0x1dbc>)
10009458:	721a      	strb	r2, [r3, #8]
													 new_data[9]=tester3;
1000945a:	4b57      	ldr	r3, [pc, #348]	; (100095b8 <main+0x1dc4>)
1000945c:	881b      	ldrh	r3, [r3, #0]
1000945e:	b2da      	uxtb	r2, r3
10009460:	4b53      	ldr	r3, [pc, #332]	; (100095b0 <main+0x1dbc>)
10009462:	725a      	strb	r2, [r3, #9]
													 new_data[10]=tester4;
10009464:	4b4e      	ldr	r3, [pc, #312]	; (100095a0 <main+0x1dac>)
10009466:	881b      	ldrh	r3, [r3, #0]
10009468:	b2da      	uxtb	r2, r3
1000946a:	4b51      	ldr	r3, [pc, #324]	; (100095b0 <main+0x1dbc>)
1000946c:	729a      	strb	r2, [r3, #10]
													 new_data[11]=0xff;
1000946e:	4b50      	ldr	r3, [pc, #320]	; (100095b0 <main+0x1dbc>)
10009470:	22ff      	movs	r2, #255	; 0xff
10009472:	72da      	strb	r2, [r3, #11]
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
10009474:	4b4d      	ldr	r3, [pc, #308]	; (100095ac <main+0x1db8>)
10009476:	781b      	ldrb	r3, [r3, #0]
10009478:	1c1c      	adds	r4, r3, #0
1000947a:	4a50      	ldr	r2, [pc, #320]	; (100095bc <main+0x1dc8>)
1000947c:	4b4c      	ldr	r3, [pc, #304]	; (100095b0 <main+0x1dbc>)
1000947e:	1c10      	adds	r0, r2, #0
10009480:	1c19      	adds	r1, r3, #0
10009482:	1c22      	adds	r2, r4, #0
10009484:	f7fa fcce 	bl	10003e24 <UART_Transmit>
10009488:	e05e      	b.n	10009548 <main+0x1d54>
												  }
													else
													{new_data_HalloBack();
1000948a:	f7f8 f9fb 	bl	10001884 <new_data_HalloBack>
												  	 transmit_buf_size=13;
1000948e:	4b47      	ldr	r3, [pc, #284]	; (100095ac <main+0x1db8>)
10009490:	220d      	movs	r2, #13
10009492:	701a      	strb	r2, [r3, #0]
													 new_data[6]='e';
10009494:	4b46      	ldr	r3, [pc, #280]	; (100095b0 <main+0x1dbc>)
10009496:	2265      	movs	r2, #101	; 0x65
10009498:	719a      	strb	r2, [r3, #6]
													 new_data[7]=15;
1000949a:	4b45      	ldr	r3, [pc, #276]	; (100095b0 <main+0x1dbc>)
1000949c:	220f      	movs	r2, #15
1000949e:	71da      	strb	r2, [r3, #7]
													 new_data[8]=tester1;
100094a0:	4b41      	ldr	r3, [pc, #260]	; (100095a8 <main+0x1db4>)
100094a2:	881b      	ldrh	r3, [r3, #0]
100094a4:	b2da      	uxtb	r2, r3
100094a6:	4b42      	ldr	r3, [pc, #264]	; (100095b0 <main+0x1dbc>)
100094a8:	721a      	strb	r2, [r3, #8]
													 new_data[9]=tester2;
100094aa:	4b42      	ldr	r3, [pc, #264]	; (100095b4 <main+0x1dc0>)
100094ac:	881b      	ldrh	r3, [r3, #0]
100094ae:	b2da      	uxtb	r2, r3
100094b0:	4b3f      	ldr	r3, [pc, #252]	; (100095b0 <main+0x1dbc>)
100094b2:	725a      	strb	r2, [r3, #9]
													 new_data[10]=tester3;
100094b4:	4b40      	ldr	r3, [pc, #256]	; (100095b8 <main+0x1dc4>)
100094b6:	881b      	ldrh	r3, [r3, #0]
100094b8:	b2da      	uxtb	r2, r3
100094ba:	4b3d      	ldr	r3, [pc, #244]	; (100095b0 <main+0x1dbc>)
100094bc:	729a      	strb	r2, [r3, #10]
													 new_data[11]=tester4;
100094be:	4b38      	ldr	r3, [pc, #224]	; (100095a0 <main+0x1dac>)
100094c0:	881b      	ldrh	r3, [r3, #0]
100094c2:	b2da      	uxtb	r2, r3
100094c4:	4b3a      	ldr	r3, [pc, #232]	; (100095b0 <main+0x1dbc>)
100094c6:	72da      	strb	r2, [r3, #11]
													 new_data[12]=0xff;
100094c8:	4b39      	ldr	r3, [pc, #228]	; (100095b0 <main+0x1dbc>)
100094ca:	22ff      	movs	r2, #255	; 0xff
100094cc:	731a      	strb	r2, [r3, #12]
													 UART_Transmit(&UART_1, new_data,transmit_buf_size);
100094ce:	4b37      	ldr	r3, [pc, #220]	; (100095ac <main+0x1db8>)
100094d0:	781b      	ldrb	r3, [r3, #0]
100094d2:	1c1c      	adds	r4, r3, #0
100094d4:	4a39      	ldr	r2, [pc, #228]	; (100095bc <main+0x1dc8>)
100094d6:	4b36      	ldr	r3, [pc, #216]	; (100095b0 <main+0x1dbc>)
100094d8:	1c10      	adds	r0, r2, #0
100094da:	1c19      	adds	r1, r3, #0
100094dc:	1c22      	adds	r2, r4, #0
100094de:	f7fa fca1 	bl	10003e24 <UART_Transmit>
100094e2:	e031      	b.n	10009548 <main+0x1d54>
													}
											 } //if result

												 else{
													new_data_HalloBack();
100094e4:	f7f8 f9ce 	bl	10001884 <new_data_HalloBack>
													 new_data[6]='e';
100094e8:	4b31      	ldr	r3, [pc, #196]	; (100095b0 <main+0x1dbc>)
100094ea:	2265      	movs	r2, #101	; 0x65
100094ec:	719a      	strb	r2, [r3, #6]
													 new_data[7]='r';
100094ee:	4b30      	ldr	r3, [pc, #192]	; (100095b0 <main+0x1dbc>)
100094f0:	2272      	movs	r2, #114	; 0x72
100094f2:	71da      	strb	r2, [r3, #7]
													 new_data[8]='0';
100094f4:	4b2e      	ldr	r3, [pc, #184]	; (100095b0 <main+0x1dbc>)
100094f6:	2230      	movs	r2, #48	; 0x30
100094f8:	721a      	strb	r2, [r3, #8]
													 new_data[9]='3';
100094fa:	4b2d      	ldr	r3, [pc, #180]	; (100095b0 <main+0x1dbc>)
100094fc:	2233      	movs	r2, #51	; 0x33
100094fe:	725a      	strb	r2, [r3, #9]
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
10009500:	4b2a      	ldr	r3, [pc, #168]	; (100095ac <main+0x1db8>)
10009502:	781b      	ldrb	r3, [r3, #0]
10009504:	1c1c      	adds	r4, r3, #0
10009506:	4a2d      	ldr	r2, [pc, #180]	; (100095bc <main+0x1dc8>)
10009508:	4b29      	ldr	r3, [pc, #164]	; (100095b0 <main+0x1dbc>)
1000950a:	1c10      	adds	r0, r2, #0
1000950c:	1c19      	adds	r1, r3, #0
1000950e:	1c22      	adds	r2, r4, #0
10009510:	f7fa fc88 	bl	10003e24 <UART_Transmit>
												}
											break;
				case command_eprommInitResi :
										if (node_id_neu == 254 &&  Ser_NrH == 0x7b7a && Ser_NrH  == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL == 0x5859 && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
										{
											 if(Dstatus == DAVE_STATUS_SUCCESS)
10009514:	e032      	b.n	1000957c <main+0x1d88>
													 new_data[9]='3';
													UART_Transmit(&UART_1, new_data,transmit_buf_size);
												  }
										 }//if status
											else {
											new_data_HalloBack();     // vorgabewerte stimmen nicht
10009516:	f7f8 f9b5 	bl	10001884 <new_data_HalloBack>
											 new_data[6]='e';
1000951a:	4b25      	ldr	r3, [pc, #148]	; (100095b0 <main+0x1dbc>)
1000951c:	2265      	movs	r2, #101	; 0x65
1000951e:	719a      	strb	r2, [r3, #6]
											 new_data[7]='r';
10009520:	4b23      	ldr	r3, [pc, #140]	; (100095b0 <main+0x1dbc>)
10009522:	2272      	movs	r2, #114	; 0x72
10009524:	71da      	strb	r2, [r3, #7]
											 new_data[8]='0';
10009526:	4b22      	ldr	r3, [pc, #136]	; (100095b0 <main+0x1dbc>)
10009528:	2230      	movs	r2, #48	; 0x30
1000952a:	721a      	strb	r2, [r3, #8]
											 new_data[9]='2';
1000952c:	4b20      	ldr	r3, [pc, #128]	; (100095b0 <main+0x1dbc>)
1000952e:	2232      	movs	r2, #50	; 0x32
10009530:	725a      	strb	r2, [r3, #9]
											 UART_Transmit(&UART_1, new_data,transmit_buf_size);
10009532:	4b1e      	ldr	r3, [pc, #120]	; (100095ac <main+0x1db8>)
10009534:	781b      	ldrb	r3, [r3, #0]
10009536:	1c1c      	adds	r4, r3, #0
10009538:	4a20      	ldr	r2, [pc, #128]	; (100095bc <main+0x1dc8>)
1000953a:	4b1d      	ldr	r3, [pc, #116]	; (100095b0 <main+0x1dbc>)
1000953c:	1c10      	adds	r0, r2, #0
1000953e:	1c19      	adds	r1, r3, #0
10009540:	1c22      	adds	r2, r4, #0
10009542:	f7fa fc6f 	bl	10003e24 <UART_Transmit>
												}
											break;
				case command_eprommInitResi :
										if (node_id_neu == 254 &&  Ser_NrH == 0x7b7a && Ser_NrH  == (ReadData[1] * 0x100 + ReadData[2]) && Ser_NrL == 0x5859 && Ser_NrL  == (ReadData[3] * 0x100 + ReadData[4]) )
										{
											 if(Dstatus == DAVE_STATUS_SUCCESS)
10009546:	e019      	b.n	1000957c <main+0x1d88>
10009548:	e018      	b.n	1000957c <main+0x1d88>
											 new_data[9]='2';
											 UART_Transmit(&UART_1, new_data,transmit_buf_size);
											}
									 }//if sernr
											else {
											new_data_HalloBack();     // vorgabewerte stimmen nicht
1000954a:	f7f8 f99b 	bl	10001884 <new_data_HalloBack>
											 new_data[6]='e';
1000954e:	4b18      	ldr	r3, [pc, #96]	; (100095b0 <main+0x1dbc>)
10009550:	2265      	movs	r2, #101	; 0x65
10009552:	719a      	strb	r2, [r3, #6]
											 new_data[7]='r';
10009554:	4b16      	ldr	r3, [pc, #88]	; (100095b0 <main+0x1dbc>)
10009556:	2272      	movs	r2, #114	; 0x72
10009558:	71da      	strb	r2, [r3, #7]
											 new_data[8]='0';
1000955a:	4b15      	ldr	r3, [pc, #84]	; (100095b0 <main+0x1dbc>)
1000955c:	2230      	movs	r2, #48	; 0x30
1000955e:	721a      	strb	r2, [r3, #8]
											 new_data[9]='1';
10009560:	4b13      	ldr	r3, [pc, #76]	; (100095b0 <main+0x1dbc>)
10009562:	2231      	movs	r2, #49	; 0x31
10009564:	725a      	strb	r2, [r3, #9]
											 UART_Transmit(&UART_1, new_data,transmit_buf_size);
10009566:	4b11      	ldr	r3, [pc, #68]	; (100095ac <main+0x1db8>)
10009568:	781b      	ldrb	r3, [r3, #0]
1000956a:	1c1c      	adds	r4, r3, #0
1000956c:	4a13      	ldr	r2, [pc, #76]	; (100095bc <main+0x1dc8>)
1000956e:	4b10      	ldr	r3, [pc, #64]	; (100095b0 <main+0x1dbc>)
10009570:	1c10      	adds	r0, r2, #0
10009572:	1c19      	adds	r1, r3, #0
10009574:	1c22      	adds	r2, r4, #0
10009576:	f7fa fc55 	bl	10003e24 <UART_Transmit>
											}
											break;
1000957a:	e001      	b.n	10009580 <main+0x1d8c>
1000957c:	e000      	b.n	10009580 <main+0x1d8c>

				default:
				break;
1000957e:	46c0      	nop			; (mov r8, r8)
				}//switch
			  } // else node id == ok

				//############
				execute = 0;
10009580:	4b0f      	ldr	r3, [pc, #60]	; (100095c0 <main+0x1dcc>)
10009582:	2200      	movs	r2, #0
10009584:	701a      	strb	r2, [r3, #0]
			} // if ( execute == 1 )
		} // if(UART_Receive(&UART_1, ReadData, 1) == UART_STATUS_SUCCESS)
	}
10009586:	f7fe fbee 	bl	10007d66 <main+0x572>
1000958a:	46c0      	nop			; (mov r8, r8)
1000958c:	20000848 	.word	0x20000848
10009590:	200008b2 	.word	0x200008b2
10009594:	200007c8 	.word	0x200007c8
10009598:	20000970 	.word	0x20000970
1000959c:	200007fe 	.word	0x200007fe
100095a0:	20000c32 	.word	0x20000c32
100095a4:	20000c28 	.word	0x20000c28
100095a8:	20000c36 	.word	0x20000c36
100095ac:	20000550 	.word	0x20000550
100095b0:	20000804 	.word	0x20000804
100095b4:	20000c34 	.word	0x20000c34
100095b8:	20000c24 	.word	0x20000c24
100095bc:	20000560 	.word	0x20000560
100095c0:	200008b0 	.word	0x200008b0

100095c4 <endofTransmitU1>:
   return (1U);
 }

//----------------------------------------------------------------------------------------
void endofTransmitU1()//Callback functin for "End of transmit" event.
 {
100095c4:	b580      	push	{r7, lr}
100095c6:	af00      	add	r7, sp, #0
 // UART_Receive(&UART_0, rec_data, sizeof(rec_data));
	  // DIGITAL_IO_ToggleOutput(&VCC_LED_shtdwn);
 }
100095c8:	46bd      	mov	sp, r7
100095ca:	bd80      	pop	{r7, pc}

100095cc <endofReceiveU1>:
//----------------------------------------------------------------------------------------
 void endofReceiveU1()//Callback function for "End of receive" event.
 {
100095cc:	b580      	push	{r7, lr}
100095ce:	af00      	add	r7, sp, #0
	//   DIGITAL_IO_ToggleOutput(&DO_SEL_Gain);  //	 LED_Toggle_EverySec( );
	//UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
 }
100095d0:	46bd      	mov	sp, r7
100095d2:	bd80      	pop	{r7, pc}

100095d4 <endofTransmitU0>:
 //----------------------------------------------------------------------------------------
 void endofTransmitU0()//Callback functin for "End of transmit" event.
  {
100095d4:	b580      	push	{r7, lr}
100095d6:	af00      	add	r7, sp, #0
 //a  UART_Receive(&UART_1, rec_data, sizeof(rec_data));
	 //a	  DIGITAL_IO_ToggleOutput(&DO_LED_Shtdwn);
  }
100095d8:	46bd      	mov	sp, r7
100095da:	bd80      	pop	{r7, pc}

100095dc <endofReceiveU0>:
 //----------------------------------------------------------------------------------------
  void endofReceiveU0()//Callback function for "End of receive" event.
  {
100095dc:	b580      	push	{r7, lr}
100095de:	af00      	add	r7, sp, #0
 	  // DIGITAL_IO_ToggleOutput(&DO_SEL_Gain);  //	 LED_Toggle_EverySec( );
	  //a UART_Transmit(&UART_1, rec_data, sizeof(rec_data));
  }
100095e0:	46bd      	mov	sp, r7
100095e2:	bd80      	pop	{r7, pc}

100095e4 <VADC0_C0_0_IRQHandler>:
 //----------------------------------------------------------------------------------------
  void adcIRQHandler(void)
  {
100095e4:	b580      	push	{r7, lr}
100095e6:	af00      	add	r7, sp, #0
        // read the results of the conversion
        resultA = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_U_in);
100095e8:	4b35      	ldr	r3, [pc, #212]	; (100096c0 <VADC0_C0_0_IRQHandler+0xdc>)
100095ea:	1c18      	adds	r0, r3, #0
100095ec:	f7fe f8e0 	bl	100077b0 <ADC_MEASUREMENT_ADV_GetResult>
100095f0:	1c03      	adds	r3, r0, #0
100095f2:	1c1a      	adds	r2, r3, #0
100095f4:	4b33      	ldr	r3, [pc, #204]	; (100096c4 <VADC0_C0_0_IRQHandler+0xe0>)
100095f6:	801a      	strh	r2, [r3, #0]
        resultAalt = (resultA + 3*resultAalt)/4;
100095f8:	4b32      	ldr	r3, [pc, #200]	; (100096c4 <VADC0_C0_0_IRQHandler+0xe0>)
100095fa:	881b      	ldrh	r3, [r3, #0]
100095fc:	1c19      	adds	r1, r3, #0
100095fe:	4b32      	ldr	r3, [pc, #200]	; (100096c8 <VADC0_C0_0_IRQHandler+0xe4>)
10009600:	881b      	ldrh	r3, [r3, #0]
10009602:	1c1a      	adds	r2, r3, #0
10009604:	1c13      	adds	r3, r2, #0
10009606:	005b      	lsls	r3, r3, #1
10009608:	189b      	adds	r3, r3, r2
1000960a:	18cb      	adds	r3, r1, r3
1000960c:	2b00      	cmp	r3, #0
1000960e:	da00      	bge.n	10009612 <VADC0_C0_0_IRQHandler+0x2e>
10009610:	3303      	adds	r3, #3
10009612:	109b      	asrs	r3, r3, #2
10009614:	b29a      	uxth	r2, r3
10009616:	4b2c      	ldr	r3, [pc, #176]	; (100096c8 <VADC0_C0_0_IRQHandler+0xe4>)
10009618:	801a      	strh	r2, [r3, #0]
        resultB = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_ntc);
1000961a:	4b2c      	ldr	r3, [pc, #176]	; (100096cc <VADC0_C0_0_IRQHandler+0xe8>)
1000961c:	1c18      	adds	r0, r3, #0
1000961e:	f7fe f8c7 	bl	100077b0 <ADC_MEASUREMENT_ADV_GetResult>
10009622:	1c03      	adds	r3, r0, #0
10009624:	1c1a      	adds	r2, r3, #0
10009626:	4b2a      	ldr	r3, [pc, #168]	; (100096d0 <VADC0_C0_0_IRQHandler+0xec>)
10009628:	801a      	strh	r2, [r3, #0]
        resultBalt = (resultB + 3*resultBalt)/4;
1000962a:	4b29      	ldr	r3, [pc, #164]	; (100096d0 <VADC0_C0_0_IRQHandler+0xec>)
1000962c:	881b      	ldrh	r3, [r3, #0]
1000962e:	1c19      	adds	r1, r3, #0
10009630:	4b28      	ldr	r3, [pc, #160]	; (100096d4 <VADC0_C0_0_IRQHandler+0xf0>)
10009632:	881b      	ldrh	r3, [r3, #0]
10009634:	1c1a      	adds	r2, r3, #0
10009636:	1c13      	adds	r3, r2, #0
10009638:	005b      	lsls	r3, r3, #1
1000963a:	189b      	adds	r3, r3, r2
1000963c:	18cb      	adds	r3, r1, r3
1000963e:	2b00      	cmp	r3, #0
10009640:	da00      	bge.n	10009644 <VADC0_C0_0_IRQHandler+0x60>
10009642:	3303      	adds	r3, #3
10009644:	109b      	asrs	r3, r3, #2
10009646:	b29a      	uxth	r2, r3
10009648:	4b22      	ldr	r3, [pc, #136]	; (100096d4 <VADC0_C0_0_IRQHandler+0xf0>)
1000964a:	801a      	strh	r2, [r3, #0]
        resultC = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_I_ww);
1000964c:	4b22      	ldr	r3, [pc, #136]	; (100096d8 <VADC0_C0_0_IRQHandler+0xf4>)
1000964e:	1c18      	adds	r0, r3, #0
10009650:	f7fe f8ae 	bl	100077b0 <ADC_MEASUREMENT_ADV_GetResult>
10009654:	1c03      	adds	r3, r0, #0
10009656:	1c1a      	adds	r2, r3, #0
10009658:	4b20      	ldr	r3, [pc, #128]	; (100096dc <VADC0_C0_0_IRQHandler+0xf8>)
1000965a:	801a      	strh	r2, [r3, #0]
        resultCalt = (resultC + 3*resultCalt)/4;
1000965c:	4b1f      	ldr	r3, [pc, #124]	; (100096dc <VADC0_C0_0_IRQHandler+0xf8>)
1000965e:	881b      	ldrh	r3, [r3, #0]
10009660:	1c19      	adds	r1, r3, #0
10009662:	4b1f      	ldr	r3, [pc, #124]	; (100096e0 <VADC0_C0_0_IRQHandler+0xfc>)
10009664:	881b      	ldrh	r3, [r3, #0]
10009666:	1c1a      	adds	r2, r3, #0
10009668:	1c13      	adds	r3, r2, #0
1000966a:	005b      	lsls	r3, r3, #1
1000966c:	189b      	adds	r3, r3, r2
1000966e:	18cb      	adds	r3, r1, r3
10009670:	2b00      	cmp	r3, #0
10009672:	da00      	bge.n	10009676 <VADC0_C0_0_IRQHandler+0x92>
10009674:	3303      	adds	r3, #3
10009676:	109b      	asrs	r3, r3, #2
10009678:	b29a      	uxth	r2, r3
1000967a:	4b19      	ldr	r3, [pc, #100]	; (100096e0 <VADC0_C0_0_IRQHandler+0xfc>)
1000967c:	801a      	strh	r2, [r3, #0]
        resultD = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_xmc_I_cw);
1000967e:	4b19      	ldr	r3, [pc, #100]	; (100096e4 <VADC0_C0_0_IRQHandler+0x100>)
10009680:	1c18      	adds	r0, r3, #0
10009682:	f7fe f895 	bl	100077b0 <ADC_MEASUREMENT_ADV_GetResult>
10009686:	1c03      	adds	r3, r0, #0
10009688:	1c1a      	adds	r2, r3, #0
1000968a:	4b17      	ldr	r3, [pc, #92]	; (100096e8 <VADC0_C0_0_IRQHandler+0x104>)
1000968c:	801a      	strh	r2, [r3, #0]
        resultDalt = (resultD + 3*resultDalt)/4;
1000968e:	4b16      	ldr	r3, [pc, #88]	; (100096e8 <VADC0_C0_0_IRQHandler+0x104>)
10009690:	881b      	ldrh	r3, [r3, #0]
10009692:	1c19      	adds	r1, r3, #0
10009694:	4b15      	ldr	r3, [pc, #84]	; (100096ec <VADC0_C0_0_IRQHandler+0x108>)
10009696:	881b      	ldrh	r3, [r3, #0]
10009698:	1c1a      	adds	r2, r3, #0
1000969a:	1c13      	adds	r3, r2, #0
1000969c:	005b      	lsls	r3, r3, #1
1000969e:	189b      	adds	r3, r3, r2
100096a0:	18cb      	adds	r3, r1, r3
100096a2:	2b00      	cmp	r3, #0
100096a4:	da00      	bge.n	100096a8 <VADC0_C0_0_IRQHandler+0xc4>
100096a6:	3303      	adds	r3, #3
100096a8:	109b      	asrs	r3, r3, #2
100096aa:	b29a      	uxth	r2, r3
100096ac:	4b0f      	ldr	r3, [pc, #60]	; (100096ec <VADC0_C0_0_IRQHandler+0x108>)
100096ae:	801a      	strh	r2, [r3, #0]
        adc_ready=adc_ready + 1;
100096b0:	4b0f      	ldr	r3, [pc, #60]	; (100096f0 <VADC0_C0_0_IRQHandler+0x10c>)
100096b2:	881b      	ldrh	r3, [r3, #0]
100096b4:	3301      	adds	r3, #1
100096b6:	b29a      	uxth	r2, r3
100096b8:	4b0d      	ldr	r3, [pc, #52]	; (100096f0 <VADC0_C0_0_IRQHandler+0x10c>)
100096ba:	801a      	strh	r2, [r3, #0]
        //Start the next round of conversion
      //  ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
  }
100096bc:	46bd      	mov	sp, r7
100096be:	bd80      	pop	{r7, pc}
100096c0:	10009964 	.word	0x10009964
100096c4:	200008b6 	.word	0x200008b6
100096c8:	200007c4 	.word	0x200007c4
100096cc:	10009924 	.word	0x10009924
100096d0:	20000548 	.word	0x20000548
100096d4:	200008a2 	.word	0x200008a2
100096d8:	10009944 	.word	0x10009944
100096dc:	2000085e 	.word	0x2000085e
100096e0:	20000906 	.word	0x20000906
100096e4:	10009984 	.word	0x10009984
100096e8:	200008bc 	.word	0x200008bc
100096ec:	20000766 	.word	0x20000766
100096f0:	200008fa 	.word	0x200008fa

100096f4 <__libc_init_array>:
100096f4:	4b0e      	ldr	r3, [pc, #56]	; (10009730 <__libc_init_array+0x3c>)
100096f6:	b570      	push	{r4, r5, r6, lr}
100096f8:	2500      	movs	r5, #0
100096fa:	1c1e      	adds	r6, r3, #0
100096fc:	4c0d      	ldr	r4, [pc, #52]	; (10009734 <__libc_init_array+0x40>)
100096fe:	1ae4      	subs	r4, r4, r3
10009700:	10a4      	asrs	r4, r4, #2
10009702:	42a5      	cmp	r5, r4
10009704:	d004      	beq.n	10009710 <__libc_init_array+0x1c>
10009706:	00ab      	lsls	r3, r5, #2
10009708:	58f3      	ldr	r3, [r6, r3]
1000970a:	4798      	blx	r3
1000970c:	3501      	adds	r5, #1
1000970e:	e7f8      	b.n	10009702 <__libc_init_array+0xe>
10009710:	f7fa fa90 	bl	10003c34 <_init>
10009714:	4b08      	ldr	r3, [pc, #32]	; (10009738 <__libc_init_array+0x44>)
10009716:	2500      	movs	r5, #0
10009718:	1c1e      	adds	r6, r3, #0
1000971a:	4c08      	ldr	r4, [pc, #32]	; (1000973c <__libc_init_array+0x48>)
1000971c:	1ae4      	subs	r4, r4, r3
1000971e:	10a4      	asrs	r4, r4, #2
10009720:	42a5      	cmp	r5, r4
10009722:	d004      	beq.n	1000972e <__libc_init_array+0x3a>
10009724:	00ab      	lsls	r3, r5, #2
10009726:	58f3      	ldr	r3, [r6, r3]
10009728:	4798      	blx	r3
1000972a:	3501      	adds	r5, #1
1000972c:	e7f8      	b.n	10009720 <__libc_init_array+0x2c>
1000972e:	bd70      	pop	{r4, r5, r6, pc}
10009730:	20000764 	.word	0x20000764
10009734:	20000764 	.word	0x20000764
10009738:	20000764 	.word	0x20000764
1000973c:	20000764 	.word	0x20000764
10009740:	100022b6 	.word	0x100022b6
10009744:	10002266 	.word	0x10002266
10009748:	10002274 	.word	0x10002274
1000974c:	10002282 	.word	0x10002282
10009750:	10002292 	.word	0x10002292
10009754:	100022a4 	.word	0x100022a4

10009758 <g_xmc_vadc_group_array>:
10009758:	48030400 48030800                       ...H...H

10009760 <UART_0_channel_config>:
10009760:	00004b00 10010808 00000000              .K..........

1000976c <UART_0_tx_pin_config>:
1000976c:	000000b0 00000001                       ........

10009774 <UART_0_tx_pin>:
10009774:	40040100 00000001 1000976c              ...@....l...

10009780 <UART_0_config>:
10009780:	10009760 10004449 100095d5 100095dd     `...ID..........
	...
100097a4:	10009774 04000000 00000304              t...........

100097b0 <UART_0_rx_pin_config>:
100097b0:	00000000 00000001                       ........

100097b8 <UART_1_channel_config>:
100097b8:	00004b00 10010808 00000000              .K..........

100097c4 <UART_1_tx_pin_config>:
100097c4:	000000b8 00000001                       ........

100097cc <UART_1_tx_pin>:
100097cc:	40040000 00000006 100097c4              ...@........

100097d8 <UART_1_config>:
100097d8:	100097b8 10004571 100095c5 100095cd     ....qE..........
	...
100097fc:	100097cc 04000000 00000404              ............

10009808 <UART_1_rx_pin_config>:
10009808:	00000000 00000001                       ........

10009810 <INTERRUPT_0>:
10009810:	0001030f                                ....

10009814 <INTERRUPT_1>:
10009814:	00000300                                ....

10009818 <group_init_handle0>:
	...

1000982c <group_init_handle1>:
	...

10009840 <global_config>:
	...
10009858:	10005c06 10005bb6 10005bc2 10005bf2     .\...[...[...[..
10009868:	10005c06 10005bbc 10005be2 10005be8     .\...[...[...[..
10009878:	10005bfc                                .[..

1000987c <E_EEPROM_XMC1_block_Config>:
1000987c:	00000001 00000010 00000002 00000010     ................
1000988c:	00000003 00000020 00000004 00000010     .... ...........
1000989c:	00000005 00000010 00000006 00000010     ................

100098ac <xmc_int_tcs>:
100098ac:	40040200 00000000 00000000 00000002     ...@............

100098bc <xmc_int_bmc>:
100098bc:	40040200 00000000 00000000 00000007     ...@............

100098cc <xmc_lin_en>:
100098cc:	40040000 00000080 00010000 00000000     ...@............

100098dc <xmc_sel_gain>:
100098dc:	40040000 00000080 00010000 0000000c     ...@............

100098ec <VCC_LED_shtdwn>:
100098ec:	40040000 00000000 00000000 0000000d     ...@............
100098fc:	00000100 00010000 00000000              ............

10009908 <group_ptrs>:
10009908:	48030400 48030800                       ...H...H

10009910 <ADC_MEASUREMENT_ADV_0_xmc_ntc_ch_config>:
10009910:	002b0000 00000000 00000000 0000ff01     ..+.............

10009920 <ADC_MEASUREMENT_ADV_0_xmc_ntc_res_config>:
10009920:	00000000                                ....

10009924 <ADC_MEASUREMENT_ADV_0_xmc_ntc_handle>:
10009924:	10009910 10009920 00000000              .... .......

10009930 <ADC_MEASUREMENT_ADV_0_xmc_I_ww_ch_config>:
10009930:	002c0000 00000000 00000000 00000201     ..,.............

10009940 <ADC_MEASUREMENT_ADV_0_xmc_I_ww_res_config>:
10009940:	00000000                                ....

10009944 <ADC_MEASUREMENT_ADV_0_xmc_I_ww_handle>:
10009944:	10009930 10009940 00000100              0...@.......

10009950 <ADC_MEASUREMENT_ADV_0_xmc_U_in_ch_config>:
10009950:	002d0000 00000000 00000000 0000ff01     ..-.............

10009960 <ADC_MEASUREMENT_ADV_0_xmc_U_in_res_config>:
10009960:	00000000                                ....

10009964 <ADC_MEASUREMENT_ADV_0_xmc_U_in_handle>:
10009964:	10009950 10009960 00000300              P...`.......

10009970 <ADC_MEASUREMENT_ADV_0_xmc_I_cw_ch_config>:
10009970:	002a0000 00000000 00000000 0000ff01     ..*.............

10009980 <ADC_MEASUREMENT_ADV_0_xmc_I_cw_res_config>:
10009980:	80000000                                ....

10009984 <ADC_MEASUREMENT_ADV_0_xmc_I_cw_handle>:
10009984:	10009970 10009980 00000400              p...........

10009990 <ADC_MEASUREMENT_ADV_0_queue_config>:
	...

1000999c <ADC_MEASUREMENT_ADV_0_queue_handle>:
	...
100099a8:	00000015 10009990 00000001              ............

100099b4 <ADC_MEASUREMENT_ADV_0_xmc_ntc_queue_entry_0>:
100099b4:	000000a0                                ....

100099b8 <ADC_MEASUREMENT_ADV_0_xmc_I_ww_queue_entry_1>:
100099b8:	00000021                                !...

100099bc <ADC_MEASUREMENT_ADV_0_xmc_U_in_queue_entry_2>:
100099bc:	00000023                                #...

100099c0 <ADC_MEASUREMENT_ADV_0_xmc_I_cw_queue_entry_3>:
100099c0:	00000024                                $...

100099c4 <ADC_MEASUREMENT_ADV_0>:
100099c4:	20000750 20000740 10007579 1000999c     P.. @.. yu......
100099d4:	20000760 04040003 00000001 10008fac     `.. ............
100099e4:	10008730 100088cc 1000957e 10008dac     0.......~.......
100099f4:	10008e7a 10008c04 1000957e 1000957e     z.......~...~...
10009a04:	10008a0c 1000957e 1000957e 1000957e     ....~...~...~...
10009a14:	1000957e 1000811e 1000813a 1000957e     ~.......:...~...
10009a24:	1000957e 1000957e 10008156 100081aa     ~...~...V.......
10009a34:	100082d2 1000832a 100081f6 100083c6     ....*...........
10009a44:	100084d6 100085c0 10008528 10008102     ........(.......
10009a54:	10008654 100086c2 10008212 10008272     T...........r...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10004add 	.word	0x10004add
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	1000148d 	.word	0x1000148d
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	1000455d 	.word	0x1000455d
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	1000466d 	.word	0x1000466d
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10004549 	.word	0x10004549
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10004659 	.word	0x10004659
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	100095e5 	.word	0x100095e5
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001099 	.word	0x10001099
