package Model.APPS.PDM_BCCU.v4_1_8;

/* Import statements */
import ifx.davex.app.manifest.*

abstract class PDM_BCCU_GUI extends AppManifest {
	/* Begin : UI variable section */
	 public GTab gtab_chanconfig;
	 public GTab gtab_dummy;
	 public GImage gimage_channelconfig_bypass;
	 public GImage gimage_channelconfig;
	 public GImage gimage_flickerwd;
	 public GImage gimage_packer;
	 public GInteger ginteger_initial_off_bit_counter_value;
	 public GInteger ginteger_number_of_on_bits_grouped_together;
	 public GInteger ginteger_number_of_off_bits_grouped_together;
	 public GInteger ginteger_initial_on_bit_counter_value;
	 public GInteger ginteger_channel_initial_intensity;
	 public GInteger ginteger_linpres;
	 public GCombo gcombo_output_passive_level_selection;
	 public GCombo gcombo_trigger_output_selection;
	 public GCombo gcombo_trigger_edge_selection;
	 public GCombo gcombo_output_characteristics;
	 public GFloat gfloat_desired_initial_linear_walk_time;
	 public GFloat gfloat_actual_initial_linear_walk_time;
	 public GCheck gcheck_enable_packer_selection;
	 public GCheck gcheck_flicker_watchdog_enable;
	 public GCheck gcheck_output_gating_enable;
	 public GCheck gcheck_trap_enable;
	 public GCheck gcheck_trigger_enable;
	 public GCheck gcheck_forced_trigger_enable;
	 public GCheck gcheck_dimming_input_bypass;
	 public GCheck gcheck_enable_channel;
	 public GCheck gcheck_output_enable;

	 public PDM_BCCU_GUI(DaveEnv daveEnv){

	 gtab_chanconfig = GTab(widgetName:"gtab_chanconfig", text:"Channel Settings", enabled:true, visible:true)
	 gtab_dummy = GTab(widgetName:"gtab_dummy", text:"dummy", enabled:true, visible:true)
	 gimage_channelconfig_bypass = GImage(widgetName:"gimage_channelconfig_bypass", path: "doc/UI-Channel_Configuration_bypass.png", enabled:true, visible:true)
	 gimage_channelconfig = GImage(widgetName:"gimage_channelconfig", path: "doc/UI-Channel_Configuration.png", enabled:true, visible:true)
	 gimage_flickerwd = GImage(widgetName:"gimage_flickerwd", path: "doc/UI-Flicker_Watchdog_image.png", enabled:true, visible:true)
	 gimage_packer = GImage(widgetName:"gimage_packer", path: "doc/UI-Packer_image.png", enabled:true, visible:true)
	 ginteger_initial_off_bit_counter_value = GInteger(widgetName:"ginteger_initial_off_bit_counter_value", value:0, minValue:0, maxValue:255, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_number_of_on_bits_grouped_together = GInteger(widgetName:"ginteger_number_of_on_bits_grouped_together", value:39, minValue:0, maxValue:255, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_number_of_off_bits_grouped_together = GInteger(widgetName:"ginteger_number_of_off_bits_grouped_together", value:255, minValue:0, maxValue:255, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_initial_on_bit_counter_value = GInteger(widgetName:"ginteger_initial_on_bit_counter_value", value:0, minValue:0, maxValue:255, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_channel_initial_intensity = GInteger(widgetName:"ginteger_channel_initial_intensity", value:4095, minValue:0, maxValue:4095, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_linpres = GInteger(widgetName:"ginteger_linpres", value:0, minValue:0, maxValue:1023, enabled:false, visible:true, isMandatoryValue:false)
	 gcombo_output_passive_level_selection = GCombo(widgetName:"gcombo_output_passive_level_selection", options:["Active High","Active Low"], value:"Active High", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_trigger_output_selection = GCombo(widgetName:"gcombo_trigger_output_selection", options:["Line 0","Line 1"], value:"Line 0", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_trigger_edge_selection = GCombo(widgetName:"gcombo_trigger_edge_selection", options:["Rising","Falling"], value:"Rising", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_output_characteristics = GCombo(widgetName:"gcombo_output_characteristics", options:["Push Pull","Open Drain"], value:"Push Pull", enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_desired_initial_linear_walk_time = GFloat(widgetName:"gfloat_desired_initial_linear_walk_time", value:0.0, minValue:0, maxValue:1000000, enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_actual_initial_linear_walk_time = GFloat(widgetName:"gfloat_actual_initial_linear_walk_time", value:0, minValue:0, maxValue:1000000, enabled:false, visible:true, isMandatoryValue:false)
	 gcheck_enable_packer_selection = GCheck(widgetName:"gcheck_enable_packer_selection", value:false, enabled:true, visible:true)
	 gcheck_flicker_watchdog_enable = GCheck(widgetName:"gcheck_flicker_watchdog_enable", value:false, enabled:true, visible:true)
	 gcheck_output_gating_enable = GCheck(widgetName:"gcheck_output_gating_enable", value:false, enabled:true, visible:true)
	 gcheck_trap_enable = GCheck(widgetName:"gcheck_trap_enable", value:false, enabled:true, visible:true)
	 gcheck_trigger_enable = GCheck(widgetName:"gcheck_trigger_enable", value:false, enabled:true, visible:true)
	 gcheck_forced_trigger_enable = GCheck(widgetName:"gcheck_forced_trigger_enable", value:false, enabled:true, visible:true)
	 gcheck_dimming_input_bypass = GCheck(widgetName:"gcheck_dimming_input_bypass", value:true, enabled:true, visible:true)
	 gcheck_enable_channel = GCheck(widgetName:"gcheck_enable_channel", value:true, enabled:true, visible:true)
	 gcheck_output_enable = GCheck(widgetName:"gcheck_output_enable", value:true, enabled:true, visible:true)


	 }
	/* End : UI variable section */
}
